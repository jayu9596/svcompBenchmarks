var $M.0: [ref]i8;

var $M.1: [ref]i8;

var $M.2: [ref]i64;

var $M.4: i32;

var $M.5: i32;

var $M.6: ref;

var $M.7: ref;

var $M.8: i32;

var $M.9: ref;

var $M.10: i32;

var $M.11: [ref]i64;

var $M.12: [ref]i32;

var $M.13: [ref]i32;

var $M.14: [ref]ref;

var $M.15: [ref]ref;

var $M.16: [ref]i32;

var $M.17: [ref]i64;

var $M.18: [ref]i32;

var $M.19: [ref]i32;

var $M.20: [ref]i32;

var $M.21: [ref]i32;

var $M.22: i32;

var $M.23: ref;

var $M.24: i32;

var $M.25: ref;

var $M.26: [ref]i32;

var $M.27: [ref]i32;

var $M.28: [ref]i32;

var $M.29: [ref]i32;

var $M.30: [ref]i8;

var $M.31: [ref]i32;

var $M.32: i32;

var $M.33: [ref]i32;

var $M.34: [ref]i64;

var $M.35: [ref]i8;

var $M.36: [ref]i64;

var $M.37: [ref]i64;

var $M.38: [ref]i64;

var $M.39: [ref]i32;

var $M.40: [ref]i64;

var $M.41: [ref]i32;

var $M.42: [ref]ref;

var $M.43: [ref]ref;

var $M.44: [ref]i8;

var $M.45: [ref]ref;

var $M.46: ref;

var $M.47: [ref]i64;

var $M.48: [ref]ref;

var $M.49: [ref]i32;

var $M.50: ref;

var $M.51: ref;

var $M.52: ref;

var $M.53: ref;

var $M.54: ref;

var $M.55: ref;

var $M.56: ref;

var $M.57: [ref]i8;

var $M.58: [ref]i8;

var $M.59: [ref]i8;

var $M.60: i32;

var $M.61: [ref]i8;

var $M.62: i32;

var $M.63: i32;

var $M.64: i32;

var $M.65: i32;

var $M.66: i32;

var $M.67: i32;

var $M.68: i32;

var $M.69: ref;

var $M.70: i32;

var $M.71: i32;

var $M.72: i32;

var $M.73: ref;

var $M.74: i32;

var $M.75: i32;

var $M.76: ref;

var $M.77: ref;

var $M.78: ref;

var $M.79: ref;

var $M.80: i32;

var $M.81: i32;

var $M.82: i32;

var $M.83: i32;

var $M.84: i32;

var $M.85: ref;

var $M.86: [ref]i8;

var $M.87: i32;

var $M.88: i32;

var $M.89: i32;

var $M.90: i32;

var $M.91: i32;

var $M.92: i32;

var $M.93: i32;

var $M.94: i32;

var $M.95: i32;

var $M.96: i32;

var $M.111: [ref]i8;

var $M.112: [ref]i8;

var $M.119: [ref]i16;

var $M.138: [ref]i32;

var $M.139: [ref]i32;

var $M.140: [ref]i64;

var $M.144: [ref]i8;

var $M.145: [ref]i8;

var $M.146: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 617456);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const pd_video_qops_group1: ref;

axiom pd_video_qops_group1 == $sub.ref(0, 2060);

const pd_video_qops_group2: ref;

axiom pd_video_qops_group2 == $sub.ref(0, 3092);

const pd_video_ioctl_ops_group2: ref;

axiom pd_video_ioctl_ops_group2 == $sub.ref(0, 4124);

const pd_video_ioctl_ops_group1: ref;

axiom pd_video_ioctl_ops_group1 == $sub.ref(0, 5156);

const pd_video_ioctl_ops_group0: ref;

axiom pd_video_ioctl_ops_group0 == $sub.ref(0, 6188);

const pd_video_ioctl_ops_group3: ref;

axiom pd_video_ioctl_ops_group3 == $sub.ref(0, 7220);

const pd_video_fops_group0: ref;

axiom pd_video_fops_group0 == $sub.ref(0, 8252);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 9280);

const ldv_state_variable_13: ref;

axiom ldv_state_variable_13 == $sub.ref(0, 10308);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 11336);

const ldv_retval_10: ref;

axiom ldv_retval_10 == $sub.ref(0, 12364);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 13392);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 14420);

const ldv_state_variable_12: ref;

axiom ldv_state_variable_12 == $sub.ref(0, 15448);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 16476);

const debug_mode: ref;

axiom debug_mode == $sub.ref(0, 17504);

const pcm_capture_ops_group0: ref;

axiom pcm_capture_ops_group0 == $sub.ref(0, 18536);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 19564);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 20592);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 21620);

const poseidon_frontend_ops_group0: ref;

axiom poseidon_frontend_ops_group0 == $sub.ref(0, 22652);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 23680);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 24708);

const poseidon_fm_ioctl_ops_group0: ref;

axiom poseidon_fm_ioctl_ops_group0 == $sub.ref(0, 25740);

const poseidon_fm_ioctl_ops_group1: ref;

axiom poseidon_fm_ioctl_ops_group1 == $sub.ref(0, 26772);

const poseidon_fm_ioctl_ops_group2: ref;

axiom poseidon_fm_ioctl_ops_group2 == $sub.ref(0, 27804);

const poseidon_fm_fops_group0: ref;

axiom poseidon_fm_fops_group0 == $sub.ref(0, 28836);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 29864);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 30892);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 31920);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 32948);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 33976);

const poseidon_driver_group1: ref;

axiom poseidon_driver_group1 == $sub.ref(0, 35008);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 36036);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 37064);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 38092);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 39120);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 40148);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 41176);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 42204);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 43232);

const ldv_retval_9: ref;

axiom ldv_retval_9 == $sub.ref(0, 44260);

const INTERF_STATE: ref;

axiom INTERF_STATE == $sub.ref(0, 45288);

const SERIAL_STATE: ref;

axiom SERIAL_STATE == $sub.ref(0, 46316);

const usb_intfdata: ref;

axiom usb_intfdata == $sub.ref(0, 47348);

const usb_urb: ref;

axiom usb_urb == $sub.ref(0, 48380);

const usb_dev: ref;

axiom usb_dev == $sub.ref(0, 49412);

const dev_counter: ref;

axiom dev_counter == $sub.ref(0, 50440);

const completeFnIntCounter: ref;

axiom completeFnIntCounter == $sub.ref(0, 51468);

const completeFnBulkCounter: ref;

axiom completeFnBulkCounter == $sub.ref(0, 52496);

const completeFnInt: ref;

axiom completeFnInt == $sub.ref(0, 53528);

const completeFnBulk: ref;

axiom completeFnBulk == $sub.ref(0, 54560);

const __mod_usb_device_table: ref;

axiom __mod_usb_device_table == $sub.ref(0, 55616);

const {:count 3} id_table: ref;

axiom id_table == $sub.ref(0, 56736);

const poseidon_driver: ref;

axiom poseidon_driver == $sub.ref(0, 58064);

const pm_notifer: ref;

axiom pm_notifer == $sub.ref(0, 59112);

const firmware_name: ref;

axiom firmware_name == $sub.ref(0, 60144);

const pd_device_list: ref;

axiom pd_device_list == $sub.ref(0, 61184);

const {:count 3} preemphasis: ref;

axiom preemphasis == $sub.ref(0, 62220);

const tlg_fm_ctrl_ops: ref;

axiom tlg_fm_ctrl_ops == $sub.ref(0, 63268);

const poseidon_fm_ioctl_ops: ref;

axiom poseidon_fm_ioctl_ops == $sub.ref(0, 65164);

const poseidon_fm_fops: ref;

axiom poseidon_fm_fops == $sub.ref(0, 66276);

const poseidon_fm_template: ref;

axiom poseidon_fm_template == $sub.ref(0, 69108);

const dvb_bandwidth_length: ref;

axiom dvb_bandwidth_length == $sub.ref(0, 70136);

const {:count 3} dvb_bandwidth: ref;

axiom dvb_bandwidth == $sub.ref(0, 71184);

const poseidon_frontend_ops: ref;

axiom poseidon_frontend_ops == $sub.ref(0, 72976);

const {:count 8} adapter_nr: ref;

axiom adapter_nr == $sub.ref(0, 74016);

const snd_pd_hw_capture: ref;

axiom snd_pd_hw_capture == $sub.ref(0, 75120);

const pcm_capture_ops: ref;

axiom pcm_capture_ops == $sub.ref(0, 76256);

const pd_video_qops: ref;

axiom pd_video_qops == $sub.ref(0, 77312);

const usb_transfer_mode: ref;

axiom usb_transfer_mode == $sub.ref(0, 78340);

const {:count 4} pd_inputs: ref;

axiom pd_inputs == $sub.ref(0, 79428);

const {:count 2} poseidon_formats: ref;

axiom poseidon_formats == $sub.ref(0, 80500);

const {:count 3} video_to_audio_map: ref;

axiom video_to_audio_map == $sub.ref(0, 81572);

const {:count 18} poseidon_tvnorms: ref;

axiom poseidon_tvnorms == $sub.ref(0, 83028);

const {:count 5} pd_audio_modes: ref;

axiom pd_audio_modes == $sub.ref(0, 84112);

const pd_video_ioctl_ops: ref;

axiom pd_video_ioctl_ops == $sub.ref(0, 86008);

const pd_video_fops: ref;

axiom pd_video_fops == $sub.ref(0, 87120);

const pd_video_template: ref;

axiom pd_video_template == $sub.ref(0, 89952);

const tlg_ctrl_ops: ref;

axiom tlg_ctrl_ops == $sub.ref(0, 91000);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const .str: ref;

axiom .str == $sub.ref(0, 92042);

const {:count 16} .str.18: ref;

axiom .str.18 == $sub.ref(0, 93082);

const {:count 29} .str.46: ref;

axiom .str.46 == $sub.ref(0, 94135);

const {:count 21} .str.47: ref;

axiom .str.47 == $sub.ref(0, 95180);

const {:count 15} .str.7: ref;

axiom .str.7 == $sub.ref(0, 96219);

const {:count 30} .str.49: ref;

axiom .str.49 == $sub.ref(0, 97273);

const {:count 15} .str.50: ref;

axiom .str.50 == $sub.ref(0, 98312);

const {:count 48} .str.51: ref;

axiom .str.51 == $sub.ref(0, 99384);

const {:count 23} .str.52: ref;

axiom .str.52 == $sub.ref(0, 100431);

const snd_pcm_link_rwlock: ref;

axiom snd_pcm_link_rwlock == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 22} .str.31: ref;

axiom .str.31 == $sub.ref(0, 101477);

const {:count 39} .str.38: ref;

axiom .str.38 == $sub.ref(0, 102540);

const {:count 13} .str.39: ref;

axiom .str.39 == $sub.ref(0, 103577);

const {:count 42} .str.36: ref;

axiom .str.36 == $sub.ref(0, 104643);

const {:count 18} .str.37: ref;

axiom .str.37 == $sub.ref(0, 105685);

const {:count 5} .str.35: ref;

axiom .str.35 == $sub.ref(0, 106714);

const {:count 42} .str.32: ref;

axiom .str.32 == $sub.ref(0, 107780);

const {:count 17} .str.33: ref;

axiom .str.33 == $sub.ref(0, 108821);

const {:count 41} .str.34: ref;

axiom .str.34 == $sub.ref(0, 109886);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 27} .str.23: ref;

axiom .str.23 == $sub.ref(0, 110937);

const {:count 8} .str.24: ref;

axiom .str.24 == $sub.ref(0, 111969);

const {:count 16} .str.6: ref;

axiom .str.6 == $sub.ref(0, 113009);

const {:count 15} .str.48: ref;

axiom .str.48 == $sub.ref(0, 114048);

const {:count 27} .str.20: ref;

axiom .str.20 == $sub.ref(0, 115099);

const {:count 15} .str.21: ref;

axiom .str.21 == $sub.ref(0, 116138);

const {:count 17} .str.22: ref;

axiom .str.22 == $sub.ref(0, 117179);

const {:count 13} .str.27: ref;

axiom .str.27 == $sub.ref(0, 118216);

const {:count 11} .str.28: ref;

axiom .str.28 == $sub.ref(0, 119251);

const {:count 18} .str.29: ref;

axiom .str.29 == $sub.ref(0, 120293);

const {:count 10} .str.30: ref;

axiom .str.30 == $sub.ref(0, 121327);

const {:count 8} .str.25: ref;

axiom .str.25 == $sub.ref(0, 122359);

const {:count 7} .str.26: ref;

axiom .str.26 == $sub.ref(0, 123390);

const {:count 11} .str.40: ref;

axiom .str.40 == $sub.ref(0, 124425);

const {:count 9} .str.41: ref;

axiom .str.41 == $sub.ref(0, 125458);

const {:count 10} .str.42: ref;

axiom .str.42 == $sub.ref(0, 126492);

const {:count 13} .str.43: ref;

axiom .str.43 == $sub.ref(0, 127529);

const {:count 27} .str.44: ref;

axiom .str.44 == $sub.ref(0, 128580);

const {:count 13} .str.45: ref;

axiom .str.45 == $sub.ref(0, 129617);

const {:count 42} .str.54: ref;

axiom .str.54 == $sub.ref(0, 130683);

const {:count 23} .str.55: ref;

axiom .str.55 == $sub.ref(0, 131730);

const {:count 23} .str.53: ref;

axiom .str.53 == $sub.ref(0, 132777);

const {:count 23} .str.14: ref;

axiom .str.14 == $sub.ref(0, 133824);

const {:count 19} .str.15: ref;

axiom .str.15 == $sub.ref(0, 134867);

const {:count 40} .str.63: ref;

axiom .str.63 == $sub.ref(0, 135931);

const {:count 21} .str.64: ref;

axiom .str.64 == $sub.ref(0, 136976);

const {:count 38} .str.65: ref;

axiom .str.65 == $sub.ref(0, 138038);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 28} .str.61: ref;

axiom .str.61 == $sub.ref(0, 139090);

const {:count 16} .str.62: ref;

axiom .str.62 == $sub.ref(0, 140130);

const {:count 38} .str.56: ref;

axiom .str.56 == $sub.ref(0, 141192);

const {:count 20} .str.57: ref;

axiom .str.57 == $sub.ref(0, 142236);

const {:count 5} .str.58: ref;

axiom .str.58 == $sub.ref(0, 143265);

const {:count 50} .str.59: ref;

axiom .str.59 == $sub.ref(0, 144339);

const {:count 12} .str.60: ref;

axiom .str.60 == $sub.ref(0, 145375);

const {:count 13} .str.70: ref;

axiom .str.70 == $sub.ref(0, 146412);

const {:count 14} .str.69: ref;

axiom .str.69 == $sub.ref(0, 147450);

const {:count 6} .str.67: ref;

axiom .str.67 == $sub.ref(0, 148480);

const {:count 11} .str.68: ref;

axiom .str.68 == $sub.ref(0, 149515);

const {:count 21} .str.79: ref;

axiom .str.79 == $sub.ref(0, 150560);

const {:count 29} .str.71: ref;

axiom .str.71 == $sub.ref(0, 151613);

const {:count 18} .str.72: ref;

axiom .str.72 == $sub.ref(0, 152655);

const {:count 9} .str.90: ref;

axiom .str.90 == $sub.ref(0, 153688);

const {:count 17} .str.86: ref;

axiom .str.86 == $sub.ref(0, 154729);

const {:count 16} .str.87: ref;

axiom .str.87 == $sub.ref(0, 155769);

const {:count 23} .str.84: ref;

axiom .str.84 == $sub.ref(0, 156816);

const {:count 17} .str.85: ref;

axiom .str.85 == $sub.ref(0, 157857);

const {:count 20} .str.88: ref;

axiom .str.88 == $sub.ref(0, 158901);

const {:count 14} .str.1: ref;

axiom .str.1 == $sub.ref(0, 159939);

const {:count 15} .str.73: ref;

axiom .str.73 == $sub.ref(0, 160978);

const {:count 10} .str.74: ref;

axiom .str.74 == $sub.ref(0, 162012);

const {:count 15} .str.75: ref;

axiom .str.75 == $sub.ref(0, 163051);

const {:count 19} .str.83: ref;

axiom .str.83 == $sub.ref(0, 164094);

const {:count 22} .str.16: ref;

axiom .str.16 == $sub.ref(0, 165140);

const {:count 26} .str.17: ref;

axiom .str.17 == $sub.ref(0, 166190);

const {:count 9} .str.8: ref;

axiom .str.8 == $sub.ref(0, 167223);

const {:count 15} .str.9: ref;

axiom .str.9 == $sub.ref(0, 168262);

const {:count 23} .str.10: ref;

axiom .str.10 == $sub.ref(0, 169309);

const {:count 12} .str.11: ref;

axiom .str.11 == $sub.ref(0, 170345);

const {:count 15} .str.12: ref;

axiom .str.12 == $sub.ref(0, 171384);

const {:count 20} .str.13: ref;

axiom .str.13 == $sub.ref(0, 172428);

const {:count 27} .str.2: ref;

axiom .str.2 == $sub.ref(0, 173479);

const {:count 44} .str.3: ref;

axiom .str.3 == $sub.ref(0, 174547);

const {:count 14} .str.4: ref;

axiom .str.4 == $sub.ref(0, 175585);

const {:count 57} .str.5: ref;

axiom .str.5 == $sub.ref(0, 176666);

const {:count 44} .str.80: ref;

axiom .str.80 == $sub.ref(0, 177734);

const {:count 6} .str.81: ref;

axiom .str.81 == $sub.ref(0, 178764);

const {:count 29} .str.82: ref;

axiom .str.82 == $sub.ref(0, 179817);

const {:count 35} .str.76: ref;

axiom .str.76 == $sub.ref(0, 180876);

const {:count 18} .str.77: ref;

axiom .str.77 == $sub.ref(0, 181918);

const {:count 39} .str.78: ref;

axiom .str.78 == $sub.ref(0, 182981);

const {:count 14} .str.89: ref;

axiom .str.89 == $sub.ref(0, 184019);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 185051);

const {:count 3} .str.1.122: ref;

axiom .str.1.122 == $sub.ref(0, 186078);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 187116);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 188144);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 189176);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := ldv_malloc($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 190208);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 191240);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p4 := malloc($i0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} __VERIFIER_assume($i7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 192272);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 9} $r := $malloc($i0);
    return;
}



const tlg_s_ctrl: ref;

axiom tlg_s_ctrl == $sub.ref(0, 193304);

procedure tlg_s_ctrl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $CurrAddr;



implementation tlg_s_ctrl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i16;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var vslice_dummy_var_101: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(32, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($sub.ref(0, 2376), 11112));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p8, 0);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p9, 0);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(64, 1));
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 9963778);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, 9963779);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i11, 9963779);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p25, $i24);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p1);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p26);
    call {:si_unique_call 13} {:cexpr "params"} boogie_si_record_i32($i27);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref($sub.ref(0, 2376), 11112)), $mul.ref(16, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} mutex_lock_nested($p28, 0);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $i29 := send_set_req($p7, 47, $i27, $p2);
    call {:si_unique_call 16} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i30 := send_set_req($p7, 67, 0, $p2);
    call {:si_unique_call 18} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref($sub.ref(0, 2376), 11112)), $mul.ref(16, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} mutex_unlock($p31);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p3, 1);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $p32 := get_current();
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.2, $p3);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p32, $mul.ref(0, 9640)), $mul.ref(0, 1));
    call {:si_unique_call 21} $i35 := devirtbounce(0, $p34, $i33, $p34);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p3, $i35);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} vslice_dummy_var_101 := schedule_timeout(62);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p19, 3);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p20, 4);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i11, 9963777);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p18, 2);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i11, 9963776);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb8;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p17, 1);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 194336);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    return;
}



const send_set_req: ref;

axiom send_set_req == $sub.ref(0, 195368);

procedure send_set_req($p0: ref, $i1: i8, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation send_set_req($p0: ref, $i1: i8, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i42: i1;
  var $i45: i16;
  var $i46: i32;
  var $i47: i16;
  var $i43: i16;
  var $i44: i16;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i8;
  var $i56: i32;
  var $i57: i16;
  var $i58: i32;
  var $i59: i16;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i41: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $p4 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 25} {:cexpr "send_set_req:arg:cmdid"} boogie_si_record_i8($i1);
    call {:si_unique_call 26} {:cexpr "send_set_req:arg:param"} boogie_si_record_i32($i2);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 0);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 0);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(2, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 0);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(3, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 0);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(5, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(6, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 0);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(7, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(9, 1));
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 0);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(10, 1));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 0);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(11, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 0);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 0);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(13, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 0);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(14, 1));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 0);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(15, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 0);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 0);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(17, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(18, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 0);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(19, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 0);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 0);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(21, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 0);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(22, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 0);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(23, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 0);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 0);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(25, 1));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 0);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(26, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, 0);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(27, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 0);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 0);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(29, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 0);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(30, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, 0);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(31, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, 0);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 128);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} __const_udelay(4295000);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} __const_udelay(4295000);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} __const_udelay(4295000);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} __const_udelay(4295000);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} __const_udelay(4295000);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} __const_udelay(4295000);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} __const_udelay(4295000);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} __const_udelay(4295000);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} __const_udelay(4295000);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} __const_udelay(4295000);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} __const_udelay(4295000);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} __const_udelay(4295000);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} __const_udelay(4295000);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} __const_udelay(4295000);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} __const_udelay(4295000);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} __const_udelay(4295000);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} __const_udelay(4295000);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} __const_udelay(4295000);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} __const_udelay(4295000);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} __const_udelay(4295000);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} __const_udelay(4295000);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} __const_udelay(4295000);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} __const_udelay(4295000);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} __const_udelay(4295000);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} __const_udelay(4295000);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} __const_udelay(4295000);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} __const_udelay(4295000);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} __const_udelay(4295000);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} __const_udelay(4295000);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i2, 0);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i42 == 1);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i2);
    call {:si_unique_call 29} {:cexpr "lower_16"} boogie_si_record_i16($i45);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i46 := $ashr.i32($i2, 16);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i16($i46);
    call {:si_unique_call 30} {:cexpr "upper_16"} boogie_si_record_i16($i47);
    assume {:verifier.code 0} true;
    $i43, $i44 := $i45, $i47;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(552, 1));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i50 := __create_pipe($p49, 0);
    call {:si_unique_call 32} {:cexpr "tmp___0"} boogie_si_record_i32($i50);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(552, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i53 := $or.i32($i50, $sub.i32(0, 2147483520));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i1);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i43);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i56);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i44);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p4);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $i61 := usb_control_msg($p52, $i53, $i55, $sub.i8(0, 64), $i57, $i59, $p60, 4, 5000);
    call {:si_unique_call 34} {:cexpr "ret"} boogie_si_record_i32($i61);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 0);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i62 == 1);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i63 := $ugt.i64(4, 63);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i63 == 1);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p3);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p4);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 36} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p66, $p67, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb14:
    assume $i63 == 1;
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p3);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p4);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 35} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p64, $p65, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb12:
    assume $i62 == 1;
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 6);
    goto $bb3;

  $bb9:
    assume $i42 == 1;
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i43, $i44 := 0, 0;
    goto $bb11;

  $bb1:
    assume $i40 == 1;
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 19);
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 196400);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 197432);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $p0 := devirtbounce.1(0, current_task);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 198464);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 66} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 1} true;
    call {:si_unique_call 67} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 68} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 199496);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 200528);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(0, 1));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 201560);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 71} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 72} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 73} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 74} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 75} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 76} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 77} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 1} true;
    call {:si_unique_call 78} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 79} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 202592);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const video_device_release_empty: ref;

axiom video_device_release_empty == $sub.ref(0, 203624);

procedure video_device_release_empty($p0: ref);
  free requires assertsPassed;



implementation video_device_release_empty($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    return;
}



const pd_video_read: ref;

axiom pd_video_read == $sub.ref(0, 204656);

procedure pd_video_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation pd_video_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} {:cexpr "pd_video_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 728)), $mul.ref(8, 1));
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(136, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 2048);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $i11 := videobuf_read_stream($p7, $p1, $i2, $p3, 0, $i10);
    call {:si_unique_call 82} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const pd_video_poll: ref;

axiom pd_video_poll == $sub.ref(0, 205688);

procedure pd_video_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pd_video_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 728)), $mul.ref(8, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $i6 := videobuf_poll_stream($p0, $p5, $p1);
    call {:si_unique_call 84} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const video_ioctl2: ref;

axiom video_ioctl2 == $sub.ref(0, 206720);

procedure video_ioctl2($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation video_ioctl2($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 85} {:cexpr "video_ioctl2:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 86} {:cexpr "video_ioctl2:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 1} true;
    call {:si_unique_call 87} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 88} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pd_video_mmap: ref;

axiom pd_video_mmap == $sub.ref(0, 207752);

procedure pd_video_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pd_video_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 728)), $mul.ref(8, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i6 := videobuf_mmap_mapper($p5, $p1);
    call {:si_unique_call 90} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const pd_video_open: ref;

axiom pd_video_open == $sub.ref(0, 208784);

procedure pd_video_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $CurrAddr, assertsPassed;



implementation pd_video_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $p25: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p64: ref;
  var $p65: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i16: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i70: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $p2 := video_devdata($p0);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $p3 := video_get_drvdata($p2);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} mutex_lock_nested($p5, 0);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(560, 1));
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} vslice_dummy_var_102 := ldv_usb_autopm_get_interface_10($p7);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $p17 := kzalloc(728, 208);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 1808)), $mul.ref(1600, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p18, $mul.ref(0, 728)), $mul.ref(0, 1));
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 4);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(2904, 1)), $mul.ref(1816, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $p17);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(2904, 1)), $mul.ref(1832, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i47, 1);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(2904, 1)), $mul.ref(1832, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, $i48);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p18, $mul.ref(0, 728)), $mul.ref(8, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p18, $mul.ref(0, 728)), $mul.ref(632, 1));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p18);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} videobuf_queue_vmalloc_init($p51, pd_video_qops, $0.ref, $p52, 4, 1, 240, $p53, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i55, 1);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p18, $mul.ref(0, 728)), $mul.ref(720, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, $p3);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p18, $mul.ref(0, 728)), $mul.ref(624, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $0.ref);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p18, $mul.ref(0, 728)), $mul.ref(704, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} INIT_LIST_HEAD($p60);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p18, $mul.ref(0, 728)), $mul.ref(632, 1));
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} vslice_dummy_var_103 := spinlock_check($p61);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 728)), $mul.ref(632, 1)), $mul.ref(0, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} __raw_spin_lock_init($p65, .str.46, $p1);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, $p17);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(184, 1));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} kref_get($p68);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} mutex_unlock($p69);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i70 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $r := $i70;
    return;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i24 := $M.4;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(568, 1));
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} init_video_context($p27);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $i28 := pd_video_checkmode($p4);
    call {:si_unique_call 101} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p18, $mul.ref(0, 728)), $mul.ref(0, 1));
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 1);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2244, 1));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, 1);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2244, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i35);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i38 := $M.5;
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} set_debug_mode($p2, $i38);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p18, $mul.ref(0, 728)), $mul.ref(8, 1));
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p18, $mul.ref(0, 728)), $mul.ref(632, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p18);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} videobuf_queue_vmalloc_init($p39, pd_video_qops, $0.ref, $p40, 1, 4, 240, $p41, $0.ref);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p18);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} kfree($p30);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(560, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} ldv_usb_autopm_put_interface_11($p72);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} mutex_unlock($p73);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i70 := $i16;
    goto $bb17;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 1);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 16);
    goto $bb6;
}



const pd_video_release: ref;

axiom pd_video_release == $sub.ref(0, 209816);

procedure pd_video_release($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.10, $M.8, $M.7, $M.6, $M.9, assertsPassed;



implementation pd_video_release($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 728)), $mul.ref(720, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} mutex_lock_nested($p7, 0);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 728)), $mul.ref(0, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 1);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 728)), $mul.ref(0, 1));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 4);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(2904, 1)), $mul.ref(1832, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 728)), $mul.ref(8, 1));
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} videobuf_stop($p45);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 728)), $mul.ref(8, 1));
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} vslice_dummy_var_106 := videobuf_mmap_free($p46);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(560, 1));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} ldv_usb_autopm_put_interface_12($p49);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} mutex_unlock($p50);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p4);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} kfree($p51);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, $0.ref);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(184, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} vslice_dummy_var_107 := ldv_kref_put_13($p53, poseidon_delete);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2244, 1));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb9;

  $bb10:
    assume $i40 == 1;
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, $sub.i32(0, 2));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i43);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(2904, 1)), $mul.ref(1816, 1));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $0.ref);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(2904, 1)), $mul.ref(1832, 1));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i29, 1);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(2904, 1)), $mul.ref(1832, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i30);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(576, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} vslice_dummy_var_104 := usb_transfer_stop($p11);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(576, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} free_all_urb($p13);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} vslice_dummy_var_105 := send_set_req($p6, 68, 2, $p1);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(10992, 1));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $0.ref);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2244, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i18, 1);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2244, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i19);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_transfer_stop: ref;

axiom usb_transfer_stop == $sub.ref(0, 210848);

procedure usb_transfer_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation usb_transfer_stop($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p71: ref;
  var $p72: ref;
  var vslice_dummy_var_108: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2240, 1));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2224, 1));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2240, 1));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2152, 1)), $mul.ref(0, 8));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2152, 1)), $mul.ref(1, 8));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2152, 1)), $mul.ref(2, 8));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2152, 1)), $mul.ref(3, 8));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2152, 1)), $mul.ref(4, 8));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2152, 1)), $mul.ref(5, 8));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2152, 1)), $mul.ref(6, 8));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2152, 1)), $mul.ref(7, 8));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} vslice_dummy_var_108 := send_set_req($p6, 68, 2, $p1);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb35:
    assume $i69 == 1;
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2152, 1)), $mul.ref(7, 8));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} usb_kill_urb($p72);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb31:
    assume $i61 == 1;
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2152, 1)), $mul.ref(6, 8));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} usb_kill_urb($p64);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb27:
    assume $i53 == 1;
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2152, 1)), $mul.ref(5, 8));
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} usb_kill_urb($p56);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb23:
    assume $i45 == 1;
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2152, 1)), $mul.ref(4, 8));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} usb_kill_urb($p48);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i37 == 1;
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2152, 1)), $mul.ref(3, 8));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} usb_kill_urb($p40);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb15:
    assume $i29 == 1;
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2152, 1)), $mul.ref(2, 8));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} usb_kill_urb($p32);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2152, 1)), $mul.ref(1, 8));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} usb_kill_urb($p24);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2152, 1)), $mul.ref(0, 8));
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} usb_kill_urb($p15);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const free_all_urb: ref;

axiom free_all_urb == $sub.ref(0, 211880);

procedure free_all_urb($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.9;



implementation free_all_urb($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2152, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} free_all_urb_generic($p2, 8);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    return;
}



const videobuf_stop: ref;

axiom videobuf_stop == $sub.ref(0, 212912);

procedure videobuf_stop($p0: ref);
  free requires assertsPassed;



implementation videobuf_stop($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    return;
}



const videobuf_mmap_free: ref;

axiom videobuf_mmap_free == $sub.ref(0, 213944);

procedure videobuf_mmap_free($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_mmap_free($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 1} true;
    call {:si_unique_call 133} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 134} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_usb_autopm_put_interface_12: ref;

axiom ldv_usb_autopm_put_interface_12 == $sub.ref(0, 214976);

procedure ldv_usb_autopm_put_interface_12($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_usb_autopm_put_interface_12($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} ldv_put_interface();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 216008);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} free_($p0);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    return;
}



const poseidon_delete: ref;

axiom poseidon_delete == $sub.ref(0, 217040);

procedure poseidon_delete($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.7, $M.6, $M.9;



implementation poseidon_delete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var vslice_dummy_var_109: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 184), 11112));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 184), 11112)), $mul.ref(0, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} list_del_init($p5);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} pd_dvb_usb_device_cleanup($p2);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 184), 11112)), $mul.ref(552, 1));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 184), 11112)), $mul.ref(560, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p2);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} kfree($p20);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} vslice_dummy_var_109 := printk.ref.ref.i32(.str, .str.18, 280);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 184), 11112)), $mul.ref(560, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} ldv_usb_put_intf_34($p18);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 184), 11112)), $mul.ref(560, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $0.ref);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 184), 11112)), $mul.ref(552, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} ldv_usb_put_dev_33($p11);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 184), 11112)), $mul.ref(552, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $0.ref);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_kref_put_13: ref;

axiom ldv_kref_put_13 == $sub.ref(0, 218072);

procedure ldv_kref_put_13($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.7, $M.6, $M.9;



implementation ldv_kref_put_13($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} poseidon_delete($p0);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 219104);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} __list_del_entry($p0);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} INIT_LIST_HEAD($p0);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    return;
}



const pd_dvb_usb_device_cleanup: ref;

axiom pd_dvb_usb_device_cleanup == $sub.ref(0, 220136);

procedure pd_dvb_usb_device_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.9;



implementation pd_dvb_usb_device_cleanup($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1));
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} dvb_urb_cleanup($p1);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_put_dev_33: ref;

axiom ldv_usb_put_dev_33 == $sub.ref(0, 221168);

procedure ldv_usb_put_dev_33($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.7;



implementation ldv_usb_put_dev_33($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} ldv_put_dev($p0);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_put_intf_34: ref;

axiom ldv_usb_put_intf_34 == $sub.ref(0, 222200);

procedure ldv_usb_put_intf_34($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation ldv_usb_put_intf_34($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} ldv_usb_put_intf();
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 223232);

procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 1} true;
    call {:si_unique_call 149} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 150} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 1} true;
    call {:si_unique_call 151} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 152} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 1} true;
    call {:si_unique_call 153} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 154} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 1} true;
    call {:si_unique_call 155} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 156} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: i32, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: i32, p.3: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 1} true;
    call {:si_unique_call 157} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 158} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 1} true;
    call {:si_unique_call 159} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 160} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 1} true;
    call {:si_unique_call 161} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 162} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_usb_put_intf: ref;

axiom ldv_usb_put_intf == $sub.ref(0, 224264);

procedure ldv_usb_put_intf();
  free requires assertsPassed;
  modifies $M.6;



implementation ldv_usb_put_intf()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $M.6 := $0.ref;
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    return;
}



const ldv_put_dev: ref;

axiom ldv_put_dev == $sub.ref(0, 225296);

procedure ldv_put_dev($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.7;



implementation ldv_put_dev($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p1 := $M.7;
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i7 := $M.8;
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i7, 1);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $M.8 := $i8;
    call {:si_unique_call 163} {:cexpr "dev_counter"} boogie_si_record_i32($i8);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i9 := $M.8;
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $M.7 := $0.ref;
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const dvb_urb_cleanup: ref;

axiom dvb_urb_cleanup == $sub.ref(0, 226328);

procedure dvb_urb_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.9;



implementation dvb_urb_cleanup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4096)), $mul.ref(3296, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} free_all_urb_generic($p2, 4);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    return;
}



const free_all_urb_generic: ref;

axiom free_all_urb_generic == $sub.ref(0, 227360);

procedure free_all_urb_generic($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9;



implementation free_all_urb_generic($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} {:cexpr "free_all_urb_generic:arg:num"} boogie_si_record_i32($i1);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32(0, $i1);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb4;

  $bb4:
    call $i4, $p5, $p6, $i7, $i8, $p9, $p10, $p11, $i12, $i13, $p14, $p15, $p16, $i17, $i18, $p19, $i20, $i21, $i3 := free_all_urb_generic_loop_$bb4($p0, $i1, $i4, $p5, $p6, $i7, $i8, $p9, $p10, $p11, $i12, $i13, $p14, $p15, $p16, $i17, $i18, $p19, $i20, $i21, $i3);
    goto $bb4_last;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p0, $mul.ref($i4, 8));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i3, 1);
    call {:si_unique_call 168} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, $i1);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i20;
    goto $bb9_dummy;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} usb_free_coherent($p10, $i13, $p15, $i17);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} ldv_usb_free_urb_8($p6);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i3);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p0, $mul.ref($i18, 8));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $0.ref);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_687;
}



const usb_free_coherent: ref;

axiom usb_free_coherent == $sub.ref(0, 228392);

procedure usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} {:cexpr "usb_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 170} {:cexpr "usb_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_free_urb_8: ref;

axiom ldv_usb_free_urb_8 == $sub.ref(0, 229424);

procedure ldv_usb_free_urb_8($p0: ref);
  free requires assertsPassed;
  modifies $M.9;



implementation ldv_usb_free_urb_8($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} ldv_free_urb($p0);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_urb: ref;

axiom ldv_free_urb == $sub.ref(0, 230456);

procedure ldv_free_urb($p0: ref);
  free requires assertsPassed;
  modifies $M.9;



implementation ldv_free_urb($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p1 := $M.9;
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p5 := $M.9;
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $M.9 := $0.ref;
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 231488);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 232520);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 233552);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 172} $free($p0);
    return;
}



const ldv_put_interface: ref;

axiom ldv_put_interface == $sub.ref(0, 234584);

procedure ldv_put_interface();
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_put_interface()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i0 := $M.10;
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} ldv_error();
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.10;
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $M.10 := $i3;
    call {:si_unique_call 174} {:cexpr "INTERF_STATE"} boogie_si_record_i32($i3);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 235616);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 175} __VERIFIER_error();
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 236648);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    return;
}



const video_devdata: ref;

axiom video_devdata == $sub.ref(0, 237680);

procedure video_devdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_devdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $p1 := external_alloc();
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const video_get_drvdata: ref;

axiom video_get_drvdata == $sub.ref(0, 238712);

procedure video_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1808)), $mul.ref(136, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_usb_autopm_get_interface_10: ref;

axiom ldv_usb_autopm_get_interface_10 == $sub.ref(0, 239744);

procedure ldv_usb_autopm_get_interface_10($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_usb_autopm_get_interface_10($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $i1 := ldv_get_interface($p0);
    call {:si_unique_call 179} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 240776);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 181} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const init_video_context: ref;

axiom init_video_context == $sub.ref(0, 241808);

procedure init_video_context($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_video_context($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 1);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, 32);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 720);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 576);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 1448695129);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 4);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 1440);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 829440);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 1);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(20, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p1);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 184} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p14, $p15, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    return;
}



const pd_video_checkmode: ref;

axiom pd_video_checkmode == $sub.ref(0, 242840);

procedure pd_video_checkmode($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.0, $CurrAddr;



implementation pd_video_checkmode($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $p32: ref;
  var $i33: i64;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i16: i32;
  var vslice_dummy_var_110: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $M.11 := $store.i64($M.11, $p2, 1);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $p3 := get_current();
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.11, $p2);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 9640)), $mul.ref(0, 1));
    call {:si_unique_call 188} $i6 := devirtbounce(0, $p5, $i4, $p5);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $M.11 := $store.i64($M.11, $p2, $i6);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} vslice_dummy_var_110 := schedule_timeout(125);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(552, 1));
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(568, 1));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i13 := (if $i12 == 1 then 1 else 2);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i14 := usb_set_interface($p9, 0, $i13);
    call {:si_unique_call 191} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i17 := set_tuner_mode($p0, 1);
    call {:si_unique_call 193} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $i18 := send_set_req($p0, 19, 1, $p1);
    call {:si_unique_call 195} {:cexpr "tmp___3"} boogie_si_record_i32($i18);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, $i17);
    call {:si_unique_call 196} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $i20 := send_set_req($p0, 20, 32, $p1);
    call {:si_unique_call 198} {:cexpr "tmp___4"} boogie_si_record_i32($i20);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i20, $i19);
    call {:si_unique_call 199} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $i22 := send_set_req($p0, 21, 1, $p1);
    call {:si_unique_call 201} {:cexpr "tmp___5"} boogie_si_record_i32($i22);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i22, $i21);
    call {:si_unique_call 202} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i24 := send_set_req($p0, 23, 1, $p1);
    call {:si_unique_call 204} {:cexpr "tmp___6"} boogie_si_record_i32($i24);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, $i23);
    call {:si_unique_call 205} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i26 := send_set_req($p0, 18, 45000000, $p1);
    call {:si_unique_call 207} {:cexpr "tmp___7"} boogie_si_record_i32($i26);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, $i25);
    call {:si_unique_call 208} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i28 := send_set_req($p0, 37, 1, $p1);
    call {:si_unique_call 210} {:cexpr "tmp___8"} boogie_si_record_i32($i28);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i28, $i27);
    call {:si_unique_call 211} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(8, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $i34 := get_audio_std($i33);
    call {:si_unique_call 213} {:cexpr "audiomode"} boogie_si_record_i32($i34);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $i35 := send_set_req($p0, 44, $i34, $p1);
    call {:si_unique_call 215} {:cexpr "tmp___9"} boogie_si_record_i32($i35);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, $i29);
    call {:si_unique_call 216} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $i37 := send_set_req($p0, 42, 2, $p1);
    call {:si_unique_call 218} {:cexpr "tmp___10"} boogie_si_record_i32($i37);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i37, $i36);
    call {:si_unique_call 219} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $i39 := send_set_req($p0, 41, 2, $p1);
    call {:si_unique_call 221} {:cexpr "tmp___11"} boogie_si_record_i32($i39);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i39, $i38);
    call {:si_unique_call 222} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i16 := $i40;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb2:
    assume $i15 == 1;
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    goto $bb4;
}



const set_debug_mode: ref;

axiom set_debug_mode == $sub.ref(0, 243872);

procedure set_debug_mode($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation set_debug_mode($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} {:cexpr "set_debug_mode:arg:debug_mode___0"} boogie_si_record_i32($i1);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1808)), $mul.ref(1720, 1));
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i1, 1);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i1, 2);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1808)), $mul.ref(1720, 1));
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 3);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1808)), $mul.ref(1720, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 1);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const videobuf_queue_vmalloc_init: ref;

axiom videobuf_queue_vmalloc_init == $sub.ref(0, 244904);

procedure videobuf_queue_vmalloc_init($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i32, $p7: ref, $p8: ref);
  free requires assertsPassed;



implementation videobuf_queue_vmalloc_init($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i32, $p7: ref, $p8: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} {:cexpr "videobuf_queue_vmalloc_init:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 225} {:cexpr "videobuf_queue_vmalloc_init:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 226} {:cexpr "videobuf_queue_vmalloc_init:arg:arg6"} boogie_si_record_i32($i6);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 245936);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 246968);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    return;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 248000);

procedure kref_get($p0: ref);
  free requires assertsPassed;



implementation kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var vslice_dummy_var_111: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i2 := atomic_add_return(1, $p1);
    call {:si_unique_call 228} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 229} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 231} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} vslice_dummy_var_111 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 232} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 234} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 237} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} warn_slowpath_null(.str.47, 47);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_usb_autopm_put_interface_11: ref;

axiom ldv_usb_autopm_put_interface_11 == $sub.ref(0, 249032);

procedure ldv_usb_autopm_put_interface_11($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_usb_autopm_put_interface_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} ldv_put_interface();
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 250064);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 241} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 242} $i3 := devirtbounce.2(0, $p2, $i0, $p2);
    call {:si_unique_call 243} {:cexpr "__ret"} boogie_si_record_i32($i3);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 251096);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 245} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 252128);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    return;
}



const usb_set_interface: ref;

axiom usb_set_interface == $sub.ref(0, 253160);

procedure usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 247} {:cexpr "usb_set_interface:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 248} {:cexpr "usb_set_interface:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 1} true;
    call {:si_unique_call 249} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 250} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const set_tuner_mode: ref;

axiom set_tuner_mode == $sub.ref(0, 254192);

procedure set_tuner_mode($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation set_tuner_mode($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 252} {:cexpr "set_tuner_mode:arg:mode"} boogie_si_record_i8($i1);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 128);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $i9 := send_set_req($p0, 17, $i8, $p2);
    call {:si_unique_call 254} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i10 == 1);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p2);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 6);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;
}



const get_audio_std: ref;

axiom get_audio_std == $sub.ref(0, 255224);

procedure get_audio_std($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation get_audio_std($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var $i10: i1;
  var $i11: i64;
  var $i12: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} {:cexpr "get_audio_std:arg:v4l2_std"} boogie_si_record_i64($i0);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $and.i64(4325425, $i0);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i9 := $and.i64(4864, $i0);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i3 := 1;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i11 := $and.i64(8192, $i0);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i3 := 2;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref(video_to_audio_map, $mul.ref(0, 48)), $mul.ref($i4, 16)), $mul.ref(8, 1));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.12, $p6);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb6;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb4;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 256256);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 257} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_get_interface: ref;

axiom ldv_get_interface == $sub.ref(0, 257288);

procedure ldv_get_interface($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_get_interface($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $i1 := ldv_undef_int();
    call {:si_unique_call 260} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i1, 0);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} ldv_stop___4();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i4 := $M.10;
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 1);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $M.10 := $i5;
    call {:si_unique_call 262} {:cexpr "INTERF_STATE"} boogie_si_record_i32($i5);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 258320);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 1} true;
    call {:si_unique_call 263} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 264} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 265} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_stop___4: ref;

axiom ldv_stop___4 == $sub.ref(0, 259352);

procedure ldv_stop___4();
  free requires assertsPassed;



implementation ldv_stop___4()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop___4_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 260384);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $p1 := external_alloc();
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 261416);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 1} true;
    call {:si_unique_call 267} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 268} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const videobuf_mmap_mapper: ref;

axiom videobuf_mmap_mapper == $sub.ref(0, 262448);

procedure videobuf_mmap_mapper($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_mmap_mapper($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 1} true;
    call {:si_unique_call 269} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 270} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const videobuf_poll_stream: ref;

axiom videobuf_poll_stream == $sub.ref(0, 263480);

procedure videobuf_poll_stream($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_poll_stream($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 1} true;
    call {:si_unique_call 271} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 272} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const videobuf_read_stream: ref;

axiom videobuf_read_stream == $sub.ref(0, 264512);

procedure videobuf_read_stream($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i32, $i5: i32) returns ($r: i64);
  free requires assertsPassed;



implementation videobuf_read_stream($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i32, $i5: i32) returns ($r: i64)
{
  var $i6: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 273} {:cexpr "videobuf_read_stream:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 274} {:cexpr "videobuf_read_stream:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 275} {:cexpr "videobuf_read_stream:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 1} true;
    call {:si_unique_call 276} $i6 := __VERIFIER_nondet_long();
    call {:si_unique_call 277} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i6);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const vidioc_querycap: ref;

axiom vidioc_querycap == $sub.ref(0, 265544);

procedure vidioc_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var vslice_dummy_var_112: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $p3 := video_devdata($p0);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $p4 := video_get_drvdata($p3);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $p8 := strcpy($p7, .str.28);
    assume $isExternal($p8);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $p11 := strcpy($p10, .str.29);
    assume $isExternal($p11);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(552, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} vslice_dummy_var_112 := usb_make_path($p13, $p15, 32);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 84082688);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 1808)), $mul.ref(1600, 1));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, 1);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i30, $sub.i32(0, 2147221487));
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(84, 1));
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i22, 16);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vidioc_enum_fmt: ref;

axiom vidioc_enum_fmt == $sub.ref(0, 266576);

procedure vidioc_enum_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_enum_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, 1);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 1);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref($i11, 24)), $mul.ref(8, 1));
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.13, $p13);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref($i20, 24)), $mul.ref(0, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.14, $p22);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $p24 := strcpy($p17, $p23);
    assume $isExternal($p24);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_fmt: ref;

axiom vidioc_g_fmt == $sub.ref(0, 267608);

procedure vidioc_g_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 728)), $mul.ref(720, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(20, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p7);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p10);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 284} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p11, $p12, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_g_fmt_vbi: ref;

axiom vidioc_g_fmt_vbi == $sub.ref(0, 268640);

procedure vidioc_g_fmt_vbi($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_fmt_vbi($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 728)), $mul.ref(720, 1));
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 1440);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 27000000);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 1497715271);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 256);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(8, 1));
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 63744);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(16, 1)), $mul.ref(0, 4));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 6);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(16, 1)), $mul.ref(1, 4));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 314);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(24, 1)), $mul.ref(0, 4));
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 18);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(24, 1)), $mul.ref(1, 4));
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 18);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(32, 1));
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 1);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(16, 1)), $mul.ref(0, 4));
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 10);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(16, 1)), $mul.ref(1, 4));
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 264);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(24, 1)), $mul.ref(0, 4));
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 12);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(24, 1)), $mul.ref(1, 4));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 12);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vidioc_s_fmt: ref;

axiom vidioc_s_fmt == $sub.ref(0, 269672);

procedure vidioc_s_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vidioc_s_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i9: i32;
  var vslice_dummy_var_113: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 728)), $mul.ref(720, 1));
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 1);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} mutex_lock_nested($p10, 0);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(10992, 1));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(10992, 1));
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i18, $i19);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} vslice_dummy_var_113 := pd_vidioc_s_fmt($p5, $p23);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} mutex_unlock($p25);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} mutex_unlock($p21);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(10992, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p0);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_reqbufs: ref;

axiom vidioc_reqbufs == $sub.ref(0, 270704);

procedure vidioc_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 728)), $mul.ref(8, 1));
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $i7 := videobuf_reqbufs($p6, $p2);
    call {:si_unique_call 290} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const vidioc_querybuf: ref;

axiom vidioc_querybuf == $sub.ref(0, 271736);

procedure vidioc_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 728)), $mul.ref(8, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $i7 := videobuf_querybuf($p6, $p2);
    call {:si_unique_call 292} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const vidioc_qbuf: ref;

axiom vidioc_qbuf == $sub.ref(0, 272768);

procedure vidioc_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 728)), $mul.ref(8, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $i7 := videobuf_qbuf($p6, $p2);
    call {:si_unique_call 294} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const vidioc_dqbuf: ref;

axiom vidioc_dqbuf == $sub.ref(0, 273800);

procedure vidioc_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 728)), $mul.ref(8, 1));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(136, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 2048);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $i10 := videobuf_dqbuf($p6, $p2, $i9);
    call {:si_unique_call 296} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const vidioc_streamon: ref;

axiom vidioc_streamon == $sub.ref(0, 274832);

procedure vidioc_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} {:cexpr "vidioc_streamon:arg:type"} boogie_si_record_i32($i2);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 728)), $mul.ref(0, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, $i2);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 299} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 728)), $mul.ref(8, 1));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i13 := videobuf_streamon($p12);
    call {:si_unique_call 301} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i11 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_streamoff: ref;

axiom vidioc_streamoff == $sub.ref(0, 275864);

procedure vidioc_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} {:cexpr "vidioc_streamoff:arg:type"} boogie_si_record_i32($i2);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 728)), $mul.ref(0, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, $i2);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 304} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 728)), $mul.ref(8, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i15 := videobuf_streamoff($p14);
    call {:si_unique_call 306} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i13 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_std: ref;

axiom vidioc_g_std == $sub.ref(0, 276896);

procedure vidioc_g_std($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_std($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 728)), $mul.ref(720, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(8, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i9);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_s_std: ref;

axiom vidioc_s_std == $sub.ref(0, 277928);

procedure vidioc_s_std($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vidioc_s_std($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} {:cexpr "vidioc_s_std:arg:norm"} boogie_si_record_i64($i2);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 728)), $mul.ref(720, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i6 := set_std($p5, $i2);
    call {:si_unique_call 309} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const vidioc_enum_input: ref;

axiom vidioc_enum_input == $sub.ref(0, 278960);

procedure vidioc_enum_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_enum_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i4, 4);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref($i11, 16)), $mul.ref(0, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.15, $p13);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $p15 := strcpy($p8, $p14);
    assume $isExternal($p15);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 1);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 1);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(44, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 0);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, 16777215);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 0);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_input: ref;

axiom vidioc_g_input == $sub.ref(0, 279992);

procedure vidioc_g_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 728)), $mul.ref(720, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(16, 1));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i9);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_s_input: ref;

axiom vidioc_s_input == $sub.ref(0, 281024);

procedure vidioc_s_input($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vidioc_s_input($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i9: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p17: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 312} {:cexpr "vidioc_s_input:arg:i"} boogie_si_record_i32($i2);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 728)), $mul.ref(720, 1));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i7 := $uge.i32($i2, 4);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i2);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref($i9, 16)), $mul.ref(8, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.16, $p11);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $i13 := send_set_req($p6, 19, $i12, $p3);
    call {:si_unique_call 314} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(16, 1));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i2);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_enumaudio: ref;

axiom vidioc_enumaudio == $sub.ref(0, 282056);

procedure vidioc_enumaudio($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_enumaudio($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(36, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 1);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(4, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $p10 := strcpy($p9, .str.27);
    assume $isExternal($p10);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(40, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_audio: ref;

axiom vidioc_g_audio == $sub.ref(0, 283088);

procedure vidioc_g_audio($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_audio($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(36, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 1);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(4, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $p7 := strcpy($p6, .str.27);
    assume $isExternal($p7);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(40, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_s_audio: ref;

axiom vidioc_s_audio == $sub.ref(0, 284120);

procedure vidioc_s_audio($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_s_audio($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i6 := (if $i5 == 1 then 0 else $sub.i32(0, 22));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const vidioc_g_tuner: ref;

axiom vidioc_g_tuner == $sub.ref(0, 285152);

procedure vidioc_g_tuner($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.0, $CurrAddr;



implementation vidioc_g_tuner($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i20: i32;
  var $i21: i32;
  var $i32: i32;
  var $i33: i1;
  var $i35: i1;
  var $i36: i32;
  var $i34: i32;
  var $i31: i32;
  var $i19: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i64;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $i79: i64;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $i12: i32;
  var vslice_dummy_var_114: i64;
  var vslice_dummy_var_115: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 728)), $mul.ref(720, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(0, 1));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} mutex_lock_nested($p13, 0);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p3);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $i15 := send_get_req($p8, 69, 1, $p14, $p4, 24);
    call {:si_unique_call 322} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i19 := $i15;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i37 := $i19;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p8, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} mutex_unlock($p38);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i39 := $M.5;
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i37, 0);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i46 == 1);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p4);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i48 == 1);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i59 := $mul.i32($i58, 255);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i60 := $udiv.i32($i59, 10);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i61 := $shl.i32($i60, 8);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(60, 1));
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i61);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(4, 1));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $p65 := strcpy($p64, .str.22);
    assume $isExternal($p65);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(36, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 2);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(44, 1));
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 720);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(48, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, 13792);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(40, 1));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, 114);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(4, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    call {:si_unique_call 332} {:cexpr "index"} boogie_si_record_i32($i73);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i73);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref($i74, 12)), $mul.ref(4, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.18, $p76);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(52, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i77);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i73);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref($i79, 12)), $mul.ref(8, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.19, $p81);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(56, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, $i82);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(64, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, 0);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb28:
    assume $i52 == 1;
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb30;

  $bb31:
    assume $i55 == 1;
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(60, 1));
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, 65535);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(60, 1));
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 0);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb23;

  $bb19:
    assume $i40 == 1;
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} vslice_dummy_var_115 := printk.ref.ref.i32.i32.i32(.str.20, .str.21, 1065, $i42, $i44);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i15, 5;
    goto $bb8;

  $bb8:
    call $p22, $i23, $p24, $i25, $p27, $i28, $i29, $i30, $i20, $i21, $i32, $i33, $i35, $i36, $i34, $i31, vslice_dummy_var_114 := vidioc_g_tuner_loop_$bb8($p3, $p4, $p5, $p8, $p16, $p22, $i23, $p24, $i25, $p27, $i28, $i29, $i30, $i20, $i21, $i32, $i33, $i35, $i36, $i34, $i31, vslice_dummy_var_114);
    goto $bb8_last;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i21, 1);
    call {:si_unique_call 323} {:cexpr "count"} boogie_si_record_i32($i32);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i21, 0);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i34 := $i20;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i37 := $i34;
    goto $bb17;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i20, 0);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i36 := $i20;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb17;

  $bb15:
    assume $i35 == 1;
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p5, 1);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $p22 := get_current();
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.17, $p5);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p22, $mul.ref(0, 9640)), $mul.ref(0, 1));
    call {:si_unique_call 325} $i25 := devirtbounce(0, $p24, $i23, $p24);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p5, $i25);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} vslice_dummy_var_114 := schedule_timeout(250);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p3);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $i28 := send_get_req($p8, 69, 1, $p27, $p4, 24);
    call {:si_unique_call 328} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p16);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i31 := $i28;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i19 := $i31;
    goto $bb7;

  $bb11:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i20, $i21 := $i28, $i32;
    goto $bb11_dummy;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1354;
}



const vidioc_s_tuner: ref;

axiom vidioc_s_tuner == $sub.ref(0, 286184);

procedure vidioc_s_tuner($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vidioc_s_tuner($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i9: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 728)), $mul.ref(720, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(0, 1));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(56, 1));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i13 := 0;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(56, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 1);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i13 := 1;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(56, 1));
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 3);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i13 := 2;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(56, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i13 := 3;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(56, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 4);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i13 := 4;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $i14 := pd_vidioc_s_tuner($p5, $i13);
    call {:si_unique_call 334} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i9 := $i14;
    goto $bb3;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb8;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb8;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb8;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_frequency: ref;

axiom vidioc_g_frequency == $sub.ref(0, 287216);

procedure vidioc_g_frequency($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_frequency($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 728)), $mul.ref(720, 1));
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p12 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(0, 1));
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 2);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_s_frequency: ref;

axiom vidioc_s_frequency == $sub.ref(0, 288248);

procedure vidioc_s_frequency($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.0, $CurrAddr;



implementation vidioc_s_frequency($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 728)), $mul.ref(720, 1));
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p3, $i8);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(11000, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, pm_video_suspend);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(11008, 1));
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, pm_video_resume);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $i17 := set_frequency($p6, $p3);
    call {:si_unique_call 337} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i12 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;
}



const pm_video_suspend: ref;

axiom pm_video_suspend == $sub.ref(0, 289280);

procedure pm_video_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9;



implementation pm_video_suspend($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} vslice_dummy_var_116 := pm_alsa_suspend($p0);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} vslice_dummy_var_117 := usb_transfer_stop($p2);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} free_all_urb($p4);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(552, 1));
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} vslice_dummy_var_118 := usb_set_interface($p6, 0, 0);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} msleep(300);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const pm_video_resume: ref;

axiom pm_video_resume == $sub.ref(0, 290312);

procedure pm_video_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.0, $CurrAddr, $M.9, $M.22, $M.24, $M.25, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $M.38, assertsPassed;



implementation pm_video_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1));
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} vslice_dummy_var_119 := restore_v4l2_context($p0, $p2);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2232, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 728)), $mul.ref(624, 1));
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} vslice_dummy_var_120 := start_video_stream($p0);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} vslice_dummy_var_121 := pm_alsa_resume($p0);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} init_copy($p1, 0);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const set_frequency: ref;

axiom set_frequency == $sub.ref(0, 291344);

procedure set_frequency($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation set_frequency($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p1);
    call {:si_unique_call 348} {:cexpr "__val"} boogie_si_record_i32($i5);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32(720, $i5);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i8 := $ult.i32(13792, $i7);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i9);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p1);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i11 := $mul.i32($i10, 62500);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i12 := $udiv.i32($i11, 1000);
    call {:si_unique_call 349} {:cexpr "param"} boogie_si_record_i32($i12);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} mutex_lock_nested($p13, 0);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $i14 := send_set_req($p0, 18, $i12, $p2);
    call {:si_unique_call 352} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $i15 := send_set_req($p0, 67, 0, $p2);
    call {:si_unique_call 354} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} msleep(250);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p1);
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(0, 1));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} mutex_unlock($p18);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i9 := 13792;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i7 := 720;
    goto $bb3;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 292376);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    return;
}



const restore_v4l2_context: ref;

axiom restore_v4l2_context == $sub.ref(0, 293408);

procedure restore_v4l2_context($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.0, $CurrAddr;



implementation restore_v4l2_context($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p13: ref;
  var $i14: i32;
  var $p16: ref;
  var $p18: ref;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2232, 1));
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} vslice_dummy_var_122 := pd_video_checkmode($p0);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} vslice_dummy_var_123 := set_std($p0, $i7);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p4);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} vslice_dummy_var_124 := vidioc_s_input($0.ref, $p9, $i11);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} vslice_dummy_var_125 := pd_vidioc_s_tuner($p0, $i14);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(20, 1));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} vslice_dummy_var_126 := pd_vidioc_s_fmt($p0, $p16);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} vslice_dummy_var_127 := set_frequency($p0, $p18);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const init_copy: ref;

axiom init_copy == $sub.ref(0, 294440);

procedure init_copy($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation init_copy($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 364} {:cexpr "init_copy:arg:index"} boogie_si_record_i1($i1);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2232, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i2);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2112, 1));
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2128, 1));
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2132, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 728)), $mul.ref(624, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $p12 := videobuf_to_vmalloc($p11);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i2);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2140, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i14, $i16);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p12, $mul.ref($i18, 1));
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2120, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p19);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2216, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1840)), $mul.ref(1824, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    return;
}



const start_video_stream: ref;

axiom start_video_stream == $sub.ref(0, 295472);

procedure start_video_stream($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9, $M.22, $M.24, $M.25, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $M.11, $M.38, assertsPassed;



implementation start_video_stream($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} vslice_dummy_var_128 := send_set_req($p0, 67, 0, $p1);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} vslice_dummy_var_129 := send_set_req($p0, 68, 1, $p1);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(568, 1));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} vslice_dummy_var_131 := prepare_bulk_urb($p4);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} vslice_dummy_var_132 := fire_all_urb($p4);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} vslice_dummy_var_130 := prepare_iso_urb($p4);
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2248, 1));
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} __init_work($p11, 0);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, 137438953408);
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2248, 1)), $mul.ref(0, 1));
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p3);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 373} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p15, $p16, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2248, 1)), $mul.ref(32, 1));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} lockdep_init_map($p18, .str.31, $p2, 0);
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2248, 1)), $mul.ref(8, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} INIT_LIST_HEAD($p20);
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2248, 1)), $mul.ref(24, 1));
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, iso_bubble_handler);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pm_alsa_resume: ref;

axiom pm_alsa_resume == $sub.ref(0, 296504);

procedure pm_alsa_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.22, $M.24, $M.25, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $CurrAddr, $M.11, $M.38, assertsPassed;



implementation pm_alsa_resume($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i1 := $M.5;
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 16);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} vslice_dummy_var_134 := fire_audio_urb($p0);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} vslice_dummy_var_133 := printk.ref.ref.i32(.str, .str.7, 359);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fire_audio_urb: ref;

axiom fire_audio_urb == $sub.ref(0, 297536);

procedure fire_audio_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.22, $M.24, $M.25, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $CurrAddr, $M.11, $M.38, assertsPassed;



implementation fire_audio_urb($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i16: i32;
  var $i17: i1;
  var $i8: i32;
  var $i18: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4744, 1));
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(0, 1));
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(552, 1));
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} vslice_dummy_var_135 := alloc_bulk_urbs_generic($p3, 3, $p5, $sub.i8(0, 125), 512, 32, complete_handler_audio, $p6);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb1;

  $bb1:
    call $i9, $p11, $p12, $i13, $i14, $i16, $i17, $i8, $i18, vslice_dummy_var_136 := fire_audio_urb_loop_$bb1($p0, $i9, $p11, $p12, $i13, $i14, $i16, $i17, $i8, $i18, vslice_dummy_var_136);
    goto $bb1_last;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(0, 1)), $mul.ref($i9, 8));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $i13 := ldv_usb_submit_urb_19($p12, 208);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 382} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i8, 1);
    call {:si_unique_call 384} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i17 := $sle.i32($i16, 2);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i18 := $i13;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} vslice_dummy_var_137 := printk.ref.ref.i32(.str, .str.50, 285);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i16;
    goto $bb6_dummy;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} vslice_dummy_var_136 := printk.ref.ref.i32.i32(.str.49, .str.50, 283, $i13);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1676;
}



const complete_handler_audio: ref;

axiom complete_handler_audio == $sub.ref(0, 298568);

procedure complete_handler_audio($p0: ref);
  free requires assertsPassed;
  modifies $M.21, $M.0, $M.22, $M.24, $CurrAddr, $M.27, $M.28, $M.29, $M.26, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $M.11, $M.38, $M.9, $M.25, assertsPassed;



implementation complete_handler_audio($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var vslice_dummy_var_138: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $M.21 := $store.i32($M.21, $p1, 0);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(68, 1));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 1);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p6);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i23 := ldv_usb_submit_urb_18($p0, 32);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 390} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} vslice_dummy_var_138 := printk.ref.ref.i32.i32(.str.51, .str.52, 266, $i23);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i20 == 1;
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} handle_audio_data($p0, $p1);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.21, $p1);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i22 == 1;
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} snd_pcm_period_elapsed($p6);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;
}



const alloc_bulk_urbs_generic: ref;

axiom alloc_bulk_urbs_generic == $sub.ref(0, 299600);

procedure alloc_bulk_urbs_generic($p0: ref, $i1: i32, $p2: ref, $i3: i8, $i4: i32, $i5: i32, $p6: ref, $p7: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.25, $M.24;



implementation alloc_bulk_urbs_generic($p0: ref, $i1: i32, $p2: ref, $i3: i8, $i4: i32, $i5: i32, $p6: ref, $p7: ref) returns ($r: i32)
{
  var $i8: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i10: i32;
  var $i34: i32;
  var $i9: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} {:cexpr "alloc_bulk_urbs_generic:arg:num"} boogie_si_record_i32($i1);
    call {:si_unique_call 393} {:cexpr "alloc_bulk_urbs_generic:arg:ep_addr"} boogie_si_record_i8($i3);
    call {:si_unique_call 394} {:cexpr "alloc_bulk_urbs_generic:arg:buf_size"} boogie_si_record_i32($i4);
    call {:si_unique_call 395} {:cexpr "alloc_bulk_urbs_generic:arg:gfp_flags"} boogie_si_record_i32($i5);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32(0, $i1);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i15 := $i9;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb4;

  $bb4:
    call $p11, $i12, $i13, $i14, $i16, $p17, $p18, $i19, $i20, $i21, $p22, $i23, $i24, $i25, $p26, $i27, $i28, $p29, $i30, $p31, $i32, $i33, $i10, $i34 := alloc_bulk_urbs_generic_loop_$bb4($p0, $i1, $p2, $i3, $i4, $i5, $p6, $p7, $p11, $i12, $i13, $i14, $i16, $p17, $p18, $i19, $i20, $i21, $p22, $i23, $i24, $i25, $p26, $i27, $i28, $p29, $i30, $p31, $i32, $i33, $i10, $i34);
    goto $bb4_last;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $p11 := ldv_usb_alloc_urb_5(0, $i5);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i14 := $i10;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i4);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $p18 := usb_alloc_coherent($p2, $i16, $i5, $p17);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i21, $p22 := $i10, $p11;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i3);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $i24 := __create_pipe($p2, $i23);
    call {:si_unique_call 400} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, $sub.i32(0, 1073741696));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} ldv_usb_fill_bulk_urb_7($p11, $p2, $i25, $p18, $i4, $p6, $p7);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 4);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i10);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p0, $mul.ref($i30, 8));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p11);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i10, 1);
    call {:si_unique_call 402} {:cexpr "i"} boogie_si_record_i32($i32);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, $i1);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i34 := $i32;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i9 := $i34;
    goto $bb3;

  $bb13:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i32;
    goto $bb13_dummy;

  $bb10:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} ldv_usb_free_urb_6($p22);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i15 := $i21;
    goto $bb8;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb8;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1740;
}



const ldv_usb_submit_urb_19: ref;

axiom ldv_usb_submit_urb_19 == $sub.ref(0, 300632);

procedure ldv_usb_submit_urb_19($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.24, $M.0, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $CurrAddr, $M.11, $M.38, $M.9, $M.25, assertsPassed;



implementation ldv_usb_submit_urb_19($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} {:cexpr "ldv_usb_submit_urb_19:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i2 := ldv_submit_urb($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 405} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const ldv_submit_urb: ref;

axiom ldv_submit_urb == $sub.ref(0, 301664);

procedure ldv_submit_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.24, $M.0, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $CurrAddr, $M.11, $M.38, $M.9, $M.25, assertsPassed;



implementation ldv_submit_urb($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $i1 := ldv_undef_int();
    call {:si_unique_call 407} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i1, 0);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} ldv_stop___4();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p4 := $M.9;
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i5, $i6);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i8 := $M.22;
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i12 := $M.24;
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p14 := $M.25;
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p15 := $M.9;
    call {:si_unique_call 411} devirtbounce.3($p14, $p15);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 412} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32(0);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p10 := $M.23;
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p11 := $M.9;
    call {:si_unique_call 409} devirtbounce.3($p10, $p11);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $M.22 := 0;
    call {:si_unique_call 410} {:cexpr "completeFnIntCounter"} boogie_si_record_i32(0);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_alloc_urb_5: ref;

axiom ldv_usb_alloc_urb_5 == $sub.ref(0, 302696);

procedure ldv_usb_alloc_urb_5($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.9;



implementation ldv_usb_alloc_urb_5($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} {:cexpr "ldv_usb_alloc_urb_5:arg:iso_packets"} boogie_si_record_i32($i0);
    call {:si_unique_call 414} {:cexpr "ldv_usb_alloc_urb_5:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $p2 := ldv_alloc_urb();
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_alloc_coherent: ref;

axiom usb_alloc_coherent == $sub.ref(0, 303728);

procedure usb_alloc_coherent($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_coherent($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} {:cexpr "usb_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 417} {:cexpr "usb_alloc_coherent:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $p4 := external_alloc();
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const ldv_usb_free_urb_6: ref;

axiom ldv_usb_free_urb_6 == $sub.ref(0, 304760);

procedure ldv_usb_free_urb_6($p0: ref);
  free requires assertsPassed;
  modifies $M.9;



implementation ldv_usb_free_urb_6($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} ldv_free_urb($p0);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_fill_bulk_urb_7: ref;

axiom ldv_usb_fill_bulk_urb_7 == $sub.ref(0, 305792);

procedure ldv_usb_fill_bulk_urb_7($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.25, $M.24;



implementation ldv_usb_fill_bulk_urb_7($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} {:cexpr "ldv_usb_fill_bulk_urb_7:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 421} {:cexpr "ldv_usb_fill_bulk_urb_7:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} ldv_fill_bulk_urb($p0, $p5);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    return;
}



const ldv_fill_bulk_urb: ref;

axiom ldv_fill_bulk_urb == $sub.ref(0, 306824);

procedure ldv_fill_bulk_urb($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.25, $M.24;



implementation ldv_fill_bulk_urb($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p2 := $M.9;
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $M.25 := $p1;
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i6 := $M.24;
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $M.24 := $i7;
    call {:si_unique_call 423} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32($i7);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_alloc_urb: ref;

axiom ldv_alloc_urb == $sub.ref(0, 307856);

procedure ldv_alloc_urb() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.9;



implementation ldv_alloc_urb() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $p0 := ldv_undef_ptr();
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $i2 := ldv_undef_int();
    call {:si_unique_call 426} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p6 := $M.9;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $M.9 := $p0;
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 308888);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 1} true;
    call {:si_unique_call 427} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 428} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const handle_audio_data: ref;

axiom handle_audio_data == $sub.ref(0, 309920);

procedure handle_audio_data($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21;



implementation handle_audio_data($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $i31: i64;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i64;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $i72: i64;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i64;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $p88: ref;
  var $i89: i64;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 712)), $mul.ref(416, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1176)), $mul.ref(152, 1));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i11 := $lshr.i32($i10, 3);
    call {:si_unique_call 429} {:cexpr "stride"} boogie_si_record_i32($i11);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i14 := $udiv.i32($i13, $i11);
    call {:si_unique_call 430} {:cexpr "len"} boogie_si_record_i32($i14);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    call {:si_unique_call 431} {:cexpr "oldptr"} boogie_si_record_i32($i18);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 508);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i18, $i24);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i25);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p8, $mul.ref(0, 1176)), $mul.ref(128, 1));
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i29 := $uge.i64($i26, $i28);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i50 := $mul.i32($i24, $i11);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    call {:si_unique_call 438} {:cexpr "__len___1"} boogie_si_record_i64($i51);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p8, $mul.ref(0, 1176)), $mul.ref(840, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i54 := $mul.i32($i18, $i11);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i55 := $zext.i32.i64($i54);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p53, $mul.ref($i55, 1));
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 439} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p56, $p16, $i51, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} snd_pcm_stream_lock($p58);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, $i24);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i61);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i65 := $zext.i32.i64($i64);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p8, $mul.ref(0, 1176)), $mul.ref(128, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.0, $p66);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i68 := $uge.i64($i65, $i67);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i77, $i24);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, $i78);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i82 := $zext.i32.i64($i81);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p8, $mul.ref(0, 1176)), $mul.ref(112, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i84 := $load.i64($M.0, $p83);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i85 := $uge.i64($i82, $i84);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} snd_pcm_stream_unlock($p94);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i85 == 1;
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p8, $mul.ref(0, 1176)), $mul.ref(112, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.0, $p88);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i64.i32($i89);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i91 := $sub.i32($i87, $i90);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, $i91);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $M.21 := $store.i32($M.21, $p1, 1);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i68 == 1;
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p8, $mul.ref(0, 1176)), $mul.ref(128, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.0, $p71);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i64.i32($i72);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i74 := $sub.i32($i70, $i73);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p8, $mul.ref(0, 1176)), $mul.ref(128, 1));
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32($i31);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i32, $i18);
    call {:si_unique_call 433} {:cexpr "cnt"} boogie_si_record_i32($i33);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i34 := $mul.i32($i33, $i11);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i34);
    call {:si_unique_call 434} {:cexpr "__len"} boogie_si_record_i64($i35);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p8, $mul.ref(0, 1176)), $mul.ref(840, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i38 := $mul.i32($i18, $i11);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i38);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p37, $mul.ref($i39, 1));
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 435} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p40, $p16, $i35, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i41 := $mul.i32($i24, $i11);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i42 := $mul.i32($i33, $i11);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32($i41, $i42);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i44 := $zext.i32.i64($i43);
    call {:si_unique_call 436} {:cexpr "__len___0"} boogie_si_record_i64($i44);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p8, $mul.ref(0, 1176)), $mul.ref(840, 1));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i47 := $mul.i32($i33, $i11);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i48 := $zext.i32.i64($i47);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p16, $mul.ref($i48, 1));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 437} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p46, $p49, $i44, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i22 := $sdiv.i32(16, $i11);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32($i14, $i22);
    call {:si_unique_call 432} {:cexpr "len"} boogie_si_record_i32($i23);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb3;
}



const snd_pcm_period_elapsed: ref;

axiom snd_pcm_period_elapsed == $sub.ref(0, 310952);

procedure snd_pcm_period_elapsed($p0: ref);
  free requires assertsPassed;



implementation snd_pcm_period_elapsed($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_18: ref;

axiom ldv_usb_submit_urb_18 == $sub.ref(0, 311984);

procedure ldv_usb_submit_urb_18($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.24, $M.0, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $CurrAddr, $M.11, $M.38, $M.9, $M.25, assertsPassed;



implementation ldv_usb_submit_urb_18($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} {:cexpr "ldv_usb_submit_urb_18:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i2 := ldv_submit_urb($p0);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 444} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const snd_pcm_stream_lock: ref;

axiom snd_pcm_stream_lock == $sub.ref(0, 313016);

procedure snd_pcm_stream_lock($p0: ref);
  free requires assertsPassed;



implementation snd_pcm_stream_lock($p0: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} _raw_read_lock(snd_pcm_link_rwlock);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(464, 1)), $mul.ref(0, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} spin_lock($p2);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    return;
}



const snd_pcm_stream_unlock: ref;

axiom snd_pcm_stream_unlock == $sub.ref(0, 314048);

procedure snd_pcm_stream_unlock($p0: ref);
  free requires assertsPassed;



implementation snd_pcm_stream_unlock($p0: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(464, 1)), $mul.ref(0, 1));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} spin_unlock($p2);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} _raw_read_unlock(snd_pcm_link_rwlock);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 315080);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} _raw_spin_unlock($p2);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    return;
}



const _raw_read_unlock: ref;

axiom _raw_read_unlock == $sub.ref(0, 316112);

procedure _raw_read_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_read_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 317144);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    return;
}



const _raw_read_lock: ref;

axiom _raw_read_lock == $sub.ref(0, 318176);

procedure _raw_read_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_read_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 319208);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} _raw_spin_lock($p2);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 320240);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    return;
}



const prepare_iso_urb: ref;

axiom prepare_iso_urb == $sub.ref(0, 321272);

procedure prepare_iso_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9;



implementation prepare_iso_urb($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p40: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i11: i32;
  var $i46: i1;
  var $i48: i32;
  var $i49: i1;
  var $i47: i32;
  var $i10: i32;
  var $p52: ref;
  var $p55: ref;
  var $p58: ref;
  var $p61: ref;
  var $p64: ref;
  var $p67: ref;
  var $p70: ref;
  var $p73: ref;
  var $p76: ref;
  var $p79: ref;
  var $p82: ref;
  var $p85: ref;
  var $p88: ref;
  var $p91: ref;
  var $p94: ref;
  var $p97: ref;
  var $p100: ref;
  var $p103: ref;
  var $p106: ref;
  var $p109: ref;
  var $p112: ref;
  var $p115: ref;
  var $p118: ref;
  var $p121: ref;
  var $p124: ref;
  var $p127: ref;
  var $p130: ref;
  var $p133: ref;
  var $p136: ref;
  var $p139: ref;
  var $p142: ref;
  var $p145: ref;
  var $p148: ref;
  var $p151: ref;
  var $p154: ref;
  var $p157: ref;
  var $p160: ref;
  var $p163: ref;
  var $p166: ref;
  var $p169: ref;
  var $p172: ref;
  var $p175: ref;
  var $p178: ref;
  var $p181: ref;
  var $p184: ref;
  var $p187: ref;
  var $p190: ref;
  var $p193: ref;
  var $p196: ref;
  var $p199: ref;
  var $p202: ref;
  var $p205: ref;
  var $p208: ref;
  var $p211: ref;
  var $p214: ref;
  var $p217: ref;
  var $p220: ref;
  var $p223: ref;
  var $p226: ref;
  var $p229: ref;
  var $p232: ref;
  var $p235: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2224, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 11112)), $mul.ref(552, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2152, 1)), $mul.ref(0, 8));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb5;

  $bb5:
    call $p12, $i13, $i14, $i15, $i16, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $p26, $p27, $i28, $i29, $i30, $i31, $p32, $p33, $p34, $p35, $p36, $p37, $p40, $p43, $i44, $i45, $i11, $p52, $p55, $p58, $p61, $p64, $p67, $p70, $p73, $p76, $p79, $p82, $p85, $p88, $p91, $p94, $p97, $p100, $p103, $p106, $p109, $p112, $p115, $p118, $p121, $p124, $p127, $p130, $p133, $p136, $p139, $p142, $p145, $p148, $p151, $p154, $p157, $p160, $p163, $p166, $p169, $p172, $p175, $p178, $p181, $p184, $p187, $p190, $p193, $p196, $p199, $p202, $p205, $p208, $p211, $p214, $p217, $p220, $p223, $p226, $p229, $p232, $p235 := prepare_iso_urb_loop_$bb5($p0, $p4, $p12, $i13, $i14, $i15, $i16, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $p26, $p27, $i28, $i29, $i30, $i31, $p32, $p33, $p34, $p35, $p36, $p37, $p40, $p43, $i44, $i45, $i11, $p52, $p55, $p58, $p61, $p64, $p67, $p70, $p73, $p76, $p79, $p82, $p85, $p88, $p91, $p94, $p97, $p100, $p103, $p106, $p109, $p112, $p115, $p118, $p121, $p124, $p127, $p130, $p133, $p136, $p139, $p142, $p145, $p148, $p151, $p154, $p157, $p160, $p163, $p166, $p169, $p172, $p175, $p178, $p181, $p184, $p187, $p190, $p193, $p196, $p199, $p202, $p205, $p208, $p211, $p214, $p217, $p220, $p223, $p226, $p229, $p232, $p235);
    goto $bb5_last;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $p12 := ldv_usb_alloc_urb_4(32, 208);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i15 := $i11;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i11);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2152, 1)), $mul.ref($i16, 8));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p12);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $p20 := usb_alloc_coherent($p4, 98304, 208, $p19);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, urb_complete_iso);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p4);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2232, 1));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p24);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2144, 1));
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $i30 := __create_pipe($p4, $i29);
    call {:si_unique_call 454} {:cexpr "tmp"} boogie_si_record_i32($i30);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i30, 128);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 1);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 6);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 32);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p20);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 98304);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, 0);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 3072);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 3072);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 3072);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 6144);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, 3072);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, 9216);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 3072);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, 12288);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, 3072);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, 15360);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, 3072);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, 18432);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, 3072);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, 21504);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, 3072);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, 24576);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p97, 3072);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p100, 27648);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p103, 3072);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, 30720);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(4, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p109, 3072);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p112, 33792);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(4, 1));
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p115, 3072);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p118, 36864);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(4, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p121, 3072);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p124, 39936);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(4, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p127, 3072);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p130, 43008);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(4, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p133, 3072);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p136, 46080);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(4, 1));
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p139, 3072);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(0, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p142, 49152);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(4, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p145, 3072);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(0, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p148, 52224);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(4, 1));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p151, 3072);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(0, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p154, 55296);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(4, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p157, 3072);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(0, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p160, 58368);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(4, 1));
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p163, 3072);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(0, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p166, 61440);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(4, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p169, 3072);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(0, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p172, 64512);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(4, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p175, 3072);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(0, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p178, 67584);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(4, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p181, 3072);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(0, 1));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p184, 70656);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(4, 1));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p187, 3072);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(0, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p190, 73728);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(4, 1));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p193, 3072);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(0, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p196, 76800);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(4, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p199, 3072);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(0, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p202, 79872);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(4, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p205, 3072);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(0, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p208, 82944);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(4, 1));
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p211, 3072);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(0, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p214, 86016);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(4, 1));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p217, 3072);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(0, 1));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p220, 89088);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(4, 1));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p223, 3072);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(0, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p226, 92160);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(4, 1));
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p229, 3072);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(0, 1));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p232, 95232);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(4, 1));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p235, 3072);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i11, 1);
    call {:si_unique_call 455} {:cexpr "i"} boogie_si_record_i32($i44);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i45 := $sle.i32($i44, 7);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb15:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i44;
    goto $bb15_dummy;

  $bb7:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i46 := $sgt.i32($i15, 0);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  $bb18:
    assume $i46 == 1;
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i47 := $i15;
    goto $bb21;

  $bb21:
    call $i48, $i49, $i47 := prepare_iso_urb_loop_$bb21($i48, $i49, $i47);
    goto $bb21_last;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32($i47, 1);
    call {:si_unique_call 456} {:cexpr "i"} boogie_si_record_i32($i48);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i49 := $sgt.i32($i48, 0);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i49 == 1);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i47 := $i48;
    goto $bb23_dummy;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2076;

  $bb15_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2019;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 322304);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 323336);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    return;
}



const iso_bubble_handler: ref;

axiom iso_bubble_handler == $sub.ref(0, 324368);

procedure iso_bubble_handler($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9, $M.22, $M.24, $M.25, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $M.11, $M.38, assertsPassed;



implementation iso_bubble_handler($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 2240), 2328));
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2240), 2328)), $mul.ref(2224, 1));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} mutex_lock_nested($p5, 0);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} vslice_dummy_var_139 := usb_transfer_stop($p2);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} msleep(500);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} vslice_dummy_var_140 := start_video_stream($p4);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} mutex_unlock($p8);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const prepare_bulk_urb: ref;

axiom prepare_bulk_urb == $sub.ref(0, 325400);

procedure prepare_bulk_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.25, $M.24;



implementation prepare_bulk_urb($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var vslice_dummy_var_141: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2152, 1)), $mul.ref(0, 8));
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2152, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2224, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 11112)), $mul.ref(552, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2144, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2232, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} vslice_dummy_var_141 := alloc_bulk_urbs_generic($p7, 8, $p11, $i15, 8192, 208, urb_complete_bulk, $p18);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fire_all_urb: ref;

axiom fire_all_urb == $sub.ref(0, 326432);

procedure fire_all_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.22, $M.24, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $CurrAddr, $M.11, $M.38, $M.9, $M.25, assertsPassed;



implementation fire_all_urb($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i3: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i1;
  var $i2: i32;
  var $i12: i32;
  var vslice_dummy_var_142: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2240, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 1);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb1;

  $bb1:
    call $i3, $p5, $p6, $i7, $i8, $i10, $i11, $i2, $i12, vslice_dummy_var_142 := fire_all_urb_loop_$bb1($p0, $i3, $p5, $p6, $i7, $i8, $i10, $i11, $i2, $i12, vslice_dummy_var_142);
    goto $bb1_last;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2152, 1)), $mul.ref($i3, 8));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $i7 := ldv_usb_submit_urb_9($p6, 208);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 466} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i2, 1);
    call {:si_unique_call 468} {:cexpr "i"} boogie_si_record_i32($i10);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i11 := $sle.i32($i10, 7);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i12 := $i7;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i2 := $i10;
    goto $bb6_dummy;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} vslice_dummy_var_142 := printk.ref.ref.i32.i32.i32(.str.38, .str.39, 678, $i2, $i7);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2276;
}



const ldv_usb_submit_urb_9: ref;

axiom ldv_usb_submit_urb_9 == $sub.ref(0, 327464);

procedure ldv_usb_submit_urb_9($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.24, $M.0, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $CurrAddr, $M.11, $M.38, $M.9, $M.25, assertsPassed;



implementation ldv_usb_submit_urb_9($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} {:cexpr "ldv_usb_submit_urb_9:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i2 := ldv_submit_urb($p0);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 471} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const urb_complete_bulk: ref;

axiom urb_complete_bulk == $sub.ref(0, 328496);

procedure urb_complete_bulk($p0: ref);
  free requires assertsPassed;
  modifies $M.22, $M.24, $M.26, $M.0, $M.27, $M.28, $M.29, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $CurrAddr, $M.8, $M.7, $M.6, $M.11, $M.38, $M.9, $M.25, assertsPassed;



implementation urb_complete_bulk($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i8;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var vslice_dummy_var_143: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 728)), $mul.ref(720, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(576, 1));
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    call {:si_unique_call 472} {:cexpr "count"} boogie_si_record_i32($i10);
    $p11 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2240, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i13 == 1);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i20 := get_video_frame($p3, $p6);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i8($i20);
    call {:si_unique_call 476} {:cexpr "tmp"} boogie_si_record_i8($i21);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i21);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i10, $i26);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i27 == 1);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} check_trailer($p6, $p8, $i10);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $i28 := ldv_usb_submit_urb_2($p0, 32);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    call {:si_unique_call 474} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i29 == 1;
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} vslice_dummy_var_143 := printk.ref.ref.i32.i32(.str.36, .str.37, 407, $i28);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i27 == 1;
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} copy_vbi_video_data($p6, $p8, $i10);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb14;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, $sub.i32(0, 71));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;
}



const get_video_frame: ref;

axiom get_video_frame == $sub.ref(0, 329528);

procedure get_video_frame($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.26, $M.0, $CurrAddr;



implementation get_video_frame($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p2, 0);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $i3 := get_frame($p0, $p2);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 482} {:cexpr "ret"} boogie_si_record_i8($i4);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i4);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.26, $p2);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} init_copy($p1, 0);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const copy_vbi_video_data: ref;

axiom copy_vbi_video_data == $sub.ref(0, 330560);

procedure copy_vbi_video_data($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26;



implementation copy_vbi_video_data($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} {:cexpr "copy_vbi_video_data:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2216, 1));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1840)), $mul.ref(1828, 1));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i7 := $udiv.i32($i6, 2);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 1840)), $mul.ref(1824, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i7, $i9);
    call {:si_unique_call 485} {:cexpr "vbi_delta"} boogie_si_record_i32($i10);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i11 := $uge.i32($i10, $i2);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i10, 0);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i10);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p1, $mul.ref($i22, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i2, $i10);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} copy_video_data($p0, $p23, $i24);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} copy_vbi_data($p4, $p1, $i10);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 1840)), $mul.ref(1816, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2112, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb8;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 1840)), $mul.ref(1816, 1));
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} submit_frame($p21);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} copy_vbi_data($p4, $p1, $i2);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const check_trailer: ref;

axiom check_trailer == $sub.ref(0, 331592);

procedure check_trailer($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation check_trailer($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} {:cexpr "check_trailer:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2216, 1));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2056, 1)), $mul.ref(20, 1)), $mul.ref(20, 1));
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i9 := $udiv.i32($i8, 2);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 1840)), $mul.ref(1828, 1));
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i12 := $udiv.i32($i11, 2);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i9, $i12);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 1840)), $mul.ref(1824, 1));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2140, 1));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2128, 1));
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i20 := $mul.i32($i17, $i19);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i15, $i20);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i13, $i21);
    call {:si_unique_call 491} {:cexpr "offset"} boogie_si_record_i32($i22);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2132, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i33 := $sgt.i32($i32, $i2);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i33 == 1);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i34 := $sle.i32($i32, 0);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i32);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p1, $mul.ref($i35, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i37 := strncmp($p36, .str.35, 4);
    call {:si_unique_call 495} {:cexpr "tmp"} boogie_si_record_i32($i37);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} end_field($p0);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p36);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref(12, 4));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    call {:si_unique_call 496} {:cexpr "field_num"} boogie_si_record_i32($i41);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 1);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2112, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i42, $i44);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} copy_video_data($p0, $p1, $i32);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb13:
    assume $i45 == 1;
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2112, 1));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} init_copy($p0, $i48);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb5;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2132, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2140, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i27, $i29);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, $i22);
    call {:si_unique_call 492} {:cexpr "offset"} boogie_si_record_i32($i31);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb3;
}



const ldv_usb_submit_urb_2: ref;

axiom ldv_usb_submit_urb_2 == $sub.ref(0, 332624);

procedure ldv_usb_submit_urb_2($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.24, $M.0, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $CurrAddr, $M.11, $M.38, $M.9, $M.25, assertsPassed;



implementation ldv_usb_submit_urb_2($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} {:cexpr "ldv_usb_submit_urb_2:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i2 := ldv_submit_urb($p0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 501} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const strncmp: ref;

axiom strncmp == $sub.ref(0, 333656);

procedure strncmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const copy_video_data: ref;

axiom copy_video_data == $sub.ref(0, 334688);

procedure copy_video_data($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation copy_video_data($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i64;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $i6: i32;
  var $p7: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $p46: ref;
  var $i47: i32;
  var $p4: ref;
  var $i5: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $p98: ref;
  var $p99: ref;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} {:cexpr "copy_video_data:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p4, $i5 := $p1, $i2;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i5, 0);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i84 == 1;
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2140, 1));
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i87 := $ugt.i32($i86, $i5);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb24;

  $bb25:
    assume $i87 == 1;
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i88 := $zext.i32.i64($i5);
    call {:si_unique_call 510} {:cexpr "__len___1"} boogie_si_record_i64($i88);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2120, 1));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.0;
    cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 511} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p90, $p4, $i88, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_32;
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2140, 1));
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i93 := $sub.i32($i92, $i5);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2132, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i93);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2120, 1));
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i97 := $zext.i32.i64($i5);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p96, $mul.ref($i97, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2120, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p99, $p98);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i6, $p7 := $i2, $p1;
    goto $bb4;

  $bb4:
    call $p8, $i9, $i10, $p11, $i12, $i13, $p14, $p15, $i16, $p17, $i18, $i19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $p27, $i28, $p29, $i30, $i31, $i32, $p33, $p34, $p35, $i36, $i37, $p38, $p39, $i40, $i41, $p42, $p43, $i44, $i45, $p48, $i49, $i50, $p51, $p52, $i53, $p54, $i55, $i56, $p57, $i58, $i59, $p60, $p61, $p62, $p63, $p64, $i65, $p66, $i67, $i68, $i69, $p70, $p71, $p72, $i73, $i74, $p75, $p76, $i77, $i78, $i6, $p7, $p79, $i80, $i81, $p82, $i83, $p46, $i47, cmdloc_dummy_var_24, cmdloc_dummy_var_25, cmdloc_dummy_var_26, cmdloc_dummy_var_27, cmdloc_dummy_var_28, cmdloc_dummy_var_29 := copy_video_data_loop_$bb4($p0, $p8, $i9, $i10, $p11, $i12, $i13, $p14, $p15, $i16, $p17, $i18, $i19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $p27, $i28, $p29, $i30, $i31, $i32, $p33, $p34, $p35, $i36, $i37, $p38, $p39, $i40, $i41, $p42, $p43, $i44, $i45, $p48, $i49, $i50, $p51, $p52, $i53, $p54, $i55, $i56, $p57, $i58, $i59, $p60, $p61, $p62, $p63, $p64, $i65, $p66, $i67, $i68, $i69, $p70, $p71, $p72, $i73, $i74, $p75, $p76, $i77, $i78, $i6, $p7, $p79, $i80, $i81, $p82, $i83, $p46, $i47, cmdloc_dummy_var_24, cmdloc_dummy_var_25, cmdloc_dummy_var_26, cmdloc_dummy_var_27, cmdloc_dummy_var_28, cmdloc_dummy_var_29);
    goto $bb4_last;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2140, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i81 := $ule.i32($i80, $i6);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p82, $i83 := $p7, $i6;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p4, $i5 := $p82, $i83;
    goto $bb3;

  $bb19:
    assume $i81 == 1;
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2132, 1));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2128, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, 1);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2128, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i50);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2128, 1));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2136, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i56 := $sgt.i32($i53, $i55);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2140, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i58);
    call {:si_unique_call 507} {:cexpr "__len___0"} boogie_si_record_i64($i59);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2120, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 508} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p61, $p7, $i59, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2120, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2140, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2140, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i65, $i67);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i68);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p63, $mul.ref($i69, 1));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2120, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p71, $p70);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2140, 1));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i73);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p7, $mul.ref($i74, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2140, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i78 := $sub.i32($i6, $i77);
    call {:si_unique_call 509} {:cexpr "count"} boogie_si_record_i32($i78);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p43, $i44 := $p75, $i78;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p46, $i47 := $p43, $i44;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p4, $i5 := $p46, $i47;
    goto $bb3;

  $bb13:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i6, $p7 := $i44, $p43;
    goto $bb13_dummy;

  $bb16:
    assume $i56 == 1;
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} end_field($p0);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2128, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 1);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2128, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2128, 1));
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2136, 1));
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i16, $i18);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2132, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    call {:si_unique_call 504} {:cexpr "__len"} boogie_si_record_i64($i22);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2120, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 505} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p24, $p7, $i22, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2120, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2132, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2140, 1));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i28, $i30);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p26, $mul.ref($i32, 1));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2120, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p33);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2132, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p7, $mul.ref($i37, 1));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2132, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i6, $i40);
    call {:si_unique_call 506} {:cexpr "count"} boogie_si_record_i32($i41);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2132, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 0);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p43, $i44 := $p38, $i41;
    goto $bb12;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2466;
}



const end_field: ref;

axiom end_field == $sub.ref(0, 335720);

procedure end_field($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation end_field($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2112, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} init_copy($p0, 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(2232, 1));
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} submit_frame($p5);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const submit_frame: ref;

axiom submit_frame == $sub.ref(0, 336752);

procedure submit_frame($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation submit_frame($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 728)), $mul.ref(624, 1));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 728)), $mul.ref(624, 1));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(36, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 4);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(160, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 1);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(160, 1));
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(168, 1));
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} v4l2_get_timestamp($p11);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} __wake_up($p12, 3, 1, $0.ref);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const v4l2_get_timestamp: ref;

axiom v4l2_get_timestamp == $sub.ref(0, 337784);

procedure v4l2_get_timestamp($p0: ref);
  free requires assertsPassed;



implementation v4l2_get_timestamp($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 338816);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 517} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    return;
}



const copy_vbi_data: ref;

axiom copy_vbi_data == $sub.ref(0, 339848);

procedure copy_vbi_data($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26;



implementation copy_vbi_data($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} {:cexpr "copy_vbi_data:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1840)), $mul.ref(1816, 1));
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1840)), $mul.ref(1824, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, $i2);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1840)), $mul.ref(1824, 1));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $i7 := get_frame($p4, $0.ref);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 520} {:cexpr "tmp___0"} boogie_si_record_i8($i8);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 728)), $mul.ref(624, 1));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $p12 := videobuf_to_vmalloc($p11);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1840)), $mul.ref(1808, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 2328)), $mul.ref(2112, 1));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $p23 := $p12;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i2);
    call {:si_unique_call 522} {:cexpr "__len"} boogie_si_record_i64($i24);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1840)), $mul.ref(1824, 1));
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p23, $mul.ref($i27, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.0;
    cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 523} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p28, $p1, $i24, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_35;
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1840)), $mul.ref(1828, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i20 := $udiv.i32($i19, 2);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p12, $mul.ref($i21, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p23 := $p22;
    goto $bb7;
}



const get_frame: ref;

axiom get_frame == $sub.ref(0, 340880);

procedure get_frame($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.26, $M.0;



implementation get_frame($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 728)), $mul.ref(624, 1));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 728)), $mul.ref(632, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} spin_lock($p7);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 728)), $mul.ref(704, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i9 := list_empty($p8);
    call {:si_unique_call 526} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $p20 := $p3;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 728)), $mul.ref(632, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} spin_unlock($p21);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p20);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i6 := $i23;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 728)), $mul.ref(704, 1)), $mul.ref(0, 1));
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref($sub.ref(0, 56), 240));
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p1);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 728)), $mul.ref(624, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p15);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p14, $mul.ref($sub.ref(0, 56), 240)), $mul.ref(56, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} list_del_init($p19);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p20 := $p15;
    goto $bb10;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p1, 1);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;
}



const videobuf_to_vmalloc: ref;

axiom videobuf_to_vmalloc == $sub.ref(0, 341912);

procedure videobuf_to_vmalloc($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation videobuf_to_vmalloc($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $p1 := external_alloc();
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 342944);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_usb_alloc_urb_4: ref;

axiom ldv_usb_alloc_urb_4 == $sub.ref(0, 343976);

procedure ldv_usb_alloc_urb_4($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.9;



implementation ldv_usb_alloc_urb_4($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} {:cexpr "ldv_usb_alloc_urb_4:arg:iso_packets"} boogie_si_record_i32($i0);
    call {:si_unique_call 531} {:cexpr "ldv_usb_alloc_urb_4:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $p2 := ldv_alloc_urb();
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const urb_complete_iso: ref;

axiom urb_complete_iso == $sub.ref(0, 345008);

procedure urb_complete_iso($p0: ref);
  free requires assertsPassed;
  modifies $M.27, $M.28, $M.29, $M.26, $M.0, $M.22, $M.24, $CurrAddr, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $M.11, $M.38, $M.9, $M.25, assertsPassed;



implementation urb_complete_iso($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i8;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $p41: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i1;
  var vslice_dummy_var_146: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 728)), $mul.ref(720, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 11112)), $mul.ref(576, 1));
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p1, 0);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p2, 0);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p3, 0);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    $p12 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2240, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    call $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $p39, $i43, $i44, $p45, $i46, $i47, $i48 := urb_complete_iso_loop_$bb5($p0, $p1, $p2, $p3, $p6, $p9, $p11, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $p39, $i43, $i44, $p45, $i46, $i47, $i48);
    goto $bb5_last;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i8($i15);
    call {:si_unique_call 537} {:cexpr "tmp"} boogie_si_record_i8($i16);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.28, $p2);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $i21 := get_chunk($i20, $p0, $p2, $p3, $p1);
    call {:si_unique_call 541} {:cexpr "tmp___1"} boogie_si_record_i32($i21);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i21, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i21, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.29, $p3);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p2, $i44);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.28, $p2);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i48 := $sgt.i32($i46, $i47);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $i49 := ldv_usb_submit_urb_3($p0, 32);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 539} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb30:
    assume $i50 == 1;
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} vslice_dummy_var_146 := printk.ref.ref.i32.i32(.str.34, .str.33, 505, $i49);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb27_dummy;

  $bb18:
    assume $i24 == 1;
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb16:
    assume $i23 == 1;
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} vslice_dummy_var_144 := printk.ref.ref.i32(.str.32, .str.33, 496);
    $p41 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2248, 1));
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} vslice_dummy_var_145 := schedule_work($p41);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i21, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i25 == 1);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.28, $p2);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i37 := $mul.i32($i36, 3072);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p11, $mul.ref($i38, 1));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} check_trailer($p9, $p39, 3072);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb21:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i21, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb20;

  $bb23:
    assume $i26 == 1;
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.28, $p2);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i28 := $mul.i32($i27, 3072);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p11, $mul.ref($i29, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.29, $p3);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.28, $p2);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i31, $i32);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, 1);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i35 := $mul.i32($i34, 3072);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} copy_vbi_video_data($p9, $p30, $i35);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb8;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb27_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i15 := get_video_frame($p6, $p9);
    goto corral_source_split_2738;
}



const get_chunk: ref;

axiom get_chunk == $sub.ref(0, 346040);

procedure get_chunk($i0: i32, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.28, $M.27;



implementation get_chunk($i0: i32, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i24: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i8: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} {:cexpr "get_chunk:arg:start"} boogie_si_record_i32($i0);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p3, $sub.i32(0, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p2, $sub.i32(0, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, $i0);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.28, $p2);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, $sub.i32(0, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i23 := $i54;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb41:
    assume $i51 == 1;
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.29, $p3);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, $sub.i32(0, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb43;

  $bb44:
    assume $i53 == 1;
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i54 := 3;
    goto $bb46;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i8 := $i0;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $p13, $i14, $i15, $i16, $i17, $i18, $p19, $i20, $i21, $i22, $p25, $i26, $i27, $p28, $i29, $i30, $p31, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $i39, $i40, $p41, $i42, $i43, $i44, $i24, $i47, $i48, $i49, $i8 := get_chunk_loop_$bb4($p1, $p2, $p3, $p4, $p5, $p9, $p10, $i11, $p13, $i14, $i15, $i16, $i17, $i18, $p19, $i20, $i21, $i22, $p25, $i26, $i27, $p28, $i29, $i30, $p31, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $i39, $i40, $p41, $i42, $i43, $i44, $i24, $i47, $i48, $i49, $i8);
    goto $bb4_last;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i8);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref($i11, 16)), $mul.ref(12, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, $sub.i32(0, 75));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p10, $mul.ref($i11, 16)), $mul.ref(12, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i27 == 1);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p10, $mul.ref($i11, 16)), $mul.ref(8, 1));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p10, $mul.ref($i11, 16)), $mul.ref(8, 1));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i33 := $ugt.i32($i32, 3072);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p10, $mul.ref($i11, 16)), $mul.ref(8, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 3072);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p10, $mul.ref($i11, 16)), $mul.ref(8, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i43 := $ule.i32($i42, 3071);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i44 := $i8;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i24 := $i8;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i24, 1);
    call {:si_unique_call 548} {:cexpr "start"} boogie_si_record_i32($i47);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p5);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i49 := $sgt.i32($i48, $i47);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i49 == 1);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb38:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i47;
    goto $bb38_dummy;

  $bb32:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.28, $p2);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, $sub.i32(0, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb34:
    assume $i46 == 1;
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p2, $i44);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p3, $i44);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i23 := 1;
    goto $bb10;

  $bb26:
    assume $i38 == 1;
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.28, $p2);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, $sub.i32(0, 1));
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p3, $i8);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i24 := $i8;
    goto $bb12;

  $bb28:
    assume $i40 == 1;
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p2, $i8);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.28, $p2);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, $sub.i32(0, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i24 := $i8;
    goto $bb12;

  $bb21:
    assume $i35 == 1;
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb15;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.27, $p4);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 1);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p4, $i17);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.27, $p4);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i21 := $sdiv.i32($i20, 3);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i18, $i21);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i24 := $i8;
    goto $bb12;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i23 := 2;
    goto $bb10;

  $bb38_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2799;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 347072);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, system_wq);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $i2 := queue_work($p1, $p0);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 550} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_usb_submit_urb_3: ref;

axiom ldv_usb_submit_urb_3 == $sub.ref(0, 348104);

procedure ldv_usb_submit_urb_3($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.24, $M.0, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $CurrAddr, $M.11, $M.38, $M.9, $M.25, assertsPassed;



implementation ldv_usb_submit_urb_3($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} {:cexpr "ldv_usb_submit_urb_3:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $i2 := ldv_submit_urb($p0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 553} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 349136);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $i2 := queue_work_on(4096, $p0, $p1);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 555} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 350168);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 556} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 1} true;
    call {:si_unique_call 557} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 558} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const set_std: ref;

axiom set_std == $sub.ref(0, 351200);

procedure set_std($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation set_std($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i24: i64;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p35: ref;
  var $i34: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i17: i32;
  var $i49: i64;
  var $i50: i1;
  var $i51: i64;
  var $i52: i1;
  var $i53: i64;
  var $i54: i1;
  var $i55: i64;
  var $i56: i1;
  var $i57: i64;
  var $i58: i1;
  var $i59: i64;
  var $i60: i1;
  var $i61: i64;
  var $i62: i1;
  var $i63: i64;
  var $i64: i1;
  var $i65: i64;
  var $i66: i1;
  var $i67: i64;
  var $i68: i1;
  var $i69: i64;
  var $i70: i1;
  var $i71: i64;
  var $i72: i1;
  var $i73: i64;
  var $i74: i1;
  var $i75: i64;
  var $i76: i1;
  var $i77: i64;
  var $i78: i1;
  var $i79: i64;
  var $i80: i1;
  var $i81: i64;
  var $i82: i1;
  var vslice_dummy_var_147: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 560} {:cexpr "set_std:arg:norm"} boogie_si_record_i64($i1);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $and.i64(32, $i1);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i49 := $and.i64(1, $i1);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i51 := $and.i64(4, $i1);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i7 := 2;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i53 := $and.i64(8, $i1);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i7 := 3;
    assume {:branchcond $i54} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i55 := $and.i64(16, $i1);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i7 := 4;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i57 := $and.i64(256, $i1);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i7 := 5;
    assume {:branchcond $i58} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i59 := $and.i64(512, $i1);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i7 := 6;
    assume {:branchcond $i60} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i61 := $and.i64(1024, $i1);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i7 := 7;
    assume {:branchcond $i62} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i63 := $and.i64(4096, $i1);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i7 := 8;
    assume {:branchcond $i64} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i65 := $and.i64(8192, $i1);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i7 := 9;
    assume {:branchcond $i66} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i67 := $and.i64(65536, $i1);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i7 := 10;
    assume {:branchcond $i68} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i69 := $and.i64(131072, $i1);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i7 := 11;
    assume {:branchcond $i70} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i71 := $and.i64(262144, $i1);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i7 := 12;
    assume {:branchcond $i72} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i73 := $and.i64(524288, $i1);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i7 := 13;
    assume {:branchcond $i74} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i75 := $and.i64(1048576, $i1);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i7 := 14;
    assume {:branchcond $i76} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i77 := $and.i64(2097152, $i1);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i7 := 15;
    assume {:branchcond $i78} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i79 := $and.i64(4194304, $i1);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i7 := 16;
    assume {:branchcond $i80} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i81 := $and.i64(8388608, $i1);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i7 := 17;
    assume {:branchcond $i82} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb88:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref($i8, 24)), $mul.ref(20, 1));
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.30, $p10);
    call {:si_unique_call 561} {:cexpr "param"} boogie_si_record_i32($i11);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i7);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref($i12, 24)), $mul.ref(8, 1));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} vslice_dummy_var_147 := printk.ref.ref.i32.ref(.str.23, .str.24, 885, $p15);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} mutex_lock_nested($p18, 0);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $i19 := send_set_req($p0, 20, $i11, $p2);
    call {:si_unique_call 565} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i20 == 1);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p2);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i7);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref($i24, 24)), $mul.ref(0, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.30, $p26);
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(8, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p28, $i27);
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(8, 1));
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 63744);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i32 == 1);
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(2904, 1)), $mul.ref(1828, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 51840);
    assume {:verifier.code 0} true;
    $i34 := 576;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, $i34);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} mutex_unlock($p48);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i17 := $i19;
    goto $bb10;

  $bb21:
    assume $i39 == 1;
    $p40 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i34);
    $p41 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    $p43 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i45 := $mul.i32($i42, $i44);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i46 := $mul.i32($i45, 2);
    $p47 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(20, 1)), $mul.ref(20, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i46);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i32 == 1;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(2904, 1)), $mul.ref(1828, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 34560);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i34 := 480;
    goto $bb20;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb12;

  $bb84:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb4;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb4;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb4;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb4;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb4;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb4;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb4;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i66 == 1;
    goto $bb4;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb4;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb4;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb4;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb4;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb4;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb4;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb4;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb4;
}



const pd_vidioc_s_tuner: ref;

axiom pd_vidioc_s_tuner == $sub.ref(0, 352232);

procedure pd_vidioc_s_tuner($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation pd_vidioc_s_tuner($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 568} {:cexpr "pd_vidioc_s_tuner:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} mutex_lock_nested($p3, 0);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref($i4, 12)), $mul.ref(0, 1));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.31, $p6);
    call {:si_unique_call 570} {:cexpr "param"} boogie_si_record_i32($i7);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i8 := send_set_req($p0, 42, $i7, $p2);
    call {:si_unique_call 572} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(8, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $i13 := get_audio_std($i12);
    call {:si_unique_call 574} {:cexpr "audiomode"} boogie_si_record_i32($i13);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $i14 := send_set_req($p0, 44, $i13, $p2);
    call {:si_unique_call 576} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i14, $i8);
    call {:si_unique_call 577} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} mutex_unlock($p20);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(4, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i1);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pd_vidioc_s_fmt: ref;

axiom pd_vidioc_s_fmt == $sub.ref(0, 353264);

procedure pd_vidioc_s_fmt($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation pd_vidioc_s_fmt($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i9: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $p18: ref;
  var $i17: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i24: i32;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(20, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1346520914);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 1448695129);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $i11 := send_set_req($p0, 21, $i9, $p2);
    call {:si_unique_call 581} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 720);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i13, 720);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 720);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $i19 := send_set_req($p0, 23, $i17, $p2);
    call {:si_unique_call 583} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i19, $i11);
    call {:si_unique_call 584} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i21 == 1);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p2);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    $p27 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(20, 1)), $mul.ref(8, 1));
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(8, 1));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 63744);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i32 := (if $i31 == 1 then 480 else 576);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    $p34 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i35, $i37);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i38 == 1);
    $p39 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i40, $i42);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p1);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p5);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.0;
    cmdloc_dummy_var_37 := $M.0;
    call {:si_unique_call 585} cmdloc_dummy_var_38 := $memcpy.i8(cmdloc_dummy_var_36, cmdloc_dummy_var_37, $p61, $p62, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_38;
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    $p46 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    $p49 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i48);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i52 := $mul.i32($i51, 2);
    $p53 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(20, 1)), $mul.ref(16, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i58 := $mul.i32($i55, $i57);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i59 := $mul.i32($i58, 2);
    $p60 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(20, 1)), $mul.ref(20, 1));
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb23;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 16);
    goto $bb20;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb16;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb8;

  $bb5:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i13, 704);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i17 := 2;
    goto $bb13;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i9 := 4;
    goto $bb3;
}



const pm_alsa_suspend: ref;

axiom pm_alsa_suspend == $sub.ref(0, 354296);

procedure pm_alsa_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9;



implementation pm_alsa_suspend($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i1 := $M.5;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 16);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} vslice_dummy_var_149 := audio_buf_free($p0);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} vslice_dummy_var_148 := printk.ref.ref.i32(.str, .str.6, 352);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const audio_buf_free: ref;

axiom audio_buf_free == $sub.ref(0, 355328);

procedure audio_buf_free($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9;



implementation audio_buf_free($p0: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var vslice_dummy_var_150: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    $p25 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(0, 1)), $mul.ref(2, 8));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(0, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} free_all_urb_generic($p11, 3);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i12 := $M.5;
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 16);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} vslice_dummy_var_150 := printk.ref.ref.i32(.str, .str.48, 185);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb15:
    assume $i28 == 1;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(0, 1)), $mul.ref(2, 8));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} usb_kill_urb($p31);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i20 == 1;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} usb_kill_urb($p23);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb3:
    assume $i6 == 1;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} usb_kill_urb($p9);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const send_get_req: ref;

axiom send_get_req == $sub.ref(0, 356360);

procedure send_get_req($p0: ref, $i1: i8, $i2: i32, $p3: ref, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation send_get_req($p0: ref, $i1: i8, $i2: i32, $p3: ref, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i140: i1;
  var $i143: i16;
  var $i144: i32;
  var $i145: i16;
  var $i141: i16;
  var $i142: i16;
  var $p146: ref;
  var $p147: ref;
  var $i148: i32;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $i152: i32;
  var $i153: i32;
  var $i154: i8;
  var $i155: i32;
  var $i156: i16;
  var $i157: i32;
  var $i158: i16;
  var $p159: ref;
  var $i160: i16;
  var $i161: i32;
  var $i162: i32;
  var $i163: i16;
  var $i164: i32;
  var $i165: i1;
  var $i166: i1;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i64;
  var $p172: ref;
  var $p173: ref;
  var $i139: i32;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $p6 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    call {:si_unique_call 594} {:cexpr "send_get_req:arg:cmdid"} boogie_si_record_i8($i1);
    call {:si_unique_call 595} {:cexpr "send_get_req:arg:param"} boogie_si_record_i32($i2);
    call {:si_unique_call 596} {:cexpr "send_get_req:arg:datalen"} boogie_si_record_i32($i5);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 0);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(1, 1));
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 0);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(2, 1));
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(3, 1));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(4, 1));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 0);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(5, 1));
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(6, 1));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(7, 1));
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 0);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 0);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(9, 1));
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 0);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(10, 1));
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 0);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(11, 1));
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 0);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(12, 1));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 0);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(13, 1));
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 0);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(14, 1));
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 0);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(15, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 0);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(17, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 0);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(18, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 0);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(19, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 0);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 0);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(21, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 0);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(22, 1));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 0);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(23, 1));
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 0);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, 0);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(25, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 0);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(26, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 0);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(27, 1));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 0);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(28, 1));
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, 0);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(29, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, 0);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(30, 1));
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, 0);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(31, 1));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, 0);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 0);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(33, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, 0);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(34, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, 0);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(35, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 0);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(36, 1));
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, 0);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(37, 1));
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, 0);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(38, 1));
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, 0);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(39, 1));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, 0);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, 0);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(41, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, 0);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(42, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, 0);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(43, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, 0);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(44, 1));
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, 0);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(45, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, 0);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(46, 1));
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, 0);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(47, 1));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, 0);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, 0);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(49, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, 0);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(50, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, 0);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(51, 1));
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, 0);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(52, 1));
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, 0);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(53, 1));
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, 0);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(54, 1));
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, 0);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(55, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 0);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, 0);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(57, 1));
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, 0);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(58, 1));
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, 0);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(59, 1));
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, 0);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(60, 1));
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, 0);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(61, 1));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p68, 0);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(62, 1));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, 0);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(63, 1));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p70, 0);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, 0);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(65, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, 0);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(66, 1));
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p73, 0);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(67, 1));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, 0);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(68, 1));
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p75, 0);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(69, 1));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, 0);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(70, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, 0);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(71, 1));
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p78, 0);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p79, 0);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(73, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p80, 0);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(74, 1));
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, 0);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(75, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p82, 0);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(76, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p83, 0);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(77, 1));
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p84, 0);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(78, 1));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, 0);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(79, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p86, 0);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(80, 1));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, 0);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(81, 1));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p88, 0);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(82, 1));
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p89, 0);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(83, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p90, 0);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(84, 1));
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p91, 0);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(85, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p92, 0);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(86, 1));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p93, 0);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(87, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p94, 0);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(88, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p95, 0);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(89, 1));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p96, 0);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(90, 1));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p97, 0);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(91, 1));
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p98, 0);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(92, 1));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, 0);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(93, 1));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p100, 0);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(94, 1));
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p101, 0);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(95, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p102, 0);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p103, 0);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(97, 1));
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p104, 0);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(98, 1));
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p105, 0);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(99, 1));
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, 0);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(100, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p107, 0);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(101, 1));
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p108, 0);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(102, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p109, 0);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(103, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p110, 0);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(104, 1));
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p111, 0);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(105, 1));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p112, 0);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(106, 1));
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p113, 0);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(107, 1));
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p114, 0);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(108, 1));
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p115, 0);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(109, 1));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p116, 0);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(110, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p117, 0);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(111, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p118, 0);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p119, 0);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(113, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p120, 0);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(114, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p121, 0);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(115, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p122, 0);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(116, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p123, 0);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(117, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p124, 0);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(118, 1));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p125, 0);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(119, 1));
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p126, 0);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p127, 0);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(121, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p128, 0);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(122, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p129, 0);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(123, 1));
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p130, 0);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(124, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p131, 0);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(125, 1));
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p132, 0);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(126, 1));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p133, 0);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(127, 1));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p134, 0);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p135);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i137 := $and.i32($i136, 128);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} __const_udelay(4295000);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} __const_udelay(4295000);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} __const_udelay(4295000);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} __const_udelay(4295000);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} __const_udelay(4295000);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} __const_udelay(4295000);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} __const_udelay(4295000);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} __const_udelay(4295000);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} __const_udelay(4295000);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} __const_udelay(4295000);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} __const_udelay(4295000);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} __const_udelay(4295000);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} __const_udelay(4295000);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} __const_udelay(4295000);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} __const_udelay(4295000);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} __const_udelay(4295000);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} __const_udelay(4295000);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} __const_udelay(4295000);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} __const_udelay(4295000);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} __const_udelay(4295000);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} __const_udelay(4295000);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} __const_udelay(4295000);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} __const_udelay(4295000);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} __const_udelay(4295000);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} __const_udelay(4295000);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} __const_udelay(4295000);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} __const_udelay(4295000);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} __const_udelay(4295000);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} __const_udelay(4295000);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i2, 0);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i140 == 1);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i143 := $trunc.i32.i16($i2);
    call {:si_unique_call 599} {:cexpr "lower_16"} boogie_si_record_i16($i143);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i144 := $ashr.i32($i2, 16);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i32.i16($i144);
    call {:si_unique_call 600} {:cexpr "upper_16"} boogie_si_record_i16($i145);
    assume {:verifier.code 0} true;
    $i141, $i142 := $i143, $i145;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(552, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $i148 := __create_pipe($p147, 0);
    call {:si_unique_call 602} {:cexpr "tmp___0"} boogie_si_record_i32($i148);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(552, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i151 := $or.i32($i148, $sub.i32(0, 2147483520));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i32($i1);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i153 := $or.i32($i152, 128);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i154 := $trunc.i32.i8($i153);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i155 := $zext.i16.i32($i141);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i156 := $trunc.i32.i16($i155);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i157 := $zext.i16.i32($i142);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i158 := $trunc.i32.i16($i157);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p6);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i32.i16($i5);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i161 := $zext.i16.i32($i160);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i162 := $add.i32($i161, 4);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i32.i16($i162);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $i164 := usb_control_msg($p150, $i151, $i154, $sub.i8(0, 64), $i156, $i158, $p159, $i163, 5000);
    call {:si_unique_call 604} {:cexpr "ret"} boogie_si_record_i32($i164);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i165 := $slt.i32($i164, 0);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i165 == 1);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i166 := $ugt.i64(4, 63);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i166 == 1);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p4);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p6);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.0;
    cmdloc_dummy_var_43 := $M.0;
    call {:si_unique_call 606} cmdloc_dummy_var_44 := $memcpy.i8(cmdloc_dummy_var_42, cmdloc_dummy_var_43, $p169, $p170, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_44;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i171 := $sext.i32.i64($i5);
    call {:si_unique_call 607} {:cexpr "__len___0"} boogie_si_record_i64($i171);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p172 := $bitcast.ref.ref($p6);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p172, $mul.ref(4, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.0;
    cmdloc_dummy_var_46 := $M.0;
    call {:si_unique_call 608} cmdloc_dummy_var_47 := $memcpy.i8(cmdloc_dummy_var_45, cmdloc_dummy_var_46, $p3, $p173, $i171, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_47;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i139 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $r := $i139;
    return;

  $bb14:
    assume $i166 == 1;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p4);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p6);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.0;
    cmdloc_dummy_var_40 := $M.0;
    call {:si_unique_call 605} cmdloc_dummy_var_41 := $memcpy.i8(cmdloc_dummy_var_39, cmdloc_dummy_var_40, $p167, $p168, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_41;
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb12:
    assume $i165 == 1;
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i139 := $sub.i32(0, 6);
    goto $bb3;

  $bb9:
    assume $i140 == 1;
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i141, $i142 := 0, 0;
    goto $bb11;

  $bb1:
    assume $i138 == 1;
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i139 := $sub.i32(0, 19);
    goto $bb3;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 357392);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const videobuf_streamoff: ref;

axiom videobuf_streamoff == $sub.ref(0, 358424);

procedure videobuf_streamoff($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_streamoff($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 1} true;
    call {:si_unique_call 637} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 638} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const videobuf_streamon: ref;

axiom videobuf_streamon == $sub.ref(0, 359456);

procedure videobuf_streamon($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_streamon($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 1} true;
    call {:si_unique_call 639} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 640} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const videobuf_dqbuf: ref;

axiom videobuf_dqbuf == $sub.ref(0, 360488);

procedure videobuf_dqbuf($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_dqbuf($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 641} {:cexpr "videobuf_dqbuf:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 1} true;
    call {:si_unique_call 642} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 643} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const videobuf_qbuf: ref;

axiom videobuf_qbuf == $sub.ref(0, 361520);

procedure videobuf_qbuf($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_qbuf($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 1} true;
    call {:si_unique_call 644} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 645} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const videobuf_querybuf: ref;

axiom videobuf_querybuf == $sub.ref(0, 362552);

procedure videobuf_querybuf($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_querybuf($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 1} true;
    call {:si_unique_call 646} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 647} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const videobuf_reqbufs: ref;

axiom videobuf_reqbufs == $sub.ref(0, 363584);

procedure videobuf_reqbufs($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_reqbufs($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 1} true;
    call {:si_unique_call 648} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 649} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_make_path: ref;

axiom usb_make_path == $sub.ref(0, 364616);

procedure usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} {:cexpr "usb_make_path:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(64, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(4, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i9 := snprintf.ref.i64.ref.ref.ref($p1, $i2, .str.30, $p6, $p8);
    call {:si_unique_call 652} {:cexpr "actual"} boogie_si_record_i32($i9);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i2);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, $i9);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb3;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 365648);

procedure snprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);



const pd_buf_setup: ref;

axiom pd_buf_setup == $sub.ref(0, 366680);

procedure pd_buf_setup($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9, $M.22, $M.24, $M.25, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $M.11, $M.38, assertsPassed;



implementation pd_buf_setup($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $p14: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i47: i32;
  var $i48: i1;
  var $i13: i32;
  var vslice_dummy_var_151: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(608, 1));
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 728)), $mul.ref(720, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 728)), $mul.ref(0, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i9, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 11112)), $mul.ref(2904, 1)), $mul.ref(1828, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, 4095);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, $sub.i32(0, 4096));
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i44);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p2);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} vslice_dummy_var_151 := printk.ref.ref.i32.i32(.str.44, .str.45, 735, $i45);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p1);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb10;

  $bb14:
    assume $i48 == 1;
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 4);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb2:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i9, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 11112)), $mul.ref(576, 1));
    $p17 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(20, 1)), $mul.ref(20, 1));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 4095);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, $sub.i32(0, 4096));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i20);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p1);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i22 := $ule.i32($i21, 3);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    $p23 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2144, 1));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $sub.i8(0, 126));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0, 11112)), $mul.ref(2904, 1));
    $p25 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2216, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p24);
    $p26 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2216, 1));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 1840)), $mul.ref(1808, 1));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p14);
    $p29 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2224, 1));
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p7);
    $p30 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i32 := $udiv.i32($i31, 2);
    $p33 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2136, 1));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    $p34 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i36 := $mul.i32($i35, 2);
    $p37 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2140, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i36);
    $p38 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2232, 1));
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p4);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i39 := start_video_stream($p7);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 655} {:cexpr "tmp"} boogie_si_record_i32($i39);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i13 := $i39;
    goto $bb10;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 4);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const pd_buf_prepare: ref;

axiom pd_buf_prepare == $sub.ref(0, 367712);

procedure pd_buf_prepare($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pd_buf_prepare($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} {:cexpr "pd_buf_prepare:arg:field"} boogie_si_record_i32($i2);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(608, 1));
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 728)), $mul.ref(0, 1));
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i7, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(36, 1));
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i2);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(36, 1));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 1);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb13;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 728)), $mul.ref(720, 1));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 11112)), $mul.ref(2904, 1)), $mul.ref(1828, 1));
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i39);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p41, $i40);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $i42 := videobuf_iolock($p0, $p1, $0.ref);
    call {:si_unique_call 660} {:cexpr "rc"} boogie_si_record_i32($i42);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 0);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i43 == 1;
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i31 := $i42;
    goto $bb13;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(36, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 728)), $mul.ref(720, 1));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(20, 1)), $mul.ref(20, 1));
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p22, $i21);
    $p23 := $add.ref($add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    $p26 := $add.ref($add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2056, 1)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(12, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $i29 := videobuf_iolock($p0, $p1, $0.ref);
    call {:si_unique_call 658} {:cexpr "rc"} boogie_si_record_i32($i29);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 0);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    goto $bb13;
}



const pd_buf_queue: ref;

axiom pd_buf_queue == $sub.ref(0, 368744);

procedure pd_buf_queue($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pd_buf_queue($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(608, 1));
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(36, 1));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 2);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(56, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 728)), $mul.ref(704, 1));
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} list_add_tail($p6, $p7);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    return;
}



const pd_buf_release: ref;

axiom pd_buf_release == $sub.ref(0, 369776);

procedure pd_buf_release($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pd_buf_release($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} videobuf_vmalloc_free($p1);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(36, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    return;
}



const videobuf_vmalloc_free: ref;

axiom videobuf_vmalloc_free == $sub.ref(0, 370808);

procedure videobuf_vmalloc_free($p0: ref);
  free requires assertsPassed;



implementation videobuf_vmalloc_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 371840);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} __list_add($p0, $p3, $p1);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 372872);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    return;
}



const videobuf_iolock: ref;

axiom videobuf_iolock == $sub.ref(0, 373904);

procedure videobuf_iolock($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_iolock($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 1} true;
    call {:si_unique_call 664} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 665} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const snd_pd_capture_open: ref;

axiom snd_pd_capture_open == $sub.ref(0, 374936);

procedure snd_pd_capture_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10;



implementation snd_pd_capture_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $i9: i32;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(16, 1));
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(416, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p3);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(60, 1));
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 1);
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(60, 1));
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(56, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    $p15 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(32, 1));
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p0);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 1176)), $mul.ref(464, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p2);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 1176)), $mul.ref(480, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.0;
    cmdloc_dummy_var_49 := $M.0;
    call {:si_unique_call 666} cmdloc_dummy_var_50 := $memcpy.i8(cmdloc_dummy_var_48, cmdloc_dummy_var_49, $p19, snd_pd_hw_capture, 80, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_50;
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} vslice_dummy_var_152 := snd_pcm_hw_constraint_integer($p6, 15);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(560, 1));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} vslice_dummy_var_153 := ldv_usb_autopm_get_interface_15($p22);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(184, 1));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} kref_get($p24);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;
}



const snd_pd_pcm_close: ref;

axiom snd_pd_pcm_close == $sub.ref(0, 375968);

procedure snd_pd_pcm_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.8, $M.7, $M.6, assertsPassed, $M.9;



implementation snd_pd_pcm_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var vslice_dummy_var_154: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(16, 1));
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(60, 1));
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i6, 1);
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(60, 1));
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(56, 1));
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 1);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(560, 1));
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} ldv_usb_autopm_put_interface_16($p11);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(184, 1));
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} vslice_dummy_var_154 := ldv_kref_put_13($p12, poseidon_delete);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const snd_pcm_lib_ioctl: ref;

axiom snd_pcm_lib_ioctl == $sub.ref(0, 377000);

procedure snd_pcm_lib_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_lib_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 672} {:cexpr "snd_pcm_lib_ioctl:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 1} true;
    call {:si_unique_call 673} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 674} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const snd_pd_hw_capture_params: ref;

axiom snd_pd_hw_capture_params == $sub.ref(0, 378032);

procedure snd_pd_hw_capture_params($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation snd_pd_hw_capture_params($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i64;
  var $p26: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(416, 1));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $p4 := hw_param_interval_c($p1, 18);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 676} {:cexpr "size"} boogie_si_record_i32($i6);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(840, 1));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i6);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $p19 := vmalloc($i18);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(840, 1));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p19);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(840, 1));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i6);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(856, 1));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p26, $i25);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 12);
    goto $bb5;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(856, 1));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i6);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i64($i12, $i13);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(840, 1));
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} vfree($p17);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb5;
}



const snd_pd_hw_capture_free: ref;

axiom snd_pd_hw_capture_free == $sub.ref(0, 379064);

procedure snd_pd_hw_capture_free($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9;



implementation snd_pd_hw_capture_free($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(16, 1));
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i4 := $M.5;
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 16);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} vslice_dummy_var_156 := audio_buf_free($p3);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} vslice_dummy_var_155 := printk.ref.ref.i32(.str, .str.53, 193);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_pd_prepare: ref;

axiom snd_pd_prepare == $sub.ref(0, 380096);

procedure snd_pd_prepare($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pd_prepare($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const snd_pd_capture_trigger: ref;

axiom snd_pd_capture_trigger == $sub.ref(0, 381128);

procedure snd_pd_capture_trigger($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.22, $M.24, $M.25, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $CurrAddr, $M.11, $M.38, assertsPassed;



implementation snd_pd_capture_trigger($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $i20: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} {:cexpr "snd_pd_capture_trigger:arg:cmd"} boogie_si_record_i32($i1);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(16, 1));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i6 := $M.5;
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 22);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(68, 1));
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    $p21 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(24, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 0);
    $p22 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(40, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 0);
    $p23 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(68, 1));
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 1);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(11016, 1)), $mul.ref(0, 1));
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} vslice_dummy_var_158 := fire_audio_urb($p4);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb21;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i27 == 1;
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb21;

  $bb19:
    assume $i19 == 1;
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb21;

  $bb7:
    assume $i12 == 1;
    $p29 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(68, 1));
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 2);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb21;

  $bb5:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb11;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb15;

  $bb12:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb11;

  $bb17:
    assume $i16 == 1;
    $p30 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(68, 1));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 0);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb21;

  $bb1:
    assume $i7 == 1;
    $p8 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(68, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} vslice_dummy_var_157 := printk.ref.ref.i32.i32.i32(.str.54, .str.55, 295, $i1, $i9);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_pd_capture_pointer: ref;

axiom snd_pd_capture_pointer == $sub.ref(0, 382160);

procedure snd_pd_capture_pointer($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation snd_pd_capture_pointer($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(16, 1));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(40, 1));
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const snd_pcm_pd_get_page: ref;

axiom snd_pcm_pd_get_page == $sub.ref(0, 383192);

procedure snd_pcm_pd_get_page($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation snd_pcm_pd_get_page($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} {:cexpr "snd_pcm_pd_get_page:arg:offset"} boogie_si_record_i64($i1);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(416, 1));
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(840, 1));
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($i1, 1));
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $p7 := vmalloc_to_page($p6);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const vmalloc_to_page: ref;

axiom vmalloc_to_page == $sub.ref(0, 384224);

procedure vmalloc_to_page($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vmalloc_to_page($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $p1 := external_alloc();
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const hw_param_interval_c: ref;

axiom hw_param_interval_c == $sub.ref(0, 385256);

procedure hw_param_interval_c($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation hw_param_interval_c($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} {:cexpr "hw_param_interval_c:arg:var"} boogie_si_record_i32($i1);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(260, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 8));
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 12));
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const vfree: ref;

axiom vfree == $sub.ref(0, 386288);

procedure vfree($p0: ref);
  free requires assertsPassed;



implementation vfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    return;
}



const vmalloc: ref;

axiom vmalloc == $sub.ref(0, 387320);

procedure vmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation vmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} {:cexpr "vmalloc:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $p1 := external_alloc();
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_usb_autopm_put_interface_16: ref;

axiom ldv_usb_autopm_put_interface_16 == $sub.ref(0, 388352);

procedure ldv_usb_autopm_put_interface_16($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_usb_autopm_put_interface_16($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} ldv_put_interface();
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const snd_pcm_hw_constraint_integer: ref;

axiom snd_pcm_hw_constraint_integer == $sub.ref(0, 389384);

procedure snd_pcm_hw_constraint_integer($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_hw_constraint_integer($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 691} {:cexpr "snd_pcm_hw_constraint_integer:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 1} true;
    call {:si_unique_call 692} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 693} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_usb_autopm_get_interface_15: ref;

axiom ldv_usb_autopm_get_interface_15 == $sub.ref(0, 390416);

procedure ldv_usb_autopm_get_interface_15($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_usb_autopm_get_interface_15($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $i1 := ldv_get_interface($p0);
    call {:si_unique_call 695} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const poseidon_fe_release: ref;

axiom poseidon_fe_release == $sub.ref(0, 391448);

procedure poseidon_fe_release($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation poseidon_fe_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(776, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(11000, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(11008, 1));
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    return;
}



const poseidon_fe_init: ref;

axiom poseidon_fe_init == $sub.ref(0, 392480);

procedure poseidon_fe_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation poseidon_fe_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(776, 1));
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(11000, 1));
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, pm_dvb_suspend);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(11008, 1));
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, pm_dvb_resume);
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(3344, 1));
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_51 := $M.0;
    call {:si_unique_call 696} cmdloc_dummy_var_52 := $memset.i8(cmdloc_dummy_var_51, $p10, 0, 456, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_52;
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const poseidon_fe_sleep: ref;

axiom poseidon_fe_sleep == $sub.ref(0, 393512);

procedure poseidon_fe_sleep($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation poseidon_fe_sleep($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const poseidon_set_fe: ref;

axiom poseidon_set_fe == $sub.ref(0, 394544);

procedure poseidon_set_fe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation poseidon_set_fe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i16: i32;
  var $i17: i32;
  var $i33: i32;
  var $i15: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $i69: i64;
  var $p70: ref;
  var $i71: i32;
  var $i47: i32;
  var $p72: ref;
  var $i11: i32;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(816, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(776, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(6888, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(11016, 1)), $mul.ref(0, 1));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 1);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} mutex_lock_nested($p12, 0);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i13 := $M.32;
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32(0, $i13);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 1);
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(816, 1)), $mul.ref(4, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $i36 := check_scan_ok($i35, $i15, $p6);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 702} {:cexpr "tmp"} boogie_si_record_i8($i37);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i71 := 0;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i47 := $i71;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} mutex_unlock($p72);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i11 := $i47;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb16:
    assume $i38 == 1;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(816, 1)), $mul.ref(4, 1));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i41 := $udiv.i32($i40, 1000);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $i42 := send_set_req($p5, 18, $i41, $p1);
    call {:si_unique_call 704} {:cexpr "ret"} boogie_si_record_i32($i42);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p1);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i42, $i43);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $i48 := send_set_req($p5, 50, $i15, $p1);
    call {:si_unique_call 708} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p1);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i48, $i49);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $i53 := send_set_req($p5, 67, 0, $p1);
    call {:si_unique_call 711} {:cexpr "ret"} boogie_si_record_i32($i53);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p1);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i53, $i54);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i58 := $ugt.i64(456, 63);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i58 == 1);
    $p62 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(3344, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p2);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_56 := $M.0;
    cmdloc_dummy_var_57 := $M.0;
    call {:si_unique_call 714} cmdloc_dummy_var_58 := $memcpy.i8(cmdloc_dummy_var_56, cmdloc_dummy_var_57, $p63, $p64, 456, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_58;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    $p65 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(4084, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i15);
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(816, 1)), $mul.ref(4, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    $p68 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(4080, 1));
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i67);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, jiffies);
    $p70 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(4088, 1));
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p70, $i69);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i71 := $i53;
    goto $bb31;

  $bb28:
    assume $i58 == 1;
    $p59 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(3344, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p2);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.0;
    cmdloc_dummy_var_54 := $M.0;
    call {:si_unique_call 713} cmdloc_dummy_var_55 := $memcpy.i8(cmdloc_dummy_var_53, cmdloc_dummy_var_54, $p60, $p61, 456, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_55;
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i56 == 1;
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} vslice_dummy_var_161 := printk.ref.ref.i32(.str.61, .str.62, 252);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i47 := $i53;
    goto $bb20;

  $bb22:
    assume $i51 == 1;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} vslice_dummy_var_160 := printk.ref.ref.i32(.str.61, .str.62, 246);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i47 := $i48;
    goto $bb20;

  $bb18:
    assume $i45 == 1;
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} vslice_dummy_var_159 := printk.ref.ref.i32(.str.61, .str.62, 239);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i47 := $i42;
    goto $bb20;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i16, $i17 := $sub.i32(0, 1), 0;
    goto $bb8;

  $bb8:
    call $p18, $i19, $i20, $p22, $i23, $i24, $i25, $p27, $i28, $i29, $i30, $i31, $i32, $i16, $i17, $i33 := poseidon_set_fe_loop_$bb8($p0, $p18, $i19, $i20, $p22, $i23, $i24, $i25, $p27, $i28, $i29, $i30, $i31, $i32, $i16, $i17, $i33);
    goto $bb8_last;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(816, 1)), $mul.ref(32, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i17);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref($i20, 8)), $mul.ref(1, 4));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.33, $p22);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i19, $i23);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i16;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i17, 1);
    call {:si_unique_call 700} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i31 := $M.32;
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i30, $i31);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i33 := $i29;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i15 := $i33;
    goto $bb7;

  $bb13:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i16, $i17 := $i29, $i30;
    goto $bb13_dummy;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i17);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref($i25, 8)), $mul.ref(0, 4));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.33, $p27);
    call {:si_unique_call 699} {:cexpr "bandwidth"} boogie_si_record_i32($i28);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb12;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 16);
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3932;
}



const poseidon_fe_get_tune_settings: ref;

axiom poseidon_fe_get_tune_settings == $sub.ref(0, 395576);

procedure poseidon_fe_get_tune_settings($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation poseidon_fe_get_tune_settings($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 1000);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const poseidon_get_fe: ref;

axiom poseidon_get_fe == $sub.ref(0, 396608);

procedure poseidon_get_fe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation poseidon_get_fe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(816, 1));
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(776, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i64(456, 63);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    $p11 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(3344, 1));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_62 := $M.0;
    cmdloc_dummy_var_63 := $M.0;
    call {:si_unique_call 716} cmdloc_dummy_var_64 := $memcpy.i8(cmdloc_dummy_var_62, cmdloc_dummy_var_63, $p10, $p12, 456, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_64;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    $p8 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(3344, 1));
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_59 := $M.0;
    cmdloc_dummy_var_60 := $M.0;
    call {:si_unique_call 715} cmdloc_dummy_var_61 := $memcpy.i8(cmdloc_dummy_var_59, cmdloc_dummy_var_60, $p7, $p9, 456, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_61;
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const poseidon_read_status: ref;

axiom poseidon_read_status == $sub.ref(0, 397640);

procedure poseidon_read_status($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation poseidon_read_status($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $i15: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(776, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(11016, 1)), $mul.ref(0, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 1);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} mutex_lock_nested($p16, 0);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p3);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $i18 := send_get_req($p6, 69, 8, $p17, $p2, 16);
    call {:si_unique_call 721} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p2);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i18, $i19);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i23 := $M.5;
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i34 == 1);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i37 == 1);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(6888, 1));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $i44 := fw_delay_overflow($p43);
    call {:si_unique_call 726} {:cexpr "tmp"} boogie_si_record_i32($i44);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} mutex_unlock($p48);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i15 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb20:
    assume $i45 == 1;
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p1);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i46, 32);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i47);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p1);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i41, 31);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i42);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb15;

  $bb12:
    assume $i34 == 1;
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} vslice_dummy_var_163 := printk.ref.ref.i32.i32.i32.i32(.str.65, .str.64, 340, $i26, $i28, $i30);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} vslice_dummy_var_162 := printk.ref.ref.i32(.str.63, .str.64, 334);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 16);
    goto $bb3;
}



const poseidon_read_ber: ref;

axiom poseidon_read_ber == $sub.ref(0, 398672);

procedure poseidon_read_ber($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation poseidon_read_ber($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(776, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} mutex_lock_nested($p8, 0);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i10 := send_get_req($p6, 72, 0, $p9, $p3, 4);
    call {:si_unique_call 731} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p3);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i10, $i11);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i15);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} mutex_unlock($p16);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const poseidon_read_signal_strength: ref;

axiom poseidon_read_signal_strength == $sub.ref(0, 399704);

procedure poseidon_read_signal_strength($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation poseidon_read_signal_strength($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i16;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(776, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} mutex_lock_nested($p11, 0);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $i13 := send_get_req($p6, 69, 8, $p12, $p3, 16);
    call {:si_unique_call 737} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p3);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i13, $i14);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i19 == 1);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p1, $i28);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} mutex_unlock($p29);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb10;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p1, $sub.i16(0, 1));
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb6;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const poseidon_read_snr: ref;

axiom poseidon_read_snr == $sub.ref(0, 400736);

procedure poseidon_read_snr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation poseidon_read_snr($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const poseidon_read_unc_blocks: ref;

axiom poseidon_read_unc_blocks == $sub.ref(0, 401768);

procedure poseidon_read_unc_blocks($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation poseidon_read_unc_blocks($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const poseidon_ts_bus_ctrl: ref;

axiom poseidon_ts_bus_ctrl == $sub.ref(0, 402800);

procedure poseidon_ts_bus_ctrl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.34, $M.8, $M.7, $M.6, $CurrAddr, assertsPassed, $M.9;



implementation poseidon_ts_bus_ctrl($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i16: i32;
  var $p43: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $i44: i32;
  var $i7: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} {:cexpr "poseidon_ts_bus_ctrl:arg:acquire"} boogie_si_record_i32($i1);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(776, 1));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref($sub.ref(0, 264), 4096));
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i1, 0);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} dvb_stop_streaming($p9);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 264), 4096)), $mul.ref(3280, 1));
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $i46 := atomic_dec_and_test($p45);
    call {:si_unique_call 743} {:cexpr "tmp"} boogie_si_record_i32($i46);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(184, 1));
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} vslice_dummy_var_165 := ldv_kref_put_13($p54, poseidon_delete);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(560, 1));
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} ldv_usb_autopm_put_interface_24($p57);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i7 := $i44;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i47 == 1;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} mutex_lock_nested($p48, 0);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, $sub.i32(0, 5));
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i51);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} mutex_unlock($p53);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} mutex_lock_nested($p11, 0);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 128);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(560, 1));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} vslice_dummy_var_164 := ldv_usb_autopm_get_interface_21($p25);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 264), 4096)), $mul.ref(3280, 1));
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} atomic_inc($p41);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(184, 1));
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} kref_get($p42);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i16 := $i40;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} mutex_unlock($p43);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i44 := $i16;
    goto $bb23;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $i30 := poseidon_check_mode_dvbt($p4);
    call {:si_unique_call 747} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, 4);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i36);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 264), 4096)), $mul.ref(4084, 1));
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 0);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 264), 4096)), $mul.ref(4080, 1));
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 0);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i40 := $i30;
    goto $bb22;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(560, 1));
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} ldv_usb_autopm_put_interface_22($p33);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i16 := $i30;
    goto $bb9;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 4);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb13;

  $bb14:
    assume $i23 == 1;
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 16);
    goto $bb9;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 19);
    goto $bb9;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;
}



const ldv_usb_autopm_get_interface_21: ref;

axiom ldv_usb_autopm_get_interface_21 == $sub.ref(0, 403832);

procedure ldv_usb_autopm_get_interface_21($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_usb_autopm_get_interface_21($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $i1 := ldv_get_interface($p0);
    call {:si_unique_call 756} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const poseidon_check_mode_dvbt: ref;

axiom poseidon_check_mode_dvbt == $sub.ref(0, 404864);

procedure poseidon_check_mode_dvbt($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.34, $CurrAddr;



implementation poseidon_check_mode_dvbt($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i12: i32;
  var vslice_dummy_var_166: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $M.34 := $store.i64($M.34, $p2, 1);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $p3 := get_current();
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.34, $p2);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 9640)), $mul.ref(0, 1));
    call {:si_unique_call 760} $i6 := devirtbounce(0, $p5, $i4, $p5);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $M.34 := $store.i64($M.34, $p2, $i6);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} vslice_dummy_var_166 := schedule_timeout(62);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(552, 1));
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $i10 := usb_set_interface($p9, 0, 2);
    call {:si_unique_call 763} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $i13 := set_tuner_mode($p0, 8);
    call {:si_unique_call 765} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i15 := send_set_req($p0, 19, 1, $p1);
    call {:si_unique_call 767} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p1);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i15, $i16);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i12 := $i15;
    goto $bb4;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i12 := $i13;
    goto $bb4;

  $bb2:
    assume $i11 == 1;
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb4;
}



const ldv_usb_autopm_put_interface_22: ref;

axiom ldv_usb_autopm_put_interface_22 == $sub.ref(0, 405896);

procedure ldv_usb_autopm_put_interface_22($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_usb_autopm_put_interface_22($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} ldv_put_interface();
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 406928);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 769} devirtbounce.4(0, $p1, $p1);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    return;
}



const dvb_stop_streaming: ref;

axiom dvb_stop_streaming == $sub.ref(0, 407960);

procedure dvb_stop_streaming($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation dvb_stop_streaming($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p45: ref;
  var $p46: ref;
  var vslice_dummy_var_167: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4096)), $mul.ref(3328, 1));
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} mutex_lock_nested($p4, 0);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4096)), $mul.ref(3288, 1));
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} mutex_unlock($p22);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4096)), $mul.ref(3288, 1));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4096)), $mul.ref(3296, 1)), $mul.ref(0, 8));
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4096)), $mul.ref(3296, 1)), $mul.ref(1, 8));
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4096)), $mul.ref(3296, 1)), $mul.ref(2, 8));
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4096)), $mul.ref(3296, 1)), $mul.ref(3, 8));
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $i17 := send_set_req($p3, 68, 2, $p1);
    call {:si_unique_call 774} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p1);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i17, $i18);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} vslice_dummy_var_167 := printk.ref.ref.i32(.str.14, .str.15, 555);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb22:
    assume $i43 == 1;
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4096)), $mul.ref(3296, 1)), $mul.ref(3, 8));
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} usb_kill_urb($p46);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume $i35 == 1;
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4096)), $mul.ref(3296, 1)), $mul.ref(2, 8));
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} usb_kill_urb($p38);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i27 == 1;
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4096)), $mul.ref(3296, 1)), $mul.ref(1, 8));
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} usb_kill_urb($p30);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4096)), $mul.ref(3296, 1)), $mul.ref(0, 8));
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} usb_kill_urb($p16);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 408992);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 781} devirtbounce.5(0, $p2, $p1, $p2);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.35, $p1);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_usb_autopm_put_interface_24: ref;

axiom ldv_usb_autopm_put_interface_24 == $sub.ref(0, 410024);

procedure ldv_usb_autopm_put_interface_24($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_usb_autopm_put_interface_24($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} ldv_put_interface();
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const fw_delay_overflow: ref;

axiom fw_delay_overflow == $sub.ref(0, 411056);

procedure fw_delay_overflow($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fw_delay_overflow($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i64;
  var $i7: i64;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i1 := $load.i64($M.0, jiffies);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4096)), $mul.ref(4088, 1));
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i4 := $sub.i64($i1, $i3);
    call {:si_unique_call 783} {:cexpr "nl"} boogie_si_record_i64($i4);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i5 := $slt.i64($i4, 0);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i7 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $i8 := jiffies_to_msecs($i7);
    call {:si_unique_call 785} {:cexpr "msec"} boogie_si_record_i32($i8);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i32($i8, 800);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64(0, $i4);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const jiffies_to_msecs: ref;

axiom jiffies_to_msecs == $sub.ref(0, 412088);

procedure jiffies_to_msecs($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation jiffies_to_msecs($i0: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 786} {:cexpr "jiffies_to_msecs:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 1} true;
    call {:si_unique_call 787} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 788} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const check_scan_ok: ref;

axiom check_scan_ok == $sub.ref(0, 413120);

procedure check_scan_ok($i0: i32, $i1: i32, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation check_scan_ok($i0: i32, $i1: i32, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $i18: i32;
  var $i19: i1;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} {:cexpr "check_scan_ok:arg:freq"} boogie_si_record_i32($i0);
    call {:si_unique_call 790} {:cexpr "check_scan_ok:arg:bandwidth"} boogie_si_record_i32($i1);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 0);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 4096)), $mul.ref(4080, 1));
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, $i0);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 4096)), $mul.ref(4084, 1));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, $i1);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, jiffies);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 4096)), $mul.ref(4088, 1));
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64($i11, $i13);
    call {:si_unique_call 791} {:cexpr "nl"} boogie_si_record_i64($i14);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i15 := $slt.i64($i14, 0);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i17 := $i14;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $i18 := jiffies_to_msecs($i17);
    call {:si_unique_call 793} {:cexpr "msec"} boogie_si_record_i32($i18);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i32($i18, 15000);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i4 := $i19;
    goto $bb3;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i16 := $sub.i64(0, $i14);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb12;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const pm_dvb_suspend: ref;

axiom pm_dvb_suspend == $sub.ref(0, 414152);

procedure pm_dvb_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9;



implementation pm_dvb_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1));
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} dvb_stop_streaming($p1);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} dvb_urb_cleanup($p1);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} msleep(500);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const pm_dvb_resume: ref;

axiom pm_dvb_resume == $sub.ref(0, 415184);

procedure pm_dvb_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.34, $CurrAddr, $M.22, $M.24, $M.9, $M.27, $M.28, $M.29, $M.26, $M.21, $M.25, $M.40, $M.10, $M.1, $M.2, $M.36, $M.8, $M.7, $M.6, $M.11, $M.38, assertsPassed;



implementation pm_dvb_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} vslice_dummy_var_168 := poseidon_check_mode_dvbt($p0);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} msleep(300);
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(264, 1));
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} vslice_dummy_var_169 := poseidon_set_fe($p3);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} vslice_dummy_var_170 := dvb_start_streaming($p1);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 416216);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const dvb_start_streaming: ref;

axiom dvb_start_streaming == $sub.ref(0, 417248);

procedure dvb_start_streaming($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.22, $M.24, $CurrAddr, $M.9, $M.27, $M.28, $M.29, $M.26, $M.21, $M.25, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $M.11, $M.38, assertsPassed;



implementation dvb_start_streaming($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i22: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i30: i32;
  var $i31: i1;
  var $i21: i32;
  var $i32: i32;
  var $i33: i32;
  var $i17: i32;
  var $p34: ref;
  var $i8: i32;
  var vslice_dummy_var_171: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4096)), $mul.ref(3328, 1));
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 128);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} mutex_lock_nested($p9, 0);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 4096)), $mul.ref(3288, 1));
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i17 := $i33;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} mutex_unlock($p34);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i8 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $i13 := send_set_req($p3, 68, 1, $p1);
    call {:si_unique_call 804} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p1);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i13, $i14);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $i18 := dvb_urb_init($p0);
    call {:si_unique_call 807} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 4096)), $mul.ref(3288, 1));
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 1);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb14;

  $bb14:
    call $i22, $p24, $p25, $i26, $i27, $i28, $i30, $i31, $i21, $i32 := dvb_start_streaming_loop_$bb14($p0, $i22, $p24, $p25, $i26, $i27, $i28, $i30, $i31, $i21, $i32);
    goto $bb14_last;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4096)), $mul.ref(3296, 1)), $mul.ref($i22, 8));
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $i26 := ldv_usb_submit_urb_26($p25, 208);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 809} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i28 := $i26;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i21, 1);
    call {:si_unique_call 811} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i31 := $sle.i32($i30, 3);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i32 := $i26;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb22;

  $bb19:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i21 := $i30;
    goto $bb19_dummy;

  $bb16:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} vslice_dummy_var_171 := printk.ref.ref.i32.i32(.str.56, .str.57, 528, $i28);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i17 := $i28;
    goto $bb9;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i17 := $i18;
    goto $bb9;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i17 := $i13;
    goto $bb9;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4495;
}



const dvb_urb_init: ref;

axiom dvb_urb_init == $sub.ref(0, 418280);

procedure dvb_urb_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.25, $M.24;



implementation dvb_urb_init($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var vslice_dummy_var_172: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4096)), $mul.ref(3296, 1)), $mul.ref(0, 8));
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 4096)), $mul.ref(3296, 1));
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4096)), $mul.ref(3328, 1));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 11112)), $mul.ref(552, 1));
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 4096)), $mul.ref(3336, 1));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p0);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} vslice_dummy_var_172 := alloc_bulk_urbs_generic($p7, 4, $p11, $i15, 8192, 208, dvb_urb_irq, $p16);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_submit_urb_26: ref;

axiom ldv_usb_submit_urb_26 == $sub.ref(0, 419312);

procedure ldv_usb_submit_urb_26($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.24, $M.0, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $CurrAddr, $M.11, $M.38, $M.9, $M.25, assertsPassed;



implementation ldv_usb_submit_urb_26($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} {:cexpr "ldv_usb_submit_urb_26:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i2 := ldv_submit_urb($p0);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 815} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const dvb_urb_irq: ref;

axiom dvb_urb_irq == $sub.ref(0, 420344);

procedure dvb_urb_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.22, $M.24, $M.0, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $CurrAddr, $M.11, $M.38, $M.9, $M.25, assertsPassed;



implementation dvb_urb_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i1;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i64;
  var $i36: i32;
  var $i37: i1;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i64;
  var $i44: i32;
  var $i45: i1;
  var $i29: i32;
  var $i46: i32;
  var $i47: i1;
  var vslice_dummy_var_173: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 816} {:cexpr "len"} boogie_si_record_i32($i5);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 4096)), $mul.ref(2328, 1));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 4096)), $mul.ref(3288, 1));
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, $i5);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i18 == 1);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i5, $sub.i32(0, 4));
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i23, $i24);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $i46 := ldv_usb_submit_urb_25($p0, 32);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 818} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb33:
    assume $i47 == 1;
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} vslice_dummy_var_173 := printk.ref.ref.i32.i32(.str.59, .str.60, 479, $i46);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i25 == 1;
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32(456, $i5);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb17:
    assume $i28 == 1;
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i29 := 456;
    goto $bb20;

  $bb20:
    call $i30, $p31, $i32, $i33, $i34, $i44, $i45, $i29 := dvb_urb_irq_loop_$bb20($i5, $p27, $i30, $p31, $i32, $i33, $i34, $i44, $i45, $i29);
    goto $bb20_last;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p27, $mul.ref($i30, 1));
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $i32 := strncmp($p31, .str.58, 4);
    call {:si_unique_call 821} {:cexpr "tmp"} boogie_si_record_i32($i32);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i34 := $i29;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i29, 512);
    call {:si_unique_call 825} {:cexpr "offset"} boogie_si_record_i32($i44);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, $i5);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i45 == 1);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i29 := $i44;
    goto $bb29_dummy;

  $bb22:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} dvb_dmx_swfilter($p6, $p27, $i35);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i34, 56);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, $i5);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i37 == 1;
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i34);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 52);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p27, $mul.ref($i39, 1));
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($sub.i32(0, 56), $i34);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, $i5);
    call {:si_unique_call 823} {:cexpr "len"} boogie_si_record_i32($i42);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} dvb_dmx_swfilter($p6, $p40, $i43);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb12:
    assume $i18 == 1;
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i5);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} dvb_dmx_swfilter($p6, $p20, $i21);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, $sub.i32(0, 71));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb29_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4583;
}



const dvb_dmx_swfilter: ref;

axiom dvb_dmx_swfilter == $sub.ref(0, 421376);

procedure dvb_dmx_swfilter($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation dvb_dmx_swfilter($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} {:cexpr "dvb_dmx_swfilter:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_25: ref;

axiom ldv_usb_submit_urb_25 == $sub.ref(0, 422408);

procedure ldv_usb_submit_urb_25($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.24, $M.0, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $CurrAddr, $M.11, $M.38, $M.9, $M.25, assertsPassed;



implementation ldv_usb_submit_urb_25($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} {:cexpr "ldv_usb_submit_urb_25:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $i2 := ldv_submit_urb($p0);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 830} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const v4l2_ctrl_poll: ref;

axiom v4l2_ctrl_poll == $sub.ref(0, 423440);

procedure v4l2_ctrl_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 1} true;
    call {:si_unique_call 831} $i2 := __VERIFIER_nondet_uint();
    call {:si_unique_call 832} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i2);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const poseidon_fm_open: ref;

axiom poseidon_fm_open == $sub.ref(0, 424472);

procedure poseidon_fm_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.36, $CurrAddr, assertsPassed;



implementation poseidon_fm_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i8: i32;
  var $p43: ref;
  var vslice_dummy_var_174: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $p1 := video_drvdata($p0);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} mutex_lock_nested($p3, 0);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 128);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $i16 := v4l2_fh_open($p0);
    call {:si_unique_call 837} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 11112)), $mul.ref(560, 1));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} vslice_dummy_var_174 := ldv_usb_autopm_get_interface_28($p19);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i41 := $i16;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 11112)), $mul.ref(184, 1));
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} kref_get($p42);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i8 := $i41;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} mutex_unlock($p43);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb14:
    assume $i23 == 1;
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 11112)), $mul.ref(4816, 1)), $mul.ref(16, 1));
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 11112)), $mul.ref(4816, 1)), $mul.ref(8, 1));
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i32 := $M.5;
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} set_debug_mode($p25, $i32);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $i33 := poseidon_check_mode_radio($p2);
    call {:si_unique_call 841} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i38, 2);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i41 := $i33;
    goto $bb22;

  $bb19:
    assume $i34 == 1;
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 11112)), $mul.ref(560, 1));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} ldv_usb_autopm_put_interface_29($p36);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i8 := $i33;
    goto $bb3;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i29 == 1;
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 11112)), $mul.ref(4816, 1)), $mul.ref(8, 1));
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 32);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i8 := $i16;
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 2);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb7;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 16);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;
}



const poseidon_fm_close: ref;

axiom poseidon_fm_close == $sub.ref(0, 425504);

procedure poseidon_fm_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $CurrAddr, $M.8, $M.7, $M.6, assertsPassed, $M.9;



implementation poseidon_fm_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i27: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $p2 := video_drvdata($p0);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} mutex_lock_nested($p5, 0);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $i6 := v4l2_fh_is_singular_file($p0);
    call {:si_unique_call 848} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(4816, 1)), $mul.ref(4, 1));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(560, 1));
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} ldv_usb_autopm_put_interface_30($p23);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} mutex_unlock($p24);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(184, 1));
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} vslice_dummy_var_176 := ldv_kref_put_13($p25, poseidon_delete);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $i27 := v4l2_fh_release($p0);
    call {:si_unique_call 854} {:cexpr "tmp___1"} boogie_si_record_i32($i27);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(10992, 1));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p0);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i17, $i18);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb6;

  $bb7:
    assume $i19 == 1;
    $p20 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(4816, 1)), $mul.ref(4, 1));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 0);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} vslice_dummy_var_175 := send_set_req($p3, 68, 2, $p1);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, $sub.i32(0, 3));
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const video_drvdata: ref;

axiom video_drvdata == $sub.ref(0, 426536);

procedure video_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $p1 := video_devdata($p0);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $p2 := video_get_drvdata($p1);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const v4l2_fh_is_singular_file: ref;

axiom v4l2_fh_is_singular_file == $sub.ref(0, 427568);

procedure v4l2_fh_is_singular_file($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_fh_is_singular_file($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $i4 := v4l2_fh_is_singular($p3);
    call {:si_unique_call 858} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_usb_autopm_put_interface_30: ref;

axiom ldv_usb_autopm_put_interface_30 == $sub.ref(0, 428600);

procedure ldv_usb_autopm_put_interface_30($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_usb_autopm_put_interface_30($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} ldv_put_interface();
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const v4l2_fh_release: ref;

axiom v4l2_fh_release == $sub.ref(0, 429632);

procedure v4l2_fh_release($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_fh_release($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 1} true;
    call {:si_unique_call 860} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 861} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const v4l2_fh_is_singular: ref;

axiom v4l2_fh_is_singular == $sub.ref(0, 430664);

procedure v4l2_fh_is_singular($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_fh_is_singular($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 1} true;
    call {:si_unique_call 862} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 863} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const v4l2_fh_open: ref;

axiom v4l2_fh_open == $sub.ref(0, 431696);

procedure v4l2_fh_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_fh_open($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 1} true;
    call {:si_unique_call 864} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 865} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_usb_autopm_get_interface_28: ref;

axiom ldv_usb_autopm_get_interface_28 == $sub.ref(0, 432728);

procedure ldv_usb_autopm_get_interface_28($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_usb_autopm_get_interface_28($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $i1 := ldv_get_interface($p0);
    call {:si_unique_call 867} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const poseidon_check_mode_radio: ref;

axiom poseidon_check_mode_radio == $sub.ref(0, 433760);

procedure poseidon_check_mode_radio($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.36, $M.0, $CurrAddr;



implementation poseidon_check_mode_radio($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i12: i32;
  var vslice_dummy_var_177: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $M.36 := $store.i64($M.36, $p2, 1);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $p3 := get_current();
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.36, $p2);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 9640)), $mul.ref(0, 1));
    call {:si_unique_call 871} $i6 := devirtbounce(0, $p5, $i4, $p5);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $M.36 := $store.i64($M.36, $p2, $i6);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} vslice_dummy_var_177 := schedule_timeout(125);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(552, 1));
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i10 := usb_set_interface($p9, 0, 2);
    call {:si_unique_call 874} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} $i13 := set_tuner_mode($p0, 4);
    call {:si_unique_call 876} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $i15 := send_set_req($p0, 19, 1, $p1);
    call {:si_unique_call 878} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4816, 1)), $mul.ref(8, 1));
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $i19 := send_set_req($p0, 44, $i18, $p1);
    call {:si_unique_call 880} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $i20 := send_set_req($p0, 42, 2, $p1);
    call {:si_unique_call 882} {:cexpr "tmp___3"} boogie_si_record_i32($i20);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i20, $i19);
    call {:si_unique_call 883} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $i22 := send_set_req($p0, 41, 2, $p1);
    call {:si_unique_call 885} {:cexpr "tmp___4"} boogie_si_record_i32($i22);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i22, $i21);
    call {:si_unique_call 886} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $i24 := send_set_req($p0, 18, 76000000, $p1);
    call {:si_unique_call 888} {:cexpr "tmp___5"} boogie_si_record_i32($i24);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, $i23);
    call {:si_unique_call 889} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i12 := $i25;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i12 := $i13;
    goto $bb4;

  $bb2:
    assume $i11 == 1;
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb4;
}



const ldv_usb_autopm_put_interface_29: ref;

axiom ldv_usb_autopm_put_interface_29 == $sub.ref(0, 434792);

procedure ldv_usb_autopm_put_interface_29($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_usb_autopm_put_interface_29($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} ldv_put_interface();
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const vidioc_querycap___0: ref;

axiom vidioc_querycap___0 == $sub.ref(0, 435824);

procedure vidioc_querycap___0($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_querycap___0($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var vslice_dummy_var_178: i64;
  var vslice_dummy_var_179: i64;
  var vslice_dummy_var_180: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} $p3 := video_drvdata($p0);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} vslice_dummy_var_178 := strlcpy($p6, .str.68, 16);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} vslice_dummy_var_179 := strlcpy($p9, .str.29, 32);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(552, 1));
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} vslice_dummy_var_180 := usb_make_path($p12, $p14, 32);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 327680);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, $sub.i32(0, 2063466479));
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(84, 1));
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const tlg_fm_vidioc_g_tuner: ref;

axiom tlg_fm_vidioc_g_tuner == $sub.ref(0, 436856);

procedure tlg_fm_vidioc_g_tuner($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.37, $CurrAddr;



implementation tlg_fm_vidioc_g_tuner($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i35: i32;
  var $i36: i32;
  var $i47: i32;
  var $i48: i1;
  var $i50: i1;
  var $i51: i32;
  var $i49: i32;
  var $i46: i32;
  var $i34: i32;
  var $i52: i32;
  var $p53: ref;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $i16: i32;
  var vslice_dummy_var_181: i64;
  var vslice_dummy_var_182: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $p3 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $p6 := video_drvdata($p0);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(0, 1));
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(36, 1));
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 1);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(40, 1));
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 17);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(44, 1));
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 1216000);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(48, 1));
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 1728000);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(52, 1));
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 2);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(56, 1));
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 1);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(60, 1));
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(64, 1));
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 0);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(4, 1));
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} vslice_dummy_var_181 := strlcpy($p26, .str.67, 32);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p7, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} mutex_lock_nested($p28, 0);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p3);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $i30 := send_get_req($p7, 69, 4, $p29, $p4, 20);
    call {:si_unique_call 902} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i34 := $i30;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i52 := $i34;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p7, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} mutex_unlock($p53);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i52, 0);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i54 == 1);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p4);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i56 == 1);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i60 == 1);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i70 := $mul.i32($i69, 255);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i71 := $udiv.i32($i70, 10);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i72 := $shl.i32($i71, 8);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(60, 1));
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i72);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 0);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb30;

  $bb31:
    assume $i66 == 1;
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(60, 1));
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 65535);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb26;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(60, 1));
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, 0);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb20;

  $bb5:
    assume $i33 == 1;
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i35, $i36 := 5, $i30;
    goto $bb8;

  $bb8:
    call $p37, $i38, $p39, $i40, $p42, $i43, $i44, $i45, $i35, $i36, $i47, $i48, $i50, $i51, $i49, $i46, vslice_dummy_var_182 := tlg_fm_vidioc_g_tuner_loop_$bb8($p3, $p4, $p5, $p7, $p31, $p37, $i38, $p39, $i40, $p42, $i43, $i44, $i45, $i35, $i36, $i47, $i48, $i50, $i51, $i49, $i46, vslice_dummy_var_182);
    goto $bb8_last;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32($i35, 1);
    call {:si_unique_call 903} {:cexpr "count"} boogie_si_record_i32($i47);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i35, 0);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i49 := $i36;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i52 := $i49;
    goto $bb17;

  $bb13:
    assume $i48 == 1;
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i36, 0);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i51 := $i36;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb17;

  $bb15:
    assume $i50 == 1;
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.37 := $store.i64($M.37, $p5, 1);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $p37 := get_current();
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.37, $p5);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p37, $mul.ref(0, 9640)), $mul.ref(0, 1));
    call {:si_unique_call 905} $i40 := devirtbounce(0, $p39, $i38, $p39);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $M.37 := $store.i64($M.37, $p5, $i40);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} vslice_dummy_var_182 := schedule_timeout(250);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p3);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $i43 := send_get_req($p7, 69, 4, $p42, $p4, 20);
    call {:si_unique_call 908} {:cexpr "ret"} boogie_si_record_i32($i43);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p31);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i46 := $i43;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i34 := $i46;
    goto $bb7;

  $bb11:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i35, $i36 := $i47, $i43;
    goto $bb11_dummy;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4864;
}



const vidioc_s_tuner___0: ref;

axiom vidioc_s_tuner___0 == $sub.ref(0, 437888);

procedure vidioc_s_tuner___0($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_s_tuner___0($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(0, 1));
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i6 := (if $i5 == 1 then $sub.i32(0, 22) else 0);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const fm_get_freq: ref;

axiom fm_get_freq == $sub.ref(0, 438920);

procedure fm_get_freq($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fm_get_freq($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $p3 := video_drvdata($p0);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(4816, 1)), $mul.ref(0, 1));
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const fm_set_freq: ref;

axiom fm_set_freq == $sub.ref(0, 439952);

procedure fm_set_freq($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.38, $CurrAddr;



implementation fm_set_freq($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $p3 := video_drvdata($p0);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(10992, 1));
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p0);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(11000, 1));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, pm_fm_suspend);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(11008, 1));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, pm_fm_resume);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $i16 := set_frequency___0($p4, $i15);
    call {:si_unique_call 913} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i8 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const v4l2_ctrl_subscribe_event: ref;

axiom v4l2_ctrl_subscribe_event == $sub.ref(0, 440984);

procedure v4l2_ctrl_subscribe_event($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_subscribe_event($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 1} true;
    call {:si_unique_call 914} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 915} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const v4l2_event_unsubscribe: ref;

axiom v4l2_event_unsubscribe == $sub.ref(0, 442016);

procedure v4l2_event_unsubscribe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_event_unsubscribe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 1} true;
    call {:si_unique_call 916} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 917} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pm_fm_suspend: ref;

axiom pm_fm_suspend == $sub.ref(0, 443048);

procedure pm_fm_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9;



implementation pm_fm_suspend($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $p6: ref;
  var $p7: ref;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i1 := $M.5;
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 16);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} vslice_dummy_var_184 := pm_alsa_suspend($p0);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(552, 1));
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} vslice_dummy_var_185 := usb_set_interface($p7, 0, 0);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} msleep(300);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} vslice_dummy_var_183 := printk.ref.ref.i32(.str, .str.69, 132);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pm_fm_resume: ref;

axiom pm_fm_resume == $sub.ref(0, 444080);

procedure pm_fm_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.36, $M.0, $M.38, $CurrAddr, $M.9, $M.22, $M.24, $M.25, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.8, $M.7, $M.6, $M.11, assertsPassed;



implementation pm_fm_resume($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $p7: ref;
  var $i8: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i1 := $M.5;
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 16);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} vslice_dummy_var_187 := poseidon_check_mode_radio($p0);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4816, 1)), $mul.ref(0, 1));
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} vslice_dummy_var_188 := set_frequency___0($p0, $i8);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} vslice_dummy_var_189 := pm_alsa_resume($p0);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} vslice_dummy_var_186 := printk.ref.ref.i32(.str, .str.70, 141);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const set_frequency___0: ref;

axiom set_frequency___0 == $sub.ref(0, 445112);

procedure set_frequency___0($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.38, $CurrAddr;



implementation set_frequency___0($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i18: i32;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $p36: ref;
  var $i17: i32;
  var $p37: ref;
  var vslice_dummy_var_190: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 928} {:cexpr "set_frequency___0:arg:frequency"} boogie_si_record_i32($i1);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} mutex_lock_nested($p4, 0);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4816, 1)), $mul.ref(8, 1));
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $i8 := send_set_req($p0, 44, $i7, $p2);
    call {:si_unique_call 931} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i9 := $mul.i32($i1, 125);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i10 := $udiv.i32($i9, 2);
    call {:si_unique_call 932} {:cexpr "freq"} boogie_si_record_i32($i10);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i32(76000000, $i10);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i13 := $ult.i32(108000000, $i12);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $i15 := send_set_req($p0, 18, $i14, $p2);
    call {:si_unique_call 934} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $i18 := send_set_req($p0, 67, 0, $p2);
    call {:si_unique_call 937} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $M.38 := $store.i64($M.38, $p3, 1);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $p19 := get_current();
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.38, $p3);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p19, $mul.ref(0, 9640)), $mul.ref(0, 1));
    call {:si_unique_call 939} $i22 := devirtbounce(0, $p21, $i20, $p21);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $M.38 := $store.i64($M.38, $p3, $i22);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} vslice_dummy_var_190 := schedule_timeout(62);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4816, 1)), $mul.ref(4, 1));
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i18;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i33 := $mul.i32($i14, 2);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i34 := $udiv.i32($i33, 125);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4816, 1)), $mul.ref(0, 1));
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i34);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i17 := $i32;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} mutex_unlock($p37);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb12:
    assume $i27 == 1;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} $i28 := send_set_req($p0, 67, 0, $p2);
    call {:si_unique_call 942} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $i29 := send_set_req($p0, 68, 1, $p2);
    call {:si_unique_call 944} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4816, 1)), $mul.ref(4, 1));
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 1);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i32 := $i29;
    goto $bb14;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    goto $bb9;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i14 := 108000000;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i12 := 76000000;
    goto $bb3;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 446144);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 945} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 1} true;
    call {:si_unique_call 946} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 947} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tlg_fm_s_ctrl: ref;

axiom tlg_fm_s_ctrl == $sub.ref(0, 447176);

procedure tlg_fm_s_ctrl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation tlg_fm_s_ctrl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $p17: ref;
  var $i18: i32;
  var vslice_dummy_var_191: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(32, 1));
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 6616), 11112));
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(64, 1));
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 10160496);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb2:
    assume $i8 == 1;
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref(preemphasis, $mul.ref(0, 12)), $mul.ref($i12, 4));
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.39, $p13);
    call {:si_unique_call 949} {:cexpr "pre_emphasis"} boogie_si_record_i32($i14);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} vslice_dummy_var_191 := send_set_req($p5, 44, $i14, $p1);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref($sub.ref(0, 6616), 11112)), $mul.ref(4816, 1)), $mul.ref(8, 1));
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i14);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb4;
}



const pm_notifier_block: ref;

axiom pm_notifier_block == $sub.ref(0, 448208);

procedure pm_notifier_block($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pm_notifier_block($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p9: ref;
  var $p10: ref;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;

  $bb0:
    call {:si_unique_call 951} {:cexpr "pm_notifier_block:arg:event"} boogie_si_record_i64($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} vslice_dummy_var_193 := printk.ref.ref.i32.i64(.str.71, .str.72, 239, $i1);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb2:
    assume $i3 == 1;
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, pd_device_list);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p4);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, $p2i.ref.i64(pd_device_list));
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p9, $p10 := $p6, $p4;
    goto $bb7;

  $bb7:
    call $p11, $p12, $p13, $p14, $p15, $i16, $i17, $p19, $p20, $p21, $i22, $i23, $p9, $p10, vslice_dummy_var_192 := pm_notifier_block_loop_$bb7($p11, $p12, $p13, $p14, $p15, $i16, $i17, $p19, $p20, $p21, $i22, $i23, $p9, $p10, vslice_dummy_var_192);
    goto $bb7_last;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 11112)), $mul.ref(552, 1));
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 11112)), $mul.ref(560, 1));
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} $i16 := usb_lock_device_for_reset($p13, $p15);
    call {:si_unique_call 953} {:cexpr "rc"} boogie_si_record_i32($i16);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i17 := $sge.i32($i16, 0);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p9);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, $p2i.ref.i64(pd_device_list));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $p9, $p10 := $p21, $p9;
    goto $bb12_dummy;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} vslice_dummy_var_192 := usb_reset_device($p13);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p13, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} device_unlock($p19);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5094;
}



const usb_lock_device_for_reset: ref;

axiom usb_lock_device_for_reset == $sub.ref(0, 449240);

procedure usb_lock_device_for_reset($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_lock_device_for_reset($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 1} true;
    call {:si_unique_call 957} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 958} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_reset_device: ref;

axiom usb_reset_device == $sub.ref(0, 450272);

procedure usb_reset_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_reset_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 1} true;
    call {:si_unique_call 959} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 960} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const device_unlock: ref;

axiom device_unlock == $sub.ref(0, 451304);

procedure device_unlock($p0: ref);
  free requires assertsPassed;



implementation device_unlock($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(328, 1));
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} mutex_unlock($p1);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    return;
}



const poseidon_probe: ref;

axiom poseidon_probe == $sub.ref(0, 452336);

procedure poseidon_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.44, $M.38, $CurrAddr, $M.45, $M.49, $M.8, $M.7, $M.6, $M.10, assertsPassed;



implementation poseidon_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i35: i32;
  var $i36: i1;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i1;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p68: ref;
  var $p70: ref;
  var $p71: ref;
  var $i43: i32;
  var $i40: i32;
  var $i37: i32;
  var $p75: ref;
  var $i34: i32;
  var $p76: ref;
  var $i8: i32;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $p5 := interface_to_usbdev($p0);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $i6 := check_firmware($p5);
    call {:si_unique_call 967} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $p9 := find_old_poseidon($p5);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $p17, $i18 := $p9, 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $p19 := ldv_usb_get_dev_40($p5);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p17, $mul.ref(0, 11112)), $mul.ref(552, 1));
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p19);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $p21 := usb_get_intf($p0);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p17, $mul.ref(0, 11112)), $mul.ref(560, 1));
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p21);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p17);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} ldv_usb_set_intfdata_41($p0, $p23);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i18, 0);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} vslice_dummy_var_197 := device_init_wakeup($p48, 1);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p17, $mul.ref(0, 11112)), $mul.ref(552, 1));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} pm_runtime_set_autosuspend_delay($p52, 3000);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p17, $mul.ref(0, 11112)), $mul.ref(552, 1));
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} usb_enable_autosuspend($p54);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 11112)), $mul.ref(11016, 1)), $mul.ref(0, 1));
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 1);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb37:
    assume $i58 == 1;
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p17, $mul.ref(0, 11112)), $mul.ref(11024, 1));
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} __init_work($p59, 0);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p60, 137438953408);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 11112)), $mul.ref(11024, 1)), $mul.ref(0, 1));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p4);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_65 := $M.0;
    cmdloc_dummy_var_66 := $M.0;
    call {:si_unique_call 998} cmdloc_dummy_var_67 := $memcpy.i8(cmdloc_dummy_var_65, cmdloc_dummy_var_66, $p63, $p64, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_67;
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 11112)), $mul.ref(11024, 1)), $mul.ref(32, 1));
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} lockdep_init_map($p66, .str.75, $p3, 0);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 11112)), $mul.ref(11024, 1)), $mul.ref(8, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} INIT_LIST_HEAD($p68);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 11112)), $mul.ref(11024, 1)), $mul.ref(24, 1));
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, hibernation_resume);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p17, $mul.ref(0, 11112)), $mul.ref(11024, 1));
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} vslice_dummy_var_198 := schedule_work($p71);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i25 := $M.5;
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 16);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p17, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} __mutex_init($p29, .str.74, $p2);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p17, $mul.ref(0, 11112)), $mul.ref(192, 1));
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $i32 := v4l2_device_register($p30, $p31);
    call {:si_unique_call 978} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $i35 := pd_video_init($p17);
    call {:si_unique_call 981} {:cexpr "ret"} boogie_si_record_i32($i35);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $i38 := poseidon_audio_init($p17);
    call {:si_unique_call 984} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $i41 := poseidon_fm_init($p17);
    call {:si_unique_call 987} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $i44 := pd_dvb_usb_device_init($p17);
    call {:si_unique_call 990} {:cexpr "ret"} boogie_si_record_i32($i44);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p17, $mul.ref(0, 11112)), $mul.ref(0, 1));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} INIT_LIST_HEAD($p46);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p17, $mul.ref(0, 11112)), $mul.ref(0, 1));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} list_add_tail($p47, pd_device_list);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb32:
    assume $i45 == 1;
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} vslice_dummy_var_196 := poseidon_fm_exit($p17);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i43 := $i44;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} vslice_dummy_var_195 := poseidon_audio_free($p17);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i40 := $i43;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} pd_video_exit($p17);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i37 := $i40;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p17, $mul.ref(0, 11112)), $mul.ref(192, 1));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} v4l2_device_unregister($p75);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i34 := $i37;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p17);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} kfree($p76);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i8 := $i34;
    goto $bb3;

  $bb28:
    assume $i42 == 1;
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i43 := $i41;
    goto $bb30;

  $bb24:
    assume $i39 == 1;
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i40 := $i38;
    goto $bb26;

  $bb20:
    assume $i36 == 1;
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i37 := $i35;
    goto $bb22;

  $bb16:
    assume $i33 == 1;
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i34 := $i32;
    goto $bb18;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} vslice_dummy_var_194 := printk.ref.ref.i32(.str, .str.73, 502);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $p12 := kzalloc(10528, 208);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref(0, 11112)), $mul.ref(184, 1));
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} kref_init($p16);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} set_map_flags($p13, $p5);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $p17, $i18 := $p12, 1;
    goto $bb10;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;
}



const poseidon_disconnect: ref;

axiom poseidon_disconnect == $sub.ref(0, 453368);

procedure poseidon_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.40, $CurrAddr, $M.6, $M.8, $M.7, $M.9;



implementation poseidon_disconnect($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p23: ref;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $p1 := get_pd($p0);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.5;
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 16);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 11112)), $mul.ref(11016, 1)), $mul.ref(0, 1));
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} mutex_lock_nested($p12, 0);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i14, 128);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 11112)), $mul.ref(10984, 1));
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} mutex_unlock($p17);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} vslice_dummy_var_200 := stop_all_video_stream($p1);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 11112)), $mul.ref(6888, 1));
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} dvb_stop_streaming($p19);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 11112)), $mul.ref(192, 1));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} v4l2_device_unregister($p20);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} pd_dvb_usb_device_exit($p1);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} vslice_dummy_var_201 := poseidon_fm_exit($p1);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} vslice_dummy_var_202 := poseidon_audio_free($p1);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} pd_video_exit($p1);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} ldv_usb_set_intfdata_41($p0, $0.ref);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 11112)), $mul.ref(184, 1));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} vslice_dummy_var_203 := ldv_kref_put_13($p23, poseidon_delete);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} vslice_dummy_var_199 := printk.ref.ref.i32(.str, .str.88, 559);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const poseidon_suspend: ref;

axiom poseidon_suspend == $sub.ref(0, 454400);

procedure poseidon_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.34, $M.36, $CurrAddr, $M.10, $M.11, $M.38, $M.22, $M.24, $M.8, $M.7, $M.6, $M.9, $M.27, $M.28, $M.29, $M.26, $M.21, assertsPassed, $M.25, $M.40;



implementation poseidon_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i7: i32;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i1);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} $p4 := get_pd($p0);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $i8 := is_working($p4);
    call {:si_unique_call 1018} {:cexpr "tmp___1"} boogie_si_record_i32($i8);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(11016, 1));
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p2);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_68 := $M.0;
    cmdloc_dummy_var_69 := $M.0;
    call {:si_unique_call 1022} cmdloc_dummy_var_70 := $memcpy.i8(cmdloc_dummy_var_68, cmdloc_dummy_var_69, $p25, $p26, 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_70;
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i27 := $M.5;
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 16);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(11000, 1));
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i7 := $i40;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(11000, 1));
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    call {:si_unique_call 1024} $i39 := devirtbounce.6($p38, $p4);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    call {:si_unique_call 1025} {:cexpr "tmp___2"} boogie_si_record_i32($i39);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb19;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} vslice_dummy_var_205 := printk.ref.ref.i32(.str, .str.85, 394);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(560, 1));
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1528)), $mul.ref(1440, 1));
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $i13 := atomic_read($p12);
    call {:si_unique_call 1020} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i14 := $sle.i32($i13, 0);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(11016, 1)), $mul.ref(0, 1));
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 1);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(11016, 1)), $mul.ref(0, 1));
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 1026);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 11112)), $mul.ref(11008, 1));
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $0.ref);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} vslice_dummy_var_204 := printk.ref(.str.84);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const poseidon_resume: ref;

axiom poseidon_resume == $sub.ref(0, 455432);

procedure poseidon_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.34, $M.36, $CurrAddr, $M.10, $M.11, $M.38, $M.22, $M.24, $M.8, $M.7, $M.6, $M.9, $M.27, $M.28, $M.29, $M.26, $M.21, assertsPassed, $M.25, $M.40;



implementation poseidon_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i5: i32;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var vslice_dummy_var_206: i32;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $p2 := get_pd($p0);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} vslice_dummy_var_206 := printk.ref(.str.86);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $i7 := is_working($p2);
    call {:si_unique_call 1030} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 11112)), $mul.ref(11016, 1)), $mul.ref(0, 1));
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i25 := $M.5;
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 16);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 11112)), $mul.ref(11008, 1));
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i5 := $i38;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb20:
    assume $i33 == 1;
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 11112)), $mul.ref(11008, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    call {:si_unique_call 1034} $i37 := devirtbounce.6($p36, $p2);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 1035} {:cexpr "tmp___1"} boogie_si_record_i32($i37);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb22;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i27 == 1;
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} vslice_dummy_var_208 := printk.ref.ref.i32(.str, .str.87, 415);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i21 := $M.5;
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 16);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb13:
    assume $i23 == 1;
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} vslice_dummy_var_207 := printk.ref.ref.i32(.str, .str.87, 412);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 11112)), $mul.ref(11016, 1)), $mul.ref(0, 1));
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1026);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 11112)), $mul.ref(11016, 1));
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_71 := $M.0;
    cmdloc_dummy_var_72 := $M.0;
    call {:si_unique_call 1031} cmdloc_dummy_var_73 := $memcpy.i8(cmdloc_dummy_var_71, cmdloc_dummy_var_72, $p15, $p16, 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_73;
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const get_pd: ref;

axiom get_pd == $sub.ref(0, 456464);

procedure get_pd($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_pd($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} $p1 := ldv_usb_get_intfdata_35($p0);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const is_working: ref;

axiom is_working == $sub.ref(0, 457496);

procedure is_working($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_working($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(560, 1));
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1528)), $mul.ref(1440, 1));
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $i4 := atomic_read($p3);
    call {:si_unique_call 1038} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 0);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 458528);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_usb_get_intfdata_35: ref;

axiom ldv_usb_get_intfdata_35 == $sub.ref(0, 459560);

procedure ldv_usb_get_intfdata_35($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_usb_get_intfdata_35($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $p1 := ldv_usb_get_intfdata();
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_usb_get_intfdata: ref;

axiom ldv_usb_get_intfdata == $sub.ref(0, 460592);

procedure ldv_usb_get_intfdata() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_usb_get_intfdata() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p0 := $M.6;
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const stop_all_video_stream: ref;

axiom stop_all_video_stream == $sub.ref(0, 461624);

procedure stop_all_video_stream($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9;



implementation stop_all_video_stream($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} mutex_lock_nested($p3, 0);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2240, 1));
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(16, 1));
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} mutex_unlock($p20);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2232, 1));
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} vslice_dummy_var_209 := usb_transfer_stop($p1);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} free_all_urb($p1);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 728)), $mul.ref(8, 1));
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} videobuf_stop($p10);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 728)), $mul.ref(8, 1));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} vslice_dummy_var_210 := videobuf_mmap_free($p11);
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(2904, 1)), $mul.ref(1816, 1));
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 728)), $mul.ref(8, 1));
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} videobuf_stop($p17);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p14, $mul.ref(0, 728)), $mul.ref(8, 1));
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} vslice_dummy_var_211 := videobuf_mmap_free($p18);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const v4l2_device_unregister: ref;

axiom v4l2_device_unregister == $sub.ref(0, 462656);

procedure v4l2_device_unregister($p0: ref);
  free requires assertsPassed;



implementation v4l2_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    return;
}



const pd_dvb_usb_device_exit: ref;

axiom pd_dvb_usb_device_exit == $sub.ref(0, 463688);

procedure pd_dvb_usb_device_exit($p0: ref);
  free requires assertsPassed;
  modifies $M.40, $CurrAddr, $M.0, $M.9;



implementation pd_dvb_usb_device_exit($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var vslice_dummy_var_212: i64;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(3284, 1));
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p4, $i5, $p6, $i7, $p9, $i10, $i11, $i12, $i13, vslice_dummy_var_212 := pd_dvb_usb_device_exit_loop_$bb1($p0, $p1, $p3, $p4, $i5, $p6, $i7, $p9, $i10, $i11, $i12, $i13, vslice_dummy_var_212);
    goto $bb1_last;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $i10 := atomic_read($p9);
    call {:si_unique_call 1050} {:cexpr "tmp___3"} boogie_si_record_i32($i10);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $i12 := atomic_read($p3);
    call {:si_unique_call 1055} {:cexpr "tmp___4"} boogie_si_record_i32($i12);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(1832, 1));
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} dvb_dmxdev_release($p14);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(264, 1));
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} vslice_dummy_var_213 := dvb_unregister_frontend($p15);
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(0, 1));
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} vslice_dummy_var_214 := dvb_unregister_adapter($p17);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} pd_dvb_usb_device_cleanup($p0);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $M.40 := $store.i64($M.40, $p1, 1);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $p4 := get_current();
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.40, $p1);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 9640)), $mul.ref(0, 1));
    call {:si_unique_call 1052} $i7 := devirtbounce(0, $p6, $i5, $p6);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $M.40 := $store.i64($M.40, $p1, $i7);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} vslice_dummy_var_212 := schedule_timeout(250);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    goto corral_source_split_5475_dummy;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_5475_dummy:
    assume false;
    return;

  $bb1_last:
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(3280, 1));
    goto corral_source_split_5465;
}



const poseidon_fm_exit: ref;

axiom poseidon_fm_exit == $sub.ref(0, 464720);

procedure poseidon_fm_exit($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation poseidon_fm_exit($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4816, 1)), $mul.ref(16, 1));
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} video_unregister_device($p2);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4816, 1)), $mul.ref(1824, 1));
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} v4l2_ctrl_handler_free($p4);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const poseidon_audio_free: ref;

axiom poseidon_audio_free == $sub.ref(0, 465752);

procedure poseidon_audio_free($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation poseidon_audio_free($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var vslice_dummy_var_215: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(48, 1));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i5 == 1;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(48, 1));
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} vslice_dummy_var_215 := snd_card_free($p7);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pd_video_exit: ref;

axiom pd_video_exit == $sub.ref(0, 466784);

procedure pd_video_exit($p0: ref);
  free requires assertsPassed;



implementation pd_video_exit($p0: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var vslice_dummy_var_216: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(0, 1));
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} video_unregister_device($p3);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(2904, 1)), $mul.ref(0, 1));
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} video_unregister_device($p4);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(1808, 1));
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} v4l2_ctrl_handler_free($p5);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} vslice_dummy_var_216 := printk.ref.ref.i32(.str, .str.1, 1592);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_set_intfdata_41: ref;

axiom ldv_usb_set_intfdata_41 == $sub.ref(0, 467816);

procedure ldv_usb_set_intfdata_41($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation ldv_usb_set_intfdata_41($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} ldv_usb_set_intfdata($p1);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_set_intfdata: ref;

axiom ldv_usb_set_intfdata == $sub.ref(0, 468848);

procedure ldv_usb_set_intfdata($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation ldv_usb_set_intfdata($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $M.6 := $p0;
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    return;
}



const video_unregister_device: ref;

axiom video_unregister_device == $sub.ref(0, 469880);

procedure video_unregister_device($p0: ref);
  free requires assertsPassed;



implementation video_unregister_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_ctrl_handler_free: ref;

axiom v4l2_ctrl_handler_free == $sub.ref(0, 470912);

procedure v4l2_ctrl_handler_free($p0: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_handler_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    return;
}



const snd_card_free: ref;

axiom snd_card_free == $sub.ref(0, 471944);

procedure snd_card_free($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_card_free($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1068} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1069} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dvb_dmxdev_release: ref;

axiom dvb_dmxdev_release == $sub.ref(0, 472976);

procedure dvb_dmxdev_release($p0: ref);
  free requires assertsPassed;



implementation dvb_dmxdev_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    return;
}



const dvb_unregister_frontend: ref;

axiom dvb_unregister_frontend == $sub.ref(0, 474008);

procedure dvb_unregister_frontend($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_unregister_frontend($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1070} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1071} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dvb_unregister_adapter: ref;

axiom dvb_unregister_adapter == $sub.ref(0, 475040);

procedure dvb_unregister_adapter($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_unregister_adapter($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1072} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1073} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 476072);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $p1 := ldv_interface_to_usbdev();
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const check_firmware: ref;

axiom check_firmware == $sub.ref(0, 477104);

procedure check_firmware($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.45, $M.49, $CurrAddr;



implementation check_firmware($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $p1 := kzalloc(8, 208);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $i5 := __create_pipe($p0, 0);
    call {:si_unique_call 1077} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, $sub.i32(0, 2147483520));
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i7 := usb_control_msg($p0, $i6, $sub.i8(0, 126), $sub.i8(0, 64), 0, 0, $p1, 8, 5000);
    call {:si_unique_call 1079} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} kfree($p1);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $i9 := firmware_download($p0);
    call {:si_unique_call 1082} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i4 := $i9;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;
}



const find_old_poseidon: ref;

axiom find_old_poseidon == $sub.ref(0, 478136);

procedure find_old_poseidon($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.10, $M.8, $M.7, $M.6, assertsPassed;



implementation find_old_poseidon($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p6: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, pd_device_list);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 11112)), $mul.ref(0, 1));
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, $p2i.ref.i64(pd_device_list));
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p20 := $0.ref;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $r := $p20;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $p6 := $p1;
    goto $bb4;

  $bb4:
    call $p7, $i8, $i9, $p10, $i11, $i12, $i13, $p15, $i16, $i17, $p18, $p22, $p23, $p24, $p25, $i26, $i27, $p6 := find_old_poseidon_loop_$bb4($p0, $p7, $i8, $i9, $p10, $i11, $i12, $i13, $p15, $i16, $i17, $p18, $p22, $p23, $p24, $p25, $i26, $i27, $p6);
    goto $bb4_last;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(11104, 1));
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(1834, 1));
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i9, $i12);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 11112)), $mul.ref(0, 1));
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, $p2i.ref.i64(pd_device_list));
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $p6 := $p23;
    goto $bb13_dummy;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11112)), $mul.ref(11016, 1)), $mul.ref(0, 1));
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 1);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $p18 := $p6;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb9:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} $p19 := fixup($p18);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p20 := $p19;
    goto $bb11;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5568;
}



const kref_init: ref;

axiom kref_init == $sub.ref(0, 479168);

procedure kref_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation kref_init($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} atomic_set($p1, 1);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    return;
}



const set_map_flags: ref;

axiom set_map_flags == $sub.ref(0, 480200);

procedure set_map_flags($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation set_map_flags($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1992)), $mul.ref(1834, 1));
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(11104, 1));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, $i3);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_get_dev_40: ref;

axiom ldv_usb_get_dev_40 == $sub.ref(0, 481232);

procedure ldv_usb_get_dev_40($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.8, $M.7;



implementation ldv_usb_get_dev_40($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} $p1 := ldv_get_dev($p0);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const usb_get_intf: ref;

axiom usb_get_intf == $sub.ref(0, 482264);

procedure usb_get_intf($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intf($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $p1 := external_alloc();
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 483296);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_device_register: ref;

axiom v4l2_device_register == $sub.ref(0, 484328);

procedure v4l2_device_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_device_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1087} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1088} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pd_video_init: ref;

axiom pd_video_init == $sub.ref(0, 485360);

procedure pd_video_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.0, $CurrAddr;



implementation pd_video_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i30: i32;
  var $i16: i32;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;
  var cmdloc_dummy_var_77: [ref]i8;
  var cmdloc_dummy_var_78: [ref]i8;
  var cmdloc_dummy_var_79: [ref]i8;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: ref;
  var vslice_dummy_var_219: ref;
  var vslice_dummy_var_220: ref;
  var vslice_dummy_var_221: ref;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(1808, 1));
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p1, 720);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} vslice_dummy_var_217 := v4l2_ctrl_handler_init_class($p5, 4, $p2, .str.2);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} vslice_dummy_var_218 := v4l2_ctrl_new_std($p5, tlg_ctrl_ops, 9963776, 0, 10000, 1, 100);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} vslice_dummy_var_219 := v4l2_ctrl_new_std($p5, tlg_ctrl_ops, 9963777, 0, 10000, 1, 100);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} vslice_dummy_var_220 := v4l2_ctrl_new_std($p5, tlg_ctrl_ops, 9963779, 0, 10000, 1, 100);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} vslice_dummy_var_221 := v4l2_ctrl_new_std($p5, tlg_ctrl_ops, 9963778, 0, 10000, 1, 100);
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(1808, 1)), $mul.ref(244, 1));
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} vslice_dummy_var_222 := set_frequency($p0, $p1);
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(0, 1));
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_74 := $M.0;
    cmdloc_dummy_var_75 := $M.0;
    call {:si_unique_call 1098} cmdloc_dummy_var_76 := $memcpy.i8(cmdloc_dummy_var_74, cmdloc_dummy_var_75, $p19, pd_video_template, 1808, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_76;
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(192, 1));
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(0, 1)), $mul.ref(1528, 1));
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p20);
    $p24 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(0, 1)), $mul.ref(1544, 1));
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p5);
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(0, 1));
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p0);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} video_set_drvdata($p25, $p26);
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(0, 1));
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $i28 := video_register_device($p27, 0, $sub.i32(0, 1));
    call {:si_unique_call 1101} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(2904, 1)), $mul.ref(0, 1));
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_77 := $M.0;
    cmdloc_dummy_var_78 := $M.0;
    call {:si_unique_call 1104} cmdloc_dummy_var_79 := $memcpy.i8(cmdloc_dummy_var_77, cmdloc_dummy_var_78, $p32, pd_video_template, 1808, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_79;
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(192, 1));
    $p35 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(2904, 1)), $mul.ref(0, 1)), $mul.ref(1528, 1));
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p33);
    $p37 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(2904, 1)), $mul.ref(0, 1)), $mul.ref(1544, 1));
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p5);
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(2904, 1)), $mul.ref(0, 1));
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p0);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} video_set_drvdata($p38, $p39);
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(2904, 1)), $mul.ref(0, 1));
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $i41 := video_register_device($p40, 1, $sub.i32(0, 1));
    call {:si_unique_call 1107} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} vslice_dummy_var_224 := printk.ref.ref.i32(.str.3, .str.4, 1634);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb9:
    assume $i42 == 1;
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i30 := $i41;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} vslice_dummy_var_223 := printk.ref.ref.i32.i32(.str.5, .str.4, 1637, $i30);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} pd_video_exit($p0);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i16 := $i30;
    goto $bb3;

  $bb5:
    assume $i29 == 1;
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i30 := $i28;
    goto $bb7;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} v4l2_ctrl_handler_free($p5);
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(1808, 1)), $mul.ref(244, 1));
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb3;
}



const poseidon_audio_init: ref;

axiom poseidon_audio_init == $sub.ref(0, 486392);

procedure poseidon_audio_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.44, $M.0, $CurrAddr;



implementation poseidon_audio_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $i6: i32;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} $i4 := snd_card_create($sub.i32(0, 1), .str.8, __this_module, 0, $p1);
    call {:si_unique_call 1112} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.42, $p1);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} $i8 := snd_pcm_new($p7, .str.9, 0, 0, 1, $p2);
    call {:si_unique_call 1114} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.43, $p2);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} snd_pcm_set_ops($p12, 1, pcm_capture_ops);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.43, $p2);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 992)), $mul.ref(28, 1));
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $p14, 0);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.43, $p2);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 992)), $mul.ref(952, 1));
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p17, $p0);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.43, $p2);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 992)), $mul.ref(100, 1));
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} $p21 := strcpy($p20, .str.10);
    assume $isExternal($p21);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.42, $p1);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1184)), $mul.ref(20, 1));
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} $p25 := strcpy($p24, .str.11);
    assume $isExternal($p25);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.42, $p1);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 1184)), $mul.ref(36, 1));
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $p29 := strcpy($p28, .str.12);
    assume $isExternal($p29);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.42, $p1);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 1184)), $mul.ref(68, 1));
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} $p33 := strcpy($p32, .str.13);
    assume $isExternal($p33);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.42, $p1);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $i35 := snd_card_register($p34);
    call {:si_unique_call 1122} {:cexpr "tmp"} boogie_si_record_i32($i35);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.42, $p1);
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(48, 1));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p39);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.42, $p1);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} vslice_dummy_var_226 := snd_card_free($p37);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.42, $p1);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} vslice_dummy_var_225 := snd_card_free($p10);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $i6 := $i8;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const poseidon_fm_init: ref;

axiom poseidon_fm_init == $sub.ref(0, 487424);

procedure poseidon_fm_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.38, $CurrAddr;



implementation poseidon_fm_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i15: i32;
  var cmdloc_dummy_var_80: [ref]i8;
  var cmdloc_dummy_var_81: [ref]i8;
  var cmdloc_dummy_var_82: [ref]i8;
  var vslice_dummy_var_227: i32;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4816, 1)), $mul.ref(16, 1));
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4816, 1)), $mul.ref(1824, 1));
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_80 := $M.0;
    cmdloc_dummy_var_81 := $M.0;
    call {:si_unique_call 1125} cmdloc_dummy_var_82 := $memcpy.i8(cmdloc_dummy_var_80, cmdloc_dummy_var_81, $p6, poseidon_fm_template, 1808, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_82;
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} vslice_dummy_var_227 := set_frequency___0($p0, 76000000);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} vslice_dummy_var_228 := v4l2_ctrl_handler_init_class($p5, 1, $p1, .str.17);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} vslice_dummy_var_229 := v4l2_ctrl_new_std_menu($p5, tlg_fm_ctrl_ops, 10160496, 2, 0, 1);
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4816, 1)), $mul.ref(1824, 1)), $mul.ref(244, 1));
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(192, 1));
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4816, 1)), $mul.ref(16, 1)), $mul.ref(1528, 1));
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p16);
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4816, 1)), $mul.ref(16, 1)), $mul.ref(1544, 1));
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p5);
    $p19 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4816, 1)), $mul.ref(16, 1)), $mul.ref(1616, 1));
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} set_bit(2, $p19);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p0);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} video_set_drvdata($p3, $p20);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $i21 := video_register_device($p3, 2, $sub.i32(0, 1));
    call {:si_unique_call 1133} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i15 := $i21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} v4l2_ctrl_handler_free($p5);
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4816, 1)), $mul.ref(1824, 1)), $mul.ref(244, 1));
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;
}



const pd_dvb_usb_device_init: ref;

axiom pd_dvb_usb_device_init == $sub.ref(0, 488456);

procedure pd_dvb_usb_device_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pd_dvb_usb_device_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p12: ref;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p39: ref;
  var $i40: i32;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i37: i32;
  var $p54: ref;
  var $i24: i32;
  var $p56: ref;
  var $i9: i32;
  var $i53: i32;
  var cmdloc_dummy_var_83: [ref]i8;
  var cmdloc_dummy_var_84: [ref]i8;
  var cmdloc_dummy_var_85: [ref]i8;
  var cmdloc_dummy_var_86: [ref]i8;
  var cmdloc_dummy_var_87: [ref]i8;
  var cmdloc_dummy_var_88: [ref]i8;
  var vslice_dummy_var_230: i32;
  var vslice_dummy_var_231: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1));
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(3336, 1));
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, $sub.i8(0, 126));
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(3280, 1));
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} atomic_set($p3, 0);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(3284, 1));
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} atomic_set($p4, 0);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(3328, 1));
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p0);
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(0, 1));
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} $i7 := dvb_register_adapter($p6, .str.16, __this_module, $0.ref, adapter_nr);
    call {:si_unique_call 1137} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(264, 1)), $mul.ref(776, 1));
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p0);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i64(768, 63);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(264, 1)), $mul.ref(0, 1));
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_86 := $M.0;
    cmdloc_dummy_var_87 := $M.0;
    call {:si_unique_call 1139} cmdloc_dummy_var_88 := $memcpy.i8(cmdloc_dummy_var_86, cmdloc_dummy_var_87, $p19, poseidon_frontend_ops, 768, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_88;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(0, 1));
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(264, 1));
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $i22 := dvb_register_frontend($p20, $p21);
    call {:si_unique_call 1141} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 0);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(2328, 1));
    $p27 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(2328, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 5);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(2328, 1)), $mul.ref(152, 1));
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p1);
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(2328, 1)), $mul.ref(160, 1));
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 64);
    $p31 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(2328, 1)), $mul.ref(164, 1));
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 64);
    $p32 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(2328, 1)), $mul.ref(168, 1));
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, pd_start_feed);
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(2328, 1)), $mul.ref(176, 1));
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, pd_stop_feed);
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(2328, 1)), $mul.ref(184, 1));
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $0.ref);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $i35 := dvb_dmx_init($p25);
    call {:si_unique_call 1144} {:cexpr "ret"} boogie_si_record_i32($i35);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 0);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(2328, 1)), $mul.ref(160, 1));
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    $p42 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(1832, 1)), $mul.ref(32, 1));
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i40);
    $p44 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(2328, 1)), $mul.ref(0, 1));
    $p46 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(1832, 1)), $mul.ref(24, 1));
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, $p44);
    $p48 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(1832, 1)), $mul.ref(36, 1));
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 0);
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(1832, 1));
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(0, 1));
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} $i51 := dvb_dmxdev_init($p49, $p50);
    call {:si_unique_call 1147} {:cexpr "ret"} boogie_si_record_i32($i51);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i51, 0);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $r := $i53;
    return;

  $bb16:
    assume $i52 == 1;
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i37 := $i51;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(264, 1));
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} vslice_dummy_var_231 := dvb_unregister_frontend($p54);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i24 := $i37;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(0, 1));
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} vslice_dummy_var_230 := dvb_unregister_adapter($p56);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $i9 := $i24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i53 := $i9;
    goto $bb19;

  $bb12:
    assume $i36 == 1;
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i37 := $i35;
    goto $bb14;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(264, 1)), $mul.ref(0, 1));
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_83 := $M.0;
    cmdloc_dummy_var_84 := $M.0;
    call {:si_unique_call 1138} cmdloc_dummy_var_85 := $memcpy.i8(cmdloc_dummy_var_83, cmdloc_dummy_var_84, $p16, poseidon_frontend_ops, 768, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_85;
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;
}



const device_init_wakeup: ref;

axiom device_init_wakeup == $sub.ref(0, 489488);

procedure device_init_wakeup($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;



implementation device_init_wakeup($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1148} {:cexpr "device_init_wakeup:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1149} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1150} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pm_runtime_set_autosuspend_delay: ref;

axiom pm_runtime_set_autosuspend_delay == $sub.ref(0, 490520);

procedure pm_runtime_set_autosuspend_delay($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pm_runtime_set_autosuspend_delay($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} {:cexpr "pm_runtime_set_autosuspend_delay:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    return;
}



const usb_enable_autosuspend: ref;

axiom usb_enable_autosuspend == $sub.ref(0, 491552);

procedure usb_enable_autosuspend($p0: ref);
  free requires assertsPassed;



implementation usb_enable_autosuspend($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    return;
}



const hibernation_resume: ref;

axiom hibernation_resume == $sub.ref(0, 492584);

procedure hibernation_resume($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.1, $M.2, $M.34, $M.36, $M.11, $M.38, $M.22, $M.24, $CurrAddr, $M.8, $M.7, $M.6, $M.9, $M.27, $M.28, $M.29, $M.26, $M.21, assertsPassed, $M.25, $M.40;



implementation hibernation_resume($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i16: i32;
  var $i17: i1;
  var $i12: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;
  var vslice_dummy_var_234: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 10440), 11112));
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 10440), 11112)), $mul.ref(11016, 1)), $mul.ref(0, 1));
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 10440), 11112)), $mul.ref(10984, 1));
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, $sub.i32(0, 129));
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 10440), 11112)), $mul.ref(10984, 1));
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $i9 := get_autopm_ref($p2);
    call {:si_unique_call 1153} {:cexpr "count"} boogie_si_record_i32($i9);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i9, 1);
    call {:si_unique_call 1154} {:cexpr "count"} boogie_si_record_i32($i10);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i9, 0);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i18 := $M.5;
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 16);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 10440), 11112)), $mul.ref(11008, 1));
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 10440), 11112)), $mul.ref(11008, 1));
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    call {:si_unique_call 1158} vslice_dummy_var_234 := devirtbounce.6($p29, $p2);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} vslice_dummy_var_233 := printk.ref.ref.i32(.str, .str.83, 433);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb4;

  $bb4:
    call $p13, $p14, $i16, $i17, $i12, vslice_dummy_var_232 := hibernation_resume_loop_$bb4($p1, $p13, $p14, $i16, $i17, $i12, vslice_dummy_var_232);
    goto $bb4_last;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 10440), 11112)), $mul.ref(560, 1));
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} vslice_dummy_var_232 := ldv_usb_autopm_get_interface_39($p14);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i12, 1);
    call {:si_unique_call 1156} {:cexpr "count"} boogie_si_record_i32($i16);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i12, 0);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i12 := $i16;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5832;
}



const get_autopm_ref: ref;

axiom get_autopm_ref == $sub.ref(0, 493616);

procedure get_autopm_ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_autopm_ref($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p6: ref;
  var $i7: i32;
  var $p9: ref;
  var $i10: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(3280, 1));
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} $i3 := atomic_read($p2);
    call {:si_unique_call 1160} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4816, 1)), $mul.ref(16, 1)), $mul.ref(1704, 1));
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $i7 := list_empty($p6);
    call {:si_unique_call 1162} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(576, 1)), $mul.ref(2244, 1));
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(2904, 1)), $mul.ref(1832, 1));
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i10, $i13);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(60, 1));
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i14, $i17);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, $i3);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i7, 0);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i19, $i21);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;
}



const ldv_usb_autopm_get_interface_39: ref;

axiom ldv_usb_autopm_get_interface_39 == $sub.ref(0, 494648);

procedure ldv_usb_autopm_get_interface_39($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_usb_autopm_get_interface_39($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} $i1 := ldv_get_interface($p0);
    call {:si_unique_call 1164} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 495680);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    return;
}



const dvb_register_adapter: ref;

axiom dvb_register_adapter == $sub.ref(0, 496712);

procedure dvb_register_adapter($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_register_adapter($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1166} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1167} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const dvb_register_frontend: ref;

axiom dvb_register_frontend == $sub.ref(0, 497744);

procedure dvb_register_frontend($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_register_frontend($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1168} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1169} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pd_start_feed: ref;

axiom pd_start_feed == $sub.ref(0, 498776);

procedure pd_start_feed($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.22, $M.24, $CurrAddr, $M.9, $M.27, $M.28, $M.29, $M.26, $M.21, $M.25, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $M.11, $M.38, assertsPassed;



implementation pd_start_feed($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4384, 1));
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 952)), $mul.ref(152, 1));
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 4096)), $mul.ref(3284, 1));
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $i10 := atomic_add_return(1, $p9);
    call {:si_unique_call 1171} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $i12 := dvb_start_streaming($p5);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    call {:si_unique_call 1173} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb7;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb3;
}



const pd_stop_feed: ref;

axiom pd_stop_feed == $sub.ref(0, 499808);

procedure pd_stop_feed($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation pd_stop_feed($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4384, 1));
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 952)), $mul.ref(152, 1));
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 4096)), $mul.ref(3284, 1));
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} $i10 := atomic_dec_and_test($p9);
    call {:si_unique_call 1175} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} dvb_stop_streaming($p5);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb3;
}



const dvb_dmx_init: ref;

axiom dvb_dmx_init == $sub.ref(0, 500840);

procedure dvb_dmx_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_dmx_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1177} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1178} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dvb_dmxdev_init: ref;

axiom dvb_dmxdev_init == $sub.ref(0, 501872);

procedure dvb_dmxdev_init($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_dmxdev_init($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1179} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1180} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const v4l2_ctrl_handler_init_class: ref;

axiom v4l2_ctrl_handler_init_class == $sub.ref(0, 502904);

procedure v4l2_ctrl_handler_init_class($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_handler_init_class($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1181} {:cexpr "v4l2_ctrl_handler_init_class:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1182} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1183} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const v4l2_ctrl_new_std_menu: ref;

axiom v4l2_ctrl_new_std_menu == $sub.ref(0, 503936);

procedure v4l2_ctrl_new_std_menu($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_new_std_menu($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: ref)
{
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} {:cexpr "v4l2_ctrl_new_std_menu:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1185} {:cexpr "v4l2_ctrl_new_std_menu:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1186} {:cexpr "v4l2_ctrl_new_std_menu:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1187} {:cexpr "v4l2_ctrl_new_std_menu:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $p6 := external_alloc();
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 504968);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1190} devirtbounce.7(0, $p1, $i0, $p1);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    return;
}



const video_set_drvdata: ref;

axiom video_set_drvdata == $sub.ref(0, 506000);

procedure video_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation video_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;
  var vslice_dummy_var_235: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1808)), $mul.ref(136, 1));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} vslice_dummy_var_235 := dev_set_drvdata($p2, $p1);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    return;
}



const video_register_device: ref;

axiom video_register_device == $sub.ref(0, 507032);

procedure video_register_device($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation video_register_device($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} {:cexpr "video_register_device:arg:type"} boogie_si_record_i32($i1);
    call {:si_unique_call 1193} {:cexpr "video_register_device:arg:nr"} boogie_si_record_i32($i2);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1808)), $mul.ref(128, 1));
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} $i7 := __video_register_device($p0, $i1, $i2, 1, $p6);
    call {:si_unique_call 1195} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const __video_register_device: ref;

axiom __video_register_device == $sub.ref(0, 508064);

procedure __video_register_device($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __video_register_device($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1196} {:cexpr "__video_register_device:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1197} {:cexpr "__video_register_device:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1198} {:cexpr "__video_register_device:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1199} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1200} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 509096);

procedure dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1201} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1202} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const snd_card_create: ref;

axiom snd_card_create == $sub.ref(0, 510128);

procedure snd_card_create($i0: i32, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_card_create($i0: i32, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1203} {:cexpr "snd_card_create:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1204} {:cexpr "snd_card_create:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1205} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1206} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const snd_pcm_new: ref;

axiom snd_pcm_new == $sub.ref(0, 511160);

procedure snd_pcm_new($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_new($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1207} {:cexpr "snd_pcm_new:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1208} {:cexpr "snd_pcm_new:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1209} {:cexpr "snd_pcm_new:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1210} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1211} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const snd_pcm_set_ops: ref;

axiom snd_pcm_set_ops == $sub.ref(0, 512192);

procedure snd_pcm_set_ops($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation snd_pcm_set_ops($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} {:cexpr "snd_pcm_set_ops:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    return;
}



const snd_card_register: ref;

axiom snd_card_register == $sub.ref(0, 513224);

procedure snd_card_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_card_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1213} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1214} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const v4l2_ctrl_new_std: ref;

axiom v4l2_ctrl_new_std == $sub.ref(0, 514256);

procedure v4l2_ctrl_new_std($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_new_std($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32) returns ($r: ref)
{
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} {:cexpr "v4l2_ctrl_new_std:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1216} {:cexpr "v4l2_ctrl_new_std:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1217} {:cexpr "v4l2_ctrl_new_std:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1218} {:cexpr "v4l2_ctrl_new_std:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 1219} {:cexpr "v4l2_ctrl_new_std:arg:arg6"} boogie_si_record_i32($i6);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} $p7 := external_alloc();
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;
}



const ldv_get_dev: ref;

axiom ldv_get_dev == $sub.ref(0, 515288);

procedure ldv_get_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.8, $M.7;



implementation ldv_get_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $p1 := $M.7;
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $p8 := $M.7;
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i9, $i10);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p14 := $M.7;
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i12 := $M.8;
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 1);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $M.8 := $i13;
    call {:si_unique_call 1224} {:cexpr "dev_counter"} boogie_si_record_i32($i13);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} $i4 := ldv_undef_int();
    call {:si_unique_call 1222} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i6 := $M.8;
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $M.8 := $i7;
    call {:si_unique_call 1223} {:cexpr "dev_counter"} boogie_si_record_i32($i7);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $M.7 := $p0;
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const fixup: ref;

axiom fixup == $sub.ref(0, 516320);

procedure fixup($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.10, $M.8, $M.7, $M.6, assertsPassed;



implementation fixup($p0: ref) returns ($r: ref)
{
  var $i1: i32;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i9: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} $i1 := get_autopm_ref($p0);
    call {:si_unique_call 1226} {:cexpr "count"} boogie_si_record_i32($i1);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(560, 1));
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1440, 1));
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} $i5 := atomic_read($p4);
    call {:si_unique_call 1228} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} vslice_dummy_var_236 := printk.ref.ref.i32.i32.i32(.str.80, .str.81, 351, $i1, $i5);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i1, 1);
    call {:si_unique_call 1230} {:cexpr "count"} boogie_si_record_i32($i7);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i1, 0);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(552, 1));
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} ldv_usb_put_dev_37($p15);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(560, 1));
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} ldv_usb_put_intf_38($p17);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(11016, 1)), $mul.ref(0, 1));
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} vslice_dummy_var_237 := printk.ref.ref.i32.i32(.str.82, .str.81, 358, $i20);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb4;

  $bb4:
    call $p10, $p11, $i12, $i13, $i9 := fixup_loop_$bb4($p0, $p10, $p11, $i12, $i13, $i9);
    goto $bb4_last;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 11112)), $mul.ref(560, 1));
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} ldv_usb_autopm_put_interface_36($p11);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32($i9, 1);
    call {:si_unique_call 1232} {:cexpr "count"} boogie_si_record_i32($i12);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i9, 0);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i12;
    goto $bb6_dummy;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6020;
}



const ldv_usb_autopm_put_interface_36: ref;

axiom ldv_usb_autopm_put_interface_36 == $sub.ref(0, 517352);

procedure ldv_usb_autopm_put_interface_36($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_usb_autopm_put_interface_36($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} ldv_put_interface();
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const ldv_usb_put_dev_37: ref;

axiom ldv_usb_put_dev_37 == $sub.ref(0, 518384);

procedure ldv_usb_put_dev_37($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.7;



implementation ldv_usb_put_dev_37($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} ldv_put_dev($p0);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_put_intf_38: ref;

axiom ldv_usb_put_intf_38 == $sub.ref(0, 519416);

procedure ldv_usb_put_intf_38($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation ldv_usb_put_intf_38($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} ldv_usb_put_intf();
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    return;
}



const firmware_download: ref;

axiom firmware_download == $sub.ref(0, 520448);

procedure firmware_download($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.45, $M.49, $CurrAddr;



implementation firmware_download($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i64;
  var $i26: i32;
  var $i28: i1;
  var $i31: i64;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i1;
  var $i36: i64;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i42: i64;
  var $i43: i1;
  var $i30: i64;
  var $i44: i32;
  var $i29: i32;
  var $i41: i32;
  var $i18: i32;
  var $p45: ref;
  var $i8: i32;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $M.45 := $store.ref($M.45, $p2, $0.ref);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $p3 := $M.46;
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} $i5 := request_firmware($p2, $p3, $p4);
    call {:si_unique_call 1242} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.45, $p2);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.47, $p10);
    call {:si_unique_call 1244} {:cexpr "fwlength"} boogie_si_record_i64($i11);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.45, $p2);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.48, $p13);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $p15 := kmemdup($p14, $i11, 208);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(1696, 1)), $mul.ref(1, 8));
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i64($i24);
    call {:si_unique_call 1247} {:cexpr "max_packet_size"} boogie_si_record_i64($i25);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i64.i32($i25);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} vslice_dummy_var_239 := printk.ref.ref.i32.i32(.str.78, .str.77, 306, $i26);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $i28 := $ult.i64(0, $i11);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $i29 := $i5;
    assume {:branchcond $i28} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i41 := $i29;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} kfree($p15);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i18 := $i41;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.45, $p2);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} release_firmware($p45);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i8 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb9:
    assume $i28 == 1;
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb12;

  $bb12:
    call $i31, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i42, $i43, $i30, $i44 := firmware_download_loop_$bb12($p0, $p1, $i11, $p15, $i25, $i31, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i42, $i43, $i30, $i44);
    goto $bb12_last;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $M.49 := $store.i32($M.49, $p1, 0);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i31 := $sub.i64($i11, $i30);
    call {:si_unique_call 1249} {:cexpr "_min2"} boogie_si_record_i64($i31);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} $i32 := __create_pipe($p0, 1);
    call {:si_unique_call 1251} {:cexpr "tmp"} boogie_si_record_i32($i32);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i32, $sub.i32(0, 1073741824));
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p15, $mul.ref($i30, 1));
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i35 := $ult.i64($i25, $i31);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i36 := $i31;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i64.i32($i36);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} $i38 := usb_bulk_msg($p0, $i33, $p34, $i37, $p1, 2500);
    call {:si_unique_call 1253} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $i40 := $i38;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i30, $i25);
    call {:si_unique_call 1255} {:cexpr "offset"} boogie_si_record_i64($i42);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i43 := $ult.i64($i42, $i11);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i44 := $i38;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i29 := $i44;
    goto $bb11;

  $bb21:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i30 := $i42;
    goto $bb21_dummy;

  $bb17:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb19;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $i36 := $i25;
    goto $bb16;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} vslice_dummy_var_238 := printk.ref.ref.i32.i32(.str.76, .str.77, 293, $i5);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i8 := $i5;
    goto $bb3;

  $bb21_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6088;
}



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 521480);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1256} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1257} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const kmemdup: ref;

axiom kmemdup == $sub.ref(0, 522512);

procedure kmemdup($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kmemdup($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} {:cexpr "kmemdup:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1259} {:cexpr "kmemdup:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} $p3 := external_alloc();
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const usb_bulk_msg: ref;

axiom usb_bulk_msg == $sub.ref(0, 523544);

procedure usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1261} {:cexpr "usb_bulk_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1262} {:cexpr "usb_bulk_msg:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1263} {:cexpr "usb_bulk_msg:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1264} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1265} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 524576);

procedure release_firmware($p0: ref);
  free requires assertsPassed;



implementation release_firmware($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    return;
}



const ldv_interface_to_usbdev: ref;

axiom ldv_interface_to_usbdev == $sub.ref(0, 525608);

procedure ldv_interface_to_usbdev() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_interface_to_usbdev() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $p0 := ldv_undef_ptr();
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} ldv_stop___4();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 526640);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1268} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1269} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1270} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1271} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} $p4 := calloc(1, $i0);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1273} __VERIFIER_assume($i7);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_videobuf_queue_ops_13: ref;

axiom ldv_videobuf_queue_ops_13 == $sub.ref(0, 527672);

procedure ldv_videobuf_queue_ops_13();
  free requires assertsPassed;
  modifies $M.50, $M.51, $M.0, $CurrAddr;



implementation ldv_videobuf_queue_ops_13()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $p0 := ldv_zalloc(616);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $M.50 := $p0;
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $p2 := ldv_zalloc(240);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $M.51 := $p2;
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_v4l2_ioctl_ops_11: ref;

axiom ldv_initialize_v4l2_ioctl_ops_11 == $sub.ref(0, 528704);

procedure ldv_initialize_v4l2_ioctl_ops_11();
  free requires assertsPassed;
  modifies $M.52, $M.53, $M.54, $M.55, $M.0, $CurrAddr;



implementation ldv_initialize_v4l2_ioctl_ops_11()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $p0 := ldv_zalloc(360);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $M.52 := $p0;
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} $p2 := ldv_zalloc(52);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $M.53 := $p2;
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $p4 := ldv_zalloc(208);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $M.54 := $p4;
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} $p6 := ldv_zalloc(88);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $M.55 := $p6;
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_v4l2_file_operations_12: ref;

axiom ldv_initialize_v4l2_file_operations_12 == $sub.ref(0, 529736);

procedure ldv_initialize_v4l2_file_operations_12();
  free requires assertsPassed;
  modifies $M.56, $M.0, $CurrAddr;



implementation ldv_initialize_v4l2_file_operations_12()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $p0 := ldv_zalloc(360);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $M.56 := $p0;
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_11: ref;

axiom ldv_main_exported_11 == $sub.ref(0, 530768);

procedure ldv_main_exported_11();
  free requires assertsPassed;
  modifies $M.57, $M.58, $M.59, $M.60, $M.17, $M.0, $M.20, $CurrAddr;



implementation ldv_main_exported_11()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $i88: i64;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $p134: ref;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $p139: ref;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $p164: ref;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $i170: i32;
  var $i171: i1;
  var $p172: ref;
  var $p173: ref;
  var $i175: i32;
  var $i176: i1;
  var $p177: ref;
  var $i178: i32;
  var cmdloc_dummy_var_89: [ref]i8;
  var cmdloc_dummy_var_90: [ref]i8;
  var cmdloc_dummy_var_91: [ref]i8;
  var cmdloc_dummy_var_92: [ref]i8;
  var cmdloc_dummy_var_93: [ref]i8;
  var cmdloc_dummy_var_94: [ref]i8;
  var vslice_dummy_var_240: i32;
  var vslice_dummy_var_241: i32;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i32;
  var vslice_dummy_var_245: i32;
  var vslice_dummy_var_246: i32;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i32;
  var vslice_dummy_var_249: i32;
  var vslice_dummy_var_250: i32;
  var vslice_dummy_var_251: i32;
  var vslice_dummy_var_252: i32;
  var vslice_dummy_var_253: i32;
  var vslice_dummy_var_254: i32;
  var vslice_dummy_var_255: i32;
  var vslice_dummy_var_256: i32;
  var vslice_dummy_var_257: i32;
  var vslice_dummy_var_258: i32;
  var vslice_dummy_var_259: i32;
  var vslice_dummy_var_260: i32;
  var vslice_dummy_var_261: i32;
  var vslice_dummy_var_262: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $p3 := ldv_zalloc(1);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} $p4 := ldv_zalloc(1);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $p5 := ldv_zalloc(1);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} $p6 := ldv_zalloc(104);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $p8 := ldv_zalloc(4);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} $p10 := ldv_zalloc(1);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $p11 := ldv_zalloc(44);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $p13 := ldv_zalloc(64);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $p15 := ldv_zalloc(1);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1293} $i16 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1294} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i16);
    call {:si_unique_call 1295} {:cexpr "tmp___8"} boogie_si_record_i32($i16);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $p17 := ldv_zalloc(1);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} $p18 := ldv_zalloc(1);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} $p19 := ldv_zalloc(1);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} $p20 := ldv_zalloc(8);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $p22 := ldv_zalloc(1);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $p23 := ldv_zalloc(1);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} $p24 := ldv_zalloc(1);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} $p25 := ldv_zalloc(20);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $p27 := ldv_zalloc(1);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $p28 := ldv_zalloc(1);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} $p29 := ldv_zalloc(1);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $p30 := ldv_zalloc(1);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $p31 := ldv_zalloc(1);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} $p32 := ldv_zalloc(52);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} $p34 := ldv_zalloc(84);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $p36 := ldv_zalloc(1);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} $p37 := ldv_zalloc(1);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $p38 := ldv_zalloc(1);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} $p39 := ldv_zalloc(84);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $p41 := ldv_zalloc(1);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $p42 := ldv_zalloc(44);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} $p44 := ldv_zalloc(1);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $p45 := ldv_zalloc(1);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} $p46 := ldv_zalloc(80);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $p48 := ldv_zalloc(1);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p0);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_89 := $M.57;
    call {:si_unique_call 1321} cmdloc_dummy_var_90 := $memset.i8(cmdloc_dummy_var_89, $p49, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.57 := cmdloc_dummy_var_90;
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p1);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_91 := $M.58;
    call {:si_unique_call 1322} cmdloc_dummy_var_92 := $memset.i8(cmdloc_dummy_var_91, $p50, 0, 8, $zext.i32.i64(8), 0 == 1);
    $M.58 := cmdloc_dummy_var_92;
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p2);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_93 := $M.59;
    call {:si_unique_call 1323} cmdloc_dummy_var_94 := $memset.i8(cmdloc_dummy_var_93, $p51, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.59 := cmdloc_dummy_var_94;
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1324} $i52 := __VERIFIER_nondet_int();
    call {:si_unique_call 1325} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i52);
    call {:si_unique_call 1326} {:cexpr "tmp___34"} boogie_si_record_i32($i52);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i52, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i52, 17);
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i52, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i52, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i52, 22);
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i52, 22);
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} ldv_stop();
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i58 == 1;
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $i175 := $M.60;
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, 1);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb118:
    assume $i176 == 1;
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $p177 := $M.52;
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i178 := $load.i32($M.57, $p0);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} vslice_dummy_var_262 := vidioc_streamon($p177, $p30, $i178);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1372} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb10:
    assume $i57 == 1;
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i170 := $M.60;
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 1);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb115:
    assume $i171 == 1;
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $p172 := $M.52;
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p173 := $M.53;
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} vslice_dummy_var_261 := vidioc_enumaudio($p172, $p36, $p173);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1370} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb8:
    assume $i56 == 1;
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i166 := $M.60;
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 1);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb112:
    assume $i167 == 1;
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p168 := $M.52;
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} vslice_dummy_var_260 := vidioc_s_audio($p168, $p44, $p33);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1368} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb6:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i52, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i52, 19);
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i60 == 1);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i161 := $M.60;
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 1);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb109:
    assume $i162 == 1;
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $p163 := $M.52;
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p164 := $M.54;
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} vslice_dummy_var_259 := vidioc_g_fmt_vbi($p163, $p22, $p164);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1366} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb17:
    assume $i60 == 1;
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i157 := $M.60;
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 1);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb106:
    assume $i158 == 1;
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $p159 := $M.52;
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} vslice_dummy_var_258 := vidioc_s_input($p159, $p18, $i16);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1364} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb15:
    assume $i59 == 1;
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $i153 := $M.60;
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 1);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb103:
    assume $i154 == 1;
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $p155 := $M.52;
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} vslice_dummy_var_257 := vidioc_enum_input($p155, $p41, $p47);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1362} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb4:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i52, 14);
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i52, 15);
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i52, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i63 == 1);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i149 := $M.60;
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 1);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb100:
    assume $i150 == 1;
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p151 := $M.52;
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} vslice_dummy_var_256 := vidioc_g_std($p151, $p29, $p21);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1360} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb23:
    assume $i63 == 1;
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i145 := $M.60;
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 1);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb97:
    assume $i146 == 1;
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $p147 := $M.52;
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} vslice_dummy_var_255 := vidioc_s_frequency($p147, $p31, $p12);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1358} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb21:
    assume $i62 == 1;
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i141 := $M.60;
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 1);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb94:
    assume $i142 == 1;
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $p143 := $M.52;
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} vslice_dummy_var_254 := vidioc_querycap($p143, $p48, $p7);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1356} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb19:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i52, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i52, 13);
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i65 == 1);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i136 := $M.60;
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 1);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb91:
    assume $i137 == 1;
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $p138 := $M.52;
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $p139 := $M.55;
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} vslice_dummy_var_253 := vidioc_qbuf($p138, $p3, $p139);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1354} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb27:
    assume $i65 == 1;
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i131 := $M.60;
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 1);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb88:
    assume $i132 == 1;
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p133 := $M.52;
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p134 := $M.53;
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} vslice_dummy_var_252 := vidioc_g_audio($p133, $p24, $p134);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1352} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb25:
    assume $i64 == 1;
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i127 := $M.60;
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 1);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb85:
    assume $i128 == 1;
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $p129 := $M.52;
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} vslice_dummy_var_251 := vidioc_g_input($p129, $p4, $p9);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1350} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb2:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i52, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i52, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i52, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i52, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i69 == 1);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i123 := $M.60;
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 1);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb82:
    assume $i124 == 1;
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $p125 := $M.52;
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} vslice_dummy_var_250 := vidioc_g_frequency($p125, $p38, $p43);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1348} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb35:
    assume $i69 == 1;
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i118 := $M.60;
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 1);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb79:
    assume $i119 == 1;
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $p120 := $M.52;
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $p121 := $M.54;
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} vslice_dummy_var_249 := vidioc_g_fmt($p120, $p5, $p121);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1346} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb33:
    assume $i68 == 1;
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i113 := $M.60;
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 1);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb76:
    assume $i114 == 1;
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $p115 := $M.52;
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $p116 := $M.54;
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} vslice_dummy_var_248 := vidioc_s_fmt($p115, $p15, $p116);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1344} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb31:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i52, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i52, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i71 == 1);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i109 := $M.60;
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 1);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb73:
    assume $i110 == 1;
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p111 := $M.52;
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} vslice_dummy_var_247 := vidioc_enum_fmt($p111, $p27, $p14);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1342} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb39:
    assume $i71 == 1;
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $i104 := $M.60;
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 1);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb70:
    assume $i105 == 1;
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $p106 := $M.52;
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.59, $p2);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} vslice_dummy_var_246 := vidioc_streamoff($p106, $p10, $i107);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1340} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb37:
    assume $i70 == 1;
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i99 := $M.60;
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 1);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb67:
    assume $i100 == 1;
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $p101 := $M.52;
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $p102 := $M.55;
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} vslice_dummy_var_245 := vidioc_querybuf($p101, $p23, $p102);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1338} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb29:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i52, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i52, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i52, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i74 == 1);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i94 := $M.60;
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 1);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb64:
    assume $i95 == 1;
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $p96 := $M.52;
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $p97 := $M.55;
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} vslice_dummy_var_244 := vidioc_dqbuf($p96, $p45, $p97);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1336} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb45:
    assume $i74 == 1;
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i90 := $M.60;
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 1);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb61:
    assume $i91 == 1;
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $p92 := $M.52;
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} vslice_dummy_var_243 := vidioc_s_tuner($p92, $p28, $p35);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1334} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb43:
    assume $i73 == 1;
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i85 := $M.60;
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 1);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb58:
    assume $i86 == 1;
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $p87 := $M.52;
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.58, $p1);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} vslice_dummy_var_242 := vidioc_s_std($p87, $p19, $i88);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1332} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb41:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i52, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i75 == 1);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i81 := $M.60;
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 1);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb55:
    assume $i82 == 1;
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $p83 := $M.52;
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} vslice_dummy_var_241 := vidioc_g_tuner($p83, $p37, $p40);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1330} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb47:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i52, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb14;

  $bb49:
    assume $i76 == 1;
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i77 := $M.60;
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 1);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb51:
    assume $i78 == 1;
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p79 := $M.52;
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} vslice_dummy_var_240 := vidioc_reqbufs($p79, $p17, $p26);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1328} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    goto $bb53;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 531800);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_main_exported_13: ref;

axiom ldv_main_exported_13 == $sub.ref(0, 532832);

procedure ldv_main_exported_13();
  free requires assertsPassed;
  modifies $M.61, $M.0, $M.62, $M.63, $M.64, $CurrAddr, $M.9, $M.22, $M.24, $M.25, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $M.11, $M.38, assertsPassed;



implementation ldv_main_exported_13()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var cmdloc_dummy_var_95: [ref]i8;
  var cmdloc_dummy_var_96: [ref]i8;
  var vslice_dummy_var_263: i32;
  var vslice_dummy_var_264: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $p1 := ldv_zalloc(4);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $p3 := ldv_zalloc(4);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_95 := $M.61;
    call {:si_unique_call 1377} cmdloc_dummy_var_96 := $memset.i8(cmdloc_dummy_var_95, $p5, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.61 := cmdloc_dummy_var_96;
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1378} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1379} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    call {:si_unique_call 1380} {:cexpr "tmp___1"} boogie_si_record_i32($i6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} ldv_stop();
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i34 := $M.62;
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 1);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume $i35 == 1;
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $p36 := $M.50;
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $p37 := $M.51;
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.61, $p0);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $i39 := pd_buf_prepare($p36, $p37, $i38);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $M.64 := $i39;
    call {:si_unique_call 1393} {:cexpr "ldv_retval_10"} boogie_si_record_i32($i39);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $i40 := $M.64;
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i41 == 1;
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1394} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $i42 := $M.63;
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, 1);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $M.63 := $i43;
    call {:si_unique_call 1395} {:cexpr "ref_cnt"} boogie_si_record_i32($i43);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i26 := $M.62;
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i30 := $M.62;
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 2);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i31 == 1;
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $p32 := $M.50;
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $p33 := $M.51;
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} pd_buf_queue($p32, $p33);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1391} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i27 == 1;
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $p28 := $M.50;
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $p29 := $M.51;
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} pd_buf_queue($p28, $p29);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1389} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $i20 := $M.62;
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 2);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i21 == 1;
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $p22 := $M.50;
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $p23 := $M.51;
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} pd_buf_release($p22, $p23);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1386} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $i24 := $M.63;
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i24, 1);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $M.63 := $i25;
    call {:si_unique_call 1387} {:cexpr "ref_cnt"} boogie_si_record_i32($i25);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i6, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i12 := $M.62;
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i16 := $M.62;
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i17 == 1;
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $p18 := $M.50;
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} vslice_dummy_var_264 := pd_buf_setup($p18, $p4, $p2);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1384} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $p14 := $M.50;
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} vslice_dummy_var_263 := pd_buf_setup($p14, $p4, $p2);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1382} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const ldv_main_exported_10: ref;

axiom ldv_main_exported_10 == $sub.ref(0, 533864);

procedure ldv_main_exported_10();
  free requires assertsPassed;
  modifies $M.65, $M.63, $M.0, $CurrAddr;



implementation ldv_main_exported_10()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i32;
  var vslice_dummy_var_265: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} $p0 := ldv_zalloc(1800);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1398} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1399} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1400} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} ldv_stop();
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $i10 := $M.65;
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} vslice_dummy_var_265 := ldv_probe_10();
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $M.65 := 2;
    call {:si_unique_call 1405} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i13 := $M.63;
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 1);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $M.63 := $i14;
    call {:si_unique_call 1406} {:cexpr "ref_cnt"} boogie_si_record_i32($i14);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb6;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $i6 := $M.65;
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} video_device_release_empty($p1);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1402} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i8 := $M.63;
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i8, 1);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $M.63 := $i9;
    call {:si_unique_call 1403} {:cexpr "ref_cnt"} boogie_si_record_i32($i9);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const ldv_probe_10: ref;

axiom ldv_probe_10 == $sub.ref(0, 534896);

procedure ldv_probe_10() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_10() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1408} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1409} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_main_exported_9: ref;

axiom ldv_main_exported_9 == $sub.ref(0, 535928);

procedure ldv_main_exported_9();
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.66, $M.0, $CurrAddr;



implementation ldv_main_exported_9()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var vslice_dummy_var_266: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $p0 := ldv_zalloc(144);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1411} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1412} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1413} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} ldv_stop();
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i3 == 1;
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i4 := $M.66;
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} vslice_dummy_var_266 := tlg_s_ctrl($p1);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1415} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_12: ref;

axiom ldv_main_exported_12 == $sub.ref(0, 536960);

procedure ldv_main_exported_12();
  free requires assertsPassed;
  modifies $M.67, $M.0, $M.63, $M.68, $M.10, $M.11, $CurrAddr, $M.8, $M.7, $M.6, assertsPassed, $M.9;



implementation ldv_main_exported_12()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var vslice_dummy_var_267: i32;
  var vslice_dummy_var_268: i32;
  var vslice_dummy_var_269: i32;
  var vslice_dummy_var_270: i64;
  var vslice_dummy_var_271: i64;
  var vslice_dummy_var_272: i64;
  var vslice_dummy_var_273: i32;
  var vslice_dummy_var_274: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} $p0 := ldv_zalloc(16);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1418} $i2 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1419} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i2);
    call {:si_unique_call 1420} {:cexpr "tmp___0"} boogie_si_record_i64($i2);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $p3 := ldv_zalloc(184);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1422} $i5 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1423} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i5);
    call {:si_unique_call 1424} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} $p6 := ldv_zalloc(1);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} $p7 := ldv_zalloc(8);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1427} $i9 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1428} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i9);
    call {:si_unique_call 1429} {:cexpr "tmp___5"} boogie_si_record_i64($i9);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1430} $i10 := __VERIFIER_nondet_int();
    call {:si_unique_call 1431} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i10);
    call {:si_unique_call 1432} {:cexpr "tmp___6"} boogie_si_record_i32($i10);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i10, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} ldv_stop();
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i52 := $M.67;
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 1);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb42:
    assume $i53 == 1;
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $p54 := $M.56;
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} $i55 := pd_video_open($p54);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $M.68 := $i55;
    call {:si_unique_call 1451} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i55);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i56 := $M.68;
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume $i57 == 1;
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1452} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i58 := $M.63;
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, 1);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $M.63 := $i59;
    call {:si_unique_call 1453} {:cexpr "ref_cnt"} boogie_si_record_i32($i59);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i44 := $M.67;
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 1);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i48 := $M.67;
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 2);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb39:
    assume $i49 == 1;
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p50 := $M.56;
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} vslice_dummy_var_274 := pd_video_poll($p50, $p1);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1449} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i45 == 1;
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $p46 := $M.56;
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} vslice_dummy_var_273 := pd_video_poll($p46, $p1);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1447} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $i40 := $M.67;
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 2);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb33:
    assume $i41 == 1;
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $p42 := $M.56;
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} vslice_dummy_var_272 := pd_video_read($p42, $p6, $i2, $p8);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1445} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb2:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i10, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i10, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i16 == 1);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i32 := $M.67;
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i36 := $M.67;
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 2);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb30:
    assume $i37 == 1;
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $p38 := $M.56;
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} vslice_dummy_var_271 := video_ioctl2($p38, $i5, $i9);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1443} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i33 == 1;
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $p34 := $M.56;
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} vslice_dummy_var_270 := video_ioctl2($p34, $i5, $i9);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1441} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb13:
    assume $i16 == 1;
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i26 := $M.67;
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 2);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb24:
    assume $i27 == 1;
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $p28 := $M.56;
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} vslice_dummy_var_269 := pd_video_release($p28);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1438} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $i30 := $M.63;
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i30, 1);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $M.63 := $i31;
    call {:si_unique_call 1439} {:cexpr "ref_cnt"} boogie_si_record_i32($i31);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i10, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb15:
    assume $i17 == 1;
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i18 := $M.67;
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i22 := $M.67;
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i23 == 1;
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $p24 := $M.56;
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} vslice_dummy_var_268 := pd_video_mmap($p24, $p4);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1436} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i19 == 1;
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $p20 := $M.56;
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} vslice_dummy_var_267 := pd_video_mmap($p20, $p4);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1434} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const __VERIFIER_nondet_size_t: ref;

axiom __VERIFIER_nondet_size_t == $sub.ref(0, 537992);

procedure __VERIFIER_nondet_size_t() returns ($r: i64);



const ldv_initialize_snd_pcm_ops_8: ref;

axiom ldv_initialize_snd_pcm_ops_8 == $sub.ref(0, 539024);

procedure ldv_initialize_snd_pcm_ops_8();
  free requires assertsPassed;
  modifies $M.69, $M.0, $CurrAddr;



implementation ldv_initialize_snd_pcm_ops_8()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} $p0 := ldv_zalloc(712);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $M.69 := $p0;
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_8: ref;

axiom ldv_main_exported_8 == $sub.ref(0, 540056);

procedure ldv_main_exported_8();
  free requires assertsPassed;
  modifies $M.70, $M.0, $M.71, $M.63, $M.72, $M.10, $M.9, $M.8, $M.7, $M.6, $M.22, $M.24, $CurrAddr, assertsPassed, $M.25, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.1, $M.2, $M.34, $M.36, $M.11, $M.38;



implementation ldv_main_exported_8()
{
  var $i0: i64;
  var $i1: i32;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var vslice_dummy_var_275: i64;
  var vslice_dummy_var_276: i64;
  var vslice_dummy_var_277: i32;
  var vslice_dummy_var_278: i32;
  var vslice_dummy_var_279: i32;
  var vslice_dummy_var_280: i32;
  var vslice_dummy_var_281: i32;
  var vslice_dummy_var_282: i32;
  var vslice_dummy_var_283: ref;
  var vslice_dummy_var_284: ref;
  var vslice_dummy_var_285: i32;
  var vslice_dummy_var_286: i32;
  var vslice_dummy_var_287: i32;
  var vslice_dummy_var_288: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1456} $i0 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1457} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i0);
    call {:si_unique_call 1458} {:cexpr "tmp"} boogie_si_record_i64($i0);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1459} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1460} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    call {:si_unique_call 1461} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1462} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1463} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1464} {:cexpr "tmp___1"} boogie_si_record_i32($i2);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $p3 := ldv_zalloc(608);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} $p5 := ldv_zalloc(1);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1467} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1468} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    call {:si_unique_call 1469} {:cexpr "tmp___4"} boogie_si_record_i32($i6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i6, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i6, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i6, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} ldv_stop();
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i81 := $M.70;
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 1);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i85 := $M.70;
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 2);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb75:
    assume $i86 == 1;
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $p87 := $M.69;
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} vslice_dummy_var_288 := snd_pd_capture_trigger($p87, $i2);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1505} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb72:
    assume $i82 == 1;
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $p83 := $M.69;
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} vslice_dummy_var_287 := snd_pd_capture_trigger($p83, $i2);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1503} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i73 := $M.70;
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 1);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i77 := $M.70;
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 2);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb69:
    assume $i78 == 1;
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $p79 := $M.69;
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} vslice_dummy_var_286 := snd_pd_hw_capture_params($p79, $p4);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1501} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb66:
    assume $i74 == 1;
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $p75 := $M.69;
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} vslice_dummy_var_285 := snd_pd_hw_capture_params($p75, $p4);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1499} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i65 := $M.70;
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 1);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i69 := $M.70;
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 2);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb63:
    assume $i70 == 1;
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $p71 := $M.69;
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} vslice_dummy_var_284 := snd_pcm_pd_get_page($p71, $i0);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1497} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb60:
    assume $i66 == 1;
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $p67 := $M.69;
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} vslice_dummy_var_283 := snd_pcm_pd_get_page($p67, $i0);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1495} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb4:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i6, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i12 == 1);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $i57 := $M.70;
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 2);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb54:
    assume $i58 == 1;
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $p59 := $M.69;
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} $i60 := snd_pd_pcm_close($p59);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $M.72 := $i60;
    call {:si_unique_call 1491} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i60);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $i61 := $M.72;
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 0);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb56:
    assume $i62 == 1;
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1492} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $i63 := $M.63;
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32($i63, 1);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $M.63 := $i64;
    call {:si_unique_call 1493} {:cexpr "ref_cnt"} boogie_si_record_i32($i64);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    goto $bb58;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i12 == 1;
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i49 := $M.70;
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 1);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i53 := $M.70;
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 2);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb51:
    assume $i54 == 1;
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $p55 := $M.69;
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} vslice_dummy_var_282 := snd_pd_hw_capture_free($p55);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1489} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb48:
    assume $i50 == 1;
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $p51 := $M.69;
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} vslice_dummy_var_281 := snd_pd_hw_capture_free($p51);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1487} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i6, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i6, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i14 == 1);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i41 := $M.70;
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i45 := $M.70;
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 2);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb45:
    assume $i46 == 1;
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p47 := $M.69;
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} vslice_dummy_var_280 := snd_pd_prepare($p47);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1485} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i42 == 1;
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $p43 := $M.69;
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} vslice_dummy_var_279 := snd_pd_prepare($p43);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1483} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb17:
    assume $i14 == 1;
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i33 := $M.70;
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 1);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i37 := $M.70;
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 2);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb39:
    assume $i38 == 1;
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $p39 := $M.69;
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} vslice_dummy_var_278 := snd_pcm_lib_ioctl($p39, $i1, $p5);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1481} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i34 == 1;
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $p35 := $M.69;
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} vslice_dummy_var_277 := snd_pcm_lib_ioctl($p35, $i1, $p5);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1479} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb15:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i15 == 1);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i25 := $M.70;
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb30:
    assume $i26 == 1;
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $p27 := $M.69;
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $i28 := snd_pd_capture_open($p27);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $M.71 := $i28;
    call {:si_unique_call 1475} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i28);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i29 := $M.71;
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i30 == 1;
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1476} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i31 := $M.63;
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 1);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $M.63 := $i32;
    call {:si_unique_call 1477} {:cexpr "ref_cnt"} boogie_si_record_i32($i32);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb19:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i6, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb12;

  $bb21:
    assume $i16 == 1;
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i17 := $M.70;
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i21 := $M.70;
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i22 == 1;
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $p23 := $M.69;
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} vslice_dummy_var_276 := snd_pd_capture_pointer($p23);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1473} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i18 == 1;
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $p19 := $M.69;
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} vslice_dummy_var_275 := snd_pd_capture_pointer($p19);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1471} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    goto $bb25;
}



const ldv_initialize_dvb_frontend_ops_7: ref;

axiom ldv_initialize_dvb_frontend_ops_7 == $sub.ref(0, 541088);

procedure ldv_initialize_dvb_frontend_ops_7();
  free requires assertsPassed;
  modifies $M.73, $M.0, $CurrAddr;



implementation ldv_initialize_dvb_frontend_ops_7()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} $p0 := ldv_zalloc(1288);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $M.73 := $p0;
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_7: ref;

axiom ldv_main_exported_7 == $sub.ref(0, 542120);

procedure ldv_main_exported_7();
  free requires assertsPassed;
  modifies $M.0, $M.74, $M.63, $M.75, $M.10, $M.34, $M.8, $M.7, $M.6, $CurrAddr, assertsPassed, $M.9;



implementation ldv_main_exported_7()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $i141: i32;
  var $i142: i32;
  var $i143: i1;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $i156: i32;
  var $i157: i1;
  var $i159: i32;
  var $i160: i32;
  var vslice_dummy_var_289: i32;
  var vslice_dummy_var_290: i32;
  var vslice_dummy_var_291: i32;
  var vslice_dummy_var_292: i32;
  var vslice_dummy_var_293: i32;
  var vslice_dummy_var_294: i32;
  var vslice_dummy_var_295: i32;
  var vslice_dummy_var_296: i32;
  var vslice_dummy_var_297: i32;
  var vslice_dummy_var_298: i32;
  var vslice_dummy_var_299: i32;
  var vslice_dummy_var_300: i32;
  var vslice_dummy_var_301: i32;
  var vslice_dummy_var_302: i32;
  var vslice_dummy_var_303: i32;
  var vslice_dummy_var_304: i32;
  var vslice_dummy_var_305: i32;
  var vslice_dummy_var_306: i32;
  var vslice_dummy_var_307: i32;
  var vslice_dummy_var_308: i32;
  var vslice_dummy_var_309: i32;
  var vslice_dummy_var_310: i32;
  var vslice_dummy_var_311: i32;
  var vslice_dummy_var_312: i32;
  var vslice_dummy_var_313: i32;
  var vslice_dummy_var_314: i32;
  var vslice_dummy_var_315: i32;
  var vslice_dummy_var_316: i32;
  var vslice_dummy_var_317: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} $p0 := ldv_zalloc(4);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $p2 := ldv_zalloc(2);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} $p4 := ldv_zalloc(12);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} $p6 := ldv_zalloc(4);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} $p8 := ldv_zalloc(4);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} $p10 := ldv_zalloc(2);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1514} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 1515} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 1516} {:cexpr "tmp___5"} boogie_si_record_i32($i12);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1517} $i13 := __VERIFIER_nondet_int();
    call {:si_unique_call 1518} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i13);
    call {:si_unique_call 1519} {:cexpr "tmp___6"} boogie_si_record_i32($i13);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i13, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i13, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i13, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} ldv_stop();
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $i156 := $M.74;
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 1);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb128:
    assume $i157 == 1;
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} vslice_dummy_var_317 := ldv_setup_7();
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $M.74 := 2;
    call {:si_unique_call 1586} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $i159 := $M.63;
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $i160 := $add.i32($i159, 1);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $M.63 := $i160;
    call {:si_unique_call 1587} {:cexpr "ref_cnt"} boogie_si_record_i32($i160);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i144 := $M.74;
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 1);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i148 := $M.74;
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 3);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $i152 := $M.74;
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 2);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb125:
    assume $i153 == 1;
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $p154 := $M.73;
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} vslice_dummy_var_316 := poseidon_read_unc_blocks($p154, $p7);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $M.74 := 2;
    call {:si_unique_call 1584} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb122:
    assume $i149 == 1;
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $p150 := $M.73;
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} vslice_dummy_var_315 := poseidon_read_unc_blocks($p150, $p7);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $M.74 := 3;
    call {:si_unique_call 1582} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb119:
    assume $i145 == 1;
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $p146 := $M.73;
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} vslice_dummy_var_314 := poseidon_read_unc_blocks($p146, $p7);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 1580} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb6:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i13, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i138 := $M.74;
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 2);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb113:
    assume $i139 == 1;
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $p140 := $M.73;
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} $i141 := poseidon_fe_init($p140);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $M.75 := $i141;
    call {:si_unique_call 1577} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i141);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i142 := $M.75;
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 0);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb115:
    assume $i143 == 1;
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $M.74 := 3;
    call {:si_unique_call 1578} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $i126 := $M.74;
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 1);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i130 := $M.74;
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i130, 3);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i134 := $M.74;
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 2);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb110:
    assume $i135 == 1;
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $p136 := $M.73;
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} vslice_dummy_var_313 := poseidon_read_status($p136, $p9);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $M.74 := 2;
    call {:si_unique_call 1575} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb107:
    assume $i131 == 1;
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $p132 := $M.73;
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} vslice_dummy_var_312 := poseidon_read_status($p132, $p9);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $M.74 := 3;
    call {:si_unique_call 1573} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb104:
    assume $i127 == 1;
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $p128 := $M.73;
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} vslice_dummy_var_311 := poseidon_read_status($p128, $p9);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 1571} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb4:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i13, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i13, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i21 == 1);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i114 := $M.74;
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 1);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i118 := $M.74;
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 3);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i122 := $M.74;
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 2);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb101:
    assume $i123 == 1;
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $p124 := $M.73;
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} vslice_dummy_var_310 := poseidon_fe_get_tune_settings($p124, $p5);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $M.74 := 2;
    call {:si_unique_call 1569} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb98:
    assume $i119 == 1;
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $p120 := $M.73;
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} vslice_dummy_var_309 := poseidon_fe_get_tune_settings($p120, $p5);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $M.74 := 3;
    call {:si_unique_call 1567} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb95:
    assume $i115 == 1;
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $p116 := $M.73;
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} vslice_dummy_var_308 := poseidon_fe_get_tune_settings($p116, $p5);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 1565} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i102 := $M.74;
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 1);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i106 := $M.74;
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 3);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i110 := $M.74;
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 2);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb92:
    assume $i111 == 1;
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $p112 := $M.73;
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} vslice_dummy_var_307 := poseidon_read_signal_strength($p112, $p11);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $M.74 := 2;
    call {:si_unique_call 1563} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb89:
    assume $i107 == 1;
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $p108 := $M.73;
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} vslice_dummy_var_306 := poseidon_read_signal_strength($p108, $p11);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $M.74 := 3;
    call {:si_unique_call 1561} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb86:
    assume $i103 == 1;
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $p104 := $M.73;
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} vslice_dummy_var_305 := poseidon_read_signal_strength($p104, $p11);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 1559} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb15:
    assume $i20 == 1;
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $i90 := $M.74;
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 1);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i94 := $M.74;
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 3);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i98 := $M.74;
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 2);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb83:
    assume $i99 == 1;
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $p100 := $M.73;
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} vslice_dummy_var_304 := poseidon_read_ber($p100, $p1);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $M.74 := 2;
    call {:si_unique_call 1557} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb80:
    assume $i95 == 1;
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $p96 := $M.73;
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} vslice_dummy_var_303 := poseidon_read_ber($p96, $p1);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $M.74 := 3;
    call {:si_unique_call 1555} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb77:
    assume $i91 == 1;
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $p92 := $M.73;
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} vslice_dummy_var_302 := poseidon_read_ber($p92, $p1);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 1553} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb2:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i13, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i13, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i13, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i24 == 1);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $i78 := $M.74;
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 1);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i82 := $M.74;
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 3);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i86 := $M.74;
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 2);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb74:
    assume $i87 == 1;
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $p88 := $M.73;
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} vslice_dummy_var_301 := poseidon_get_fe($p88);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $M.74 := 2;
    call {:si_unique_call 1551} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb71:
    assume $i83 == 1;
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $p84 := $M.73;
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} vslice_dummy_var_300 := poseidon_get_fe($p84);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $M.74 := 3;
    call {:si_unique_call 1549} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb68:
    assume $i79 == 1;
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $p80 := $M.73;
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} vslice_dummy_var_299 := poseidon_get_fe($p80);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 1547} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $i68 := $M.74;
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 3);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i73 := $M.74;
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 2);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb65:
    assume $i74 == 1;
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $p75 := $M.73;
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} poseidon_fe_release($p75);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 1544} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $i76 := $M.63;
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $i77 := $sub.i32($i76, 1);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $M.63 := $i77;
    call {:si_unique_call 1545} {:cexpr "ref_cnt"} boogie_si_record_i32($i77);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb62:
    assume $i69 == 1;
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $p70 := $M.73;
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} poseidon_fe_release($p70);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 1541} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $i71 := $M.63;
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32($i71, 1);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $M.63 := $i72;
    call {:si_unique_call 1542} {:cexpr "ref_cnt"} boogie_si_record_i32($i72);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb21:
    assume $i23 == 1;
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $i64 := $M.74;
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 3);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb59:
    assume $i65 == 1;
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $p66 := $M.73;
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} vslice_dummy_var_298 := poseidon_read_snr($p66, $p3);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $M.74 := 3;
    call {:si_unique_call 1539} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb19:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i13, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i13, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i26 == 1);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i52 := $M.74;
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 1);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i56 := $M.74;
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 3);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i60 := $M.74;
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 2);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb56:
    assume $i61 == 1;
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $p62 := $M.73;
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} vslice_dummy_var_297 := poseidon_set_fe($p62);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $M.74 := 2;
    call {:si_unique_call 1537} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume $i57 == 1;
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $p58 := $M.73;
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} vslice_dummy_var_296 := poseidon_set_fe($p58);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $M.74 := 3;
    call {:si_unique_call 1535} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb50:
    assume $i53 == 1;
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $p54 := $M.73;
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} vslice_dummy_var_295 := poseidon_set_fe($p54);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 1533} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb27:
    assume $i26 == 1;
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $i40 := $M.74;
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i44 := $M.74;
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 3);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i48 := $M.74;
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 2);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb47:
    assume $i49 == 1;
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $p50 := $M.73;
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} vslice_dummy_var_294 := poseidon_fe_sleep($p50);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $M.74 := 2;
    call {:si_unique_call 1531} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i45 == 1;
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $p46 := $M.73;
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} vslice_dummy_var_293 := poseidon_fe_sleep($p46);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $M.74 := 3;
    call {:si_unique_call 1529} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i41 == 1;
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $p42 := $M.73;
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} vslice_dummy_var_292 := poseidon_fe_sleep($p42);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 1527} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb25:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i13, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb12;

  $bb29:
    assume $i27 == 1;
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $i28 := $M.74;
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i32 := $M.74;
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 3);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i36 := $M.74;
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 2);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i37 == 1;
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $p38 := $M.73;
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} vslice_dummy_var_291 := poseidon_ts_bus_ctrl($p38, $i12);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $M.74 := 2;
    call {:si_unique_call 1525} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i33 == 1;
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $p34 := $M.73;
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} vslice_dummy_var_290 := poseidon_ts_bus_ctrl($p34, $i12);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $M.74 := 3;
    call {:si_unique_call 1523} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i29 == 1;
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $p30 := $M.73;
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} vslice_dummy_var_289 := poseidon_ts_bus_ctrl($p30, $i12);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 1521} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    goto $bb33;

  SeqInstr_169:
    assume !assertsPassed;
    return;
}



const ldv_setup_7: ref;

axiom ldv_setup_7 == $sub.ref(0, 543152);

procedure ldv_setup_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_setup_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1589} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1590} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_initialize_v4l2_ioctl_ops_4: ref;

axiom ldv_initialize_v4l2_ioctl_ops_4 == $sub.ref(0, 544184);

procedure ldv_initialize_v4l2_ioctl_ops_4();
  free requires assertsPassed;
  modifies $M.76, $M.77, $M.78, $M.0, $CurrAddr;



implementation ldv_initialize_v4l2_ioctl_ops_4()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} $p0 := ldv_zalloc(360);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $M.76 := $p0;
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} $p2 := ldv_zalloc(32);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $M.77 := $p2;
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} $p4 := ldv_zalloc(168);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $M.78 := $p4;
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_v4l2_file_operations_6: ref;

axiom ldv_initialize_v4l2_file_operations_6 == $sub.ref(0, 545216);

procedure ldv_initialize_v4l2_file_operations_6();
  free requires assertsPassed;
  modifies $M.79, $M.0, $CurrAddr;



implementation ldv_initialize_v4l2_file_operations_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} $p0 := ldv_zalloc(360);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $M.79 := $p0;
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_6: ref;

axiom ldv_main_exported_6 == $sub.ref(0, 546248);

procedure ldv_main_exported_6();
  free requires assertsPassed;
  modifies $M.0, $M.81, $M.80, $M.63, $M.10, $M.36, $CurrAddr, $M.8, $M.7, $M.6, assertsPassed, $M.9;



implementation ldv_main_exported_6()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var vslice_dummy_var_318: i32;
  var vslice_dummy_var_319: i32;
  var vslice_dummy_var_320: i32;
  var vslice_dummy_var_321: i64;
  var vslice_dummy_var_322: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} $p0 := ldv_zalloc(16);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1596} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1597} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    call {:si_unique_call 1598} {:cexpr "tmp___0"} boogie_si_record_i64($i2);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1599} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1600} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    call {:si_unique_call 1601} {:cexpr "tmp___1"} boogie_si_record_i32($i3);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1602} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1603} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 1604} {:cexpr "tmp___2"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i4, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} ldv_stop();
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i32 := $M.80;
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i36 := $M.80;
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 2);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb32:
    assume $i37 == 1;
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $p38 := $M.79;
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} vslice_dummy_var_322 := video_ioctl2($p38, $i3, $i2);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $M.80 := 2;
    call {:si_unique_call 1619} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i33 == 1;
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $p34 := $M.79;
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} vslice_dummy_var_321 := video_ioctl2($p34, $i3, $i2);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1617} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i24 := $M.80;
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 1);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i28 := $M.80;
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 2);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i29 == 1;
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $p30 := $M.79;
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} vslice_dummy_var_320 := v4l2_ctrl_poll($p30, $p1);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $M.80 := 2;
    call {:si_unique_call 1615} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i25 == 1;
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $p26 := $M.79;
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} vslice_dummy_var_319 := v4l2_ctrl_poll($p26, $p1);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1613} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i8 == 1);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $i18 := $M.80;
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 2);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i19 == 1;
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $p20 := $M.79;
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} vslice_dummy_var_318 := poseidon_fm_close($p20);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1610} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $i22 := $M.63;
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32($i22, 1);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $M.63 := $i23;
    call {:si_unique_call 1611} {:cexpr "ref_cnt"} boogie_si_record_i32($i23);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i10 := $M.80;
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $p12 := $M.79;
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} $i13 := poseidon_fm_open($p12);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $M.81 := $i13;
    call {:si_unique_call 1606} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i13);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $i14 := $M.81;
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i15 == 1;
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $M.80 := 2;
    call {:si_unique_call 1607} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $i16 := $M.63;
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 1);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $M.63 := $i17;
    call {:si_unique_call 1608} {:cexpr "ref_cnt"} boogie_si_record_i32($i17);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const ldv_main_exported_4: ref;

axiom ldv_main_exported_4 == $sub.ref(0, 547280);

procedure ldv_main_exported_4();
  free requires assertsPassed;
  modifies $M.82, $M.0, $M.37, $M.38, $CurrAddr;



implementation ldv_main_exported_4()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var vslice_dummy_var_323: i32;
  var vslice_dummy_var_324: i32;
  var vslice_dummy_var_325: i32;
  var vslice_dummy_var_326: i32;
  var vslice_dummy_var_327: i32;
  var vslice_dummy_var_328: i32;
  var vslice_dummy_var_329: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} $p0 := ldv_zalloc(84);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} $p2 := ldv_zalloc(1);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} $p3 := ldv_zalloc(1);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} $p4 := ldv_zalloc(104);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} $p6 := ldv_zalloc(1);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} $p7 := ldv_zalloc(1);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} $p8 := ldv_zalloc(44);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} $p10 := ldv_zalloc(44);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} $p12 := ldv_zalloc(1);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} $p13 := ldv_zalloc(84);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1631} $i15 := __VERIFIER_nondet_int();
    call {:si_unique_call 1632} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i15);
    call {:si_unique_call 1633} {:cexpr "tmp___9"} boogie_si_record_i32($i15);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i15, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i15, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i15, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} ldv_stop();
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i49 := $M.82;
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 1);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb38:
    assume $i50 == 1;
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $p51 := $M.78;
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $p52 := $M.77;
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} vslice_dummy_var_329 := v4l2_ctrl_subscribe_event($p51, $p52);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1647} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i45 := $M.82;
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 1);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb35:
    assume $i46 == 1;
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $p47 := $M.76;
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} vslice_dummy_var_328 := fm_set_freq($p47, $p7, $p11);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1645} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb4:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i15, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i41 := $M.82;
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb32:
    assume $i42 == 1;
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $p43 := $M.76;
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} vslice_dummy_var_327 := vidioc_querycap___0($p43, $p12, $p5);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1643} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i37 := $M.82;
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 1);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb29:
    assume $i38 == 1;
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $p39 := $M.76;
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} vslice_dummy_var_326 := fm_get_freq($p39, $p6, $p9);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1641} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb2:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i15, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i15, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i22 == 1);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i33 := $M.82;
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 1);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26:
    assume $i34 == 1;
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $p35 := $M.76;
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} vslice_dummy_var_325 := vidioc_s_tuner___0($p35, $p2, $p14);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1639} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb15:
    assume $i22 == 1;
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i29 := $M.82;
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23:
    assume $i30 == 1;
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $p31 := $M.76;
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} vslice_dummy_var_324 := tlg_fm_vidioc_g_tuner($p31, $p3, $p1);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1637} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb13:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i15, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb17:
    assume $i23 == 1;
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i24 := $M.82;
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 1);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i25 == 1;
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $p26 := $M.78;
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $p27 := $M.77;
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} vslice_dummy_var_323 := v4l2_event_unsubscribe($p26, $p27);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1635} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    goto $bb21;
}



const ldv_main_exported_3: ref;

axiom ldv_main_exported_3 == $sub.ref(0, 548312);

procedure ldv_main_exported_3();
  free requires assertsPassed;
  modifies $M.83, $M.63, $M.0, $CurrAddr;



implementation ldv_main_exported_3()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i32;
  var vslice_dummy_var_330: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} $p0 := ldv_zalloc(1800);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1650} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1651} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1652} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} ldv_stop();
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i10 := $M.83;
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} vslice_dummy_var_330 := ldv_probe_3();
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $M.83 := 2;
    call {:si_unique_call 1657} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $i13 := $M.63;
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 1);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $M.63 := $i14;
    call {:si_unique_call 1658} {:cexpr "ref_cnt"} boogie_si_record_i32($i14);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb6;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i6 := $M.83;
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} video_device_release_empty($p1);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1654} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $i8 := $M.63;
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i8, 1);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $M.63 := $i9;
    call {:si_unique_call 1655} {:cexpr "ref_cnt"} boogie_si_record_i32($i9);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const ldv_probe_3: ref;

axiom ldv_probe_3 == $sub.ref(0, 549344);

procedure ldv_probe_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1660} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1661} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_main_exported_5: ref;

axiom ldv_main_exported_5 == $sub.ref(0, 550376);

procedure ldv_main_exported_5();
  free requires assertsPassed;
  modifies $M.0, $M.84, $CurrAddr;



implementation ldv_main_exported_5()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var vslice_dummy_var_331: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} $p0 := ldv_zalloc(144);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1663} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1664} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1665} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} ldv_stop();
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i3 == 1;
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i4 := $M.84;
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} vslice_dummy_var_331 := tlg_fm_s_ctrl($p1);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1667} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_usb_driver_1: ref;

axiom ldv_usb_driver_1 == $sub.ref(0, 551408);

procedure ldv_usb_driver_1();
  free requires assertsPassed;
  modifies $M.85, $M.0, $CurrAddr;



implementation ldv_usb_driver_1()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} $p0 := ldv_zalloc(1520);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $M.85 := $p0;
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 552440);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.86, $M.80, $M.60, $M.83, $M.74, $M.66, $M.67, $M.87, $M.70, $M.88, $M.82, $M.63, $M.89, $M.62, $M.65, $M.84, $M.0, $M.81, $M.57, $M.58, $M.59, $M.17, $M.20, $M.75, $M.1, $M.2, $M.68, $M.71, $M.72, $M.90, $M.91, $M.92, $M.94, $M.37, $M.95, $M.50, $M.51, $M.76, $M.77, $M.78, $M.69, $M.56, $M.73, $M.52, $M.53, $M.54, $M.55, $M.79, $M.61, $M.64, $M.5, $M.85, $M.93, $M.10, $M.96, $M.6, $M.9, $M.7, $M.8, $M.22, $M.24, $M.23, $M.25, $M.111, $M.112, $M.46, $M.39, $M.32, $M.33, $M.119, $M.4, $M.15, $M.16, $M.14, $M.13, $M.138, $M.139, $M.140, $M.12, $M.30, $M.31, $M.18, $M.19, $M.144, $M.145, $M.146, $M.44, $CurrAddr, $M.36, $M.34, $M.11, $M.41, $M.38, $M.40, $M.45, $M.49, assertsPassed, $M.27, $M.28, $M.29, $M.26, $M.21;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i1;
  var cmdloc_dummy_var_97: [ref]i8;
  var cmdloc_dummy_var_98: [ref]i8;
  var vslice_dummy_var_332: i32;

  $bb0:
    call {:si_unique_call 1670} $initialize();
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} $p1 := ldv_zalloc(24);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} $p3 := ldv_zalloc(1);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1675} $i4 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1676} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i4);
    call {:si_unique_call 1677} {:cexpr "tmp___1"} boogie_si_record_i64($i4);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} $p5 := ldv_zalloc(32);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} ldv_initialize();
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_97 := $M.86;
    call {:si_unique_call 1680} cmdloc_dummy_var_98 := $memset.i8(cmdloc_dummy_var_97, $p7, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.86 := cmdloc_dummy_var_98;
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $M.80 := 0;
    call {:si_unique_call 1681} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $M.60 := 0;
    call {:si_unique_call 1682} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $M.83 := 0;
    call {:si_unique_call 1683} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $M.74 := 0;
    call {:si_unique_call 1684} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $M.66 := 0;
    call {:si_unique_call 1685} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $M.67 := 0;
    call {:si_unique_call 1686} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $M.87 := 0;
    call {:si_unique_call 1687} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $M.70 := 0;
    call {:si_unique_call 1688} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $M.88 := 0;
    call {:si_unique_call 1689} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $M.82 := 0;
    call {:si_unique_call 1690} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $M.63 := 0;
    call {:si_unique_call 1691} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1692} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $M.62 := 0;
    call {:si_unique_call 1693} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $M.65 := 0;
    call {:si_unique_call 1694} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $M.84 := 0;
    call {:si_unique_call 1695} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $p64, $p65, $i66, $i67, $i68, $i69, $i70, $i71, $p72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $p80, $i81, $i82, $i83, $i84, $i85, $i86, $p87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, vslice_dummy_var_332 := main_loop_$bb1($p0, $p2, $p3, $i4, $p6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $p64, $p65, $i66, $i67, $i68, $i69, $i70, $i71, $p72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $p80, $i81, $i82, $i83, $i84, $i85, $i86, $p87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, vslice_dummy_var_332);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i8, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i8, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i8, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i8, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} ldv_stop();
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb37_dummy;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $i118 := $M.84;
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb163:
    assume $i119 == 1;
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} ldv_main_exported_5();
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb9:
    assume $i12 == 1;
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i116 := $M.65;
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb160:
    assume $i117 == 1;
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} ldv_main_exported_10();
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb7:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i8, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i14 == 1);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i114 := $M.62;
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb157:
    assume $i115 == 1;
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} ldv_main_exported_13();
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    goto $bb159;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $i97 := $M.89;
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb127:
    assume $i98 == 1;
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1736} $i99 := __VERIFIER_nondet_int();
    call {:si_unique_call 1737} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i99);
    call {:si_unique_call 1738} {:cexpr "tmp___6"} boogie_si_record_i32($i99);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i99, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i99, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} ldv_stop();
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb132:
    assume $i101 == 1;
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $i107 := $M.89;
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 1);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb145:
    assume $i108 == 1;
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} $i109 := poseidon_init();
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $M.95 := $i109;
    call {:si_unique_call 1743} {:cexpr "ldv_retval_9"} boogie_si_record_i32($i109);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $i110 := $M.95;
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $i112 := $M.95;
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 0);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb150:
    assume $i113 == 1;
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $M.89 := 2;
    call {:si_unique_call 1745} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1746} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1747} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1748} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} ldv_videobuf_queue_ops_13();
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1750} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} ldv_initialize_v4l2_ioctl_ops_4();
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1752} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} ldv_initialize_snd_pcm_ops_8();
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1754} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1755} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} ldv_initialize_v4l2_file_operations_12();
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1757} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 1758} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} ldv_initialize_dvb_frontend_ops_7();
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1760} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1761} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} ldv_initialize_v4l2_ioctl_ops_11();
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1763} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} ldv_initialize_v4l2_file_operations_6();
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb147:
    assume $i111 == 1;
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $M.89 := 3;
    call {:si_unique_call 1744} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} ldv_check_final_state();
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb130:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i99, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb134;

  $bb135:
    assume $i102 == 1;
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $i103 := $M.89;
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 2);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb137:
    assume $i104 == 1;
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $i105 := $M.63;
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 0);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb139;

  $bb140:
    assume $i106 == 1;
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} poseidon_exit();
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $M.89 := 3;
    call {:si_unique_call 1740} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb5:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i8, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i8, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i16 == 1);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i95 := $M.82;
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb124:
    assume $i96 == 1;
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} ldv_main_exported_4();
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb18:
    assume $i16 == 1;
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $i45 := $M.88;
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb68:
    assume $i46 == 1;
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1712} $i47 := __VERIFIER_nondet_int();
    call {:si_unique_call 1713} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i47);
    call {:si_unique_call 1714} {:cexpr "tmp___5"} boogie_si_record_i32($i47);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i47, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i47, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i47, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} ldv_stop();
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb77:
    assume $i51 == 1;
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i90 := $M.88;
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 3);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb115:
    assume $i91 == 1;
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} $i92 := ldv_reset_resume_1();
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $M.94 := $i92;
    call {:si_unique_call 1732} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i92);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $i93 := $M.94;
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 0);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb117:
    assume $i94 == 1;
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $M.88 := 2;
    call {:si_unique_call 1733} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb75:
    assume $i50 == 1;
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $i76 := $M.88;
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 3);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i83 := $M.88;
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 2);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb109:
    assume $i84 == 1;
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $i85 := $M.93;
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 0);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb111;

  $bb112:
    assume $i86 == 1;
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $p87 := $M.85;
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} poseidon_disconnect($p87);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1729} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $i88 := $M.63;
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i89 := $sub.i32($i88, 1);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $M.63 := $i89;
    call {:si_unique_call 1730} {:cexpr "ref_cnt"} boogie_si_record_i32($i89);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb103:
    assume $i77 == 1;
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $i78 := $M.93;
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 0);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb105;

  $bb106:
    assume $i79 == 1;
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $p80 := $M.85;
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} poseidon_disconnect($p80);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1726} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $i81 := $M.63;
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32($i81, 1);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $M.63 := $i82;
    call {:si_unique_call 1727} {:cexpr "ref_cnt"} boogie_si_record_i32($i82);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb73:
    assume $i49 == 1;
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $i70 := $M.88;
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 3);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb97:
    assume $i71 == 1;
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $p72 := $M.85;
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} $i73 := poseidon_resume($p72);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $M.92 := $i73;
    call {:si_unique_call 1723} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i73);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $i74 := $M.92;
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 0);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb99:
    assume $i75 == 1;
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $M.88 := 2;
    call {:si_unique_call 1724} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    goto $bb101;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb71:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i47, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i52 == 1);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $i62 := $M.88;
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 2);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb91:
    assume $i63 == 1;
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $p64 := $M.85;
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.86, $p65);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} $i67 := poseidon_suspend($p64, $i66);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $M.91 := $i67;
    call {:si_unique_call 1720} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i67);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $i68 := $M.91;
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb93:
    assume $i69 == 1;
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $M.88 := 3;
    call {:si_unique_call 1721} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    goto $bb95;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb80:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i47, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb79;

  $bb82:
    assume $i53 == 1;
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $i54 := $M.88;
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 1);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb84:
    assume $i55 == 1;
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $p56 := $M.85;
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} $i57 := poseidon_probe($p56, $p6);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $M.90 := $i57;
    call {:si_unique_call 1716} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i57);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $i58 := $M.90;
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb86:
    assume $i59 == 1;
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $M.88 := 2;
    call {:si_unique_call 1717} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $i60 := $M.63;
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, 1);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $M.63 := $i61;
    call {:si_unique_call 1718} {:cexpr "ref_cnt"} boogie_si_record_i32($i61);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    goto $bb88;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i15 == 1;
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i43 := $M.70;
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb65:
    assume $i44 == 1;
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} ldv_main_exported_8();
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    goto $bb67;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i8, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i8, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i8, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i19 == 1);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $i36 := $M.87;
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb53:
    assume $i37 == 1;
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1705} $i38 := __VERIFIER_nondet_int();
    call {:si_unique_call 1706} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i38);
    call {:si_unique_call 1707} {:cexpr "tmp___4"} boogie_si_record_i32($i38);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} ldv_stop();
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb56:
    assume $i39 == 1;
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $i40 := $M.87;
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb58:
    assume $i41 == 1;
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} vslice_dummy_var_332 := pm_notifier_block($p2, $i4, $p3);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1709} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb24:
    assume $i19 == 1;
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i34 := $M.67;
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb50:
    assume $i35 == 1;
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} ldv_main_exported_12();
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i8, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i20 == 1);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i32 := $M.66;
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb47:
    assume $i33 == 1;
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} ldv_main_exported_9();
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb26:
    assume $i20 == 1;
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $i30 := $M.74;
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb44:
    assume $i31 == 1;
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} ldv_main_exported_7();
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i8, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i8, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i22 == 1);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i28 := $M.83;
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb41:
    assume $i29 == 1;
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} ldv_main_exported_3();
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb30:
    assume $i22 == 1;
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i26 := $M.60;
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb38:
    assume $i27 == 1;
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} ldv_main_exported_11();
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb28:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i8, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb13;

  $bb32:
    assume $i23 == 1;
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i24 := $M.80;
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i25 == 1;
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} ldv_main_exported_6();
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb37_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1696} $i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 1697} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
    call {:si_unique_call 1698} {:cexpr "tmp___3"} boogie_si_record_i32($i8);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 553472);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    return;
}



const ldv_reset_resume_1: ref;

axiom ldv_reset_resume_1 == $sub.ref(0, 554504);

procedure ldv_reset_resume_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_reset_resume_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1770} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1771} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const poseidon_exit: ref;

axiom poseidon_exit == $sub.ref(0, 555536);

procedure poseidon_exit();
  free requires assertsPassed;
  modifies $M.88;



implementation poseidon_exit()
{
  var vslice_dummy_var_333: i32;
  var vslice_dummy_var_334: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} vslice_dummy_var_333 := printk.ref.ref.i32(.str, .str.89, 609);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} vslice_dummy_var_334 := unregister_pm_notifier(pm_notifer);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} ldv_usb_deregister_45(poseidon_driver);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    return;
}



const poseidon_init: ref;

axiom poseidon_init == $sub.ref(0, 556568);

procedure poseidon_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.88, $M.93, $M.85, $M.0, $CurrAddr;



implementation poseidon_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var vslice_dummy_var_335: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} $i0 := ldv_usb_register_driver_44(poseidon_driver, __this_module, .str.90);
    call {:si_unique_call 1776} {:cexpr "ret"} boogie_si_record_i32($i0);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} vslice_dummy_var_335 := register_pm_notifier(pm_notifer);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 557600);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $p0 := $M.9;
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} ldv_error();
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $M.7;
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} ldv_error();
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i6 := $M.8;
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i7 == 1);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} ldv_error();
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := $M.10;
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} ldv_error();
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i10 := $M.96;
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} ldv_error();
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i9 == 1;
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_register_driver_44: ref;

axiom ldv_usb_register_driver_44 == $sub.ref(0, 558632);

procedure ldv_usb_register_driver_44($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.88, $M.93, $M.85, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_44($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1784} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1785} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $M.93 := 0;
    call {:si_unique_call 1786} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} ldv_usb_driver_1();
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const register_pm_notifier: ref;

axiom register_pm_notifier == $sub.ref(0, 559664);

procedure register_pm_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_pm_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1788} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1789} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 560696);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1790} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1791} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const unregister_pm_notifier: ref;

axiom unregister_pm_notifier == $sub.ref(0, 561728);

procedure unregister_pm_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unregister_pm_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1792} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1793} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_usb_deregister_45: ref;

axiom ldv_usb_deregister_45 == $sub.ref(0, 562760);

procedure ldv_usb_deregister_45($p0: ref);
  free requires assertsPassed;
  modifies $M.88;



implementation ldv_usb_deregister_45($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} usb_deregister($p0);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $M.88 := 0;
    call {:si_unique_call 1795} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 563792);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 564824);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1796} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 1} true;
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 565856);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 566888);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 567920);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 568952);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 569984);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 571016);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 572048);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 573080);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 574112);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 575144);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 576176);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 577208);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 578240);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1797} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1798} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1799} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1800} __VERIFIER_assume($i4);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 579272);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 580304);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 581336);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 582368);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1801} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1802} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1803} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1804} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1805} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1806} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1807} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1808} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1809} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1810} __VERIFIER_assume($i7);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1811} __VERIFIER_assume($i11);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 583400);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 584432);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1812} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1813} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1814} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1815} __VERIFIER_assume($i4);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 585464);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 586496);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 587528);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 588560);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 589592);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1816} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1817} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1818} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1819} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1820} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1821} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1822} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1823} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1824} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1825} __VERIFIER_assume($i7);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1826} __VERIFIER_assume($i11);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 590624);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 591656);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 592688);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 593720);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 594752);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 595784);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 596816);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 597848);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 598880);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1827} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1828} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1829} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1830} __VERIFIER_assume($i10);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 599912);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1831} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1832} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1833} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 600944);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1834} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1835} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1836} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 601976);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1837} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1838} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 603008);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 604040);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1839} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1840} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 605072);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 606104);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 607136);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_99: [ref]i8;
  var cmdloc_dummy_var_100: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1841} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1842} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1843} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1844} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} $p6 := malloc($i5);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_99 := $M.0;
    call {:si_unique_call 1846} cmdloc_dummy_var_100 := $memset.i8(cmdloc_dummy_var_99, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_100;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 608168);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 609200);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.60, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.5, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.10, $M.96, $M.6, $M.9, $M.7, $M.8, $M.22, $M.24, $M.23, $M.25, $M.111, $M.112, $M.46, $M.0, $M.39, $M.32, $M.33, $M.119, $M.4, $M.15, $M.16, $M.14, $M.13, $M.138, $M.139, $M.140, $M.12, $M.30, $M.31, $M.18, $M.19, $M.144, $M.145, $M.146, $M.44;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1847} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.50 := $0.ref;
    $M.51 := $0.ref;
    $M.52 := $0.ref;
    $M.53 := $0.ref;
    $M.54 := $0.ref;
    $M.55 := $0.ref;
    $M.56 := $0.ref;
    $M.60 := 0;
    call {:si_unique_call 1848} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.62 := 0;
    call {:si_unique_call 1849} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    $M.63 := 0;
    call {:si_unique_call 1850} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.64 := 0;
    call {:si_unique_call 1851} {:cexpr "ldv_retval_10"} boogie_si_record_i32(0);
    $M.65 := 0;
    call {:si_unique_call 1852} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.66 := 0;
    call {:si_unique_call 1853} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.67 := 0;
    call {:si_unique_call 1854} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    $M.68 := 0;
    call {:si_unique_call 1855} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.5 := 0;
    call {:si_unique_call 1856} {:cexpr "debug_mode"} boogie_si_record_i32(0);
    $M.69 := $0.ref;
    $M.70 := 0;
    call {:si_unique_call 1857} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.71 := 0;
    call {:si_unique_call 1858} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.72 := 0;
    call {:si_unique_call 1859} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.73 := $0.ref;
    $M.74 := 0;
    call {:si_unique_call 1860} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.75 := 0;
    call {:si_unique_call 1861} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.76 := $0.ref;
    $M.77 := $0.ref;
    $M.78 := $0.ref;
    $M.79 := $0.ref;
    $M.80 := 0;
    call {:si_unique_call 1862} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 1863} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.82 := 0;
    call {:si_unique_call 1864} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.83 := 0;
    call {:si_unique_call 1865} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.84 := 0;
    call {:si_unique_call 1866} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.85 := $0.ref;
    $M.87 := 0;
    call {:si_unique_call 1867} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.88 := 0;
    call {:si_unique_call 1868} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.89 := 0;
    call {:si_unique_call 1869} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.90 := 0;
    call {:si_unique_call 1870} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.91 := 0;
    call {:si_unique_call 1871} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.92 := 0;
    call {:si_unique_call 1872} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.93 := 0;
    call {:si_unique_call 1873} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.94 := 0;
    call {:si_unique_call 1874} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.95 := 0;
    call {:si_unique_call 1875} {:cexpr "ldv_retval_9"} boogie_si_record_i32(0);
    $M.10 := 0;
    call {:si_unique_call 1876} {:cexpr "INTERF_STATE"} boogie_si_record_i32(0);
    $M.96 := 0;
    call {:si_unique_call 1877} {:cexpr "SERIAL_STATE"} boogie_si_record_i32(0);
    $M.6 := $0.ref;
    $M.9 := $0.ref;
    $M.7 := $0.ref;
    $M.8 := 0;
    call {:si_unique_call 1878} {:cexpr "dev_counter"} boogie_si_record_i32(0);
    $M.22 := 0;
    call {:si_unique_call 1879} {:cexpr "completeFnIntCounter"} boogie_si_record_i32(0);
    $M.24 := 0;
    call {:si_unique_call 1880} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32(0);
    $M.23 := $0.ref;
    $M.25 := $0.ref;
    $M.111 := $store.i16($M.111, id_table, 899);
    $M.111 := $store.i16($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(2, 1)), 6948);
    $M.111 := $store.i16($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 16385);
    $M.111 := $store.i16($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.111 := $store.i16($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(13, 1)), $sub.i8(0, 1));
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(14, 1)), 1);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.111 := $store.i64($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.111 := $store.i16($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 899);
    $M.111 := $store.i16($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(2, 1)), 6948);
    $M.111 := $store.i16($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 16385);
    $M.111 := $store.i16($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.111 := $store.i16($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(13, 1)), $sub.i8(0, 1));
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(14, 1)), 1);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(15, 1)), 1);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.111 := $store.i64($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.111 := $store.i16($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.111 := $store.i16($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(2, 1)), 0);
    $M.111 := $store.i16($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.111 := $store.i16($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.111 := $store.i16($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.111 := $store.i64($M.111, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.112 := $store.ref($M.112, poseidon_driver, .str.90);
    $M.112 := $store.ref($M.112, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), poseidon_probe);
    $M.112 := $store.ref($M.112, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), poseidon_disconnect);
    $M.112 := $store.ref($M.112, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), poseidon_suspend);
    $M.112 := $store.ref($M.112, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), poseidon_resume);
    $M.112 := $store.ref($M.112, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), id_table);
    $M.112 := $store.i32($M.112, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.112 := $store.i32($M.112, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.112 := $store.i32($M.112, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.112 := $store.i32($M.112, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.112 := $store.i64($M.112, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.112 := $store.i32($M.112, $add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 2);
    $M.46 := .str.79;
    $M.0 := $store.ref($M.0, pd_device_list, pd_device_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_device_list, $mul.ref(0, 16)), $mul.ref(8, 1)), pd_device_list);
    $M.39 := $store.i32($M.39, preemphasis, 0);
    $M.39 := $store.i32($M.39, $add.ref($add.ref(preemphasis, $mul.ref(0, 12)), $mul.ref(1, 4)), 32);
    $M.39 := $store.i32($M.39, $add.ref($add.ref(preemphasis, $mul.ref(0, 12)), $mul.ref(2, 4)), 16);
    $M.0 := $store.ref($M.0, poseidon_fm_ioctl_ops, vidioc_querycap___0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(520, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(528, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(536, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(544, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(552, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(560, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(568, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(576, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(584, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(600, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(608, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(616, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(624, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(632, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(640, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(648, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(656, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(664, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(672, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(680, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(688, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(696, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(704, 1)), tlg_fm_vidioc_g_tuner);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(712, 1)), vidioc_s_tuner___0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(720, 1)), fm_get_freq);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(728, 1)), fm_set_freq);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(736, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(744, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(752, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(760, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(768, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(776, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(784, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(792, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(800, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(808, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(816, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(824, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(832, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(840, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(848, 1)), v4l2_ctrl_subscribe_event);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(856, 1)), v4l2_event_unsubscribe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 872)), $mul.ref(864, 1)), $0.ref);
    $M.0 := $store.ref($M.0, poseidon_fm_fops, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 88)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 88)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 88)), $mul.ref(24, 1)), v4l2_ctrl_poll);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 88)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 88)), $mul.ref(40, 1)), video_ioctl2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 88)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 88)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 88)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 88)), $mul.ref(72, 1)), poseidon_fm_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 88)), $mul.ref(80, 1)), poseidon_fm_close);
    $M.0 := $store.ref($M.0, poseidon_fm_template, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(62, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(64, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(66, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(96, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(100, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(128, 1)), poseidon_fm_fops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(216, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(288, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(208, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(209, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(344, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(524, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(528, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(529, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(532, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(536, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(540, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(544, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(552, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(560, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(568, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(576, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(584, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1120, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1128, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1136, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1144, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1160, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1160, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1184, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1184, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1208, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1216, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1220, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1296, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1296, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1368, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1376, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1377, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1520, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1528, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1536, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1544, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1552, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1560, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(0, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(4, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(8, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(9, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1600, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1604, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1608, 1)), $sub.i32(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1612, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1616, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1624, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1704, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1704, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1720, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1728, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1736, 1)), video_device_release_empty);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1744, 1)), poseidon_fm_ioctl_ops);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1752, 1)), $mul.ref(0, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1752, 1)), $mul.ref(1, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1752, 1)), $mul.ref(2, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1776, 1)), $mul.ref(0, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1776, 1)), $mul.ref(1, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1776, 1)), $mul.ref(2, 8)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1808)), $mul.ref(1800, 1)), $0.ref);
    $M.32 := 3;
    call {:si_unique_call 1881} {:cexpr "dvb_bandwidth_length"} boogie_si_record_i32(3);
    $M.33 := $store.i32($M.33, dvb_bandwidth, 8);
    $M.33 := $store.i32($M.33, $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref(0, 8)), $mul.ref(1, 4)), 8000000);
    $M.33 := $store.i32($M.33, $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref(1, 8)), $mul.ref(0, 4)), 7);
    $M.33 := $store.i32($M.33, $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref(1, 8)), $mul.ref(1, 4)), 7000000);
    $M.33 := $store.i32($M.33, $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref(2, 8)), $mul.ref(0, 4)), 6);
    $M.33 := $store.i32($M.33, $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref(2, 8)), $mul.ref(1, 4)), 6000000);
    $M.0 := $store.i8($M.0, poseidon_frontend_ops, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(9, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(12, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(13, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(38, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(39, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(41, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(42, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(43, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(45, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(46, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(47, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(49, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(50, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(51, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(53, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(54, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(55, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(57, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(58, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(59, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(61, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(62, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(63, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(65, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(66, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(67, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(68, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(69, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(70, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(71, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(73, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(74, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(75, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(76, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(77, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(78, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(79, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(81, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(82, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(83, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(84, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(85, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(86, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(87, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(89, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(90, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(91, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(92, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(93, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(94, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(95, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(97, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(98, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(99, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(100, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(101, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(102, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(103, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(105, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(106, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(107, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(108, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(109, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(110, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(111, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(113, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(114, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(115, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(116, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(117, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(118, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(119, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(120, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(121, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(122, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(123, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(124, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(125, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(126, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(127, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(128, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(132, 1)), 174000000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(136, 1)), 862000000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(140, 1)), 62500);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(144, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(148, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(152, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(156, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(160, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(0, 1)), $mul.ref(164, 1)), 1075523247);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(168, 1)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(168, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(168, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(168, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(168, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(168, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(168, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(168, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(176, 1)), poseidon_fe_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(192, 1)), poseidon_fe_init);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(200, 1)), poseidon_fe_sleep);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(232, 1)), poseidon_set_fe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(240, 1)), poseidon_fe_get_tune_settings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(248, 1)), poseidon_get_fe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(256, 1)), poseidon_read_status);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(264, 1)), poseidon_read_ber);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(272, 1)), poseidon_read_signal_strength);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(280, 1)), poseidon_read_snr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(288, 1)), poseidon_read_unc_blocks);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(368, 1)), poseidon_ts_bus_ctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(38, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(39, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(41, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(42, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(43, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(45, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(46, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(47, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(49, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(50, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(51, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(53, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(54, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(55, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(57, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(58, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(59, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(61, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(62, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(63, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(65, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(66, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(67, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(68, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(69, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(70, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(71, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(73, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(74, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(75, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(76, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(77, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(78, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(79, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(81, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(82, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(83, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(84, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(85, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(86, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(87, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(89, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(90, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(91, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(92, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(93, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(94, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(95, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(97, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(98, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(99, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(100, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(101, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(102, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(103, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(105, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(106, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(107, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(108, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(109, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(110, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(111, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(113, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(114, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(115, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(116, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(117, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(118, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(119, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(120, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(121, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(122, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(123, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(124, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(125, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(126, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(127, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(128, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(132, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(136, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(140, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(144, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(0, 1)), $mul.ref(148, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(392, 1)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(680, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(680, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(680, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(680, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(680, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(680, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(680, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(680, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(680, 1)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(752, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 768)), $mul.ref(760, 1)), $0.ref);
    $M.119 := $store.i16($M.119, adapter_nr, $sub.i16(0, 1));
    $M.119 := $store.i16($M.119, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(1, 2)), $sub.i16(0, 1));
    $M.119 := $store.i16($M.119, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(2, 2)), $sub.i16(0, 1));
    $M.119 := $store.i16($M.119, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(3, 2)), $sub.i16(0, 1));
    $M.119 := $store.i16($M.119, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(4, 2)), $sub.i16(0, 1));
    $M.119 := $store.i16($M.119, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(5, 2)), $sub.i16(0, 1));
    $M.119 := $store.i16($M.119, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(6, 2)), $sub.i16(0, 1));
    $M.119 := $store.i16($M.119, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(7, 2)), $sub.i16(0, 1));
    $M.0 := $store.i32($M.0, snd_pd_hw_capture, 65795);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(8, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(16, 1)), 128);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(20, 1)), 48000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(24, 1)), 48000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(28, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(40, 1)), 32768);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(48, 1)), 8192);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(56, 1)), 8192);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(64, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(68, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(72, 1)), 0);
    $M.4 := 0;
    call {:si_unique_call 1882} {:cexpr "usb_transfer_mode"} boogie_si_record_i32(0);
    $M.15 := $store.ref($M.15, pd_inputs, .str.40);
    $M.16 := $store.i32($M.16, $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref(0, 16)), $mul.ref(8, 1)), 1);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref(1, 16)), $mul.ref(0, 1)), .str.41);
    $M.16 := $store.i32($M.16, $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref(1, 16)), $mul.ref(8, 1)), 2);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref(2, 16)), $mul.ref(0, 1)), .str.42);
    $M.16 := $store.i32($M.16, $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref(2, 16)), $mul.ref(8, 1)), 4);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref(3, 16)), $mul.ref(0, 1)), .str.43);
    $M.16 := $store.i32($M.16, $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref(3, 16)), $mul.ref(8, 1)), 8);
    $M.14 := $store.ref($M.14, poseidon_formats, .str.25);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(8, 1)), 1448695129);
    $M.138 := $store.i32($M.138, $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(12, 1)), 16);
    $M.139 := $store.i32($M.139, $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(0, 1)), .str.26);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(8, 1)), 1346520914);
    $M.138 := $store.i32($M.138, $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(12, 1)), 16);
    $M.139 := $store.i32($M.139, $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(16, 1)), 0);
    $M.140 := $store.i64($M.140, video_to_audio_map, 4325425);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(video_to_audio_map, $mul.ref(0, 48)), $mul.ref(0, 16)), $mul.ref(8, 1)), 2);
    $M.140 := $store.i64($M.140, $add.ref($add.ref($add.ref(video_to_audio_map, $mul.ref(0, 48)), $mul.ref(1, 16)), $mul.ref(0, 1)), 4864);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(video_to_audio_map, $mul.ref(0, 48)), $mul.ref(1, 16)), $mul.ref(8, 1)), 8);
    $M.140 := $store.i64($M.140, $add.ref($add.ref($add.ref(video_to_audio_map, $mul.ref(0, 48)), $mul.ref(2, 16)), $mul.ref(0, 1)), 8192);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(video_to_audio_map, $mul.ref(0, 48)), $mul.ref(2, 16)), $mul.ref(8, 1)), 4);
    $M.30 := $store.i64($M.30, poseidon_tvnorms, 32);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 68);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.30 := $store.i32($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(20, 1)), 32);
    $M.30 := $store.i64($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(0, 1)), 1);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 66);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.30 := $store.i32($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(20, 1)), 16);
    $M.30 := $store.i64($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(0, 1)), 4);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 71);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.30 := $store.i32($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(20, 1)), 64);
    $M.30 := $store.i64($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(0, 1)), 8);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 72);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.30 := $store.i32($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(20, 1)), 128);
    $M.30 := $store.i64($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(0, 1)), 16);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 73);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.30 := $store.i32($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(20, 1)), 256);
    $M.30 := $store.i64($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(0, 1)), 256);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.30 := $store.i32($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(20, 1)), 512);
    $M.30 := $store.i64($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(0, 1)), 512);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 78);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.30 := $store.i32($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(20, 1)), 1048576);
    $M.30 := $store.i64($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(0, 1)), 1024);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 78);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 99);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.30 := $store.i32($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(20, 1)), 1048576);
    $M.30 := $store.i64($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(0, 1)), 4096);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 78);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 84);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 83);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 67);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 45);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 77);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.30 := $store.i32($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(20, 1)), 1);
    $M.30 := $store.i64($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(0, 1)), 8192);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 78);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 84);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 83);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 67);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 45);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 74);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 80);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.30 := $store.i32($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(20, 1)), 2);
    $M.30 := $store.i64($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(0, 1)), 65536);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 66);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.30 := $store.i32($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(20, 1)), 4096);
    $M.30 := $store.i64($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(0, 1)), 131072);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 68);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.30 := $store.i32($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(20, 1)), 8192);
    $M.30 := $store.i64($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(0, 1)), 262144);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 71);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.30 := $store.i32($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(20, 1)), 16384);
    $M.30 := $store.i64($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(0, 1)), 524288);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 72);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.30 := $store.i32($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(20, 1)), 32768);
    $M.30 := $store.i64($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(0, 1)), 1048576);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 75);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.30 := $store.i32($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(20, 1)), 65536);
    $M.30 := $store.i64($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(0, 1)), 2097152);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 75);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 49);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.30 := $store.i32($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(20, 1)), 131072);
    $M.30 := $store.i64($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(0, 1)), 4194304);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 76);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.30 := $store.i32($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(20, 1)), 262144);
    $M.30 := $store.i64($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(0, 1)), 8388608);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 76);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 67);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.30 := $store.i32($M.30, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(20, 1)), 524288);
    $M.31 := $store.i32($M.31, pd_audio_modes, 1);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(0, 12)), $mul.ref(4, 1)), 1);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(0, 1)), 2);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(4, 1)), 2);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(8, 1)), 1);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(0, 1)), 16);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(4, 1)), 8);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(8, 1)), 3);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(0, 1)), 32);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(4, 1)), 4);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(8, 1)), 2);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(0, 1)), 64);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(4, 1)), 8);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(8, 1)), 4);
    $M.0 := $store.ref($M.0, pd_video_ioctl_ops, vidioc_querycap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(24, 1)), vidioc_enum_fmt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(64, 1)), vidioc_g_fmt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(96, 1)), vidioc_g_fmt_vbi);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(144, 1)), vidioc_s_fmt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(304, 1)), vidioc_reqbufs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(312, 1)), vidioc_querybuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(320, 1)), vidioc_qbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(336, 1)), vidioc_dqbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(384, 1)), vidioc_streamon);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(392, 1)), vidioc_streamoff);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(400, 1)), vidioc_g_std);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(408, 1)), vidioc_s_std);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(424, 1)), vidioc_enum_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(432, 1)), vidioc_g_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(440, 1)), vidioc_s_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(520, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(528, 1)), vidioc_enumaudio);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(536, 1)), vidioc_g_audio);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(544, 1)), vidioc_s_audio);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(552, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(560, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(568, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(576, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(584, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(600, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(608, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(616, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(624, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(632, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(640, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(648, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(656, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(664, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(672, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(680, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(688, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(696, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(704, 1)), vidioc_g_tuner);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(712, 1)), vidioc_s_tuner);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(720, 1)), vidioc_g_frequency);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(728, 1)), vidioc_s_frequency);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(736, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(744, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(752, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(760, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(768, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(776, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(784, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(792, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(800, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(808, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(816, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(824, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(832, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(840, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(848, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(856, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 872)), $mul.ref(864, 1)), $0.ref);
    $M.0 := $store.ref($M.0, pd_video_fops, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 88)), $mul.ref(8, 1)), pd_video_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 88)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 88)), $mul.ref(24, 1)), pd_video_poll);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 88)), $mul.ref(32, 1)), video_ioctl2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 88)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 88)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 88)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 88)), $mul.ref(64, 1)), pd_video_mmap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 88)), $mul.ref(72, 1)), pd_video_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 88)), $mul.ref(80, 1)), pd_video_release);
    $M.0 := $store.ref($M.0, pd_video_template, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(62, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(64, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(66, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(96, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(100, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(128, 1)), pd_video_fops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(216, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(288, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(208, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(209, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(344, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(524, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(528, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(529, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(532, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(536, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(540, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(544, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(552, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(560, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(568, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(576, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(584, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1120, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1128, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1136, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1144, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1160, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1160, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1184, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1184, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1208, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1216, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1220, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1296, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1296, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1368, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1376, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1377, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1520, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1528, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1536, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1544, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1552, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1560, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(0, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(4, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(8, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(9, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1600, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1604, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1608, 1)), $sub.i32(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1612, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1616, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1624, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1704, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1704, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1720, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1728, 1)), 16777215);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1736, 1)), video_device_release_empty);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1744, 1)), pd_video_ioctl_ops);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1752, 1)), $mul.ref(0, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1752, 1)), $mul.ref(1, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1752, 1)), $mul.ref(2, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1776, 1)), $mul.ref(0, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1776, 1)), $mul.ref(1, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1776, 1)), $mul.ref(2, 8)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1808)), $mul.ref(1800, 1)), $0.ref);
    $M.144 := $store.i8($M.144, .str.35, 86);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(.str.35, $mul.ref(0, 5)), $mul.ref(1, 1)), 70);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(.str.35, $mul.ref(0, 5)), $mul.ref(2, 1)), 72);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(.str.35, $mul.ref(0, 5)), $mul.ref(3, 1)), 83);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(.str.35, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.30 := $store.i8($M.30, .str.24, 115);
    $M.30 := $store.i8($M.30, $add.ref($add.ref(.str.24, $mul.ref(0, 8)), $mul.ref(1, 1)), 101);
    $M.30 := $store.i8($M.30, $add.ref($add.ref(.str.24, $mul.ref(0, 8)), $mul.ref(2, 1)), 116);
    $M.30 := $store.i8($M.30, $add.ref($add.ref(.str.24, $mul.ref(0, 8)), $mul.ref(3, 1)), 95);
    $M.30 := $store.i8($M.30, $add.ref($add.ref(.str.24, $mul.ref(0, 8)), $mul.ref(4, 1)), 115);
    $M.30 := $store.i8($M.30, $add.ref($add.ref(.str.24, $mul.ref(0, 8)), $mul.ref(5, 1)), 116);
    $M.30 := $store.i8($M.30, $add.ref($add.ref(.str.24, $mul.ref(0, 8)), $mul.ref(6, 1)), 100);
    $M.30 := $store.i8($M.30, $add.ref($add.ref(.str.24, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.22, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(4, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(9, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(10, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.27, 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 13)), $mul.ref(1, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 13)), $mul.ref(2, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 13)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 13)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 13)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 13)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 13)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 13)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 13)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 13)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 13)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.28, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 11)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 11)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 11)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 11)), $mul.ref(4, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 11)), $mul.ref(5, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 11)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 11)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 11)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 11)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.29, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 18)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 18)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 18)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 18)), $mul.ref(4, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 18)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 18)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 18)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 18)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 18)), $mul.ref(9, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 18)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 18)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 18)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 18)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 18)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 18)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 18)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.145 := $store.i8($M.145, .str.30, 117);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(1, 1)), 115);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(2, 1)), 98);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(3, 1)), 45);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(4, 1)), 37);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(5, 1)), 115);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(6, 1)), 45);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(8, 1)), 115);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.25, 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 8)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 8)), $mul.ref(2, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 8)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 8)), $mul.ref(4, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 8)), $mul.ref(5, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 8)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.26, 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 7)), $mul.ref(1, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 7)), $mul.ref(2, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 7)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 7)), $mul.ref(4, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 7)), $mul.ref(5, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.40, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 11)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 11)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 11)), $mul.ref(3, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 11)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 11)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 11)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 11)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 11)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 11)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.41, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 9)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 9)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 9)), $mul.ref(3, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 9)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 9)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 9)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 9)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.42, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 10)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 10)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 10)), $mul.ref(3, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 10)), $mul.ref(4, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 10)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 10)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 10)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 10)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.43, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(3, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.146 := $store.i8($M.146, .str.58, 68);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.58, $mul.ref(0, 5)), $mul.ref(1, 1)), 86);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.58, $mul.ref(0, 5)), $mul.ref(2, 1)), 72);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.58, $mul.ref(0, 5)), $mul.ref(3, 1)), 83);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.58, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.67, 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 6)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 6)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 6)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.68, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 11)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 11)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 11)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 11)), $mul.ref(4, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 11)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 11)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 11)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 11)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 11)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.44 := $store.i8($M.44, .str.10, 112);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.10, $mul.ref(0, 23)), $mul.ref(1, 1)), 111);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.10, $mul.ref(0, 23)), $mul.ref(2, 1)), 115);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.10, $mul.ref(0, 23)), $mul.ref(3, 1)), 101);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.10, $mul.ref(0, 23)), $mul.ref(4, 1)), 105);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.10, $mul.ref(0, 23)), $mul.ref(5, 1)), 100);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.10, $mul.ref(0, 23)), $mul.ref(6, 1)), 111);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.10, $mul.ref(0, 23)), $mul.ref(7, 1)), 110);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.10, $mul.ref(0, 23)), $mul.ref(8, 1)), 32);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.10, $mul.ref(0, 23)), $mul.ref(9, 1)), 97);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.10, $mul.ref(0, 23)), $mul.ref(10, 1)), 117);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.10, $mul.ref(0, 23)), $mul.ref(11, 1)), 100);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.10, $mul.ref(0, 23)), $mul.ref(12, 1)), 105);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.10, $mul.ref(0, 23)), $mul.ref(13, 1)), 111);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.10, $mul.ref(0, 23)), $mul.ref(14, 1)), 32);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.10, $mul.ref(0, 23)), $mul.ref(15, 1)), 99);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.10, $mul.ref(0, 23)), $mul.ref(16, 1)), 97);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.10, $mul.ref(0, 23)), $mul.ref(17, 1)), 112);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.10, $mul.ref(0, 23)), $mul.ref(18, 1)), 116);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.10, $mul.ref(0, 23)), $mul.ref(19, 1)), 117);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.10, $mul.ref(0, 23)), $mul.ref(20, 1)), 114);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.10, $mul.ref(0, 23)), $mul.ref(21, 1)), 101);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(.str.10, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.11, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 12)), $mul.ref(1, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 12)), $mul.ref(2, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 12)), $mul.ref(3, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 12)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 12)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 12)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 12)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 12)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 12)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.12, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 15)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 15)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 15)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 15)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 15)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 15)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 15)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 15)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 15)), $mul.ref(9, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 15)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 15)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 15)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 15)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.13, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(9, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(10, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(11, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(12, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(14, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(18, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    call {:si_unique_call 1883} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 610232);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 611264);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 612296);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(pm_notifier_block, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i9 == 1);
    $i8 := $eq.ref(snd_pcm_lib_ioctl, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 1884} $i3 := snd_pcm_lib_ioctl($p1, arg1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i9 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $i5 := $zext.i32.i64(arg1);
    $p6 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 1885} $i7 := pm_notifier_block($p4, $i5, $p6);
    $r := $i7;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 613328);

procedure devirtbounce.3(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.22, $M.24, $M.8, $M.7, $M.6, $CurrAddr, $M.11, $M.38, $M.9, $M.25, assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i24 := $eq.ref(dvb_urb_irq, $p0);
    assume true;
    goto $bb45, $bb43;

  $bb43:
    assume !($i24 == 1);
    $i23 := $eq.ref(complete_handler_audio, $p0);
    assume true;
    goto $bb44, $bb41;

  $bb41:
    assume !($i23 == 1);
    $i22 := $eq.ref(urb_complete_bulk, $p0);
    assume true;
    goto $bb42, $bb39;

  $bb39:
    assume !($i22 == 1);
    $i21 := $eq.ref(iso_bubble_handler, $p0);
    assume true;
    goto $bb40, $bb37;

  $bb37:
    assume !($i21 == 1);
    $i20 := $eq.ref(urb_complete_iso, $p0);
    assume true;
    goto $bb38, $bb35;

  $bb35:
    assume !($i20 == 1);
    $i19 := $eq.ref(hibernation_resume, $p0);
    assume true;
    goto $bb36, $bb34;

  $bb34:
    assume !($i19 == 1);
    $i18 := $eq.ref(poseidon_fe_release, $p0);
    assume true;
    goto $bb11, $bb32;

  $bb32:
    assume !($i18 == 1);
    $i17 := $eq.ref(dvb_urb_irq, $p0);
    assume true;
    goto $bb33, $bb30;

  $bb30:
    assume !($i17 == 1);
    $i16 := $eq.ref(complete_handler_audio, $p0);
    assume true;
    goto $bb31, $bb28;

  $bb28:
    assume !($i16 == 1);
    $i15 := $eq.ref(urb_complete_bulk, $p0);
    assume true;
    goto $bb29, $bb26;

  $bb26:
    assume !($i15 == 1);
    $i14 := $eq.ref(iso_bubble_handler, $p0);
    assume true;
    goto $bb27, $bb24;

  $bb24:
    assume !($i14 == 1);
    $i13 := $eq.ref(urb_complete_iso, $p0);
    assume true;
    goto $bb25, $bb22;

  $bb22:
    assume !($i13 == 1);
    $i12 := $eq.ref(hibernation_resume, $p0);
    assume true;
    goto $bb23, $bb21;

  $bb21:
    assume !($i12 == 1);
    $i11 := $eq.ref(poseidon_disconnect, $p0);
    assume true;
    goto $bb4, $bb20;

  $bb20:
    assume !($i11 == 1);
    $i10 := $eq.ref(poseidon_delete, $p0);
    assume true;
    goto $bb3, $bb19;

  $bb19:
    assume !($i10 == 1);
    $i9 := $eq.ref(video_device_release_empty, $p0);
    assume true;
    goto $bb2, $bb18;

  $bb18:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1886} video_device_release_empty($p1);
    return;

  $bb3:
    assume $i10 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1887} poseidon_delete($p2);
    return;

  $bb4:
    assume $i11 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1888} poseidon_disconnect($p3);
    return;

  $bb23:
    assume $i12 == 1;
    goto $bb12;

  $bb12:
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1896} hibernation_resume($p7);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i13 == 1;
    goto $bb13;

  $bb13:
    call {:si_unique_call 1897} urb_complete_iso(arg);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i14 == 1;
    goto $bb14;

  $bb14:
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1898} iso_bubble_handler($p8);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i15 == 1;
    goto $bb15;

  $bb15:
    call {:si_unique_call 1899} urb_complete_bulk(arg);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i16 == 1;
    goto $bb16;

  $bb16:
    call {:si_unique_call 1900} complete_handler_audio(arg);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i17 == 1;
    goto $bb17;

  $bb17:
    call {:si_unique_call 1901} dvb_urb_irq(arg);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i18 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1895} poseidon_fe_release($p6);
    return;

  $bb36:
    assume $i19 == 1;
    goto $bb12;

  $bb38:
    assume $i20 == 1;
    goto $bb13;

  $bb40:
    assume $i21 == 1;
    goto $bb14;

  $bb42:
    assume $i22 == 1;
    goto $bb15;

  $bb44:
    assume $i23 == 1;
    goto $bb16;

  $bb45:
    assume $i24 == 1;
    goto $bb17;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 614360);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(pd_buf_release, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(pd_buf_queue, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1902} pd_buf_queue($p1, $p2);
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1903} pd_buf_release($p3, $p4);
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 615392);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 616424);

procedure devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.34, $M.36, $M.10, $M.11, $M.38, $M.22, $M.24, $CurrAddr, $M.8, $M.7, $M.6, $M.9, $M.27, $M.28, $M.29, $M.26, $M.21, assertsPassed, $M.25, $M.40;



implementation devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i63 := $eq.ref(pd_stop_feed, $p0);
    assume true;
    goto $bb24, $bb47;

  $bb47:
    assume !($i63 == 1);
    $i62 := $eq.ref(pd_start_feed, $p0);
    assume {:branchcond $i62} true;
    goto $bb23, $bb46;

  $bb46:
    assume !($i62 == 1);
    $i61 := $eq.ref(poseidon_resume, $p0);
    assume {:branchcond $i61} true;
    goto $bb22, $bb45;

  $bb45:
    assume !($i61 == 1);
    $i60 := $eq.ref(tlg_fm_s_ctrl, $p0);
    assume {:branchcond $i60} true;
    goto $bb21, $bb44;

  $bb44:
    assume !($i60 == 1);
    $i59 := $eq.ref(pm_fm_resume, $p0);
    assume true;
    goto $bb20, $bb43;

  $bb43:
    assume !($i59 == 1);
    $i58 := $eq.ref(pm_fm_suspend, $p0);
    assume {:branchcond $i58} true;
    goto $bb19, $bb42;

  $bb42:
    assume !($i58 == 1);
    $i57 := $eq.ref(poseidon_fm_close, $p0);
    assume {:branchcond $i57} true;
    goto $bb18, $bb41;

  $bb41:
    assume !($i57 == 1);
    $i56 := $eq.ref(poseidon_fm_open, $p0);
    assume true;
    goto $bb17, $bb40;

  $bb40:
    assume !($i56 == 1);
    $i55 := $eq.ref(pm_dvb_resume, $p0);
    assume true;
    goto $bb16, $bb39;

  $bb39:
    assume !($i55 == 1);
    $i54 := $eq.ref(pm_dvb_suspend, $p0);
    assume {:branchcond $i54} true;
    goto $bb15, $bb38;

  $bb38:
    assume !($i54 == 1);
    $i53 := $eq.ref(poseidon_get_fe, $p0);
    assume true;
    goto $bb14, $bb37;

  $bb37:
    assume !($i53 == 1);
    $i52 := $eq.ref(poseidon_set_fe, $p0);
    assume true;
    goto $bb13, $bb36;

  $bb36:
    assume !($i52 == 1);
    $i51 := $eq.ref(poseidon_fe_sleep, $p0);
    assume true;
    goto $bb12, $bb35;

  $bb35:
    assume !($i51 == 1);
    $i50 := $eq.ref(poseidon_fe_init, $p0);
    assume true;
    goto $bb11, $bb34;

  $bb34:
    assume !($i50 == 1);
    $i49 := $eq.ref(snd_pd_prepare, $p0);
    assume true;
    goto $bb10, $bb33;

  $bb33:
    assume !($i49 == 1);
    $i48 := $eq.ref(snd_pd_hw_capture_free, $p0);
    assume true;
    goto $bb9, $bb32;

  $bb32:
    assume !($i48 == 1);
    $i47 := $eq.ref(snd_pd_pcm_close, $p0);
    assume {:branchcond $i47} true;
    goto $bb8, $bb31;

  $bb31:
    assume !($i47 == 1);
    $i46 := $eq.ref(snd_pd_capture_open, $p0);
    assume true;
    goto $bb7, $bb30;

  $bb30:
    assume !($i46 == 1);
    $i45 := $eq.ref(pm_video_resume, $p0);
    assume true;
    goto $bb6, $bb29;

  $bb29:
    assume !($i45 == 1);
    $i44 := $eq.ref(pm_video_suspend, $p0);
    assume true;
    goto $bb5, $bb28;

  $bb28:
    assume !($i44 == 1);
    $i43 := $eq.ref(pd_video_release, $p0);
    assume true;
    goto $bb4, $bb27;

  $bb27:
    assume !($i43 == 1);
    $i42 := $eq.ref(pd_video_open, $p0);
    assume {:branchcond $i42} true;
    goto $bb3, $bb26;

  $bb26:
    assume !($i42 == 1);
    $i41 := $eq.ref(tlg_s_ctrl, $p0);
    assume true;
    goto $bb2, $bb25;

  $bb25:
    assume !($i41 == 1);
    assume false;
    return;

  $bb2:
    assume $i41 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1904} $i2 := tlg_s_ctrl($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i42 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1905} $i4 := pd_video_open($p3);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    $r := $i4;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i43 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1906} $i6 := pd_video_release($p5);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    $r := $i6;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i44 == 1;
    call {:si_unique_call 1907} $i7 := pm_video_suspend(arg);
    $r := $i7;
    return;

  $bb6:
    assume $i45 == 1;
    call {:si_unique_call 1908} $i8 := pm_video_resume(arg);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    $r := $i8;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i46 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1909} $i10 := snd_pd_capture_open($p9);
    $r := $i10;
    return;

  $bb8:
    assume $i47 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1910} $i12 := snd_pd_pcm_close($p11);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    $r := $i12;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i48 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1911} $i14 := snd_pd_hw_capture_free($p13);
    $r := $i14;
    return;

  $bb10:
    assume $i49 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1912} $i16 := snd_pd_prepare($p15);
    $r := $i16;
    return;

  $bb11:
    assume $i50 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1913} $i18 := poseidon_fe_init($p17);
    $r := $i18;
    return;

  $bb12:
    assume $i51 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1914} $i20 := poseidon_fe_sleep($p19);
    $r := $i20;
    return;

  $bb13:
    assume $i52 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1915} $i22 := poseidon_set_fe($p21);
    $r := $i22;
    return;

  $bb14:
    assume $i53 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1916} $i24 := poseidon_get_fe($p23);
    $r := $i24;
    return;

  $bb15:
    assume $i54 == 1;
    call {:si_unique_call 1917} $i25 := pm_dvb_suspend(arg);
    $r := $i25;
    return;

  $bb16:
    assume $i55 == 1;
    call {:si_unique_call 1918} $i26 := pm_dvb_resume(arg);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    $r := $i26;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i56 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1919} $i28 := poseidon_fm_open($p27);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    $r := $i28;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i57 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1920} $i30 := poseidon_fm_close($p29);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    $r := $i30;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i58 == 1;
    call {:si_unique_call 1921} $i31 := pm_fm_suspend(arg);
    $r := $i31;
    return;

  $bb20:
    assume $i59 == 1;
    call {:si_unique_call 1922} $i32 := pm_fm_resume(arg);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    $r := $i32;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i60 == 1;
    $p33 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1923} $i34 := tlg_fm_s_ctrl($p33);
    $r := $i34;
    return;

  $bb22:
    assume $i61 == 1;
    $p35 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1924} $i36 := poseidon_resume($p35);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    $r := $i36;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i62 == 1;
    $p37 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1925} $i38 := pd_start_feed($p37);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    $r := $i38;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i63 == 1;
    $p39 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1926} $i40 := pd_stop_feed($p39);
    $r := $i40;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 617456);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.60, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.5, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.10, $M.96, $M.6, $M.9, $M.7, $M.8, $M.22, $M.24, $M.23, $M.25, $M.111, $M.112, $M.46, $M.0, $M.39, $M.32, $M.33, $M.119, $M.4, $M.15, $M.16, $M.14, $M.13, $M.138, $M.139, $M.140, $M.12, $M.30, $M.31, $M.18, $M.19, $M.144, $M.145, $M.146, $M.44, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1927} __SMACK_static_init();
    call {:si_unique_call 1928} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.86, $M.80, $M.60, $M.83, $M.74, $M.66, $M.67, $M.87, $M.70, $M.88, $M.82, $M.63, $M.89, $M.62, $M.65, $M.84, $M.0, $M.81, $M.57, $M.58, $M.59, $M.17, $M.20, $M.75, $M.1, $M.2, $M.68, $M.71, $M.72, $M.90, $M.91, $M.92, $M.94, $M.37, $M.95, $M.50, $M.51, $M.76, $M.77, $M.78, $M.69, $M.56, $M.73, $M.52, $M.53, $M.54, $M.55, $M.79, $M.61, $M.64, $M.5, $M.85, $M.93, $M.10, $M.96, $M.6, $M.9, $M.7, $M.8, $M.22, $M.24, $M.23, $M.25, $M.111, $M.112, $M.46, $M.39, $M.32, $M.33, $M.119, $M.4, $M.15, $M.16, $M.14, $M.13, $M.138, $M.139, $M.140, $M.12, $M.30, $M.31, $M.18, $M.19, $M.144, $M.145, $M.146, $M.44, $CurrAddr, $M.36, $M.34, $M.11, $M.41, $M.38, $M.40, $M.45, $M.49, $M.27, $M.28, $M.29, $M.26, $M.21;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation free_all_urb_generic_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i4: i64, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i3: i32) returns (out_$i4: i64, out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i3: i32)
{

  entry:
    out_$i4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i3 := in_$i4, in_$p5, in_$p6, in_$i7, in_$i8, in_$p9, in_$p10, in_$p11, in_$i12, in_$i13, in_$p14, in_$p15, in_$p16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i3;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_687;

  $bb9:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i20;
    goto $bb9_dummy;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i20, in_$i1);
    goto corral_source_split_712;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i3, 1);
    call {:si_unique_call 168} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_711;

  $bb7:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p19, $0.ref);
    goto corral_source_split_709;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(in_$p0, $mul.ref(out_$i18, 8));
    goto corral_source_split_708;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i3);
    goto corral_source_split_707;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} ldv_usb_free_urb_8(out_$p6);
    goto corral_source_split_706;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} usb_free_coherent(out_$p10, out_$i13, out_$p15, out_$i17);
    goto corral_source_split_705;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i64($M.0, out_$p16);
    goto corral_source_split_704;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p6, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_703;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_702;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p6, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_701;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i32.i64(out_$i12);
    goto corral_source_split_700;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, out_$p11);
    goto corral_source_split_699;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p6, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_698;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_697;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p6, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_696;

  $bb6:
    assume out_$i8 == 1;
    goto corral_source_split_695;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_693;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64(out_$p6);
    goto corral_source_split_692;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_691;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref(in_$p0, $mul.ref(out_$i4, 8));
    goto corral_source_split_690;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i4 := $sext.i32.i64(out_$i3);
    goto corral_source_split_689;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i3 := free_all_urb_generic_loop_$bb4(in_$p0, in_$i1, out_$i4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i3);
    return;

  exit:
    return;
}



procedure free_all_urb_generic_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i4: i64, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i3: i32) returns (out_$i4: i64, out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i3: i32);
  modifies $M.0, $M.9;



implementation ldv_stop___4_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop___4_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop___4_loop_$bb1();



implementation vidioc_g_tuner_loop_$bb8(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p16: ref, in_$p22: ref, in_$i23: i64, in_$p24: ref, in_$i25: i64, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i20: i32, in_$i21: i32, in_$i32: i32, in_$i33: i1, in_$i35: i1, in_$i36: i32, in_$i34: i32, in_$i31: i32, in_vslice_dummy_var_114: i64) returns (out_$p22: ref, out_$i23: i64, out_$p24: ref, out_$i25: i64, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i20: i32, out_$i21: i32, out_$i32: i32, out_$i33: i1, out_$i35: i1, out_$i36: i32, out_$i34: i32, out_$i31: i32, out_vslice_dummy_var_114: i64)
{

  entry:
    out_$p22, out_$i23, out_$p24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i20, out_$i21, out_$i32, out_$i33, out_$i35, out_$i36, out_$i34, out_$i31, out_vslice_dummy_var_114 := in_$p22, in_$i23, in_$p24, in_$i25, in_$p27, in_$i28, in_$i29, in_$i30, in_$i20, in_$i21, in_$i32, in_$i33, in_$i35, in_$i36, in_$i34, in_$i31, in_vslice_dummy_var_114;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1354;

  $bb11:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i20, out_$i21 := out_$i28, out_$i32;
    goto $bb11_dummy;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i28;
    assume true;
    goto $bb11;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_1368;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, in_$p16);
    goto corral_source_split_1367;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} out_$i28 := send_get_req(in_$p8, 69, 1, out_$p27, in_$p4, 24);
    call {:si_unique_call 328} {:cexpr "ret"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_1366;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_1365;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} out_vslice_dummy_var_114 := schedule_timeout(250);
    goto corral_source_split_1364;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, in_$p5, out_$i25);
    goto corral_source_split_1362;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p22, $mul.ref(0, 9640)), $mul.ref(0, 1));
    call {:si_unique_call 325} out_$i25 := devirtbounce(0, out_$p24, out_$i23, out_$p24);
    goto corral_source_split_1361;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i64($M.17, in_$p5);
    goto corral_source_split_1360;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} out_$p22 := get_current();
    goto corral_source_split_1359;

  $bb9:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, in_$p5, 1);
    goto corral_source_split_1358;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb15:
    assume out_$i35 == 1;
    goto corral_source_split_1377;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i20;
    assume true;
    goto $bb15;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i20, 0);
    goto corral_source_split_1373;

  $bb13:
    assume out_$i33 == 1;
    goto corral_source_split_1372;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i20;
    assume true;
    goto $bb13;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i21, 0);
    goto corral_source_split_1356;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    out_$i32 := $sub.i32(out_$i21, 1);
    call {:si_unique_call 323} {:cexpr "count"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_1355;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p22, out_$i23, out_$p24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i20, out_$i21, out_$i32, out_$i33, out_$i35, out_$i36, out_$i34, out_$i31, out_vslice_dummy_var_114 := vidioc_g_tuner_loop_$bb8(in_$p3, in_$p4, in_$p5, in_$p8, in_$p16, out_$p22, out_$i23, out_$p24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i20, out_$i21, out_$i32, out_$i33, out_$i35, out_$i36, out_$i34, out_$i31, out_vslice_dummy_var_114);
    return;

  exit:
    return;
}



procedure vidioc_g_tuner_loop_$bb8(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p16: ref, in_$p22: ref, in_$i23: i64, in_$p24: ref, in_$i25: i64, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i20: i32, in_$i21: i32, in_$i32: i32, in_$i33: i1, in_$i35: i1, in_$i36: i32, in_$i34: i32, in_$i31: i32, in_vslice_dummy_var_114: i64) returns (out_$p22: ref, out_$i23: i64, out_$p24: ref, out_$i25: i64, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i20: i32, out_$i21: i32, out_$i32: i32, out_$i33: i1, out_$i35: i1, out_$i36: i32, out_$i34: i32, out_$i31: i32, out_vslice_dummy_var_114: i64);
  modifies $M.0, $CurrAddr, $M.17;



implementation {:SIextraRecBound 3} fire_audio_urb_loop_$bb1(in_$p0: ref, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i16: i32, in_$i17: i1, in_$i8: i32, in_$i18: i32, in_vslice_dummy_var_136: i32) returns (out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i16: i32, out_$i17: i1, out_$i8: i32, out_$i18: i32, out_vslice_dummy_var_136: i32)
{

  entry:
    out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i8, out_$i18, out_vslice_dummy_var_136 := in_$i9, in_$p11, in_$p12, in_$i13, in_$i14, in_$i16, in_$i17, in_$i8, in_$i18, in_vslice_dummy_var_136;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1676;

  $bb6:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i16;
    goto $bb6_dummy;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i13;
    assume true;
    goto $bb6;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    out_$i17 := $sle.i32(out_$i16, 2);
    goto corral_source_split_1687;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i8, 1);
    call {:si_unique_call 384} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_1686;

  $bb4:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} out_vslice_dummy_var_136 := printk.ref.ref.i32.i32(.str.49, .str.50, 283, out_$i13);
    goto corral_source_split_1684;

  $bb3:
    assume out_$i14 == 1;
    goto corral_source_split_1683;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_1681;

  SeqInstr_33:
    call {:si_unique_call 382} {:cexpr "ret"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_1680;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} out_$i13 := ldv_usb_submit_urb_19(out_$p12, 208);
    goto SeqInstr_32;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_1679;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i8);
    out_$p11 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 11112)), $mul.ref(4744, 1)), $mul.ref(0, 1)), $mul.ref(out_$i9, 8));
    goto corral_source_split_1678;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i8, out_$i18, out_vslice_dummy_var_136 := fire_audio_urb_loop_$bb1(in_$p0, out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i8, out_$i18, out_vslice_dummy_var_136);
    return;

  exit:
    return;
}



procedure fire_audio_urb_loop_$bb1(in_$p0: ref, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i16: i32, in_$i17: i1, in_$i8: i32, in_$i18: i32, in_vslice_dummy_var_136: i32) returns (out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i16: i32, out_$i17: i1, out_$i8: i32, out_$i18: i32, out_vslice_dummy_var_136: i32);
  modifies $M.22, $M.24, $M.0, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $CurrAddr, $M.11, $M.38, $M.9, $M.25, assertsPassed;



implementation alloc_bulk_urbs_generic_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i3: i8, in_$i4: i32, in_$i5: i32, in_$p6: ref, in_$p7: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$i14: i32, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i32, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$i10: i32, in_$i34: i32) returns (out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$i14: i32, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i32, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$i10: i32, out_$i34: i32)
{

  entry:
    out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i10, out_$i34 := in_$p11, in_$i12, in_$i13, in_$i14, in_$i16, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$p29, in_$i30, in_$p31, in_$i32, in_$i33, in_$i10, in_$i34;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1740;

  $bb13:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i32;
    goto $bb13_dummy;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i32;
    assume true;
    goto $bb13;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i32, in_$i1);
    goto corral_source_split_1772;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i10, 1);
    call {:si_unique_call 402} {:cexpr "i"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_1771;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p31, out_$p11);
    goto corral_source_split_1770;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref(in_$p0, $mul.ref(out_$i30, 8));
    goto corral_source_split_1769;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i10);
    goto corral_source_split_1768;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p29, out_$i28);
    goto corral_source_split_1767;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p11, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1766;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    out_$i28 := $or.i32(out_$i27, 4);
    goto corral_source_split_1765;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_1764;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p11, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1763;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} ldv_usb_fill_bulk_urb_7(out_$p11, in_$p2, out_$i25, out_$p18, in_$i4, in_$p6, in_$p7);
    goto corral_source_split_1762;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    out_$i25 := $or.i32(out_$i24, $sub.i32(0, 1073741696));
    goto corral_source_split_1761;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} out_$i24 := __create_pipe(in_$p2, out_$i23);
    call {:si_unique_call 400} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_1760;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i8.i32(in_$i3);
    goto corral_source_split_1759;

  $bb11:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    out_$i21, out_$p22 := out_$i10, out_$p11;
    assume true;
    goto $bb11;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i64(out_$i19, 0);
    goto corral_source_split_1754;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_1753;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} out_$p18 := usb_alloc_coherent(in_$p2, out_$i16, in_$i5, out_$p17);
    goto corral_source_split_1752;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p11, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_1751;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(in_$i4);
    goto corral_source_split_1750;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i10;
    assume true;
    goto $bb7;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i64(out_$i12, 0);
    goto corral_source_split_1744;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_1743;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} out_$p11 := ldv_usb_alloc_urb_5(0, in_$i5);
    goto corral_source_split_1742;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i10, out_$i34 := alloc_bulk_urbs_generic_loop_$bb4(in_$p0, in_$i1, in_$p2, in_$i3, in_$i4, in_$i5, in_$p6, in_$p7, out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i10, out_$i34);
    return;

  exit:
    return;
}



procedure alloc_bulk_urbs_generic_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i3: i8, in_$i4: i32, in_$i5: i32, in_$p6: ref, in_$p7: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$i14: i32, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i32, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$i10: i32, in_$i34: i32) returns (out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$i14: i32, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i32, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$i10: i32, out_$i34: i32);
  modifies $M.0, $M.25, $M.24, $M.9;



implementation prepare_iso_urb_loop_$bb21(in_$i48: i32, in_$i49: i1, in_$i47: i32) returns (out_$i48: i32, out_$i49: i1, out_$i47: i32)
{

  entry:
    out_$i48, out_$i49, out_$i47 := in_$i48, in_$i49, in_$i47;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2076;

  $bb23:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i47 := out_$i48;
    goto $bb23_dummy;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    out_$i49 := $sgt.i32(out_$i48, 0);
    goto corral_source_split_2079;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i48 := $sub.i32(out_$i47, 1);
    call {:si_unique_call 456} {:cexpr "i"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_2078;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i48, out_$i49, out_$i47 := prepare_iso_urb_loop_$bb21(out_$i48, out_$i49, out_$i47);
    return;

  exit:
    return;
}



procedure prepare_iso_urb_loop_$bb21(in_$i48: i32, in_$i49: i1, in_$i47: i32) returns (out_$i48: i32, out_$i49: i1, out_$i47: i32);



implementation prepare_iso_urb_loop_$bb5(in_$p0: ref, in_$p4: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$i15: i32, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$i28: i8, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p40: ref, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i11: i32, in_$p52: ref, in_$p55: ref, in_$p58: ref, in_$p61: ref, in_$p64: ref, in_$p67: ref, in_$p70: ref, in_$p73: ref, in_$p76: ref, in_$p79: ref, in_$p82: ref, in_$p85: ref, in_$p88: ref, in_$p91: ref, in_$p94: ref, in_$p97: ref, in_$p100: ref, in_$p103: ref, in_$p106: ref, in_$p109: ref, in_$p112: ref, in_$p115: ref, in_$p118: ref, in_$p121: ref, in_$p124: ref, in_$p127: ref, in_$p130: ref, in_$p133: ref, in_$p136: ref, in_$p139: ref, in_$p142: ref, in_$p145: ref, in_$p148: ref, in_$p151: ref, in_$p154: ref, in_$p157: ref, in_$p160: ref, in_$p163: ref, in_$p166: ref, in_$p169: ref, in_$p172: ref, in_$p175: ref, in_$p178: ref, in_$p181: ref, in_$p184: ref, in_$p187: ref, in_$p190: ref, in_$p193: ref, in_$p196: ref, in_$p199: ref, in_$p202: ref, in_$p205: ref, in_$p208: ref, in_$p211: ref, in_$p214: ref, in_$p217: ref, in_$p220: ref, in_$p223: ref, in_$p226: ref, in_$p229: ref, in_$p232: ref, in_$p235: ref) returns (out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$i15: i32, out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$p27: ref, out_$i28: i8, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p40: ref, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i11: i32, out_$p52: ref, out_$p55: ref, out_$p58: ref, out_$p61: ref, out_$p64: ref, out_$p67: ref, out_$p70: ref, out_$p73: ref, out_$p76: ref, out_$p79: ref, out_$p82: ref, out_$p85: ref, out_$p88: ref, out_$p91: ref, out_$p94: ref, out_$p97: ref, out_$p100: ref, out_$p103: ref, out_$p106: ref, out_$p109: ref, out_$p112: ref, out_$p115: ref, out_$p118: ref, out_$p121: ref, out_$p124: ref, out_$p127: ref, out_$p130: ref, out_$p133: ref, out_$p136: ref, out_$p139: ref, out_$p142: ref, out_$p145: ref, out_$p148: ref, out_$p151: ref, out_$p154: ref, out_$p157: ref, out_$p160: ref, out_$p163: ref, out_$p166: ref, out_$p169: ref, out_$p172: ref, out_$p175: ref, out_$p178: ref, out_$p181: ref, out_$p184: ref, out_$p187: ref, out_$p190: ref, out_$p193: ref, out_$p196: ref, out_$p199: ref, out_$p202: ref, out_$p205: ref, out_$p208: ref, out_$p211: ref, out_$p214: ref, out_$p217: ref, out_$p220: ref, out_$p223: ref, out_$p226: ref, out_$p229: ref, out_$p232: ref, out_$p235: ref)
{

  entry:
    out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p40, out_$p43, out_$i44, out_$i45, out_$i11, out_$p52, out_$p55, out_$p58, out_$p61, out_$p64, out_$p67, out_$p70, out_$p73, out_$p76, out_$p79, out_$p82, out_$p85, out_$p88, out_$p91, out_$p94, out_$p97, out_$p100, out_$p103, out_$p106, out_$p109, out_$p112, out_$p115, out_$p118, out_$p121, out_$p124, out_$p127, out_$p130, out_$p133, out_$p136, out_$p139, out_$p142, out_$p145, out_$p148, out_$p151, out_$p154, out_$p157, out_$p160, out_$p163, out_$p166, out_$p169, out_$p172, out_$p175, out_$p178, out_$p181, out_$p184, out_$p187, out_$p190, out_$p193, out_$p196, out_$p199, out_$p202, out_$p205, out_$p208, out_$p211, out_$p214, out_$p217, out_$p220, out_$p223, out_$p226, out_$p229, out_$p232, out_$p235 := in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p40, in_$p43, in_$i44, in_$i45, in_$i11, in_$p52, in_$p55, in_$p58, in_$p61, in_$p64, in_$p67, in_$p70, in_$p73, in_$p76, in_$p79, in_$p82, in_$p85, in_$p88, in_$p91, in_$p94, in_$p97, in_$p100, in_$p103, in_$p106, in_$p109, in_$p112, in_$p115, in_$p118, in_$p121, in_$p124, in_$p127, in_$p130, in_$p133, in_$p136, in_$p139, in_$p142, in_$p145, in_$p148, in_$p151, in_$p154, in_$p157, in_$p160, in_$p163, in_$p166, in_$p169, in_$p172, in_$p175, in_$p178, in_$p181, in_$p184, in_$p187, in_$p190, in_$p193, in_$p196, in_$p199, in_$p202, in_$p205, in_$p208, in_$p211, in_$p214, in_$p217, in_$p220, in_$p223, in_$p226, in_$p229, in_$p232, in_$p235;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2019;

  $bb15:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i44;
    goto $bb15_dummy;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    out_$i45 := $sle.i32(out_$i44, 7);
    goto corral_source_split_2072;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i11, 1);
    call {:si_unique_call 455} {:cexpr "i"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_2071;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p235, 3072);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    out_$p235 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(4, 1));
    goto corral_source_split_2230;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p232, 95232);
    goto corral_source_split_2229;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p232 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(0, 1));
    goto corral_source_split_2228;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p229, 3072);
    goto corral_source_split_2226;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    out_$p229 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(4, 1));
    goto corral_source_split_2225;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p226, 92160);
    goto corral_source_split_2224;

  $bb54:
    assume {:verifier.code 0} true;
    out_$p226 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(0, 1));
    goto corral_source_split_2223;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p223, 3072);
    goto corral_source_split_2221;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    out_$p223 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(4, 1));
    goto corral_source_split_2220;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p220, 89088);
    goto corral_source_split_2219;

  $bb53:
    assume {:verifier.code 0} true;
    out_$p220 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(0, 1));
    goto corral_source_split_2218;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p217, 3072);
    goto corral_source_split_2216;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(4, 1));
    goto corral_source_split_2215;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p214, 86016);
    goto corral_source_split_2214;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p214 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(0, 1));
    goto corral_source_split_2213;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p211, 3072);
    goto corral_source_split_2211;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    out_$p211 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(4, 1));
    goto corral_source_split_2210;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p208, 82944);
    goto corral_source_split_2209;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p208 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(0, 1));
    goto corral_source_split_2208;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p205, 3072);
    goto corral_source_split_2206;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    out_$p205 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(4, 1));
    goto corral_source_split_2205;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p202, 79872);
    goto corral_source_split_2204;

  $bb50:
    assume {:verifier.code 0} true;
    out_$p202 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(0, 1));
    goto corral_source_split_2203;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p199, 3072);
    goto corral_source_split_2201;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    out_$p199 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(4, 1));
    goto corral_source_split_2200;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p196, 76800);
    goto corral_source_split_2199;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p196 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(0, 1));
    goto corral_source_split_2198;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p193, 3072);
    goto corral_source_split_2196;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(4, 1));
    goto corral_source_split_2195;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p190, 73728);
    goto corral_source_split_2194;

  $bb48:
    assume {:verifier.code 0} true;
    out_$p190 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(0, 1));
    goto corral_source_split_2193;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p187, 3072);
    goto corral_source_split_2191;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(4, 1));
    goto corral_source_split_2190;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p184, 70656);
    goto corral_source_split_2189;

  $bb47:
    assume {:verifier.code 0} true;
    out_$p184 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(0, 1));
    goto corral_source_split_2188;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p181, 3072);
    goto corral_source_split_2186;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(4, 1));
    goto corral_source_split_2185;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p178, 67584);
    goto corral_source_split_2184;

  $bb46:
    assume {:verifier.code 0} true;
    out_$p178 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(0, 1));
    goto corral_source_split_2183;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p175, 3072);
    goto corral_source_split_2181;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(4, 1));
    goto corral_source_split_2180;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p172, 64512);
    goto corral_source_split_2179;

  $bb45:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(0, 1));
    goto corral_source_split_2178;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p169, 3072);
    goto corral_source_split_2176;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(4, 1));
    goto corral_source_split_2175;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p166, 61440);
    goto corral_source_split_2174;

  $bb44:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(0, 1));
    goto corral_source_split_2173;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p163, 3072);
    goto corral_source_split_2171;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(4, 1));
    goto corral_source_split_2170;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p160, 58368);
    goto corral_source_split_2169;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(0, 1));
    goto corral_source_split_2168;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p157, 3072);
    goto corral_source_split_2166;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(4, 1));
    goto corral_source_split_2165;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p154, 55296);
    goto corral_source_split_2164;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(0, 1));
    goto corral_source_split_2163;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p151, 3072);
    goto corral_source_split_2161;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(4, 1));
    goto corral_source_split_2160;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p148, 52224);
    goto corral_source_split_2159;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(0, 1));
    goto corral_source_split_2158;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p145, 3072);
    goto corral_source_split_2156;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(4, 1));
    goto corral_source_split_2155;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p142, 49152);
    goto corral_source_split_2154;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(0, 1));
    goto corral_source_split_2153;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p139, 3072);
    goto corral_source_split_2151;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(4, 1));
    goto corral_source_split_2150;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p136, 46080);
    goto corral_source_split_2149;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_2148;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p133, 3072);
    goto corral_source_split_2146;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(4, 1));
    goto corral_source_split_2145;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p130, 43008);
    goto corral_source_split_2144;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_2143;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p127, 3072);
    goto corral_source_split_2141;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(4, 1));
    goto corral_source_split_2140;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p124, 39936);
    goto corral_source_split_2139;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_2138;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p121, 3072);
    goto corral_source_split_2136;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(4, 1));
    goto corral_source_split_2135;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p118, 36864);
    goto corral_source_split_2134;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2133;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p115, 3072);
    goto corral_source_split_2131;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(4, 1));
    goto corral_source_split_2130;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p112, 33792);
    goto corral_source_split_2129;

  $bb35:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_2128;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p109, 3072);
    goto corral_source_split_2126;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(4, 1));
    goto corral_source_split_2125;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p106, 30720);
    goto corral_source_split_2124;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_2123;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p103, 3072);
    goto corral_source_split_2121;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_2120;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p100, 27648);
    goto corral_source_split_2119;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_2118;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p97, 3072);
    goto corral_source_split_2116;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_2115;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p94, 24576);
    goto corral_source_split_2114;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_2113;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p91, 3072);
    goto corral_source_split_2111;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_2110;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p88, 21504);
    goto corral_source_split_2109;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_2108;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p85, 3072);
    goto corral_source_split_2106;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_2105;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p82, 18432);
    goto corral_source_split_2104;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_2103;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p79, 3072);
    goto corral_source_split_2101;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_2100;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p76, 15360);
    goto corral_source_split_2099;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_2098;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p73, 3072);
    goto corral_source_split_2096;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_2095;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p70, 12288);
    goto corral_source_split_2094;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_2093;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p67, 3072);
    goto corral_source_split_2091;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_2090;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p64, 9216);
    goto corral_source_split_2089;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_2088;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p61, 3072);
    goto corral_source_split_2086;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_2085;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p58, 6144);
    goto corral_source_split_2084;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_2083;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p55, 3072);
    goto corral_source_split_2069;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_2068;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p52, 3072);
    goto corral_source_split_2067;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_2066;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p43, 3072);
    goto corral_source_split_2064;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2063;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p40, 0);
    goto corral_source_split_2062;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2061;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p37, 98304);
    goto corral_source_split_2059;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2058;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p36, out_$p20);
    goto corral_source_split_2057;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2056;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p35, 32);
    goto corral_source_split_2055;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2054;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p34, 6);
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_2052;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p33, 1);
    goto corral_source_split_2051;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_2050;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p32, out_$i31);
    goto corral_source_split_2049;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2048;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    out_$i31 := $or.i32(out_$i30, 128);
    goto corral_source_split_2047;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} out_$i30 := __create_pipe(in_$p4, out_$i29);
    call {:si_unique_call 454} {:cexpr "tmp"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_2046;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i32(out_$i28);
    goto corral_source_split_2045;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.0, out_$p27);
    goto corral_source_split_2044;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2144, 1));
    goto corral_source_split_2043;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p26, out_$p24);
    goto corral_source_split_2042;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2041;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    goto corral_source_split_2040;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_2039;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2232, 1));
    goto corral_source_split_2038;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p22, in_$p4);
    goto corral_source_split_2037;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2036;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p21, urb_complete_iso);
    goto corral_source_split_2035;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2034;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} out_$p20 := usb_alloc_coherent(in_$p4, 98304, 208, out_$p19);
    goto corral_source_split_2033;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_2032;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p18, out_$p12);
    goto corral_source_split_2031;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2152, 1)), $mul.ref(out_$i16, 8));
    goto corral_source_split_2030;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i11);
    goto corral_source_split_2029;

  $bb8:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i11;
    assume true;
    goto $bb8;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i64(out_$i13, 0);
    goto corral_source_split_2023;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(out_$p12);
    goto corral_source_split_2022;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} out_$p12 := ldv_usb_alloc_urb_4(32, 208);
    goto corral_source_split_2021;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p40, out_$p43, out_$i44, out_$i45, out_$i11, out_$p52, out_$p55, out_$p58, out_$p61, out_$p64, out_$p67, out_$p70, out_$p73, out_$p76, out_$p79, out_$p82, out_$p85, out_$p88, out_$p91, out_$p94, out_$p97, out_$p100, out_$p103, out_$p106, out_$p109, out_$p112, out_$p115, out_$p118, out_$p121, out_$p124, out_$p127, out_$p130, out_$p133, out_$p136, out_$p139, out_$p142, out_$p145, out_$p148, out_$p151, out_$p154, out_$p157, out_$p160, out_$p163, out_$p166, out_$p169, out_$p172, out_$p175, out_$p178, out_$p181, out_$p184, out_$p187, out_$p190, out_$p193, out_$p196, out_$p199, out_$p202, out_$p205, out_$p208, out_$p211, out_$p214, out_$p217, out_$p220, out_$p223, out_$p226, out_$p229, out_$p232, out_$p235 := prepare_iso_urb_loop_$bb5(in_$p0, in_$p4, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p40, out_$p43, out_$i44, out_$i45, out_$i11, out_$p52, out_$p55, out_$p58, out_$p61, out_$p64, out_$p67, out_$p70, out_$p73, out_$p76, out_$p79, out_$p82, out_$p85, out_$p88, out_$p91, out_$p94, out_$p97, out_$p100, out_$p103, out_$p106, out_$p109, out_$p112, out_$p115, out_$p118, out_$p121, out_$p124, out_$p127, out_$p130, out_$p133, out_$p136, out_$p139, out_$p142, out_$p145, out_$p148, out_$p151, out_$p154, out_$p157, out_$p160, out_$p163, out_$p166, out_$p169, out_$p172, out_$p175, out_$p178, out_$p181, out_$p184, out_$p187, out_$p190, out_$p193, out_$p196, out_$p199, out_$p202, out_$p205, out_$p208, out_$p211, out_$p214, out_$p217, out_$p220, out_$p223, out_$p226, out_$p229, out_$p232, out_$p235);
    return;

  exit:
    return;
}



procedure prepare_iso_urb_loop_$bb5(in_$p0: ref, in_$p4: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$i15: i32, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$i28: i8, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p40: ref, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i11: i32, in_$p52: ref, in_$p55: ref, in_$p58: ref, in_$p61: ref, in_$p64: ref, in_$p67: ref, in_$p70: ref, in_$p73: ref, in_$p76: ref, in_$p79: ref, in_$p82: ref, in_$p85: ref, in_$p88: ref, in_$p91: ref, in_$p94: ref, in_$p97: ref, in_$p100: ref, in_$p103: ref, in_$p106: ref, in_$p109: ref, in_$p112: ref, in_$p115: ref, in_$p118: ref, in_$p121: ref, in_$p124: ref, in_$p127: ref, in_$p130: ref, in_$p133: ref, in_$p136: ref, in_$p139: ref, in_$p142: ref, in_$p145: ref, in_$p148: ref, in_$p151: ref, in_$p154: ref, in_$p157: ref, in_$p160: ref, in_$p163: ref, in_$p166: ref, in_$p169: ref, in_$p172: ref, in_$p175: ref, in_$p178: ref, in_$p181: ref, in_$p184: ref, in_$p187: ref, in_$p190: ref, in_$p193: ref, in_$p196: ref, in_$p199: ref, in_$p202: ref, in_$p205: ref, in_$p208: ref, in_$p211: ref, in_$p214: ref, in_$p217: ref, in_$p220: ref, in_$p223: ref, in_$p226: ref, in_$p229: ref, in_$p232: ref, in_$p235: ref) returns (out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$i15: i32, out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$p27: ref, out_$i28: i8, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p40: ref, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i11: i32, out_$p52: ref, out_$p55: ref, out_$p58: ref, out_$p61: ref, out_$p64: ref, out_$p67: ref, out_$p70: ref, out_$p73: ref, out_$p76: ref, out_$p79: ref, out_$p82: ref, out_$p85: ref, out_$p88: ref, out_$p91: ref, out_$p94: ref, out_$p97: ref, out_$p100: ref, out_$p103: ref, out_$p106: ref, out_$p109: ref, out_$p112: ref, out_$p115: ref, out_$p118: ref, out_$p121: ref, out_$p124: ref, out_$p127: ref, out_$p130: ref, out_$p133: ref, out_$p136: ref, out_$p139: ref, out_$p142: ref, out_$p145: ref, out_$p148: ref, out_$p151: ref, out_$p154: ref, out_$p157: ref, out_$p160: ref, out_$p163: ref, out_$p166: ref, out_$p169: ref, out_$p172: ref, out_$p175: ref, out_$p178: ref, out_$p181: ref, out_$p184: ref, out_$p187: ref, out_$p190: ref, out_$p193: ref, out_$p196: ref, out_$p199: ref, out_$p202: ref, out_$p205: ref, out_$p208: ref, out_$p211: ref, out_$p214: ref, out_$p217: ref, out_$p220: ref, out_$p223: ref, out_$p226: ref, out_$p229: ref, out_$p232: ref, out_$p235: ref);
  modifies $M.0, $M.9;



implementation {:SIextraRecBound 8} fire_all_urb_loop_$bb1(in_$p0: ref, in_$i3: i64, in_$p5: ref, in_$p6: ref, in_$i7: i32, in_$i8: i1, in_$i10: i32, in_$i11: i1, in_$i2: i32, in_$i12: i32, in_vslice_dummy_var_142: i32) returns (out_$i3: i64, out_$p5: ref, out_$p6: ref, out_$i7: i32, out_$i8: i1, out_$i10: i32, out_$i11: i1, out_$i2: i32, out_$i12: i32, out_vslice_dummy_var_142: i32)
{

  entry:
    out_$i3, out_$p5, out_$p6, out_$i7, out_$i8, out_$i10, out_$i11, out_$i2, out_$i12, out_vslice_dummy_var_142 := in_$i3, in_$p5, in_$p6, in_$i7, in_$i8, in_$i10, in_$i11, in_$i2, in_$i12, in_vslice_dummy_var_142;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2276;

  $bb6:
    assume out_$i11 == 1;
    assume {:verifier.code 0} true;
    out_$i2 := out_$i10;
    goto $bb6_dummy;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i7;
    assume true;
    goto $bb6;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    out_$i11 := $sle.i32(out_$i10, 7);
    goto corral_source_split_2288;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i32(out_$i2, 1);
    call {:si_unique_call 468} {:cexpr "i"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_2287;

  $bb4:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} out_vslice_dummy_var_142 := printk.ref.ref.i32.i32.i32(.str.38, .str.39, 678, out_$i2, out_$i7);
    goto corral_source_split_2285;

  $bb3:
    assume out_$i8 == 1;
    goto corral_source_split_2284;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_2282;

  SeqInstr_54:
    call {:si_unique_call 466} {:cexpr "ret"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_2281;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} out_$i7 := ldv_usb_submit_urb_9(out_$p6, 208);
    goto SeqInstr_53;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_2280;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2152, 1)), $mul.ref(out_$i3, 8));
    goto corral_source_split_2279;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i3 := $sext.i32.i64(out_$i2);
    goto corral_source_split_2278;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i3, out_$p5, out_$p6, out_$i7, out_$i8, out_$i10, out_$i11, out_$i2, out_$i12, out_vslice_dummy_var_142 := fire_all_urb_loop_$bb1(in_$p0, out_$i3, out_$p5, out_$p6, out_$i7, out_$i8, out_$i10, out_$i11, out_$i2, out_$i12, out_vslice_dummy_var_142);
    return;

  exit:
    return;
}



procedure fire_all_urb_loop_$bb1(in_$p0: ref, in_$i3: i64, in_$p5: ref, in_$p6: ref, in_$i7: i32, in_$i8: i1, in_$i10: i32, in_$i11: i1, in_$i2: i32, in_$i12: i32, in_vslice_dummy_var_142: i32) returns (out_$i3: i64, out_$p5: ref, out_$p6: ref, out_$i7: i32, out_$i8: i1, out_$i10: i32, out_$i11: i1, out_$i2: i32, out_$i12: i32, out_vslice_dummy_var_142: i32);
  modifies $M.22, $M.24, $M.0, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $CurrAddr, $M.11, $M.38, $M.9, $M.25, assertsPassed;



implementation copy_video_data_loop_$bb4(in_$p0: ref, in_$p8: ref, in_$i9: i32, in_$i10: i1, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i22: i64, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i64, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$i59: i64, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i64, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i64, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$i6: i32, in_$p7: ref, in_$p79: ref, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$i83: i32, in_$p46: ref, in_$i47: i32, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8, in_cmdloc_dummy_var_28: [ref]i8, in_cmdloc_dummy_var_29: [ref]i8) returns (out_$p8: ref, out_$i9: i32, out_$i10: i1, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i22: i64, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i64, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$i59: i64, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i64, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i64, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i78: i32, out_$i6: i32, out_$p7: ref, out_$p79: ref, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$i83: i32, out_$p46: ref, out_$i47: i32, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8, out_cmdloc_dummy_var_28: [ref]i8, out_cmdloc_dummy_var_29: [ref]i8)
{

  entry:
    out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i6, out_$p7, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$p46, out_$i47, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29 := in_$p8, in_$i9, in_$i10, in_$p11, in_$i12, in_$i13, in_$p14, in_$p15, in_$i16, in_$p17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$p33, in_$p34, in_$p35, in_$i36, in_$i37, in_$p38, in_$p39, in_$i40, in_$i41, in_$p42, in_$p43, in_$i44, in_$i45, in_$p48, in_$i49, in_$i50, in_$p51, in_$p52, in_$i53, in_$p54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$p60, in_$p61, in_$p62, in_$p63, in_$p64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i69, in_$p70, in_$p71, in_$p72, in_$i73, in_$i74, in_$p75, in_$p76, in_$i77, in_$i78, in_$i6, in_$p7, in_$p79, in_$i80, in_$i81, in_$p82, in_$i83, in_$p46, in_$i47, in_cmdloc_dummy_var_24, in_cmdloc_dummy_var_25, in_cmdloc_dummy_var_26, in_cmdloc_dummy_var_27, in_cmdloc_dummy_var_28, in_cmdloc_dummy_var_29;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2466;

  $bb13:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i6, out_$p7 := out_$i44, out_$p43;
    goto $bb13_dummy;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    out_$p46, out_$i47 := out_$p43, out_$i44;
    assume true;
    goto $bb13;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_2519;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2518;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    out_$p43, out_$i44 := out_$p75, out_$i78;
    goto $bb12;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    out_$p43, out_$i44 := out_$p38, out_$i41;
    goto $bb12;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p42, 0);
    goto corral_source_split_2516;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2132, 1));
    goto corral_source_split_2515;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    out_$i41 := $sub.i32(out_$i6, out_$i40);
    call {:si_unique_call 506} {:cexpr "count"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_2514;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.0, out_$p39);
    goto corral_source_split_2513;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2132, 1));
    goto corral_source_split_2512;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p7, $mul.ref(out_$i37, 1));
    goto corral_source_split_2511;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i36);
    goto corral_source_split_2510;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, out_$p35);
    goto corral_source_split_2509;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2132, 1));
    goto corral_source_split_2508;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p34, out_$p33);
    goto corral_source_split_2507;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2120, 1));
    goto corral_source_split_2506;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(out_$p26, $mul.ref(out_$i32, 1));
    goto corral_source_split_2505;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i31);
    goto corral_source_split_2504;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i28, out_$i30);
    goto corral_source_split_2503;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    goto corral_source_split_2502;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2140, 1));
    goto corral_source_split_2501;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_2500;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2132, 1));
    goto corral_source_split_2499;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_2498;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2120, 1));
    goto corral_source_split_2497;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_24 := $M.0;
    out_cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 505} out_cmdloc_dummy_var_26 := $memcpy.i8(out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_$p24, out_$p7, out_$i22, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_26;
    goto corral_source_split_2496;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_2495;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2120, 1));
    goto corral_source_split_2494;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i21);
    call {:si_unique_call 504} {:cexpr "__len"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_2493;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_2492;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2132, 1));
    goto corral_source_split_2491;

  $bb9:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    out_$i19 := $sgt.i32(out_$i16, out_$i18);
    goto corral_source_split_2485;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, out_$p17);
    goto corral_source_split_2484;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2136, 1));
    goto corral_source_split_2483;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    goto corral_source_split_2482;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2128, 1));
    goto corral_source_split_2481;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p14, out_$i13);
    goto corral_source_split_2480;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2128, 1));
    goto corral_source_split_2479;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i12, 1);
    goto corral_source_split_2478;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, out_$p11);
    goto corral_source_split_2477;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2128, 1));
    goto corral_source_split_2476;

  $bb6:
    assume out_$i10 == 1;
    goto corral_source_split_2475;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_2473;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i32($M.0, out_$p8);
    goto corral_source_split_2472;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2132, 1));
    goto corral_source_split_2471;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb19:
    assume out_$i81 == 1;
    goto corral_source_split_2561;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    out_$p82, out_$i83 := out_$p7, out_$i6;
    assume true;
    goto $bb19;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    out_$i81 := $ule.i32(out_$i80, out_$i6);
    goto corral_source_split_2469;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.0, out_$p79);
    goto corral_source_split_2468;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2140, 1));
    goto corral_source_split_2467;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    out_$i78 := $sub.i32(out_$i6, out_$i77);
    call {:si_unique_call 509} {:cexpr "count"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_2559;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i32($M.0, out_$p76);
    goto corral_source_split_2558;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2140, 1));
    goto corral_source_split_2557;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref(out_$p7, $mul.ref(out_$i74, 1));
    goto corral_source_split_2556;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i32.i64(out_$i73);
    goto corral_source_split_2555;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.0, out_$p72);
    goto corral_source_split_2554;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2140, 1));
    goto corral_source_split_2553;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p71, out_$p70);
    goto corral_source_split_2552;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2120, 1));
    goto corral_source_split_2551;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref(out_$p63, $mul.ref(out_$i69, 1));
    goto corral_source_split_2550;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i32.i64(out_$i68);
    goto corral_source_split_2549;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i32(out_$i65, out_$i67);
    goto corral_source_split_2548;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i32($M.0, out_$p66);
    goto corral_source_split_2547;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2140, 1));
    goto corral_source_split_2546;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, out_$p64);
    goto corral_source_split_2545;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2140, 1));
    goto corral_source_split_2544;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.0, out_$p62);
    goto corral_source_split_2543;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2120, 1));
    goto corral_source_split_2542;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_27 := $M.0;
    out_cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 508} out_cmdloc_dummy_var_29 := $memcpy.i8(out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_$p61, out_$p7, out_$i59, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_29;
    goto corral_source_split_2541;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_2540;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2120, 1));
    goto corral_source_split_2539;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    out_$i59 := $sext.i32.i64(out_$i58);
    call {:si_unique_call 507} {:cexpr "__len___0"} boogie_si_record_i64(out_$i59);
    goto corral_source_split_2538;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, out_$p57);
    goto corral_source_split_2537;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2140, 1));
    goto corral_source_split_2536;

  $bb17:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    out_$i56 := $sgt.i32(out_$i53, out_$i55);
    goto corral_source_split_2532;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.0, out_$p54);
    goto corral_source_split_2531;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2136, 1));
    goto corral_source_split_2530;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.0, out_$p52);
    goto corral_source_split_2529;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2128, 1));
    goto corral_source_split_2528;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p51, out_$i50);
    goto corral_source_split_2527;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2128, 1));
    goto corral_source_split_2526;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i49, 1);
    goto corral_source_split_2525;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, out_$p48);
    goto corral_source_split_2524;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(2128, 1));
    goto corral_source_split_2523;

  $bb7:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i6, out_$p7, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$p46, out_$i47, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29 := copy_video_data_loop_$bb4(in_$p0, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i6, out_$p7, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$p46, out_$i47, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29);
    return;

  exit:
    return;
}



procedure copy_video_data_loop_$bb4(in_$p0: ref, in_$p8: ref, in_$i9: i32, in_$i10: i1, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i22: i64, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i64, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$i59: i64, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i64, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i64, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$i6: i32, in_$p7: ref, in_$p79: ref, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$i83: i32, in_$p46: ref, in_$i47: i32, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8, in_cmdloc_dummy_var_28: [ref]i8, in_cmdloc_dummy_var_29: [ref]i8) returns (out_$p8: ref, out_$i9: i32, out_$i10: i1, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i22: i64, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i64, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$i59: i64, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i64, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i64, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i78: i32, out_$i6: i32, out_$p7: ref, out_$p79: ref, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$i83: i32, out_$p46: ref, out_$i47: i32, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8, out_cmdloc_dummy_var_28: [ref]i8, out_cmdloc_dummy_var_29: [ref]i8);
  modifies $M.0;



implementation urb_complete_iso_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p6: ref, in_$p9: ref, in_$p11: ref, in_$i15: i1, in_$i16: i8, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i32, in_$i28: i32, in_$i29: i64, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$i43: i32, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i1) returns (out_$i15: i1, out_$i16: i8, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i32, out_$i28: i32, out_$i29: i64, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$i43: i32, out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i1)
{

  entry:
    out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48 := in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$i43, in_$i44, in_$p45, in_$i46, in_$i47, in_$i48;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} out_$i15 := get_video_frame(in_$p6, in_$p9);
    goto corral_source_split_2738;

  $bb27:
    assume {:verifier.code 0} true;
    assume out_$i48 == 1;
    goto $bb27_dummy;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    out_$i48 := $sgt.i32(out_$i46, out_$i47);
    goto corral_source_split_2785;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.28, in_$p2);
    goto corral_source_split_2784;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, out_$p45);
    goto corral_source_split_2783;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2782;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, in_$p2, out_$i44);
    goto corral_source_split_2781;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i43, 1);
    goto corral_source_split_2780;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.29, in_$p3);
    goto corral_source_split_2779;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} copy_vbi_video_data(in_$p9, out_$p30, out_$i35);
    goto corral_source_split_2777;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    out_$i35 := $mul.i32(out_$i34, 3072);
    goto corral_source_split_2776;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i33, 1);
    goto corral_source_split_2775;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    out_$i33 := $sub.i32(out_$i31, out_$i32);
    goto corral_source_split_2774;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.28, in_$p2);
    goto corral_source_split_2773;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.29, in_$p3);
    goto corral_source_split_2772;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(in_$p11, $mul.ref(out_$i29, 1));
    goto corral_source_split_2771;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i28);
    goto corral_source_split_2770;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    out_$i28 := $mul.i32(out_$i27, 3072);
    goto corral_source_split_2769;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.28, in_$p2);
    goto corral_source_split_2768;

  $bb23:
    assume out_$i26 == 1;
    goto corral_source_split_2767;

  $bb21:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i21, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb14:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i21, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(out_$i21, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} out_$i21 := get_chunk(out_$i20, in_$p0, in_$p2, in_$p3, in_$p1);
    call {:si_unique_call 541} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i21);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.28, in_$p2);
    goto corral_source_split_2752;

  $bb10:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_2745;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2744;

  $bb7:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := 1;
    goto $bb8;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    out_$i18 := 0;
    goto $bb8;

  $bb6:
    assume out_$i17 == 1;
    goto corral_source_split_2742;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    out_$i17 := $trunc.i8.i1(out_$i16);
    goto corral_source_split_2740;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i8(out_$i15);
    call {:si_unique_call 537} {:cexpr "tmp"} boogie_si_record_i8(out_$i16);
    goto corral_source_split_2739;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} check_trailer(in_$p9, out_$p39, 3072);
    goto corral_source_split_2765;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(in_$p11, $mul.ref(out_$i38, 1));
    goto corral_source_split_2764;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i37);
    goto corral_source_split_2763;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    out_$i37 := $mul.i32(out_$i36, 3072);
    goto corral_source_split_2762;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.28, in_$p2);
    goto corral_source_split_2761;

  $bb22:
    assume !(out_$i25 == 1);
    goto corral_source_split_2760;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i24 == 1);
    goto $bb20;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i26 == 1);
    goto $bb20;

  $bb17:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i21, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  $bb15:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i21, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48 := urb_complete_iso_loop_$bb5(in_$p0, in_$p1, in_$p2, in_$p3, in_$p6, in_$p9, in_$p11, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48);
    return;

  exit:
    return;
}



procedure urb_complete_iso_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p6: ref, in_$p9: ref, in_$p11: ref, in_$i15: i1, in_$i16: i8, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i32, in_$i28: i32, in_$i29: i64, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$i43: i32, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i1) returns (out_$i15: i1, out_$i16: i8, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i32, out_$i28: i32, out_$i29: i64, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$i43: i32, out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i1);
  modifies $M.26, $M.0, $CurrAddr, $M.28, $M.29, $M.27;



implementation get_chunk_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i24: i32, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i24: i32, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i8: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i24, out_$i47, out_$i48, out_$i49, out_$i8 := in_$p9, in_$p10, in_$i11, in_$p13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$p25, in_$i26, in_$i27, in_$p28, in_$i29, in_$i30, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i44, in_$i24, in_$i47, in_$i48, in_$i49, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2799;

  $bb38:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i47;
    goto $bb38_dummy;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    out_$i49 := $sgt.i32(out_$i48, out_$i47);
    goto corral_source_split_2826;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, in_$p5);
    goto corral_source_split_2825;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i24, 1);
    call {:si_unique_call 548} {:cexpr "start"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_2824;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2823;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i8;
    goto $bb12;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i8;
    goto $bb12;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i8;
    goto $bb12;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i8;
    goto $bb12;

  $bb9:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    out_$i22 := $sgt.i32(out_$i18, out_$i21);
    goto corral_source_split_2817;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    out_$i21 := $sdiv.i32(out_$i20, 3);
    goto corral_source_split_2816;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_2815;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2814;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.27, in_$p4);
    goto corral_source_split_2813;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, in_$p4, out_$i17);
    goto corral_source_split_2812;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i16, 1);
    goto corral_source_split_2811;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.27, in_$p4);
    goto corral_source_split_2810;

  $bb6:
    assume out_$i15 == 1;
    goto corral_source_split_2809;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, $sub.i32(0, 75));
    goto corral_source_split_2807;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_2806;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 16)), $mul.ref(12, 1));
    goto corral_source_split_2805;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    goto corral_source_split_2804;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i8);
    goto corral_source_split_2803;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    out_$p10 := $bitcast.ref.ref(out_$p9);
    goto corral_source_split_2802;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1));
    goto corral_source_split_2801;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb22:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, $sub.i32(0, 1));
    goto corral_source_split_2833;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.28, in_$p2);
    goto corral_source_split_2832;

  $bb19:
    assume {:verifier.code 0} true;
    assume out_$i33 == 1;
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i30 == 1;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    assume out_$i27 == 1;
    goto $bb15;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_2830;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_2829;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 16)), $mul.ref(12, 1));
    goto corral_source_split_2828;

  $bb7:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 0);
    goto corral_source_split_2838;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, out_$p28);
    goto corral_source_split_2837;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 16)), $mul.ref(8, 1));
    goto corral_source_split_2836;

  $bb16:
    assume !(out_$i27 == 1);
    goto corral_source_split_2835;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    out_$i33 := $ugt.i32(out_$i32, 3072);
    goto corral_source_split_2843;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.0, out_$p31);
    goto corral_source_split_2842;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 16)), $mul.ref(8, 1));
    goto corral_source_split_2841;

  $bb18:
    assume !(out_$i30 == 1);
    goto corral_source_split_2840;

  $bb30:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, in_$p3, out_$i8);
    goto corral_source_split_2861;

  $bb29:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, in_$p2, out_$i8);
    goto corral_source_split_2859;

  $bb28:
    assume out_$i40 == 1;
    goto corral_source_split_2858;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, $sub.i32(0, 1));
    goto corral_source_split_2856;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.28, in_$p2);
    goto corral_source_split_2855;

  $bb26:
    assume out_$i38 == 1;
    goto corral_source_split_2854;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 3072);
    goto corral_source_split_2852;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, out_$p36);
    goto corral_source_split_2851;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 16)), $mul.ref(8, 1));
    goto corral_source_split_2850;

  $bb20:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb33:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i8;
    assume true;
    goto $bb33;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    out_$i43 := $ule.i32(out_$i42, 3071);
    goto corral_source_split_2865;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, out_$p41);
    goto corral_source_split_2864;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 16)), $mul.ref(8, 1));
    goto corral_source_split_2863;

  $bb27:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i24, out_$i47, out_$i48, out_$i49, out_$i8 := get_chunk_loop_$bb4(in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, out_$p9, out_$p10, out_$i11, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i24, out_$i47, out_$i48, out_$i49, out_$i8);
    return;

  exit:
    return;
}



procedure get_chunk_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i24: i32, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i24: i32, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i8: i32);
  modifies $M.27, $M.29, $M.28;



implementation poseidon_set_fe_loop_$bb8(in_$p0: ref, in_$p18: ref, in_$i19: i32, in_$i20: i64, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$i25: i64, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i16: i32, in_$i17: i32, in_$i33: i32) returns (out_$p18: ref, out_$i19: i32, out_$i20: i64, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$i25: i64, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i16: i32, out_$i17: i32, out_$i33: i32)
{

  entry:
    out_$p18, out_$i19, out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i16, out_$i17, out_$i33 := in_$p18, in_$i19, in_$i20, in_$p22, in_$i23, in_$i24, in_$i25, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i16, in_$i17, in_$i33;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3932;

  $bb13:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i16, out_$i17 := out_$i29, out_$i30;
    goto $bb13_dummy;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i29;
    assume true;
    goto $bb13;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i30, out_$i31);
    goto corral_source_split_3949;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    out_$i31 := $M.32;
    goto corral_source_split_3948;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i17, 1);
    call {:si_unique_call 700} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_3947;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3946;

  $bb11:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    out_$i29 := out_$i16;
    goto $bb12;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i28;
    goto $bb12;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.33, out_$p27);
    call {:si_unique_call 699} {:cexpr "bandwidth"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_3944;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref(out_$i25, 8)), $mul.ref(0, 4));
    goto corral_source_split_3943;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i17);
    goto corral_source_split_3942;

  $bb10:
    assume out_$i24 == 1;
    goto corral_source_split_3941;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i19, out_$i23);
    goto corral_source_split_3939;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.33, out_$p22);
    goto corral_source_split_3938;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref(out_$i20, 8)), $mul.ref(1, 4));
    goto corral_source_split_3937;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i17);
    goto corral_source_split_3936;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    goto corral_source_split_3935;

  $bb9:
    out_$p18 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1568)), $mul.ref(816, 1)), $mul.ref(32, 1));
    goto corral_source_split_3934;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i16, out_$i17, out_$i33 := poseidon_set_fe_loop_$bb8(in_$p0, out_$p18, out_$i19, out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i16, out_$i17, out_$i33);
    return;

  exit:
    return;
}



procedure poseidon_set_fe_loop_$bb8(in_$p0: ref, in_$p18: ref, in_$i19: i32, in_$i20: i64, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$i25: i64, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i16: i32, in_$i17: i32, in_$i33: i32) returns (out_$p18: ref, out_$i19: i32, out_$i20: i64, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$i25: i64, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i16: i32, out_$i17: i32, out_$i33: i32);



implementation dvb_start_streaming_loop_$bb14(in_$p0: ref, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i30: i32, in_$i31: i1, in_$i21: i32, in_$i32: i32) returns (out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i30: i32, out_$i31: i1, out_$i21: i32, out_$i32: i32)
{

  entry:
    out_$i22, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i30, out_$i31, out_$i21, out_$i32 := in_$i22, in_$p24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i30, in_$i31, in_$i21, in_$i32;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4495;

  $bb19:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i30;
    goto $bb19_dummy;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i26;
    assume true;
    goto $bb19;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    out_$i31 := $sle.i32(out_$i30, 3);
    goto corral_source_split_4507;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i21, 1);
    call {:si_unique_call 811} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_4506;

  $bb17:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i26;
    assume true;
    goto $bb17;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_4501;

  SeqInstr_99:
    call {:si_unique_call 809} {:cexpr "ret"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_4500;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} out_$i26 := ldv_usb_submit_urb_26(out_$p25, 208);
    goto SeqInstr_98;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_4499;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4096)), $mul.ref(3296, 1)), $mul.ref(out_$i22, 8));
    goto corral_source_split_4498;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i21);
    goto corral_source_split_4497;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i22, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i30, out_$i31, out_$i21, out_$i32 := dvb_start_streaming_loop_$bb14(in_$p0, out_$i22, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i30, out_$i31, out_$i21, out_$i32);
    return;

  exit:
    return;
}



procedure dvb_start_streaming_loop_$bb14(in_$p0: ref, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i30: i32, in_$i31: i1, in_$i21: i32, in_$i32: i32) returns (out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i30: i32, out_$i31: i1, out_$i21: i32, out_$i32: i32);
  modifies $M.22, $M.24, $M.0, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.10, $M.1, $M.2, $M.34, $M.36, $M.8, $M.7, $M.6, $CurrAddr, $M.11, $M.38, $M.9, $M.25, assertsPassed;



implementation dvb_urb_irq_loop_$bb20(in_$i5: i32, in_$p27: ref, in_$i30: i64, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i44: i32, in_$i45: i1, in_$i29: i32) returns (out_$i30: i64, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i44: i32, out_$i45: i1, out_$i29: i32)
{

  entry:
    out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i44, out_$i45, out_$i29 := in_$i30, in_$p31, in_$i32, in_$i33, in_$i34, in_$i44, in_$i45, in_$i29;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4583;

  $bb29:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := out_$i44;
    goto $bb29_dummy;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i44, in_$i5);
    goto corral_source_split_4606;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i29, 512);
    call {:si_unique_call 825} {:cexpr "offset"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_4605;

  $bb23:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i29;
    assume true;
    goto $bb23;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i32, 0);
    goto corral_source_split_4588;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} out_$i32 := strncmp(out_$p31, .str.58, 4);
    call {:si_unique_call 821} {:cexpr "tmp"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_4587;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref(in_$p27, $mul.ref(out_$i30, 1));
    goto corral_source_split_4586;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i29);
    goto corral_source_split_4585;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i44, out_$i45, out_$i29 := dvb_urb_irq_loop_$bb20(in_$i5, in_$p27, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i44, out_$i45, out_$i29);
    return;

  exit:
    return;
}



procedure dvb_urb_irq_loop_$bb20(in_$i5: i32, in_$p27: ref, in_$i30: i64, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i44: i32, in_$i45: i1, in_$i29: i32) returns (out_$i30: i64, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i44: i32, out_$i45: i1, out_$i29: i32);



implementation tlg_fm_vidioc_g_tuner_loop_$bb8(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p31: ref, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$i40: i64, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i35: i32, in_$i36: i32, in_$i47: i32, in_$i48: i1, in_$i50: i1, in_$i51: i32, in_$i49: i32, in_$i46: i32, in_vslice_dummy_var_182: i64) returns (out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$i40: i64, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i35: i32, out_$i36: i32, out_$i47: i32, out_$i48: i1, out_$i50: i1, out_$i51: i32, out_$i49: i32, out_$i46: i32, out_vslice_dummy_var_182: i64)
{

  entry:
    out_$p37, out_$i38, out_$p39, out_$i40, out_$p42, out_$i43, out_$i44, out_$i45, out_$i35, out_$i36, out_$i47, out_$i48, out_$i50, out_$i51, out_$i49, out_$i46, out_vslice_dummy_var_182 := in_$p37, in_$i38, in_$p39, in_$i40, in_$p42, in_$i43, in_$i44, in_$i45, in_$i35, in_$i36, in_$i47, in_$i48, in_$i50, in_$i51, in_$i49, in_$i46, in_vslice_dummy_var_182;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4864;

  $bb11:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i35, out_$i36 := out_$i47, out_$i43;
    goto $bb11_dummy;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i43;
    assume true;
    goto $bb11;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_4878;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, in_$p31);
    goto corral_source_split_4877;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} out_$i43 := send_get_req(in_$p7, 69, 4, out_$p42, in_$p4, 20);
    call {:si_unique_call 908} {:cexpr "ret"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_4876;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4875;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} out_vslice_dummy_var_182 := schedule_timeout(250);
    goto corral_source_split_4874;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $M.37 := $store.i64($M.37, in_$p5, out_$i40);
    goto corral_source_split_4872;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p37, $mul.ref(0, 9640)), $mul.ref(0, 1));
    call {:si_unique_call 905} out_$i40 := devirtbounce(0, out_$p39, out_$i38, out_$p39);
    goto corral_source_split_4871;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i64($M.37, in_$p5);
    goto corral_source_split_4870;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} out_$p37 := get_current();
    goto corral_source_split_4869;

  $bb9:
    assume {:verifier.code 0} true;
    $M.37 := $store.i64($M.37, in_$p5, 1);
    goto corral_source_split_4868;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb15:
    assume out_$i50 == 1;
    goto corral_source_split_4887;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i36;
    assume true;
    goto $bb15;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i36, 0);
    goto corral_source_split_4883;

  $bb13:
    assume out_$i48 == 1;
    goto corral_source_split_4882;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i36;
    assume true;
    goto $bb13;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i35, 0);
    goto corral_source_split_4866;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    out_$i47 := $sub.i32(out_$i35, 1);
    call {:si_unique_call 903} {:cexpr "count"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_4865;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p37, out_$i38, out_$p39, out_$i40, out_$p42, out_$i43, out_$i44, out_$i45, out_$i35, out_$i36, out_$i47, out_$i48, out_$i50, out_$i51, out_$i49, out_$i46, out_vslice_dummy_var_182 := tlg_fm_vidioc_g_tuner_loop_$bb8(in_$p3, in_$p4, in_$p5, in_$p7, in_$p31, out_$p37, out_$i38, out_$p39, out_$i40, out_$p42, out_$i43, out_$i44, out_$i45, out_$i35, out_$i36, out_$i47, out_$i48, out_$i50, out_$i51, out_$i49, out_$i46, out_vslice_dummy_var_182);
    return;

  exit:
    return;
}



procedure tlg_fm_vidioc_g_tuner_loop_$bb8(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p31: ref, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$i40: i64, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i35: i32, in_$i36: i32, in_$i47: i32, in_$i48: i1, in_$i50: i1, in_$i51: i32, in_$i49: i32, in_$i46: i32, in_vslice_dummy_var_182: i64) returns (out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$i40: i64, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i35: i32, out_$i36: i32, out_$i47: i32, out_$i48: i1, out_$i50: i1, out_$i51: i32, out_$i49: i32, out_$i46: i32, out_vslice_dummy_var_182: i64);
  modifies $M.0, $CurrAddr, $M.37;



implementation pm_notifier_block_loop_$bb7(in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p9: ref, in_$p10: ref, in_vslice_dummy_var_192: i32) returns (out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p9: ref, out_$p10: ref, out_vslice_dummy_var_192: i32)
{

  entry:
    out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p9, out_$p10, out_vslice_dummy_var_192 := in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$i16, in_$i17, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$p9, in_$p10, in_vslice_dummy_var_192;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5094;

  $bb12:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$p9, out_$p10 := out_$p21, out_$p9;
    goto $bb12_dummy;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i64(out_$i22, $p2i.ref.i64(pd_device_list));
    goto corral_source_split_5112;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p9);
    goto corral_source_split_5111;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_5110;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5109;

  $bb10:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} device_unlock(out_$p19);
    goto corral_source_split_5107;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p13, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_5106;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} out_vslice_dummy_var_192 := usb_reset_device(out_$p13);
    goto corral_source_split_5105;

  $bb9:
    assume out_$i17 == 1;
    goto corral_source_split_5104;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    out_$i17 := $sge.i32(out_$i16, 0);
    goto corral_source_split_5102;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} out_$i16 := usb_lock_device_for_reset(out_$p13, out_$p15);
    call {:si_unique_call 953} {:cexpr "rc"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_5101;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_5100;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p11, $mul.ref(0, 11112)), $mul.ref(560, 1));
    goto corral_source_split_5099;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_5098;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 11112)), $mul.ref(552, 1));
    goto corral_source_split_5097;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(out_$p10);
    goto corral_source_split_5096;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p9, out_$p10, out_vslice_dummy_var_192 := pm_notifier_block_loop_$bb7(out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p9, out_$p10, out_vslice_dummy_var_192);
    return;

  exit:
    return;
}



procedure pm_notifier_block_loop_$bb7(in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p9: ref, in_$p10: ref, in_vslice_dummy_var_192: i32) returns (out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p9: ref, out_$p10: ref, out_vslice_dummy_var_192: i32);



implementation pd_dvb_usb_device_exit_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$i5: i64, in_$p6: ref, in_$i7: i64, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_vslice_dummy_var_212: i64) returns (out_$p4: ref, out_$i5: i64, out_$p6: ref, out_$i7: i64, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_vslice_dummy_var_212: i64)
{

  entry:
    out_$p4, out_$i5, out_$p6, out_$i7, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_vslice_dummy_var_212 := in_$p4, in_$i5, in_$p6, in_$i7, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_vslice_dummy_var_212;
    goto $bb1, exit;

  $bb1:
    out_$p9 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 11112)), $mul.ref(6888, 1)), $mul.ref(3280, 1));
    goto corral_source_split_5465;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    goto corral_source_split_5475_dummy;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} out_vslice_dummy_var_212 := schedule_timeout(250);
    goto corral_source_split_5475;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $M.40 := $store.i64($M.40, in_$p1, out_$i7);
    goto corral_source_split_5473;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(out_$p4, $mul.ref(0, 9640)), $mul.ref(0, 1));
    call {:si_unique_call 1052} out_$i7 := devirtbounce(0, out_$p6, out_$i5, out_$p6);
    goto corral_source_split_5472;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    out_$i5 := $load.i64($M.40, in_$p1);
    goto corral_source_split_5471;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} out_$p4 := get_current();
    goto corral_source_split_5470;

  $bb2:
    assume {:verifier.code 0} true;
    $M.40 := $store.i64($M.40, in_$p1, 1);
    goto corral_source_split_5469;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb4:
    assume out_$i11 == 1;
    goto corral_source_split_5477;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_5467;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} out_$i10 := atomic_read(out_$p9);
    call {:si_unique_call 1050} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_5466;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_5483;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 0);
    goto corral_source_split_5481;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} out_$i12 := atomic_read(in_$p3);
    call {:si_unique_call 1055} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_5480;

  $bb5:
    assume !(out_$i11 == 1);
    goto corral_source_split_5479;

  corral_source_split_5475_dummy:
    call {:si_unique_call 1} out_$p4, out_$i5, out_$p6, out_$i7, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_vslice_dummy_var_212 := pd_dvb_usb_device_exit_loop_$bb1(in_$p0, in_$p1, in_$p3, out_$p4, out_$i5, out_$p6, out_$i7, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_vslice_dummy_var_212);
    return;

  exit:
    return;
}



procedure pd_dvb_usb_device_exit_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$i5: i64, in_$p6: ref, in_$i7: i64, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_vslice_dummy_var_212: i64) returns (out_$p4: ref, out_$i5: i64, out_$p6: ref, out_$i7: i64, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_vslice_dummy_var_212: i64);
  modifies $M.40;



implementation find_old_poseidon_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$i8: i8, in_$i9: i32, in_$p10: ref, in_$i11: i8, in_$i12: i32, in_$i13: i1, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p6: ref) returns (out_$p7: ref, out_$i8: i8, out_$i9: i32, out_$p10: ref, out_$i11: i8, out_$i12: i32, out_$i13: i1, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p6: ref)
{

  entry:
    out_$p7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$p18, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p6 := in_$p7, in_$i8, in_$i9, in_$p10, in_$i11, in_$i12, in_$i13, in_$p15, in_$i16, in_$i17, in_$p18, in_$p22, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$p6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5568;

  $bb13:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$p6 := out_$p23;
    goto $bb13_dummy;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i26, $p2i.ref.i64(pd_device_list));
    goto corral_source_split_5593;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_5592;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 11112)), $mul.ref(0, 1));
    goto corral_source_split_5591;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_5590;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_5589;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref(out_$p6, $mul.ref(0, 11112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5588;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i13 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb8;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    out_$p18 := out_$p6;
    assume true;
    goto $bb10;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, 1);
    goto corral_source_split_5581;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    goto corral_source_split_5580;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref(out_$p6, $mul.ref(0, 11112)), $mul.ref(11016, 1)), $mul.ref(0, 1));
    goto corral_source_split_5579;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_5578;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i9, out_$i12);
    goto corral_source_split_5576;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i8.i32(out_$i11);
    goto corral_source_split_5575;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i8($M.0, out_$p10);
    goto corral_source_split_5574;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1992)), $mul.ref(1834, 1));
    goto corral_source_split_5573;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i8.i32(out_$i8);
    goto corral_source_split_5572;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i8($M.0, out_$p7);
    goto corral_source_split_5571;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p6, $mul.ref(0, 11112)), $mul.ref(11104, 1));
    goto corral_source_split_5570;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$p18, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p6 := find_old_poseidon_loop_$bb4(in_$p0, out_$p7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$p18, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p6);
    return;

  exit:
    return;
}



procedure find_old_poseidon_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$i8: i8, in_$i9: i32, in_$p10: ref, in_$i11: i8, in_$i12: i32, in_$i13: i1, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p6: ref) returns (out_$p7: ref, out_$i8: i8, out_$i9: i32, out_$p10: ref, out_$i11: i8, out_$i12: i32, out_$i13: i1, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p6: ref);



implementation hibernation_resume_loop_$bb4(in_$p1: ref, in_$p13: ref, in_$p14: ref, in_$i16: i32, in_$i17: i1, in_$i12: i32, in_vslice_dummy_var_232: i32) returns (out_$p13: ref, out_$p14: ref, out_$i16: i32, out_$i17: i1, out_$i12: i32, out_vslice_dummy_var_232: i32)
{

  entry:
    out_$p13, out_$p14, out_$i16, out_$i17, out_$i12, out_vslice_dummy_var_232 := in_$p13, in_$p14, in_$i16, in_$i17, in_$i12, in_vslice_dummy_var_232;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5832;

  $bb6:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i16;
    goto $bb6_dummy;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i12, 0);
    goto corral_source_split_5838;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    out_$i16 := $sub.i32(out_$i12, 1);
    call {:si_unique_call 1156} {:cexpr "count"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_5837;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} out_vslice_dummy_var_232 := ldv_usb_autopm_get_interface_39(out_$p14);
    goto corral_source_split_5836;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_5835;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p1, $mul.ref($sub.ref(0, 10440), 11112)), $mul.ref(560, 1));
    goto corral_source_split_5834;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i16, out_$i17, out_$i12, out_vslice_dummy_var_232 := hibernation_resume_loop_$bb4(in_$p1, out_$p13, out_$p14, out_$i16, out_$i17, out_$i12, out_vslice_dummy_var_232);
    return;

  exit:
    return;
}



procedure hibernation_resume_loop_$bb4(in_$p1: ref, in_$p13: ref, in_$p14: ref, in_$i16: i32, in_$i17: i1, in_$i12: i32, in_vslice_dummy_var_232: i32) returns (out_$p13: ref, out_$p14: ref, out_$i16: i32, out_$i17: i1, out_$i12: i32, out_vslice_dummy_var_232: i32);
  modifies $M.10;



implementation fixup_loop_$bb4(in_$p0: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$i9: i32)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$i13, out_$i9 := in_$p10, in_$p11, in_$i12, in_$i13, in_$i9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6020;

  $bb6:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i12;
    goto $bb6_dummy;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i9, 0);
    goto corral_source_split_6026;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    out_$i12 := $sub.i32(out_$i9, 1);
    call {:si_unique_call 1232} {:cexpr "count"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_6025;

  SeqInstr_144:
    goto corral_source_split_6024;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} ldv_usb_autopm_put_interface_36(out_$p11);
    goto SeqInstr_143;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_6023;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11112)), $mul.ref(560, 1));
    goto corral_source_split_6022;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$i13, out_$i9 := fixup_loop_$bb4(in_$p0, out_$p10, out_$p11, out_$i12, out_$i13, out_$i9);
    return;

  exit:
    return;
}



procedure fixup_loop_$bb4(in_$p0: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$i9: i32);
  modifies $M.10, assertsPassed;



implementation firmware_download_loop_$bb12(in_$p0: ref, in_$p1: ref, in_$i11: i64, in_$p15: ref, in_$i25: i64, in_$i31: i64, in_$i32: i32, in_$i33: i32, in_$p34: ref, in_$i35: i1, in_$i36: i64, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i42: i64, in_$i43: i1, in_$i30: i64, in_$i44: i32) returns (out_$i31: i64, out_$i32: i32, out_$i33: i32, out_$p34: ref, out_$i35: i1, out_$i36: i64, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i42: i64, out_$i43: i1, out_$i30: i64, out_$i44: i32)
{

  entry:
    out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i42, out_$i43, out_$i30, out_$i44 := in_$i31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i42, in_$i43, in_$i30, in_$i44;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6088;

  $bb21:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := out_$i42;
    goto $bb21_dummy;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i38;
    assume true;
    goto $bb21;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    out_$i43 := $ult.i64(out_$i42, in_$i11);
    goto corral_source_split_6112;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i64(out_$i30, in_$i25);
    call {:si_unique_call 1255} {:cexpr "offset"} boogie_si_record_i64(out_$i42);
    goto corral_source_split_6111;

  $bb18:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i38;
    assume true;
    goto $bb18;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_6104;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} out_$i38 := usb_bulk_msg(in_$p0, out_$i33, out_$p34, out_$i37, in_$p1, 2500);
    call {:si_unique_call 1253} {:cexpr "ret"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_6103;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i64.i32(out_$i36);
    goto corral_source_split_6102;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_6101;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i31;
    goto $bb16;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    out_$i36 := in_$i25;
    goto $bb16;

  $bb14:
    assume out_$i35 == 1;
    goto corral_source_split_6097;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    out_$i35 := $ult.i64(in_$i25, out_$i31);
    goto corral_source_split_6095;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(in_$p15, $mul.ref(out_$i30, 1));
    goto corral_source_split_6094;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    out_$i33 := $or.i32(out_$i32, $sub.i32(0, 1073741824));
    goto corral_source_split_6093;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} out_$i32 := __create_pipe(in_$p0, 1);
    call {:si_unique_call 1251} {:cexpr "tmp"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_6092;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    out_$i31 := $sub.i64(in_$i11, out_$i30);
    call {:si_unique_call 1249} {:cexpr "_min2"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_6091;

  $bb13:
    assume {:verifier.code 0} true;
    $M.49 := $store.i32($M.49, in_$p1, 0);
    goto corral_source_split_6090;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb15:
    assume !(out_$i35 == 1);
    goto corral_source_split_6099;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i42, out_$i43, out_$i30, out_$i44 := firmware_download_loop_$bb12(in_$p0, in_$p1, in_$i11, in_$p15, in_$i25, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i42, out_$i43, out_$i30, out_$i44);
    return;

  exit:
    return;
}



procedure firmware_download_loop_$bb12(in_$p0: ref, in_$p1: ref, in_$i11: i64, in_$p15: ref, in_$i25: i64, in_$i31: i64, in_$i32: i32, in_$i33: i32, in_$p34: ref, in_$i35: i1, in_$i36: i64, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i42: i64, in_$i43: i1, in_$i30: i64, in_$i44: i32) returns (out_$i31: i64, out_$i32: i32, out_$i33: i32, out_$p34: ref, out_$i35: i1, out_$i36: i64, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i42: i64, out_$i43: i1, out_$i30: i64, out_$i44: i32);
  modifies $M.49;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$i4: i64, in_$p6: ref, in_$i8: i32, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i1, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i1, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i32, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$i119: i1, in_vslice_dummy_var_332: i32) returns (out_$i8: i32, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i1, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i1, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i32, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$i119: i1, out_vslice_dummy_var_332: i32)
{

  entry:
    out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_vslice_dummy_var_332 := in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$p64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$p80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$p87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_vslice_dummy_var_332;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1696} out_$i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 1697} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i8);
    call {:si_unique_call 1698} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i8);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb37_dummy;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_186:
    goto corral_source_split_7462;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} ldv_main_exported_6();
    goto SeqInstr_185;

  $bb34:
    assume out_$i25 == 1;
    goto corral_source_split_7461;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_7459;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    out_$i24 := $M.80;
    goto corral_source_split_7458;

  $bb32:
    assume out_$i23 == 1;
    goto corral_source_split_7457;

  $bb28:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i8, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb20:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i8, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb3:
    assume out_$i9 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i8, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i8, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb39:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} ldv_main_exported_11();
    goto corral_source_split_7465;

  $bb38:
    assume out_$i27 == 1;
    goto corral_source_split_7464;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_7451;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    out_$i26 := $M.60;
    goto corral_source_split_7450;

  $bb30:
    assume out_$i22 == 1;
    goto corral_source_split_7449;

  $bb29:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(out_$i8, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb42:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} ldv_main_exported_3();
    goto corral_source_split_7468;

  $bb41:
    assume out_$i29 == 1;
    goto corral_source_split_7467;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_7455;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    out_$i28 := $M.83;
    goto corral_source_split_7454;

  $bb31:
    assume !(out_$i22 == 1);
    goto corral_source_split_7453;

  $bb45:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_189:
    goto corral_source_split_7471;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} ldv_main_exported_7();
    goto SeqInstr_188;

  $bb44:
    assume out_$i31 == 1;
    goto corral_source_split_7470;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_7443;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    out_$i30 := $M.74;
    goto corral_source_split_7442;

  $bb26:
    assume out_$i20 == 1;
    goto corral_source_split_7441;

  $bb22:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i8, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb21:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i8, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb48:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} ldv_main_exported_9();
    goto corral_source_split_7474;

  $bb47:
    assume out_$i33 == 1;
    goto corral_source_split_7473;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_7447;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    out_$i32 := $M.66;
    goto corral_source_split_7446;

  $bb27:
    assume !(out_$i20 == 1);
    goto corral_source_split_7445;

  $bb51:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_192:
    goto corral_source_split_7477;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} ldv_main_exported_12();
    goto SeqInstr_191;

  $bb50:
    assume out_$i35 == 1;
    goto corral_source_split_7476;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_7435;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    out_$i34 := $M.67;
    goto corral_source_split_7434;

  $bb24:
    assume out_$i19 == 1;
    goto corral_source_split_7433;

  $bb23:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i8, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb54:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1709} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7487;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} out_vslice_dummy_var_332 := pm_notifier_block(in_$p2, in_$i4, in_$p3);
    goto corral_source_split_7486;

  $bb58:
    assume out_$i41 == 1;
    goto corral_source_split_7485;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 1);
    goto corral_source_split_7483;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    out_$i40 := $M.87;
    goto corral_source_split_7482;

  $bb56:
    assume out_$i39 == 1;
    goto corral_source_split_7481;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_7479:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1705} out_$i38 := __VERIFIER_nondet_int();
    call {:si_unique_call 1706} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i38);
    call {:si_unique_call 1707} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i38);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb53:
    assume out_$i37 == 1;
    goto corral_source_split_7479;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_7439;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    out_$i36 := $M.87;
    goto corral_source_split_7438;

  $bb25:
    assume !(out_$i19 == 1);
    goto corral_source_split_7437;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} ldv_stop();
    goto corral_source_split_7489;

  $bb57:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb66:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    goto $bb67;

  SeqInstr_195:
    goto corral_source_split_7492;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} ldv_main_exported_8();
    goto SeqInstr_194;

  $bb65:
    assume out_$i44 == 1;
    goto corral_source_split_7491;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_7423;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    out_$i43 := $M.70;
    goto corral_source_split_7422;

  $bb16:
    assume out_$i15 == 1;
    goto corral_source_split_7421;

  $bb5:
    assume out_$i10 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i8, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb4:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i8, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb69:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb85:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb87:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $M.63 := out_$i61;
    call {:si_unique_call 1718} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_7527;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i60, 1);
    goto corral_source_split_7526;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    out_$i60 := $M.63;
    goto corral_source_split_7525;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $M.88 := 2;
    call {:si_unique_call 1717} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7524;

  $bb86:
    assume out_$i59 == 1;
    goto corral_source_split_7523;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i58, 0);
    goto corral_source_split_7521;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    out_$i58 := $M.90;
    goto corral_source_split_7520;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $M.90 := out_$i57;
    call {:si_unique_call 1716} {:cexpr "ldv_retval_8"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_7519;

  SeqInstr_198:
    goto corral_source_split_7518;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} out_$i57 := poseidon_probe(out_$p56, in_$p6);
    goto SeqInstr_197;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    out_$p56 := $M.85;
    goto corral_source_split_7517;

  $bb84:
    assume out_$i55 == 1;
    goto corral_source_split_7516;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i54, 1);
    goto corral_source_split_7514;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    out_$i54 := $M.88;
    goto corral_source_split_7513;

  $bb82:
    assume out_$i53 == 1;
    goto corral_source_split_7512;

  $bb80:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i47, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb71:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i52 := $slt.i32(out_$i47, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb70:
    assume {:verifier.code 0} true;
    out_$i48 := $slt.i32(out_$i47, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_7494:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1712} out_$i47 := __VERIFIER_nondet_int();
    call {:si_unique_call 1713} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i47);
    call {:si_unique_call 1714} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i47);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb68:
    assume out_$i46 == 1;
    goto corral_source_split_7494;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_7427;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    out_$i45 := $M.88;
    goto corral_source_split_7426;

  $bb18:
    assume out_$i16 == 1;
    goto corral_source_split_7425;

  $bb17:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i8, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb92:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb94:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $M.88 := 3;
    call {:si_unique_call 1721} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_7539;

  $bb93:
    assume out_$i69 == 1;
    goto corral_source_split_7538;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 0);
    goto corral_source_split_7536;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    out_$i68 := $M.91;
    goto corral_source_split_7535;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $M.91 := out_$i67;
    call {:si_unique_call 1720} {:cexpr "ldv_retval_7"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_7534;

  SeqInstr_201:
    goto corral_source_split_7533;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} out_$i67 := poseidon_suspend(out_$p64, out_$i66);
    goto SeqInstr_200;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.86, out_$p65);
    goto corral_source_split_7532;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7531;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    out_$p64 := $M.85;
    goto corral_source_split_7530;

  $bb91:
    assume out_$i63 == 1;
    goto corral_source_split_7529;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i62, 2);
    goto corral_source_split_7510;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    out_$i62 := $M.88;
    goto corral_source_split_7509;

  $bb81:
    assume !(out_$i52 == 1);
    goto corral_source_split_7508;

  $bb98:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb100:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $M.88 := 2;
    call {:si_unique_call 1724} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7549;

  $bb99:
    assume out_$i75 == 1;
    goto corral_source_split_7548;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 0);
    goto corral_source_split_7546;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    out_$i74 := $M.92;
    goto corral_source_split_7545;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $M.92 := out_$i73;
    call {:si_unique_call 1723} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_7544;

  SeqInstr_204:
    goto corral_source_split_7543;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} out_$i73 := poseidon_resume(out_$p72);
    goto SeqInstr_203;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    out_$p72 := $M.85;
    goto corral_source_split_7542;

  $bb97:
    assume out_$i71 == 1;
    goto corral_source_split_7541;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, 3);
    goto corral_source_split_7498;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    out_$i70 := $M.88;
    goto corral_source_split_7497;

  $bb73:
    assume out_$i49 == 1;
    goto corral_source_split_7496;

  $bb72:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i47, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $M.63 := out_$i89;
    call {:si_unique_call 1730} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_7576;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    out_$i89 := $sub.i32(out_$i88, 1);
    goto corral_source_split_7575;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    out_$i88 := $M.63;
    goto corral_source_split_7574;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1729} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7573;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} poseidon_disconnect(out_$p87);
    goto corral_source_split_7572;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    out_$p87 := $M.85;
    goto corral_source_split_7571;

  $bb112:
    assume out_$i86 == 1;
    goto corral_source_split_7570;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i85, 0);
    goto corral_source_split_7568;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    out_$i85 := $M.93;
    goto corral_source_split_7567;

  $bb109:
    assume out_$i84 == 1;
    goto corral_source_split_7566;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i83, 2);
    goto corral_source_split_7564;

  $bb108:
    assume {:verifier.code 0} true;
    out_$i83 := $M.88;
    goto corral_source_split_7563;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $M.63 := out_$i82;
    call {:si_unique_call 1727} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_7561;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    out_$i82 := $sub.i32(out_$i81, 1);
    goto corral_source_split_7560;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    out_$i81 := $M.63;
    goto corral_source_split_7559;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1726} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7558;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} poseidon_disconnect(out_$p80);
    goto corral_source_split_7557;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    out_$p80 := $M.85;
    goto corral_source_split_7556;

  $bb106:
    assume out_$i79 == 1;
    goto corral_source_split_7555;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i78, 0);
    goto corral_source_split_7553;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    out_$i78 := $M.93;
    goto corral_source_split_7552;

  $bb103:
    assume out_$i77 == 1;
    goto corral_source_split_7551;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i76, 3);
    goto corral_source_split_7502;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    out_$i76 := $M.88;
    goto corral_source_split_7501;

  $bb75:
    assume out_$i50 == 1;
    goto corral_source_split_7500;

  $bb74:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    out_$i50 := $slt.i32(out_$i47, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb104:
    assume {:verifier.code 0} true;
    assume !(out_$i77 == 1);
    goto $bb105;

  $bb107:
    assume {:verifier.code 0} true;
    assume !(out_$i79 == 1);
    goto $bb105;

  $bb110:
    assume {:verifier.code 0} true;
    assume !(out_$i84 == 1);
    goto $bb111;

  $bb113:
    assume {:verifier.code 0} true;
    assume !(out_$i86 == 1);
    goto $bb111;

  $bb116:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb118:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $M.88 := 2;
    call {:si_unique_call 1733} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7585;

  $bb117:
    assume out_$i94 == 1;
    goto corral_source_split_7584;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i93, 0);
    goto corral_source_split_7582;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    out_$i93 := $M.94;
    goto corral_source_split_7581;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $M.94 := out_$i92;
    call {:si_unique_call 1732} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_7580;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} out_$i92 := ldv_reset_resume_1();
    goto corral_source_split_7579;

  $bb115:
    assume out_$i91 == 1;
    goto corral_source_split_7578;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i90, 3);
    goto corral_source_split_7506;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    out_$i90 := $M.88;
    goto corral_source_split_7505;

  $bb77:
    assume out_$i51 == 1;
    goto corral_source_split_7504;

  $bb76:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i47, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} ldv_stop();
    goto corral_source_split_7587;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb78:
    assume {:verifier.code 0} true;
    assume !(out_$i51 == 1);
    goto $bb79;

  $bb83:
    assume {:verifier.code 0} true;
    assume !(out_$i53 == 1);
    goto $bb79;

  $bb125:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} ldv_main_exported_4();
    goto corral_source_split_7590;

  $bb124:
    assume out_$i96 == 1;
    goto corral_source_split_7589;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    out_$i96 := $ne.i32(out_$i95, 0);
    goto corral_source_split_7431;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    out_$i95 := $M.82;
    goto corral_source_split_7430;

  $bb19:
    assume !(out_$i16 == 1);
    goto corral_source_split_7429;

  $bb128:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb138:
    assume {:verifier.code 0} true;
    assume !(out_$i104 == 1);
    goto $bb139;

  $bb141:
    assume {:verifier.code 0} true;
    assume !(out_$i106 == 1);
    goto $bb139;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    out_$i106 := $eq.i32(out_$i105, 0);
    goto corral_source_split_7604;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    out_$i105 := $M.63;
    goto corral_source_split_7603;

  $bb137:
    assume out_$i104 == 1;
    goto corral_source_split_7602;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i103, 2);
    goto corral_source_split_7600;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    out_$i103 := $M.89;
    goto corral_source_split_7599;

  $bb135:
    assume out_$i102 == 1;
    goto corral_source_split_7598;

  $bb130:
    assume out_$i100 == 1;
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i99, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb129:
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i99, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_7592:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1736} out_$i99 := __VERIFIER_nondet_int();
    call {:si_unique_call 1737} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i99);
    call {:si_unique_call 1738} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i99);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb127:
    assume out_$i98 == 1;
    goto corral_source_split_7592;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i97, 0);
    goto corral_source_split_7415;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    out_$i97 := $M.89;
    goto corral_source_split_7414;

  $bb14:
    assume out_$i14 == 1;
    goto corral_source_split_7413;

  $bb7:
    assume out_$i11 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i8, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb6:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(out_$i8, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb146:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb151:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    goto $bb152;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} ldv_initialize_v4l2_file_operations_6();
    goto corral_source_split_7644;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1763} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7643;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} ldv_initialize_v4l2_ioctl_ops_11();
    goto corral_source_split_7642;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1761} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_7641;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1760} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7640;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} ldv_initialize_dvb_frontend_ops_7();
    goto corral_source_split_7639;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 1758} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7638;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1757} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7637;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} ldv_initialize_v4l2_file_operations_12();
    goto corral_source_split_7636;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1755} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_7635;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1754} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7634;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} ldv_initialize_snd_pcm_ops_8();
    goto corral_source_split_7633;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1752} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_7632;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} ldv_initialize_v4l2_ioctl_ops_4();
    goto corral_source_split_7631;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1750} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7630;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} ldv_videobuf_queue_ops_13();
    goto corral_source_split_7629;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1748} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_7628;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1747} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7627;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1746} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7626;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $M.89 := 2;
    call {:si_unique_call 1745} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_7625;

  $bb150:
    assume out_$i113 == 1;
    goto corral_source_split_7624;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i112, 0);
    goto corral_source_split_7622;

  $bb149:
    assume {:verifier.code 0} true;
    out_$i112 := $M.95;
    goto corral_source_split_7621;

  $bb148:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    out_$i111 := $ne.i32(out_$i110, 0);
    goto corral_source_split_7616;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    out_$i110 := $M.95;
    goto corral_source_split_7615;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $M.95 := out_$i109;
    call {:si_unique_call 1743} {:cexpr "ldv_retval_9"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_7614;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} out_$i109 := poseidon_init();
    goto corral_source_split_7613;

  $bb145:
    assume out_$i108 == 1;
    goto corral_source_split_7612;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    out_$i108 := $eq.i32(out_$i107, 1);
    goto corral_source_split_7596;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    out_$i107 := $M.89;
    goto corral_source_split_7595;

  $bb132:
    assume out_$i101 == 1;
    goto corral_source_split_7594;

  $bb131:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i99, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} ldv_stop();
    goto corral_source_split_7646;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb133:
    assume {:verifier.code 0} true;
    assume !(out_$i101 == 1);
    goto $bb134;

  $bb136:
    assume {:verifier.code 0} true;
    assume !(out_$i102 == 1);
    goto $bb134;

  $bb158:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    goto $bb159;

  SeqInstr_210:
    goto corral_source_split_7649;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} ldv_main_exported_13();
    goto SeqInstr_209;

  $bb157:
    assume out_$i115 == 1;
    goto corral_source_split_7648;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i32(out_$i114, 0);
    goto corral_source_split_7419;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    out_$i114 := $M.62;
    goto corral_source_split_7418;

  $bb15:
    assume !(out_$i14 == 1);
    goto corral_source_split_7417;

  $bb161:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} ldv_main_exported_10();
    goto corral_source_split_7652;

  $bb160:
    assume out_$i117 == 1;
    goto corral_source_split_7651;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    out_$i117 := $ne.i32(out_$i116, 0);
    goto corral_source_split_7407;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    out_$i116 := $M.65;
    goto corral_source_split_7406;

  $bb9:
    assume out_$i12 == 1;
    goto corral_source_split_7405;

  $bb8:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i8, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb164:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} ldv_main_exported_5();
    goto corral_source_split_7655;

  $bb163:
    assume out_$i119 == 1;
    goto corral_source_split_7654;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    out_$i119 := $ne.i32(out_$i118, 0);
    goto corral_source_split_7411;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    out_$i118 := $M.84;
    goto corral_source_split_7410;

  $bb11:
    assume out_$i13 == 1;
    goto corral_source_split_7409;

  $bb10:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i8, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} ldv_stop();
    goto corral_source_split_7657;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i13 == 1);
    goto $bb13;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb13;

  $bb37_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_vslice_dummy_var_332 := main_loop_$bb1(in_$p0, in_$p2, in_$p3, in_$i4, in_$p6, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_vslice_dummy_var_332);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$i4: i64, in_$p6: ref, in_$i8: i32, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i1, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i1, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i32, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$i119: i1, in_vslice_dummy_var_332: i32) returns (out_$i8: i32, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i1, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i1, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i32, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$i119: i1, out_vslice_dummy_var_332: i32);
  modifies $M.0, $M.81, $M.80, $M.63, $M.10, $M.36, $CurrAddr, $M.8, $M.7, $M.6, assertsPassed, $M.9, $M.57, $M.58, $M.59, $M.60, $M.17, $M.20, $M.83, $M.74, $M.75, $M.34, $M.1, $M.2, $M.66, $M.67, $M.68, $M.11, $M.87, $M.70, $M.71, $M.72, $M.22, $M.24, $M.25, $M.27, $M.28, $M.29, $M.26, $M.21, $M.40, $M.38, $M.88, $M.90, $M.41, $M.44, $M.45, $M.49, $M.91, $M.92, $M.94, $M.82, $M.37, $M.79, $M.52, $M.53, $M.54, $M.55, $M.73, $M.56, $M.69, $M.76, $M.77, $M.78, $M.50, $M.51, $M.62, $M.65, $M.84, $M.89, $M.95, $M.93, $M.85, $M.61, $M.64;


