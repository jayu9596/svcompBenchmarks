var $M.0: [ref]i8;

var $M.1: [ref]i32;

var $M.2: i32;

var $M.3: ref;

var $M.4: [ref]ref;

var $M.5: [ref]i32;

var $M.6: [ref]i32;

var $M.8: [ref]ref;

var $M.9: i32;

var $M.10: [ref]i8;

var $M.11: [ref]i8;

var $M.21: [ref]ref;

var $M.22: [ref]ref;

var $M.23: [ref]ref;

var $M.24: [ref]ref;

var $M.25: [ref]ref;

var $M.26: [ref]ref;

var $M.27: [ref]ref;

var $M.28: [ref]ref;

var $M.29: [ref]ref;

var $M.30: [ref]ref;

var $M.31: [ref]ref;

var $M.32: [ref]ref;

var $M.33: [ref]ref;

var $M.34: [ref]ref;

var $M.35: [ref]ref;

var $M.36: [ref]ref;

var $M.37: [ref]ref;

var $M.38: [ref]ref;

var $M.39: [ref]ref;

var $M.40: [ref]ref;

var $M.41: [ref]ref;

var $M.42: [ref]ref;

var $M.43: [ref]ref;

var $M.44: [ref]ref;

var $M.45: [ref]ref;

var $M.46: [ref]ref;

var $M.47: [ref]i8;

var $M.48: [ref]i8;

var $M.49: [ref]i8;

var $M.50: [ref]i8;

var $M.51: [ref]i8;

var $M.52: [ref]i8;

var $M.53: [ref]i8;

var $M.54: [ref]i8;

var $M.55: [ref]i8;

var $M.56: [ref]i8;

var $M.57: [ref]i8;

var $M.58: [ref]i8;

var $M.59: [ref]i8;

var $M.60: [ref]i8;

var $M.61: [ref]i8;

var $M.62: [ref]i8;

var $M.63: [ref]i8;

var $M.64: [ref]i8;

var $M.65: [ref]i8;

var $M.66: [ref]i8;

var $M.67: [ref]i8;

var $M.68: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 255584);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const serial_hsu_pops: ref;

axiom serial_hsu_pops == $sub.ref(0, 1216);

const serial_hsu_pm_ops: ref;

axiom serial_hsu_pm_ops == $sub.ref(0, 2424);

const {:count 5} pci_ids: ref;

axiom pci_ids == $sub.ref(0, 3608);

const hsu_pci_driver: ref;

axiom hsu_pci_driver == $sub.ref(0, 4928);

const serial_hsu_reg: ref;

axiom serial_hsu_reg == $sub.ref(0, 6016);

const dma_regs_ops: ref;

axiom dma_regs_ops == $sub.ref(0, 7248);

const port_regs_ops: ref;

axiom port_regs_ops == $sub.ref(0, 8480);

const phsu: ref;

axiom phsu == $sub.ref(0, 9512);

const hsu_dma_enable: ref;

axiom hsu_dma_enable == $sub.ref(0, 10540);

const {:count 3} serial_hsu_ports: ref;

axiom serial_hsu_ports == $sub.ref(0, 11588);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 12616);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 13644);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 24} .str.14: ref;

axiom .str.14 == $sub.ref(0, 14692);

const {:count 35} .str.15: ref;

axiom .str.15 == $sub.ref(0, 15751);

const {:count 15} .str.16: ref;

axiom .str.16 == $sub.ref(0, 16790);

const {:count 15} .str.17: ref;

axiom .str.17 == $sub.ref(0, 17829);

const {:count 15} .str.18: ref;

axiom .str.18 == $sub.ref(0, 18868);

const {:count 15} .str.19: ref;

axiom .str.19 == $sub.ref(0, 19907);

const {:count 15} .str.20: ref;

axiom .str.20 == $sub.ref(0, 20946);

const {:count 15} .str.21: ref;

axiom .str.21 == $sub.ref(0, 21985);

const {:count 15} .str.22: ref;

axiom .str.22 == $sub.ref(0, 23024);

const {:count 14} .str.23: ref;

axiom .str.23 == $sub.ref(0, 24062);

const {:count 15} .str.24: ref;

axiom .str.24 == $sub.ref(0, 25101);

const {:count 15} .str.25: ref;

axiom .str.25 == $sub.ref(0, 26140);

const {:count 32} .str.26: ref;

axiom .str.26 == $sub.ref(0, 27196);

const {:count 14} .str.27: ref;

axiom .str.27 == $sub.ref(0, 28234);

const {:count 15} .str.28: ref;

axiom .str.28 == $sub.ref(0, 29273);

const {:count 15} .str.29: ref;

axiom .str.29 == $sub.ref(0, 30312);

const {:count 17} .str.30: ref;

axiom .str.30 == $sub.ref(0, 31353);

const {:count 17} .str.31: ref;

axiom .str.31 == $sub.ref(0, 32394);

const {:count 17} .str.32: ref;

axiom .str.32 == $sub.ref(0, 33435);

const {:count 11} .str.11: ref;

axiom .str.11 == $sub.ref(0, 34470);

const {:count 7} .str.12: ref;

axiom .str.12 == $sub.ref(0, 35501);

const {:count 11} .str.13: ref;

axiom .str.13 == $sub.ref(0, 36536);

const {:count 46} .str.37: ref;

axiom .str.37 == $sub.ref(0, 37606);

const {:count 52} .str.33: ref;

axiom .str.33 == $sub.ref(0, 38682);

const {:count 19} .str.34: ref;

axiom .str.34 == $sub.ref(0, 39725);

const {:count 8} .str.35: ref;

axiom .str.35 == $sub.ref(0, 40757);

const {:count 17} .str.36: ref;

axiom .str.36 == $sub.ref(0, 41798);

const {:count 42} .str.38: ref;

axiom .str.38 == $sub.ref(0, 42864);

const {:count 47} .str.39: ref;

axiom .str.39 == $sub.ref(0, 43935);

const .str: ref;

axiom .str == $sub.ref(0, 45000);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 4} .str.1: ref;

axiom .str.1 == $sub.ref(0, 46028);

const iomem_resource: ref;

axiom iomem_resource == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 11} .str.2: ref;

axiom .str.2 == $sub.ref(0, 47063);

const {:count 37} .str.3: ref;

axiom .str.3 == $sub.ref(0, 48124);

const {:count 26} .str.4: ref;

axiom .str.4 == $sub.ref(0, 49174);

const {:count 11} .str.5: ref;

axiom .str.5 == $sub.ref(0, 50209);

const {:count 4} .str.6: ref;

axiom .str.6 == $sub.ref(0, 51237);

const {:count 13} .str.7: ref;

axiom .str.7 == $sub.ref(0, 52274);

const {:count 17} .str.8: ref;

axiom .str.8 == $sub.ref(0, 53315);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 54347);

const {:count 3} .str.1.59: ref;

axiom .str.1.59 == $sub.ref(0, 55374);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 56412);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 57440);

const serial_hsu_tx_empty: ref;

axiom serial_hsu_tx_empty == $sub.ref(0, 58472);

procedure serial_hsu_tx_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, assertsPassed;



implementation serial_hsu_tx_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} ldv_spin_lock();
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $i2 := serial_in($p1, 5);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 2} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 64);
    call {:si_unique_call 3} {:cexpr "__cil_tmp7"} boogie_si_record_i32($i3);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 4} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i5);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} spin_unlock_irqrestore($p6, $u0);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const serial_hsu_set_mctrl: ref;

axiom serial_hsu_set_mctrl == $sub.ref(0, 59504);

procedure serial_hsu_set_mctrl($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation serial_hsu_set_mctrl($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i8;
  var $i32: i8;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i8;
  var $i41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} {:cexpr "serial_hsu_set_mctrl:arg:mctrl"} boogie_si_record_i32($i1);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i1, 4);
    call {:si_unique_call 7} {:cexpr "__cil_tmp6"} boogie_si_record_i32($i3);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i1, 2);
    call {:si_unique_call 11} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i9);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i14 := $i8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i1, 8192);
    call {:si_unique_call 15} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i15);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i20 := $i14;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i1, 16384);
    call {:si_unique_call 19} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i21);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i20;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i1, 32768);
    call {:si_unique_call 23} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i27);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i26;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    call {:si_unique_call 27} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i33);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p2);
    call {:si_unique_call 28} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i34);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 306);
    call {:si_unique_call 29} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i35);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    call {:si_unique_call 30} {:cexpr "__cil_tmp24"} boogie_si_record_i8($i37);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    call {:si_unique_call 31} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i38);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i38, $i33);
    call {:si_unique_call 32} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i39);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    call {:si_unique_call 33} {:cexpr "mcr"} boogie_si_record_i8($i40);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    call {:si_unique_call 34} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i41);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} serial_out($p2, 4, $i41);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i26);
    call {:si_unique_call 24} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i29);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i29, 16);
    call {:si_unique_call 25} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i30);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    call {:si_unique_call 26} {:cexpr "mcr"} boogie_si_record_i8($i31);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb15;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i20);
    call {:si_unique_call 20} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i23);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, 8);
    call {:si_unique_call 21} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i24);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    call {:si_unique_call 22} {:cexpr "mcr"} boogie_si_record_i8($i25);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb12;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i14);
    call {:si_unique_call 16} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i17);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, 4);
    call {:si_unique_call 17} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i18);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    call {:si_unique_call 18} {:cexpr "mcr"} boogie_si_record_i8($i19);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb9;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i8);
    call {:si_unique_call 12} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i11);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 1);
    call {:si_unique_call 13} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i12);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    call {:si_unique_call 14} {:cexpr "mcr"} boogie_si_record_i8($i13);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32(0);
    call {:si_unique_call 8} {:cexpr "__cil_tmp7"} boogie_si_record_i32($i5);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 2);
    call {:si_unique_call 9} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i6);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    call {:si_unique_call 10} {:cexpr "mcr"} boogie_si_record_i8($i7);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const serial_hsu_get_mctrl: ref;

axiom serial_hsu_get_mctrl == $sub.ref(0, 60536);

procedure serial_hsu_get_mctrl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, assertsPassed;



implementation serial_hsu_get_mctrl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $i2 := serial_in($p1, 6);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 37} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    call {:si_unique_call 38} {:cexpr "status"} boogie_si_record_i8($i3);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    call {:si_unique_call 39} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i4);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i3);
    call {:si_unique_call 41} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i8);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 64);
    call {:si_unique_call 42} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i9);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i12 := $i7;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i3);
    call {:si_unique_call 44} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i13);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 32);
    call {:si_unique_call 45} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i14);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i12;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i3);
    call {:si_unique_call 47} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i18);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 16);
    call {:si_unique_call 48} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i19);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i17;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i17, 32);
    call {:si_unique_call 49} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb12;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i12, 256);
    call {:si_unique_call 46} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb9;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i7, 128);
    call {:si_unique_call 43} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i6 := $or.i32(0, 64);
    call {:si_unique_call 40} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;

  SeqInstr_4:
    assume !assertsPassed;
    return;
}



const serial_hsu_stop_tx: ref;

axiom serial_hsu_stop_tx == $sub.ref(0, 61568);

procedure serial_hsu_stop_tx($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation serial_hsu_stop_tx($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i8;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    call {:si_unique_call 50} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 336);
    call {:si_unique_call 51} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i3);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p1);
    call {:si_unique_call 52} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 400);
    call {:si_unique_call 53} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i7);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 54} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i9);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p1);
    call {:si_unique_call 58} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i16);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 304);
    call {:si_unique_call 59} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i17);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    call {:si_unique_call 60} {:cexpr "__cil_tmp17"} boogie_si_record_i8($i19);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    call {:si_unique_call 61} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i20);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 2);
    call {:si_unique_call 62} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i21);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p1);
    call {:si_unique_call 63} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i23);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 304);
    call {:si_unique_call 64} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i24);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p1);
    call {:si_unique_call 65} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i25);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 304);
    call {:si_unique_call 66} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i26);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    call {:si_unique_call 67} {:cexpr "__cil_tmp24"} boogie_si_record_i8($i28);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    call {:si_unique_call 68} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i29);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 253);
    call {:si_unique_call 69} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i30);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i24);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $i31);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p1);
    call {:si_unique_call 70} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i33);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 304);
    call {:si_unique_call 71} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i34);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i34);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    call {:si_unique_call 72} {:cexpr "__cil_tmp29"} boogie_si_record_i8($i36);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    call {:si_unique_call 73} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i37);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} serial_out($p1, 1, $i37);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p5);
    call {:si_unique_call 55} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i11);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 16);
    call {:si_unique_call 56} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i12);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(4, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} writel(0, $p15);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_hsu_start_tx: ref;

axiom serial_hsu_start_tx == $sub.ref(0, 62600);

procedure serial_hsu_start_tx($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation serial_hsu_start_tx($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    call {:si_unique_call 75} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 400);
    call {:si_unique_call 76} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 77} {:cexpr "__cil_tmp6"} boogie_si_record_i32($i5);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p1);
    call {:si_unique_call 79} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i7);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 304);
    call {:si_unique_call 80} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i8);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    call {:si_unique_call 81} {:cexpr "__cil_tmp9"} boogie_si_record_i8($i10);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    call {:si_unique_call 82} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i11);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 2);
    call {:si_unique_call 83} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i12);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p1);
    call {:si_unique_call 84} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i14);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 304);
    call {:si_unique_call 85} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i15);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p1);
    call {:si_unique_call 86} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i16);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 304);
    call {:si_unique_call 87} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i17);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    call {:si_unique_call 88} {:cexpr "__cil_tmp16"} boogie_si_record_i8($i19);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    call {:si_unique_call 89} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i20);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i20, 2);
    call {:si_unique_call 90} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i21);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i15);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i22);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p1);
    call {:si_unique_call 91} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i24);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 304);
    call {:si_unique_call 92} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i25);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    call {:si_unique_call 93} {:cexpr "__cil_tmp21"} boogie_si_record_i8($i27);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    call {:si_unique_call 94} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i28);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} serial_out($p1, 1, $i28);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} hsu_dma_tx($p1);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_hsu_stop_rx: ref;

axiom serial_hsu_stop_rx == $sub.ref(0, 63632);

procedure serial_hsu_stop_rx($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation serial_hsu_stop_rx($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i8;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    call {:si_unique_call 96} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 344);
    call {:si_unique_call 97} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i3);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p1);
    call {:si_unique_call 98} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 400);
    call {:si_unique_call 99} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i7);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 100} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i9);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p1);
    call {:si_unique_call 104} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i16);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 304);
    call {:si_unique_call 105} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i17);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p1);
    call {:si_unique_call 106} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i18);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 304);
    call {:si_unique_call 107} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i19);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    call {:si_unique_call 108} {:cexpr "__cil_tmp19"} boogie_si_record_i8($i21);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    call {:si_unique_call 109} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i22);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 251);
    call {:si_unique_call 110} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i23);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i17);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, $i24);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    call {:si_unique_call 111} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i26);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, 156);
    call {:si_unique_call 112} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i27);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p1);
    call {:si_unique_call 113} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i28);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 156);
    call {:si_unique_call 114} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i29);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    call {:si_unique_call 115} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i31);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, $sub.i32(0, 2));
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i27);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p1);
    call {:si_unique_call 116} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i34);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 304);
    call {:si_unique_call 117} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i35);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    call {:si_unique_call 118} {:cexpr "__cil_tmp31"} boogie_si_record_i8($i37);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    call {:si_unique_call 119} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i38);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} serial_out($p1, 1, $i38);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p5);
    call {:si_unique_call 101} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i11);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 16);
    call {:si_unique_call 102} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i12);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(4, 1));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} writel(2, $p15);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_hsu_enable_ms: ref;

axiom serial_hsu_enable_ms == $sub.ref(0, 64664);

procedure serial_hsu_enable_ms($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation serial_hsu_enable_ms($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    call {:si_unique_call 121} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 304);
    call {:si_unique_call 122} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    call {:si_unique_call 123} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i4);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 304);
    call {:si_unique_call 124} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i5);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    call {:si_unique_call 125} {:cexpr "__cil_tmp8"} boogie_si_record_i8($i7);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    call {:si_unique_call 126} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i8);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, 8);
    call {:si_unique_call 127} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i9);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i3);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i10);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p1);
    call {:si_unique_call 128} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i12);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 304);
    call {:si_unique_call 129} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i13);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    call {:si_unique_call 130} {:cexpr "__cil_tmp13"} boogie_si_record_i8($i15);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    call {:si_unique_call 131} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i16);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} serial_out($p1, 1, $i16);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    return;
}



const serial_hsu_break_ctl: ref;

axiom serial_hsu_break_ctl == $sub.ref(0, 65696);

procedure serial_hsu_break_ctl($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2;



implementation serial_hsu_break_ctl($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} {:cexpr "serial_hsu_break_ctl:arg:break_state"} boogie_si_record_i32($i1);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} ldv_spin_lock();
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p2);
    call {:si_unique_call 142} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i14);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 305);
    call {:si_unique_call 143} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i15);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p2);
    call {:si_unique_call 144} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i16);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 305);
    call {:si_unique_call 145} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i17);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    call {:si_unique_call 146} {:cexpr "__cil_tmp17"} boogie_si_record_i8($i19);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    call {:si_unique_call 147} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i20);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 191);
    call {:si_unique_call 148} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i21);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i15);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i22);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p2);
    call {:si_unique_call 149} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i24);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 305);
    call {:si_unique_call 150} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i25);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    call {:si_unique_call 151} {:cexpr "__cil_tmp22"} boogie_si_record_i8($i27);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    call {:si_unique_call 152} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i28);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} serial_out($p2, 3, $i28);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p2);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} spin_unlock_irqrestore($p29, $u0);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p2);
    call {:si_unique_call 135} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i4);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 305);
    call {:si_unique_call 136} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i5);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p2);
    call {:si_unique_call 137} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i6);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 305);
    call {:si_unique_call 138} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i7);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    call {:si_unique_call 139} {:cexpr "__cil_tmp10"} boogie_si_record_i8($i9);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 140} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i10);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 64);
    call {:si_unique_call 141} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i11);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i5);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_hsu_startup: ref;

axiom serial_hsu_startup == $sub.ref(0, 66728);

procedure serial_hsu_startup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, assertsPassed;



implementation serial_hsu_startup($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $i66: i64;
  var $i67: i64;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i64;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i64;
  var $i94: i64;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $p101: ref;
  var $i102: i64;
  var $i103: i64;
  var $p104: ref;
  var $i105: i64;
  var $i106: i64;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $i110: i64;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $i115: i64;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $i119: i64;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i64;
  var $i124: i64;
  var $p125: ref;
  var $i130: i64;
  var $i131: i64;
  var $p132: ref;
  var vslice_dummy_var_0: i32;
  var vslice_dummy_var_1: i32;
  var vslice_dummy_var_2: i32;
  var vslice_dummy_var_3: i32;
  var vslice_dummy_var_4: i32;
  var vslice_dummy_var_5: i32;
  var vslice_dummy_var_6: i32;
  var vslice_dummy_var_7: i32;
  var vslice_dummy_var_8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    call {:si_unique_call 155} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i2);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 328);
    call {:si_unique_call 156} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i3);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} vslice_dummy_var_0 := pm_runtime_get_sync($p5);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} serial_out($p1, 2, 1);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} serial_out($p1, 2, 7);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} serial_out($p1, 2, 0);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} vslice_dummy_var_1 := serial_in($p1, 5);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} vslice_dummy_var_2 := serial_in($p1, 0);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} vslice_dummy_var_3 := serial_in($p1, 2);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} vslice_dummy_var_4 := serial_in($p1, 6);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} serial_out($p1, 3, 3);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} ldv_spin_lock();
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p1);
    call {:si_unique_call 167} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i11);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 244);
    call {:si_unique_call 168} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i12);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    call {:si_unique_call 169} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i13);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 244);
    call {:si_unique_call 170} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i14);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    call {:si_unique_call 171} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i16);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i16, 16384);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i12);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p1);
    call {:si_unique_call 172} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i20);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 244);
    call {:si_unique_call 173} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i21);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    call {:si_unique_call 174} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i23);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} serial_hsu_set_mctrl($p19, $i23);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p1);
    call {:si_unique_call 176} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i24);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 400);
    call {:si_unique_call 177} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i25);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    call {:si_unique_call 178} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i27);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p1);
    call {:si_unique_call 181} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i32);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 304);
    call {:si_unique_call 182} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i33);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p1);
    call {:si_unique_call 183} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i35);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 304);
    call {:si_unique_call 184} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i36);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i36);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    call {:si_unique_call 185} {:cexpr "__cil_tmp32"} boogie_si_record_i8($i38);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    call {:si_unique_call 186} {:cexpr "__cil_tmp33"} boogie_si_record_i32($i39);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} serial_out($p1, 1, $i39);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p1);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} spin_unlock_irqrestore($p40, $u0);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p1);
    call {:si_unique_call 189} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i41);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 400);
    call {:si_unique_call 190} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i42);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i42);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    call {:si_unique_call 191} {:cexpr "__cil_tmp37"} boogie_si_record_i32($i44);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} vslice_dummy_var_5 := serial_in($p1, 5);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} vslice_dummy_var_6 := serial_in($p1, 0);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} vslice_dummy_var_7 := serial_in($p1, 2);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} vslice_dummy_var_8 := serial_in($p1, 6);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i130 := $p2i.ref.i64($p1);
    call {:si_unique_call 209} {:cexpr "__cil_tmp99"} boogie_si_record_i64($i130);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i131 := $add.i64($i130, 404);
    call {:si_unique_call 210} {:cexpr "__cil_tmp100"} boogie_si_record_i64($i131);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p132 := $i2p.i64.ref($i131);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p132, 1);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i45 == 1;
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p0);
    call {:si_unique_call 192} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i46);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 168);
    call {:si_unique_call 193} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i47);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    call {:si_unique_call 194} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i50);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 744);
    call {:si_unique_call 195} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i51);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p1);
    call {:si_unique_call 196} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i53);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i53, 408);
    call {:si_unique_call 197} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i54);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p55 := $i2p.i64.ref($i54);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 0);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p1);
    call {:si_unique_call 198} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i56);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i57 := $add.i64($i56, 376);
    call {:si_unique_call 199} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i57);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p58 := $i2p.i64.ref($i57);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $p59 := kzalloc(2048, 208);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p58);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $p59);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 201} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i61);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p58);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    call {:si_unique_call 202} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i64);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i65 := $eq.i64($i64, $i61);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p58);
    call {:si_unique_call 211} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i69);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, 8);
    call {:si_unique_call 212} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i70);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p0);
    call {:si_unique_call 213} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i71);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i72 := $add.i64($i71, 280);
    call {:si_unique_call 214} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i72);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p73 := $i2p.i64.ref($i72);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p58);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i77 := dma_map_single_attrs($p74, $p76, 2048, 2, $0.ref);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p78 := $i2p.i64.ref($i70);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p78, $i77);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p58);
    call {:si_unique_call 216} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i79);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i80 := $add.i64($i79, 16);
    call {:si_unique_call 217} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i80);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p81 := $i2p.i64.ref($i80);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, 2048);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p1);
    call {:si_unique_call 218} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i82);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, 344);
    call {:si_unique_call 219} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i83);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p84 := $i2p.i64.ref($i83);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} hsu_dma_start_rx_chan($p85, $p58);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p1);
    call {:si_unique_call 221} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i86);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i87 := $add.i64($i86, 352);
    call {:si_unique_call 222} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i87);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p88 := $i2p.i64.ref($i87);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p52);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p88);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p91, $p90);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p88);
    call {:si_unique_call 223} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i92);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i93 := $add.i64($i92, 8);
    call {:si_unique_call 224} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i93);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p0);
    call {:si_unique_call 225} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i94);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i95 := $add.i64($i94, 280);
    call {:si_unique_call 226} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i95);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p96 := $i2p.i64.ref($i95);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p88);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i100 := dma_map_single_attrs($p97, $p99, 4096, 1, $0.ref);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p101 := $i2p.i64.ref($i93);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p101, $i100);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p88);
    call {:si_unique_call 228} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i102);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i103 := $add.i64($i102, 16);
    call {:si_unique_call 229} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i103);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p104 := $i2p.i64.ref($i103);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p104, 4096);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p1);
    call {:si_unique_call 230} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i105);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i106 := $add.i64($i105, 336);
    call {:si_unique_call 231} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i106);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p107 := $i2p.i64.ref($i106);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p108);
    call {:si_unique_call 232} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i109);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i110 := $add.i64($i109, 16);
    call {:si_unique_call 233} {:cexpr "__cil_tmp85"} boogie_si_record_i64($i110);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p111 := $i2p.i64.ref($i110);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p112, $mul.ref(16, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} writel(32, $p113);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p1);
    call {:si_unique_call 235} {:cexpr "__cil_tmp89"} boogie_si_record_i64($i114);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i115 := $add.i64($i114, 336);
    call {:si_unique_call 236} {:cexpr "__cil_tmp90"} boogie_si_record_i64($i115);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p116 := $i2p.i64.ref($i115);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p117);
    call {:si_unique_call 237} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i118);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i119 := $add.i64($i118, 16);
    call {:si_unique_call 238} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i119);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p120 := $i2p.i64.ref($i119);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p121, $mul.ref(20, 1));
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} writel(4, $p122);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i123 := $p2i.ref.i64($p88);
    call {:si_unique_call 240} {:cexpr "__cil_tmp97"} boogie_si_record_i64($i123);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i124 := $add.i64($i123, 20);
    call {:si_unique_call 241} {:cexpr "__cil_tmp98"} boogie_si_record_i64($i124);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p125 := $i2p.i64.ref($i124);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p125, 0);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i65 == 1;
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p1);
    call {:si_unique_call 203} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i66);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i67 := $add.i64($i66, 400);
    call {:si_unique_call 204} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i67);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p68 := $i2p.i64.ref($i67);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, 0);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p1);
    call {:si_unique_call 179} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i29);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 304);
    call {:si_unique_call 180} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i30);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, 21);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const serial_hsu_shutdown: ref;

axiom serial_hsu_shutdown == $sub.ref(0, 67760);

procedure serial_hsu_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, assertsPassed;



implementation serial_hsu_shutdown($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var vslice_dummy_var_9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    call {:si_unique_call 242} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 304);
    call {:si_unique_call 243} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i3);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 0);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} serial_out($p1, 1, 0);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    call {:si_unique_call 245} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i5);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 404);
    call {:si_unique_call 246} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i6);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} ldv_spin_lock();
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p1);
    call {:si_unique_call 248} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i8);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 244);
    call {:si_unique_call 249} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i9);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    call {:si_unique_call 250} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i10);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 244);
    call {:si_unique_call 251} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i11);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    call {:si_unique_call 252} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i13);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, $sub.i32(0, 16385));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i9);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p1);
    call {:si_unique_call 253} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i17);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 244);
    call {:si_unique_call 254} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i18);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    call {:si_unique_call 255} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i20);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} serial_hsu_set_mctrl($p16, $i20);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p1);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} spin_unlock_irqrestore($p21, $u0);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $i22 := serial_in($p1, 3);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 259} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, $sub.i32(0, 65));
    call {:si_unique_call 260} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i23);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} serial_out($p1, 3, $i23);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} serial_out($p1, 2, 7);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} serial_out($p1, 2, 0);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p1);
    call {:si_unique_call 264} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i24);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 328);
    call {:si_unique_call 265} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i25);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} vslice_dummy_var_9 := pm_runtime_put($p27);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const serial_hsu_set_termios: ref;

axiom serial_hsu_set_termios == $sub.ref(0, 68792);

procedure serial_hsu_set_termios($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2;



implementation serial_hsu_set_termios($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i8;
  var $i31: i8;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i8;
  var $i41: i8;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i50: i8;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i64: i32;
  var $i65: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i32;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i76: i64;
  var $i77: i64;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i82: i8;
  var $i75: i8;
  var $i83: i32;
  var $i84: i32;
  var $i85: i8;
  var $i86: i64;
  var $i87: i64;
  var $p88: ref;
  var $i89: i32;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $i97: i64;
  var $i98: i64;
  var $i99: i64;
  var $i100: i64;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i109: i64;
  var $i110: i64;
  var $i111: i64;
  var $i112: i64;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $p116: ref;
  var $i117: i64;
  var $i118: i64;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $i124: i64;
  var $i125: i64;
  var $i126: i64;
  var $i127: i64;
  var $p128: ref;
  var $i129: i32;
  var $i130: i32;
  var $p131: ref;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $i136: i64;
  var $i137: i64;
  var $i138: i64;
  var $i139: i64;
  var $p140: ref;
  var $i141: i32;
  var $i142: i32;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $i146: i32;
  var $i147: i1;
  var $i148: i64;
  var $i149: i64;
  var $i150: i64;
  var $i151: i64;
  var $p152: ref;
  var $i153: i32;
  var $i154: i32;
  var $p155: ref;
  var $i156: i64;
  var $i157: i64;
  var $p158: ref;
  var $i159: i32;
  var $i160: i32;
  var $i161: i1;
  var $i162: i64;
  var $i163: i64;
  var $i164: i64;
  var $i165: i64;
  var $p166: ref;
  var $i167: i32;
  var $i168: i32;
  var $p169: ref;
  var $i170: i64;
  var $i171: i64;
  var $i172: i64;
  var $i173: i64;
  var $p174: ref;
  var $i175: i8;
  var $i176: i32;
  var $i177: i32;
  var $i178: i8;
  var $p179: ref;
  var $i180: i64;
  var $i181: i64;
  var $p182: ref;
  var $i183: i32;
  var $i184: i32;
  var $i185: i1;
  var $i186: i64;
  var $i187: i64;
  var $i188: i64;
  var $i189: i64;
  var $p190: ref;
  var $i191: i8;
  var $i192: i32;
  var $i193: i32;
  var $i194: i8;
  var $p195: ref;
  var $i196: i64;
  var $i197: i64;
  var $p198: ref;
  var $i199: i32;
  var $i200: i1;
  var $i201: i64;
  var $i202: i64;
  var $i203: i64;
  var $i204: i64;
  var $p205: ref;
  var $i206: i8;
  var $i207: i32;
  var $i208: i32;
  var $i209: i8;
  var $p210: ref;
  var $i211: i64;
  var $i212: i64;
  var $p213: ref;
  var $i214: i32;
  var $i215: i32;
  var $i216: i1;
  var $i217: i64;
  var $i218: i64;
  var $i219: i64;
  var $i220: i64;
  var $p221: ref;
  var $i222: i8;
  var $i223: i32;
  var $i224: i32;
  var $i225: i8;
  var $p226: ref;
  var $i227: i64;
  var $i228: i64;
  var $p229: ref;
  var $i230: i8;
  var $i231: i32;
  var $i232: i64;
  var $i233: i64;
  var $p234: ref;
  var $i235: i32;
  var $i236: i1;
  var $i237: i64;
  var $i238: i64;
  var $i239: i64;
  var $i240: i64;
  var $p241: ref;
  var $i242: i8;
  var $i243: i32;
  var $i244: i32;
  var $i245: i8;
  var $p246: ref;
  var $i247: i64;
  var $i248: i64;
  var $i249: i64;
  var $i250: i64;
  var $p251: ref;
  var $i252: i8;
  var $i253: i32;
  var $i254: i32;
  var $i255: i8;
  var $p256: ref;
  var $i257: i32;
  var $i258: i32;
  var $i259: i32;
  var $i260: i32;
  var $i261: i32;
  var $i262: i64;
  var $i263: i64;
  var $p264: ref;
  var $p265: ref;
  var $i266: i64;
  var $i267: i64;
  var $p268: ref;
  var $i269: i32;
  var $i270: i32;
  var $p271: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    call {:si_unique_call 267} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i4);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 8);
    call {:si_unique_call 268} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i5);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 269} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i7);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 48);
    call {:si_unique_call 270} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i8);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i8, 16);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i8, 32);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i8, 48);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := 3;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p1);
    call {:si_unique_call 271} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i14);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 8);
    call {:si_unique_call 272} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i15);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p1);
    call {:si_unique_call 273} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i16);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 8);
    call {:si_unique_call 274} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i17);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    call {:si_unique_call 275} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i19);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, $sub.i32(0, 1073741825));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i15);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    call {:si_unique_call 276} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i22);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 8);
    call {:si_unique_call 277} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i23);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    call {:si_unique_call 278} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i25);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 64);
    call {:si_unique_call 279} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i26);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i31 := $i13;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p1);
    call {:si_unique_call 283} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i32);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 8);
    call {:si_unique_call 284} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i33);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    call {:si_unique_call 285} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i35);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 256);
    call {:si_unique_call 286} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i36);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i41 := $i31;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p1);
    call {:si_unique_call 290} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i42);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, 8);
    call {:si_unique_call 291} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i43);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i43);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    call {:si_unique_call 292} {:cexpr "__cil_tmp36"} boogie_si_record_i32($i45);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 512);
    call {:si_unique_call 293} {:cexpr "__cil_tmp37"} boogie_si_record_i32($i46);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i51 := $i41;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $i52 := uart_get_baud_rate($p0, $p1, $p2, 0, 4000000);
    call {:si_unique_call 298} {:cexpr "baud"} boogie_si_record_i32($i52);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 3500000);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i53 == 1);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i52, 1843200);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i54 == 1);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i52, 3000000);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i55 == 1);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i52, 2500000);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i56 == 1);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i52, 2000000);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i57 == 1);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i52, 1500000);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i58 == 1);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i52, 1000000);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i59 == 1);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i52, 500000);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i60 == 1);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i61, $i62, $i63 := 0, 16, 13824;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i61, 0);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i68 := $i61;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p3);
    call {:si_unique_call 303} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i69);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, 144);
    call {:si_unique_call 304} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i70);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p71 := $i2p.i64.ref($i70);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    call {:si_unique_call 305} {:cexpr "__cil_tmp44"} boogie_si_record_i32($i72);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i73 := $udiv.i32($i72, $i68);
    call {:si_unique_call 306} {:cexpr "__cil_tmp45"} boogie_si_record_i32($i73);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i74 := $ule.i32($i73, 38399);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i74 == 1);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p3);
    call {:si_unique_call 307} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i76);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i77 := $add.i64($i76, 144);
    call {:si_unique_call 308} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i77);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p78 := $i2p.i64.ref($i77);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    call {:si_unique_call 309} {:cexpr "__cil_tmp49"} boogie_si_record_i32($i79);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i80 := $udiv.i32($i79, $i68);
    call {:si_unique_call 310} {:cexpr "__cil_tmp50"} boogie_si_record_i32($i80);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i81 := $ule.i32($i80, 3686399);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i82 := $sub.i8(0, 127);
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i75 := $i82;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i75);
    call {:si_unique_call 311} {:cexpr "__cil_tmp51"} boogie_si_record_i32($i83);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i84 := $or.i32($i83, 32);
    call {:si_unique_call 312} {:cexpr "__cil_tmp52"} boogie_si_record_i32($i84);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i8($i84);
    call {:si_unique_call 313} {:cexpr "fcr"} boogie_si_record_i8($i85);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} ldv_spin_lock();
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p1);
    call {:si_unique_call 315} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i86);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i87 := $add.i64($i86, 8);
    call {:si_unique_call 316} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i87);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p88 := $i2p.i64.ref($i87);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    call {:si_unique_call 317} {:cexpr "__cil_tmp55"} boogie_si_record_i32($i89);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} uart_update_timeout($p0, $i89, $i52);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p3);
    call {:si_unique_call 319} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i90);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i91 := $add.i64($i90, 156);
    call {:si_unique_call 320} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i91);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p92 := $i2p.i64.ref($i91);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, 35);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p1);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.1, $p93);
    call {:si_unique_call 321} {:cexpr "__cil_tmp59"} boogie_si_record_i32($i94);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i94, 16);
    call {:si_unique_call 322} {:cexpr "__cil_tmp60"} boogie_si_record_i32($i95);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p1);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.1, $p105);
    call {:si_unique_call 328} {:cexpr "__cil_tmp68"} boogie_si_record_i32($i106);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i106, 10);
    call {:si_unique_call 329} {:cexpr "__cil_tmp69"} boogie_si_record_i32($i107);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p3);
    call {:si_unique_call 335} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i117);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i118 := $add.i64($i117, 160);
    call {:si_unique_call 336} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i118);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p119 := $i2p.i64.ref($i118);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p119, 0);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p1);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.1, $p120);
    call {:si_unique_call 337} {:cexpr "__cil_tmp80"} boogie_si_record_i32($i121);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i122 := $and.i32($i121, 4);
    call {:si_unique_call 338} {:cexpr "__cil_tmp81"} boogie_si_record_i32($i122);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p1);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.1, $p132);
    call {:si_unique_call 344} {:cexpr "__cil_tmp89"} boogie_si_record_i32($i133);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i134 := $and.i32($i133, 1);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i156 := $p2i.ref.i64($p1);
    call {:si_unique_call 357} {:cexpr "__cil_tmp107"} boogie_si_record_i64($i156);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i157 := $add.i64($i156, 8);
    call {:si_unique_call 358} {:cexpr "__cil_tmp108"} boogie_si_record_i64($i157);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p158 := $i2p.i64.ref($i157);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.0, $p158);
    call {:si_unique_call 359} {:cexpr "__cil_tmp109"} boogie_si_record_i32($i159);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i160 := $and.i32($i159, 128);
    call {:si_unique_call 360} {:cexpr "__cil_tmp110"} boogie_si_record_i32($i160);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 0);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i170 := $p2i.ref.i64($p3);
    call {:si_unique_call 366} {:cexpr "__cil_tmp118"} boogie_si_record_i64($i170);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i171 := $add.i64($i170, 304);
    call {:si_unique_call 367} {:cexpr "__cil_tmp119"} boogie_si_record_i64($i171);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i172 := $p2i.ref.i64($p3);
    call {:si_unique_call 368} {:cexpr "__cil_tmp120"} boogie_si_record_i64($i172);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i173 := $add.i64($i172, 304);
    call {:si_unique_call 369} {:cexpr "__cil_tmp121"} boogie_si_record_i64($i173);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p174 := $i2p.i64.ref($i173);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.0, $p174);
    call {:si_unique_call 370} {:cexpr "__cil_tmp122"} boogie_si_record_i8($i175);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i176 := $zext.i8.i32($i175);
    call {:si_unique_call 371} {:cexpr "__cil_tmp123"} boogie_si_record_i32($i176);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i177 := $and.i32($i176, 247);
    call {:si_unique_call 372} {:cexpr "__cil_tmp124"} boogie_si_record_i32($i177);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i178 := $trunc.i32.i8($i177);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p179 := $i2p.i64.ref($i171);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p179, $i178);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i180 := $p2i.ref.i64($p3);
    call {:si_unique_call 373} {:cexpr "__cil_tmp126"} boogie_si_record_i64($i180);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i181 := $add.i64($i180, 240);
    call {:si_unique_call 374} {:cexpr "__cil_tmp127"} boogie_si_record_i64($i181);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p182 := $i2p.i64.ref($i181);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.0, $p182);
    call {:si_unique_call 375} {:cexpr "__cil_tmp128"} boogie_si_record_i32($i183);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i184 := $and.i32($i183, 2048);
    call {:si_unique_call 376} {:cexpr "__cil_tmp129"} boogie_si_record_i32($i184);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i185 := $ne.i32($i184, 0);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i185 == 1);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i196 := $p2i.ref.i64($p1);
    call {:si_unique_call 384} {:cexpr "__cil_tmp137"} boogie_si_record_i64($i196);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i197 := $add.i64($i196, 8);
    call {:si_unique_call 385} {:cexpr "__cil_tmp138"} boogie_si_record_i64($i197);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p198 := $i2p.i64.ref($i197);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i199 := $load.i32($M.0, $p198);
    call {:si_unique_call 386} {:cexpr "__cil_tmp139"} boogie_si_record_i32($i199);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i200 := $slt.i32($i199, 0);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i200 == 1);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i211 := $p2i.ref.i64($p1);
    call {:si_unique_call 402} {:cexpr "__cil_tmp148"} boogie_si_record_i64($i211);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i212 := $add.i64($i211, 8);
    call {:si_unique_call 403} {:cexpr "__cil_tmp149"} boogie_si_record_i64($i212);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p213 := $i2p.i64.ref($i212);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.0, $p213);
    call {:si_unique_call 404} {:cexpr "__cil_tmp150"} boogie_si_record_i32($i214);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i215 := $and.i32($i214, 2048);
    call {:si_unique_call 405} {:cexpr "__cil_tmp151"} boogie_si_record_i32($i215);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 0);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i216} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i227 := $p2i.ref.i64($p3);
    call {:si_unique_call 387} {:cexpr "__cil_tmp159"} boogie_si_record_i64($i227);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i228 := $add.i64($i227, 304);
    call {:si_unique_call 388} {:cexpr "__cil_tmp160"} boogie_si_record_i64($i228);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p229 := $i2p.i64.ref($i228);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i230 := $load.i8($M.0, $p229);
    call {:si_unique_call 389} {:cexpr "__cil_tmp161"} boogie_si_record_i8($i230);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i231 := $zext.i8.i32($i230);
    call {:si_unique_call 390} {:cexpr "__cil_tmp162"} boogie_si_record_i32($i231);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} serial_out($p3, 1, $i231);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i232 := $p2i.ref.i64($p1);
    call {:si_unique_call 392} {:cexpr "__cil_tmp163"} boogie_si_record_i64($i232);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i233 := $add.i64($i232, 8);
    call {:si_unique_call 393} {:cexpr "__cil_tmp164"} boogie_si_record_i64($i233);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p234 := $i2p.i64.ref($i233);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i235 := $load.i32($M.0, $p234);
    call {:si_unique_call 394} {:cexpr "__cil_tmp165"} boogie_si_record_i32($i235);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i236 := $slt.i32($i235, 0);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i236} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i236 == 1);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i247 := $p2i.ref.i64($p3);
    call {:si_unique_call 420} {:cexpr "__cil_tmp174"} boogie_si_record_i64($i247);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i248 := $add.i64($i247, 306);
    call {:si_unique_call 421} {:cexpr "__cil_tmp175"} boogie_si_record_i64($i248);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i249 := $p2i.ref.i64($p3);
    call {:si_unique_call 422} {:cexpr "__cil_tmp176"} boogie_si_record_i64($i249);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i250 := $add.i64($i249, 306);
    call {:si_unique_call 423} {:cexpr "__cil_tmp177"} boogie_si_record_i64($i250);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p251 := $i2p.i64.ref($i250);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i252 := $load.i8($M.0, $p251);
    call {:si_unique_call 424} {:cexpr "__cil_tmp178"} boogie_si_record_i8($i252);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i253 := $zext.i8.i32($i252);
    call {:si_unique_call 425} {:cexpr "__cil_tmp179"} boogie_si_record_i32($i253);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i254 := $and.i32($i253, 223);
    call {:si_unique_call 426} {:cexpr "__cil_tmp180"} boogie_si_record_i32($i254);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i255 := $trunc.i32.i8($i254);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p256 := $i2p.i64.ref($i248);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p256, $i255);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i257 := $zext.i8.i32($i51);
    call {:si_unique_call 427} {:cexpr "__cil_tmp181"} boogie_si_record_i32($i257);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i258 := $or.i32($i257, 128);
    call {:si_unique_call 428} {:cexpr "__cil_tmp182"} boogie_si_record_i32($i258);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} serial_out($p3, 3, $i258);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i259 := $and.i32($i68, 255);
    call {:si_unique_call 430} {:cexpr "__cil_tmp185"} boogie_si_record_i32($i259);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} serial_out($p3, 0, $i259);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i260 := $lshr.i32($i68, 8);
    call {:si_unique_call 432} {:cexpr "__cil_tmp186"} boogie_si_record_i32($i260);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} serial_out($p3, 1, $i260);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i261 := $zext.i8.i32($i51);
    call {:si_unique_call 434} {:cexpr "__cil_tmp188"} boogie_si_record_i32($i261);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} serial_out($p3, 3, $i261);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} serial_out($p3, 13, $i63);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} serial_out($p3, 12, $i62);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i262 := $p2i.ref.i64($p3);
    call {:si_unique_call 438} {:cexpr "__cil_tmp191"} boogie_si_record_i64($i262);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i263 := $add.i64($i262, 305);
    call {:si_unique_call 439} {:cexpr "__cil_tmp192"} boogie_si_record_i64($i263);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p264 := $i2p.i64.ref($i263);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p264, $i51);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p265 := $bitcast.ref.ref($p3);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i266 := $p2i.ref.i64($p3);
    call {:si_unique_call 440} {:cexpr "__cil_tmp195"} boogie_si_record_i64($i266);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i267 := $add.i64($i266, 244);
    call {:si_unique_call 441} {:cexpr "__cil_tmp196"} boogie_si_record_i64($i267);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p268 := $i2p.i64.ref($i267);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i269 := $load.i32($M.0, $p268);
    call {:si_unique_call 442} {:cexpr "__cil_tmp197"} boogie_si_record_i32($i269);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} serial_hsu_set_mctrl($p265, $i269);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i270 := $zext.i8.i32($i85);
    call {:si_unique_call 444} {:cexpr "__cil_tmp198"} boogie_si_record_i32($i270);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} serial_out($p3, 2, $i270);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p271 := $bitcast.ref.ref($p3);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} spin_unlock_irqrestore($p271, $u0);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    return;

  $bb108:
    assume $i236 == 1;
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i237 := $p2i.ref.i64($p3);
    call {:si_unique_call 413} {:cexpr "__cil_tmp167"} boogie_si_record_i64($i237);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i238 := $add.i64($i237, 306);
    call {:si_unique_call 414} {:cexpr "__cil_tmp168"} boogie_si_record_i64($i238);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i239 := $p2i.ref.i64($p3);
    call {:si_unique_call 415} {:cexpr "__cil_tmp169"} boogie_si_record_i64($i239);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i240 := $add.i64($i239, 306);
    call {:si_unique_call 416} {:cexpr "__cil_tmp170"} boogie_si_record_i64($i240);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p241 := $i2p.i64.ref($i240);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i242 := $load.i8($M.0, $p241);
    call {:si_unique_call 417} {:cexpr "__cil_tmp171"} boogie_si_record_i8($i242);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i243 := $zext.i8.i32($i242);
    call {:si_unique_call 418} {:cexpr "__cil_tmp172"} boogie_si_record_i32($i243);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i244 := $or.i32($i243, 34);
    call {:si_unique_call 419} {:cexpr "__cil_tmp173"} boogie_si_record_i32($i244);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i245 := $trunc.i32.i8($i244);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p246 := $i2p.i64.ref($i238);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p246, $i245);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb105:
    assume $i216 == 1;
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i217 := $p2i.ref.i64($p3);
    call {:si_unique_call 406} {:cexpr "__cil_tmp152"} boogie_si_record_i64($i217);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i218 := $add.i64($i217, 304);
    call {:si_unique_call 407} {:cexpr "__cil_tmp153"} boogie_si_record_i64($i218);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i219 := $p2i.ref.i64($p3);
    call {:si_unique_call 408} {:cexpr "__cil_tmp154"} boogie_si_record_i64($i219);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i220 := $add.i64($i219, 304);
    call {:si_unique_call 409} {:cexpr "__cil_tmp155"} boogie_si_record_i64($i220);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p221 := $i2p.i64.ref($i220);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i222 := $load.i8($M.0, $p221);
    call {:si_unique_call 410} {:cexpr "__cil_tmp156"} boogie_si_record_i8($i222);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i223 := $zext.i8.i32($i222);
    call {:si_unique_call 411} {:cexpr "__cil_tmp157"} boogie_si_record_i32($i223);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i224 := $or.i32($i223, 8);
    call {:si_unique_call 412} {:cexpr "__cil_tmp158"} boogie_si_record_i32($i224);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i225 := $trunc.i32.i8($i224);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p226 := $i2p.i64.ref($i218);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p226, $i225);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb102:
    assume $i200 == 1;
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i201 := $p2i.ref.i64($p3);
    call {:si_unique_call 395} {:cexpr "__cil_tmp141"} boogie_si_record_i64($i201);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i202 := $add.i64($i201, 304);
    call {:si_unique_call 396} {:cexpr "__cil_tmp142"} boogie_si_record_i64($i202);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i203 := $p2i.ref.i64($p3);
    call {:si_unique_call 397} {:cexpr "__cil_tmp143"} boogie_si_record_i64($i203);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i204 := $add.i64($i203, 304);
    call {:si_unique_call 398} {:cexpr "__cil_tmp144"} boogie_si_record_i64($i204);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p205 := $i2p.i64.ref($i204);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i206 := $load.i8($M.0, $p205);
    call {:si_unique_call 399} {:cexpr "__cil_tmp145"} boogie_si_record_i8($i206);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i207 := $zext.i8.i32($i206);
    call {:si_unique_call 400} {:cexpr "__cil_tmp146"} boogie_si_record_i32($i207);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i208 := $or.i32($i207, 8);
    call {:si_unique_call 401} {:cexpr "__cil_tmp147"} boogie_si_record_i32($i208);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i209 := $trunc.i32.i8($i208);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p210 := $i2p.i64.ref($i202);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p210, $i209);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb99:
    assume $i185 == 1;
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i186 := $p2i.ref.i64($p3);
    call {:si_unique_call 377} {:cexpr "__cil_tmp130"} boogie_si_record_i64($i186);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i187 := $add.i64($i186, 304);
    call {:si_unique_call 378} {:cexpr "__cil_tmp131"} boogie_si_record_i64($i187);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i188 := $p2i.ref.i64($p3);
    call {:si_unique_call 379} {:cexpr "__cil_tmp132"} boogie_si_record_i64($i188);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i189 := $add.i64($i188, 304);
    call {:si_unique_call 380} {:cexpr "__cil_tmp133"} boogie_si_record_i64($i189);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p190 := $i2p.i64.ref($i189);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i191 := $load.i8($M.0, $p190);
    call {:si_unique_call 381} {:cexpr "__cil_tmp134"} boogie_si_record_i8($i191);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i192 := $zext.i8.i32($i191);
    call {:si_unique_call 382} {:cexpr "__cil_tmp135"} boogie_si_record_i32($i192);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i193 := $or.i32($i192, 8);
    call {:si_unique_call 383} {:cexpr "__cil_tmp136"} boogie_si_record_i32($i193);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i194 := $trunc.i32.i8($i193);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p195 := $i2p.i64.ref($i187);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p195, $i194);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb96:
    assume $i161 == 1;
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i162 := $p2i.ref.i64($p3);
    call {:si_unique_call 361} {:cexpr "__cil_tmp112"} boogie_si_record_i64($i162);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i163 := $add.i64($i162, 160);
    call {:si_unique_call 362} {:cexpr "__cil_tmp113"} boogie_si_record_i64($i163);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i164 := $p2i.ref.i64($p3);
    call {:si_unique_call 363} {:cexpr "__cil_tmp115"} boogie_si_record_i64($i164);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i165 := $add.i64($i164, 160);
    call {:si_unique_call 364} {:cexpr "__cil_tmp116"} boogie_si_record_i64($i165);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p166 := $i2p.i64.ref($i165);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.0, $p166);
    call {:si_unique_call 365} {:cexpr "__cil_tmp117"} boogie_si_record_i32($i167);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i168 := $or.i32($i167, 1);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p169 := $i2p.i64.ref($i163);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p169, $i168);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb90:
    assume $i135 == 1;
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i136 := $p2i.ref.i64($p3);
    call {:si_unique_call 345} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i136);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i137 := $add.i64($i136, 160);
    call {:si_unique_call 346} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i137);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i138 := $p2i.ref.i64($p3);
    call {:si_unique_call 347} {:cexpr "__cil_tmp95"} boogie_si_record_i64($i138);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i139 := $add.i64($i138, 160);
    call {:si_unique_call 348} {:cexpr "__cil_tmp96"} boogie_si_record_i64($i139);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p140 := $i2p.i64.ref($i139);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.0, $p140);
    call {:si_unique_call 349} {:cexpr "__cil_tmp97"} boogie_si_record_i32($i141);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i142 := $or.i32($i141, 16);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p143 := $i2p.i64.ref($i137);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p143, $i142);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p1);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.1, $p144);
    call {:si_unique_call 350} {:cexpr "__cil_tmp98"} boogie_si_record_i32($i145);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i146 := $and.i32($i145, 4);
    call {:si_unique_call 351} {:cexpr "__cil_tmp99"} boogie_si_record_i32($i146);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb92:
    assume $i147 == 1;
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i148 := $p2i.ref.i64($p3);
    call {:si_unique_call 352} {:cexpr "__cil_tmp101"} boogie_si_record_i64($i148);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i149 := $add.i64($i148, 160);
    call {:si_unique_call 353} {:cexpr "__cil_tmp102"} boogie_si_record_i64($i149);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i150 := $p2i.ref.i64($p3);
    call {:si_unique_call 354} {:cexpr "__cil_tmp104"} boogie_si_record_i64($i150);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i151 := $add.i64($i150, 160);
    call {:si_unique_call 355} {:cexpr "__cil_tmp105"} boogie_si_record_i64($i151);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p152 := $i2p.i64.ref($i151);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.0, $p152);
    call {:si_unique_call 356} {:cexpr "__cil_tmp106"} boogie_si_record_i32($i153);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i154 := $or.i32($i153, 2);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p155 := $i2p.i64.ref($i149);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p155, $i154);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb87:
    assume $i123 == 1;
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($p3);
    call {:si_unique_call 339} {:cexpr "__cil_tmp83"} boogie_si_record_i64($i124);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i125 := $add.i64($i124, 160);
    call {:si_unique_call 340} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i125);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p3);
    call {:si_unique_call 341} {:cexpr "__cil_tmp86"} boogie_si_record_i64($i126);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i127 := $add.i64($i126, 160);
    call {:si_unique_call 342} {:cexpr "__cil_tmp87"} boogie_si_record_i64($i127);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p128 := $i2p.i64.ref($i127);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    call {:si_unique_call 343} {:cexpr "__cil_tmp88"} boogie_si_record_i32($i129);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i130 := $or.i32($i129, 12);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p131 := $i2p.i64.ref($i125);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p131, $i130);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb84:
    assume $i108 == 1;
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p3);
    call {:si_unique_call 330} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i109);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i110 := $add.i64($i109, 156);
    call {:si_unique_call 331} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i110);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p3);
    call {:si_unique_call 332} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i111);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i112 := $add.i64($i111, 156);
    call {:si_unique_call 333} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i112);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p113 := $i2p.i64.ref($i112);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    call {:si_unique_call 334} {:cexpr "__cil_tmp76"} boogie_si_record_i32($i114);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i115 := $or.i32($i114, 16);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p116 := $i2p.i64.ref($i110);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, $i115);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb81:
    assume $i96 == 1;
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p3);
    call {:si_unique_call 323} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i97);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i98 := $add.i64($i97, 156);
    call {:si_unique_call 324} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i98);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p3);
    call {:si_unique_call 325} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i99);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i100 := $add.i64($i99, 156);
    call {:si_unique_call 326} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i100);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p101 := $i2p.i64.ref($i100);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    call {:si_unique_call 327} {:cexpr "__cil_tmp67"} boogie_si_record_i32($i102);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i103 := $or.i32($i102, 12);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p104 := $i2p.i64.ref($i98);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p104, $i103);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb78:
    assume $i81 == 1;
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i82 := 65;
    goto $bb80;

  $bb75:
    assume $i74 == 1;
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i75 := 1;
    goto $bb77;

  $bb72:
    assume $i66 == 1;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $i67 := uart_get_divisor($p0, $i52);
    call {:si_unique_call 302} {:cexpr "quot"} boogie_si_record_i32($i67);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i68 := $i67;
    goto $bb74;

  $bb54:
    assume $i60 == 1;
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i64 := $udiv.i32($i52, 500000);
    call {:si_unique_call 299} {:cexpr "__cil_tmp40"} boogie_si_record_i32($i64);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i65 := $mul.i32($i64, 2500);
    call {:si_unique_call 300} {:cexpr "mul"} boogie_si_record_i32($i65);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i61, $i62, $i63 := 1, 16, $i65;
    goto $bb61;

  $bb51:
    assume $i59 == 1;
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb48:
    assume $i58 == 1;
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb45:
    assume $i57 == 1;
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb42:
    assume $i56 == 1;
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb39:
    assume $i55 == 1;
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb36:
    assume $i54 == 1;
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i61, $i62, $i63 := 1, 16, 9216;
    goto $bb61;

  $bb33:
    assume $i53 == 1;
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i61, $i62, $i63 := 1, 12, 13125;
    goto $bb61;

  $bb30:
    assume $i47 == 1;
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i41);
    call {:si_unique_call 294} {:cexpr "__cil_tmp38"} boogie_si_record_i32($i48);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i49 := $or.i32($i48, 16);
    call {:si_unique_call 295} {:cexpr "__cil_tmp39"} boogie_si_record_i32($i49);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    call {:si_unique_call 296} {:cexpr "cval"} boogie_si_record_i8($i50);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i51 := $i50;
    goto $bb32;

  $bb27:
    assume $i37 == 1;
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i31);
    call {:si_unique_call 287} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i38);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i38, 8);
    call {:si_unique_call 288} {:cexpr "__cil_tmp33"} boogie_si_record_i32($i39);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    call {:si_unique_call 289} {:cexpr "cval"} boogie_si_record_i8($i40);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb29;

  $bb24:
    assume $i27 == 1;
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i13);
    call {:si_unique_call 280} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i28);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i28, 4);
    call {:si_unique_call 281} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i29);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    call {:si_unique_call 282} {:cexpr "cval"} boogie_si_record_i8($i30);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb26;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := 2;
    goto $bb17;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb17;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb17;
}



const serial_hsu_pm: ref;

axiom serial_hsu_pm == $sub.ref(0, 69824);

procedure serial_hsu_pm($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation serial_hsu_pm($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} {:cexpr "serial_hsu_pm:arg:state"} boogie_si_record_i32($i1);
    call {:si_unique_call 448} {:cexpr "serial_hsu_pm:arg:oldstate"} boogie_si_record_i32($i2);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    return;
}



const serial_hsu_type: ref;

axiom serial_hsu_type == $sub.ref(0, 70856);

procedure serial_hsu_type($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation serial_hsu_type($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    call {:si_unique_call 449} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 312);
    call {:si_unique_call 450} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const serial_hsu_release_port: ref;

axiom serial_hsu_release_port == $sub.ref(0, 71888);

procedure serial_hsu_release_port($p0: ref);
  free requires assertsPassed;



implementation serial_hsu_release_port($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    return;
}



const serial_hsu_request_port: ref;

axiom serial_hsu_request_port == $sub.ref(0, 72920);

procedure serial_hsu_request_port($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation serial_hsu_request_port($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const serial_hsu_config_port: ref;

axiom serial_hsu_config_port == $sub.ref(0, 73952);

procedure serial_hsu_config_port($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation serial_hsu_config_port($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} {:cexpr "serial_hsu_config_port:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    call {:si_unique_call 452} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i3);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 252);
    call {:si_unique_call 453} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i4);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 95);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    return;
}



const serial_hsu_verify_port: ref;

axiom serial_hsu_verify_port == $sub.ref(0, 74984);

procedure serial_hsu_verify_port($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation serial_hsu_verify_port($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 22);
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 76016);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const default_llseek: ref;

axiom default_llseek == $sub.ref(0, 77048);

procedure default_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);



const port_show_regs: ref;

axiom port_show_regs == $sub.ref(0, 78080);

procedure port_show_regs($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, assertsPassed, $M.2;



implementation port_show_regs($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i64;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $i48: i64;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i64;
  var $p53: ref;
  var $i54: i32;
  var $i55: i64;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i64;
  var $p60: ref;
  var $i61: i32;
  var $i62: i64;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i64;
  var $p67: ref;
  var $i68: i32;
  var $i69: i64;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i64;
  var $p74: ref;
  var $i75: i32;
  var $i76: i64;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i64;
  var $p81: ref;
  var $i82: i32;
  var $i83: i64;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i64;
  var $p88: ref;
  var $i89: i32;
  var $i90: i64;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $i94: i64;
  var $p95: ref;
  var $i96: i32;
  var $i97: i64;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i64;
  var $i103: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} {:cexpr "port_show_regs:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 455} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i4);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 296);
    call {:si_unique_call 456} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i5);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $p9 := kzalloc(1024, 208);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 458} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i10);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    call {:si_unique_call 459} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i11);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, $i10);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64(0);
    call {:si_unique_call 460} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i14);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p9, $mul.ref($i14, 1));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(1024, 0);
    call {:si_unique_call 461} {:cexpr "__cil_tmp40"} boogie_si_record_i32($i16);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    call {:si_unique_call 462} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i17);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p8);
    call {:si_unique_call 463} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i18);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 324);
    call {:si_unique_call 464} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i19);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    call {:si_unique_call 465} {:cexpr "__cil_tmp44"} boogie_si_record_i32($i21);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $i22 := snprintf.ref.i64.ref.i32($p15, $i17, .str.14, $i21);
    call {:si_unique_call 467} {:cexpr "tmp___0"} boogie_si_record_i32($i22);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 0);
    call {:si_unique_call 468} {:cexpr "len"} boogie_si_record_i32($i23);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    call {:si_unique_call 469} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i24);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p9, $mul.ref($i24, 1));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(1024, $i23);
    call {:si_unique_call 470} {:cexpr "__cil_tmp48"} boogie_si_record_i32($i26);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    call {:si_unique_call 471} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i27);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $i28 := snprintf.ref.i64.ref($p25, $i27, .str.15);
    call {:si_unique_call 473} {:cexpr "tmp___1"} boogie_si_record_i32($i28);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, $i23);
    call {:si_unique_call 474} {:cexpr "len"} boogie_si_record_i32($i29);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i30 := serial_in($p8, 1);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 476} {:cexpr "tmp___2"} boogie_si_record_i32($i30);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i29);
    call {:si_unique_call 477} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i31);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p9, $mul.ref($i31, 1));
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(1024, $i29);
    call {:si_unique_call 478} {:cexpr "__cil_tmp53"} boogie_si_record_i32($i33);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    call {:si_unique_call 479} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i34);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i35 := snprintf.ref.i64.ref.i32($p32, $i34, .str.16, $i30);
    call {:si_unique_call 481} {:cexpr "tmp___3"} boogie_si_record_i32($i35);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, $i29);
    call {:si_unique_call 482} {:cexpr "len"} boogie_si_record_i32($i36);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $i37 := serial_in($p8, 2);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 484} {:cexpr "tmp___4"} boogie_si_record_i32($i37);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i36);
    call {:si_unique_call 485} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i38);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p9, $mul.ref($i38, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(1024, $i36);
    call {:si_unique_call 486} {:cexpr "__cil_tmp58"} boogie_si_record_i32($i40);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i40);
    call {:si_unique_call 487} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i41);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i42 := snprintf.ref.i64.ref.i32($p39, $i41, .str.17, $i37);
    call {:si_unique_call 489} {:cexpr "tmp___5"} boogie_si_record_i32($i42);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, $i36);
    call {:si_unique_call 490} {:cexpr "len"} boogie_si_record_i32($i43);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i44 := serial_in($p8, 3);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 492} {:cexpr "tmp___6"} boogie_si_record_i32($i44);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i43);
    call {:si_unique_call 493} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i45);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p9, $mul.ref($i45, 1));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(1024, $i43);
    call {:si_unique_call 494} {:cexpr "__cil_tmp63"} boogie_si_record_i32($i47);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i48 := $zext.i32.i64($i47);
    call {:si_unique_call 495} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i48);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $i49 := snprintf.ref.i64.ref.i32($p46, $i48, .str.18, $i44);
    call {:si_unique_call 497} {:cexpr "tmp___7"} boogie_si_record_i32($i49);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, $i43);
    call {:si_unique_call 498} {:cexpr "len"} boogie_si_record_i32($i50);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i51 := serial_in($p8, 4);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 500} {:cexpr "tmp___8"} boogie_si_record_i32($i51);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i52 := $zext.i32.i64($i50);
    call {:si_unique_call 501} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i52);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p9, $mul.ref($i52, 1));
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32(1024, $i50);
    call {:si_unique_call 502} {:cexpr "__cil_tmp68"} boogie_si_record_i32($i54);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i55 := $zext.i32.i64($i54);
    call {:si_unique_call 503} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i55);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $i56 := snprintf.ref.i64.ref.i32($p53, $i55, .str.19, $i51);
    call {:si_unique_call 505} {:cexpr "tmp___9"} boogie_si_record_i32($i56);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i56, $i50);
    call {:si_unique_call 506} {:cexpr "len"} boogie_si_record_i32($i57);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i58 := serial_in($p8, 5);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 508} {:cexpr "tmp___10"} boogie_si_record_i32($i58);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64($i57);
    call {:si_unique_call 509} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i59);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p9, $mul.ref($i59, 1));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32(1024, $i57);
    call {:si_unique_call 510} {:cexpr "__cil_tmp73"} boogie_si_record_i32($i61);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i62 := $zext.i32.i64($i61);
    call {:si_unique_call 511} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i62);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $i63 := snprintf.ref.i64.ref.i32($p60, $i62, .str.20, $i58);
    call {:si_unique_call 513} {:cexpr "tmp___11"} boogie_si_record_i32($i63);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i63, $i57);
    call {:si_unique_call 514} {:cexpr "len"} boogie_si_record_i32($i64);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i65 := serial_in($p8, 6);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 516} {:cexpr "tmp___12"} boogie_si_record_i32($i65);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i66 := $zext.i32.i64($i64);
    call {:si_unique_call 517} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i66);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p9, $mul.ref($i66, 1));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32(1024, $i64);
    call {:si_unique_call 518} {:cexpr "__cil_tmp78"} boogie_si_record_i32($i68);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i69 := $zext.i32.i64($i68);
    call {:si_unique_call 519} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i69);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i70 := snprintf.ref.i64.ref.i32($p67, $i69, .str.21, $i65);
    call {:si_unique_call 521} {:cexpr "tmp___13"} boogie_si_record_i32($i70);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i70, $i64);
    call {:si_unique_call 522} {:cexpr "len"} boogie_si_record_i32($i71);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $i72 := serial_in($p8, 8);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    call {:si_unique_call 524} {:cexpr "tmp___14"} boogie_si_record_i32($i72);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i73 := $zext.i32.i64($i71);
    call {:si_unique_call 525} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i73);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p9, $mul.ref($i73, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32(1024, $i71);
    call {:si_unique_call 526} {:cexpr "__cil_tmp83"} boogie_si_record_i32($i75);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i76 := $zext.i32.i64($i75);
    call {:si_unique_call 527} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i76);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $i77 := snprintf.ref.i64.ref.i32($p74, $i76, .str.22, $i72);
    call {:si_unique_call 529} {:cexpr "tmp___15"} boogie_si_record_i32($i77);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i77, $i71);
    call {:si_unique_call 530} {:cexpr "len"} boogie_si_record_i32($i78);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $i79 := serial_in($p8, 12);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 532} {:cexpr "tmp___16"} boogie_si_record_i32($i79);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i80 := $zext.i32.i64($i78);
    call {:si_unique_call 533} {:cexpr "__cil_tmp86"} boogie_si_record_i64($i80);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p9, $mul.ref($i80, 1));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32(1024, $i78);
    call {:si_unique_call 534} {:cexpr "__cil_tmp88"} boogie_si_record_i32($i82);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i83 := $zext.i32.i64($i82);
    call {:si_unique_call 535} {:cexpr "__cil_tmp89"} boogie_si_record_i64($i83);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i84 := snprintf.ref.i64.ref.i32($p81, $i83, .str.23, $i79);
    call {:si_unique_call 537} {:cexpr "tmp___17"} boogie_si_record_i32($i84);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i84, $i78);
    call {:si_unique_call 538} {:cexpr "len"} boogie_si_record_i32($i85);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $i86 := serial_in($p8, 13);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 540} {:cexpr "tmp___18"} boogie_si_record_i32($i86);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i87 := $zext.i32.i64($i85);
    call {:si_unique_call 541} {:cexpr "__cil_tmp91"} boogie_si_record_i64($i87);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p9, $mul.ref($i87, 1));
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i89 := $sub.i32(1024, $i85);
    call {:si_unique_call 542} {:cexpr "__cil_tmp93"} boogie_si_record_i32($i89);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i90 := $zext.i32.i64($i89);
    call {:si_unique_call 543} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i90);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $i91 := snprintf.ref.i64.ref.i32($p88, $i90, .str.24, $i86);
    call {:si_unique_call 545} {:cexpr "tmp___19"} boogie_si_record_i32($i91);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i91, $i85);
    call {:si_unique_call 546} {:cexpr "len"} boogie_si_record_i32($i92);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} $i93 := serial_in($p8, 14);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 548} {:cexpr "tmp___20"} boogie_si_record_i32($i93);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i94 := $zext.i32.i64($i92);
    call {:si_unique_call 549} {:cexpr "__cil_tmp96"} boogie_si_record_i64($i94);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p9, $mul.ref($i94, 1));
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i96 := $sub.i32(1024, $i92);
    call {:si_unique_call 550} {:cexpr "__cil_tmp98"} boogie_si_record_i32($i96);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i97 := $zext.i32.i64($i96);
    call {:si_unique_call 551} {:cexpr "__cil_tmp99"} boogie_si_record_i64($i97);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $i98 := snprintf.ref.i64.ref.i32($p95, $i97, .str.25, $i93);
    call {:si_unique_call 553} {:cexpr "tmp___21"} boogie_si_record_i32($i98);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i98, $i92);
    call {:si_unique_call 554} {:cexpr "len"} boogie_si_record_i32($i99);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i100 := $ugt.i32($i99, 1024);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    $i101 := $i99;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i102 := $zext.i32.i64($i101);
    call {:si_unique_call 555} {:cexpr "__cil_tmp103"} boogie_si_record_i64($i102);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $i103 := simple_read_from_buffer($p1, $i2, $p3, $p9, $i102);
    call {:si_unique_call 557} {:cexpr "ret"} boogie_si_record_i64($i103);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} kfree($p9);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i13 := $i103;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb5:
    assume $i100 == 1;
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i101 := 1024;
    goto $bb7;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const simple_open: ref;

axiom simple_open == $sub.ref(0, 79112);

procedure simple_open($p0: ref, $p1: ref) returns ($r: i32);



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 80144);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 560} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} ldv_check_alloc_flags($i1);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 1} true;
    call {:si_unique_call 562} $p2 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 563} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p2);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 81176);

procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);



const serial_in: ref;

axiom serial_in == $sub.ref(0, 82208);

procedure serial_in($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, assertsPassed;



implementation serial_in($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} {:cexpr "serial_in:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 6);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i1);
    call {:si_unique_call 571} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i12);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    call {:si_unique_call 572} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i13);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 80);
    call {:si_unique_call 573} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i14);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref($i12, 1));
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i18 := readb($p17);
    call {:si_unique_call 575} {:cexpr "tmp"} boogie_si_record_i8($i18);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    call {:si_unique_call 576} {:cexpr "val"} boogie_si_record_i32($i19);
    assume {:verifier.code 0} true;
    $i11 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i3 := $shl.i32($i1, 2);
    call {:si_unique_call 565} {:cexpr "offset"} boogie_si_record_i32($i3);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 566} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i4);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 567} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i5);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 80);
    call {:si_unique_call 568} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i6);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref($i4, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $i10 := readl($p9);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 570} {:cexpr "val"} boogie_si_record_i32($i10);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const simple_read_from_buffer: ref;

axiom simple_read_from_buffer == $sub.ref(0, 83240);

procedure simple_read_from_buffer($p0: ref, $i1: i64, $p2: ref, $p3: ref, $i4: i64) returns ($r: i64);
  free requires assertsPassed;



implementation simple_read_from_buffer($p0: ref, $i1: i64, $p2: ref, $p3: ref, $i4: i64) returns ($r: i64)
{
  var $i5: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 577} {:cexpr "simple_read_from_buffer:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 578} {:cexpr "simple_read_from_buffer:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 1} true;
    call {:si_unique_call 579} $i5 := __VERIFIER_nondet_long();
    call {:si_unique_call 580} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i5);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 84272);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} free_($p0);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 85304);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 582} $free($p0);
    return;
}



const readl: ref;

axiom readl == $sub.ref(0, 86336);

procedure readl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, assertsPassed;



implementation readl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 583} $i2 := devirtbounce(0, $p1);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 584} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const readb: ref;

axiom readb == $sub.ref(0, 87368);

procedure readb($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation readb($p0: ref) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $i1 := devirtbounce.1(0, $p0);
    call {:si_unique_call 586} {:cexpr "ret"} boogie_si_record_i8($i1);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 88400);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 32);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i3 == 1;
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} ldv_blast_assert();
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const ldv_blast_assert: ref;

axiom ldv_blast_assert == $sub.ref(0, 89432);

procedure ldv_blast_assert();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_blast_assert()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 589} __VERIFIER_error();
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const dma_show_regs: ref;

axiom dma_show_regs == $sub.ref(0, 90464);

procedure dma_show_regs($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.2, assertsPassed;



implementation dma_show_regs($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i32;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $i38: i32;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i64;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $i50: i32;
  var $i51: i32;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $p59: ref;
  var $i60: i32;
  var $i61: i64;
  var $i62: i32;
  var $i63: i32;
  var $i64: i64;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i64;
  var $p71: ref;
  var $i72: i32;
  var $i73: i64;
  var $i74: i32;
  var $i75: i32;
  var $i76: i64;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i64;
  var $p83: ref;
  var $i84: i32;
  var $i85: i64;
  var $i86: i32;
  var $i87: i32;
  var $i88: i64;
  var $i89: i64;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i64;
  var $p95: ref;
  var $i96: i32;
  var $i97: i64;
  var $i98: i32;
  var $i99: i32;
  var $i100: i64;
  var $i101: i64;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i64;
  var $p107: ref;
  var $i108: i32;
  var $i109: i64;
  var $i110: i32;
  var $i111: i32;
  var $i112: i64;
  var $i113: i64;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i64;
  var $p119: ref;
  var $i120: i32;
  var $i121: i64;
  var $i122: i32;
  var $i123: i32;
  var $i124: i64;
  var $i125: i64;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i64;
  var $p131: ref;
  var $i132: i32;
  var $i133: i64;
  var $i134: i32;
  var $i135: i32;
  var $i136: i64;
  var $i137: i64;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i32;
  var $i142: i64;
  var $p143: ref;
  var $i144: i32;
  var $i145: i64;
  var $i146: i32;
  var $i147: i32;
  var $i148: i64;
  var $i149: i64;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i32;
  var $i154: i64;
  var $p155: ref;
  var $i156: i32;
  var $i157: i64;
  var $i158: i32;
  var $i159: i32;
  var $i160: i64;
  var $i161: i64;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i32;
  var $i166: i64;
  var $p167: ref;
  var $i168: i32;
  var $i169: i64;
  var $i170: i32;
  var $i171: i32;
  var $i172: i1;
  var $i173: i32;
  var $i174: i64;
  var $i175: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} {:cexpr "dma_show_regs:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 591} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i4);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 296);
    call {:si_unique_call 592} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i5);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $p9 := kzalloc(1024, 208);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 594} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i10);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    call {:si_unique_call 595} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i11);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, $i10);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64(0);
    call {:si_unique_call 596} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i14);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p9, $mul.ref($i14, 1));
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(1024, 0);
    call {:si_unique_call 597} {:cexpr "__cil_tmp44"} boogie_si_record_i32($i16);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    call {:si_unique_call 598} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i17);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p8);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    call {:si_unique_call 599} {:cexpr "__cil_tmp46"} boogie_si_record_i32($i19);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $i20 := snprintf.ref.i64.ref.i32($p15, $i17, .str.26, $i19);
    call {:si_unique_call 601} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 0);
    call {:si_unique_call 602} {:cexpr "len"} boogie_si_record_i32($i21);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    call {:si_unique_call 603} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i22);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p9, $mul.ref($i22, 1));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(1024, $i21);
    call {:si_unique_call 604} {:cexpr "__cil_tmp50"} boogie_si_record_i32($i24);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    call {:si_unique_call 605} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i25);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i26 := snprintf.ref.i64.ref($p23, $i25, .str.15);
    call {:si_unique_call 607} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, $i21);
    call {:si_unique_call 608} {:cexpr "len"} boogie_si_record_i32($i27);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p8);
    call {:si_unique_call 609} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i28);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 16);
    call {:si_unique_call 610} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i29);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(4, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $i33 := readl($p32);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 612} {:cexpr "tmp___2"} boogie_si_record_i32($i33);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i27);
    call {:si_unique_call 613} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i34);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p9, $mul.ref($i34, 1));
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(1024, $i27);
    call {:si_unique_call 614} {:cexpr "__cil_tmp60"} boogie_si_record_i32($i36);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i36);
    call {:si_unique_call 615} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i37);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $i38 := snprintf.ref.i64.ref.i32($p35, $i37, .str.27, $i33);
    call {:si_unique_call 617} {:cexpr "tmp___3"} boogie_si_record_i32($i38);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, $i27);
    call {:si_unique_call 618} {:cexpr "len"} boogie_si_record_i32($i39);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p8);
    call {:si_unique_call 619} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i40);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 16);
    call {:si_unique_call 620} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i41);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p43, $mul.ref(8, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $i45 := readl($p44);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 622} {:cexpr "tmp___4"} boogie_si_record_i32($i45);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i46 := $zext.i32.i64($i39);
    call {:si_unique_call 623} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i46);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p9, $mul.ref($i46, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32(1024, $i39);
    call {:si_unique_call 624} {:cexpr "__cil_tmp70"} boogie_si_record_i32($i48);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i48);
    call {:si_unique_call 625} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i49);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $i50 := snprintf.ref.i64.ref.i32($p47, $i49, .str.28, $i45);
    call {:si_unique_call 627} {:cexpr "tmp___5"} boogie_si_record_i32($i50);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i50, $i39);
    call {:si_unique_call 628} {:cexpr "len"} boogie_si_record_i32($i51);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p8);
    call {:si_unique_call 629} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i52);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 16);
    call {:si_unique_call 630} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i53);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i53);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p55, $mul.ref(16, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $i57 := readl($p56);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 632} {:cexpr "tmp___6"} boogie_si_record_i32($i57);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i51);
    call {:si_unique_call 633} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i58);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p9, $mul.ref($i58, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(1024, $i51);
    call {:si_unique_call 634} {:cexpr "__cil_tmp80"} boogie_si_record_i32($i60);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i61 := $zext.i32.i64($i60);
    call {:si_unique_call 635} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i61);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $i62 := snprintf.ref.i64.ref.i32($p59, $i61, .str.29, $i57);
    call {:si_unique_call 637} {:cexpr "tmp___7"} boogie_si_record_i32($i62);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, $i51);
    call {:si_unique_call 638} {:cexpr "len"} boogie_si_record_i32($i63);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p8);
    call {:si_unique_call 639} {:cexpr "__cil_tmp83"} boogie_si_record_i64($i64);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i65 := $add.i64($i64, 16);
    call {:si_unique_call 640} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i65);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p66 := $i2p.i64.ref($i65);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p67, $mul.ref(20, 1));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $i69 := readl($p68);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 642} {:cexpr "tmp___8"} boogie_si_record_i32($i69);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i70 := $zext.i32.i64($i63);
    call {:si_unique_call 643} {:cexpr "__cil_tmp88"} boogie_si_record_i64($i70);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p9, $mul.ref($i70, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32(1024, $i63);
    call {:si_unique_call 644} {:cexpr "__cil_tmp90"} boogie_si_record_i32($i72);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i73 := $zext.i32.i64($i72);
    call {:si_unique_call 645} {:cexpr "__cil_tmp91"} boogie_si_record_i64($i73);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i74 := snprintf.ref.i64.ref.i32($p71, $i73, .str.30, $i69);
    call {:si_unique_call 647} {:cexpr "tmp___9"} boogie_si_record_i32($i74);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i74, $i63);
    call {:si_unique_call 648} {:cexpr "len"} boogie_si_record_i32($i75);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p8);
    call {:si_unique_call 649} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i76);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i77 := $add.i64($i76, 16);
    call {:si_unique_call 650} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i77);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p78 := $i2p.i64.ref($i77);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p79, $mul.ref(32, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i81 := readl($p80);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 652} {:cexpr "tmp___10"} boogie_si_record_i32($i81);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i82 := $zext.i32.i64($i75);
    call {:si_unique_call 653} {:cexpr "__cil_tmp98"} boogie_si_record_i64($i82);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p9, $mul.ref($i82, 1));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i84 := $sub.i32(1024, $i75);
    call {:si_unique_call 654} {:cexpr "__cil_tmp100"} boogie_si_record_i32($i84);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i85 := $zext.i32.i64($i84);
    call {:si_unique_call 655} {:cexpr "__cil_tmp101"} boogie_si_record_i64($i85);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $i86 := snprintf.ref.i64.ref.i32($p83, $i85, .str.31, $i81);
    call {:si_unique_call 657} {:cexpr "tmp___11"} boogie_si_record_i32($i86);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i87 := $add.i32($i86, $i75);
    call {:si_unique_call 658} {:cexpr "len"} boogie_si_record_i32($i87);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p8);
    call {:si_unique_call 659} {:cexpr "__cil_tmp103"} boogie_si_record_i64($i88);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i89 := $add.i64($i88, 16);
    call {:si_unique_call 660} {:cexpr "__cil_tmp104"} boogie_si_record_i64($i89);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p90 := $i2p.i64.ref($i89);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p91, $mul.ref(36, 1));
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $i93 := readl($p92);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 662} {:cexpr "tmp___12"} boogie_si_record_i32($i93);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i94 := $zext.i32.i64($i87);
    call {:si_unique_call 663} {:cexpr "__cil_tmp108"} boogie_si_record_i64($i94);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p9, $mul.ref($i94, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i96 := $sub.i32(1024, $i87);
    call {:si_unique_call 664} {:cexpr "__cil_tmp110"} boogie_si_record_i32($i96);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i97 := $zext.i32.i64($i96);
    call {:si_unique_call 665} {:cexpr "__cil_tmp111"} boogie_si_record_i64($i97);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i98 := snprintf.ref.i64.ref.i32($p95, $i97, .str.32, $i93);
    call {:si_unique_call 667} {:cexpr "tmp___13"} boogie_si_record_i32($i98);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i98, $i87);
    call {:si_unique_call 668} {:cexpr "len"} boogie_si_record_i32($i99);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p8);
    call {:si_unique_call 669} {:cexpr "__cil_tmp113"} boogie_si_record_i64($i100);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i101 := $add.i64($i100, 16);
    call {:si_unique_call 670} {:cexpr "__cil_tmp114"} boogie_si_record_i64($i101);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p102 := $i2p.i64.ref($i101);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p103, $mul.ref(40, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $i105 := readl($p104);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 672} {:cexpr "tmp___14"} boogie_si_record_i32($i105);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i106 := $zext.i32.i64($i99);
    call {:si_unique_call 673} {:cexpr "__cil_tmp118"} boogie_si_record_i64($i106);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p9, $mul.ref($i106, 1));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i108 := $sub.i32(1024, $i99);
    call {:si_unique_call 674} {:cexpr "__cil_tmp120"} boogie_si_record_i32($i108);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i109 := $zext.i32.i64($i108);
    call {:si_unique_call 675} {:cexpr "__cil_tmp121"} boogie_si_record_i64($i109);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $i110 := snprintf.ref.i64.ref.i32($p107, $i109, .str.31, $i105);
    call {:si_unique_call 677} {:cexpr "tmp___15"} boogie_si_record_i32($i110);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i110, $i99);
    call {:si_unique_call 678} {:cexpr "len"} boogie_si_record_i32($i111);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i112 := $p2i.ref.i64($p8);
    call {:si_unique_call 679} {:cexpr "__cil_tmp123"} boogie_si_record_i64($i112);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i113 := $add.i64($i112, 16);
    call {:si_unique_call 680} {:cexpr "__cil_tmp124"} boogie_si_record_i64($i113);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p114 := $i2p.i64.ref($i113);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p115, $mul.ref(44, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $i117 := readl($p116);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    call {:si_unique_call 682} {:cexpr "tmp___16"} boogie_si_record_i32($i117);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i118 := $zext.i32.i64($i111);
    call {:si_unique_call 683} {:cexpr "__cil_tmp128"} boogie_si_record_i64($i118);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p9, $mul.ref($i118, 1));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i120 := $sub.i32(1024, $i111);
    call {:si_unique_call 684} {:cexpr "__cil_tmp130"} boogie_si_record_i32($i120);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i121 := $zext.i32.i64($i120);
    call {:si_unique_call 685} {:cexpr "__cil_tmp131"} boogie_si_record_i64($i121);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $i122 := snprintf.ref.i64.ref.i32($p119, $i121, .str.32, $i117);
    call {:si_unique_call 687} {:cexpr "tmp___17"} boogie_si_record_i32($i122);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i123 := $add.i32($i122, $i111);
    call {:si_unique_call 688} {:cexpr "len"} boogie_si_record_i32($i123);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($p8);
    call {:si_unique_call 689} {:cexpr "__cil_tmp133"} boogie_si_record_i64($i124);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i125 := $add.i64($i124, 16);
    call {:si_unique_call 690} {:cexpr "__cil_tmp134"} boogie_si_record_i64($i125);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p126 := $i2p.i64.ref($i125);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p127, $mul.ref(48, 1));
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $i129 := readl($p128);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    call {:si_unique_call 692} {:cexpr "tmp___18"} boogie_si_record_i32($i129);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i130 := $zext.i32.i64($i123);
    call {:si_unique_call 693} {:cexpr "__cil_tmp138"} boogie_si_record_i64($i130);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($p9, $mul.ref($i130, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i132 := $sub.i32(1024, $i123);
    call {:si_unique_call 694} {:cexpr "__cil_tmp140"} boogie_si_record_i32($i132);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i133 := $zext.i32.i64($i132);
    call {:si_unique_call 695} {:cexpr "__cil_tmp141"} boogie_si_record_i64($i133);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $i134 := snprintf.ref.i64.ref.i32($p131, $i133, .str.31, $i129);
    call {:si_unique_call 697} {:cexpr "tmp___19"} boogie_si_record_i32($i134);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i135 := $add.i32($i134, $i123);
    call {:si_unique_call 698} {:cexpr "len"} boogie_si_record_i32($i135);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i136 := $p2i.ref.i64($p8);
    call {:si_unique_call 699} {:cexpr "__cil_tmp143"} boogie_si_record_i64($i136);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i137 := $add.i64($i136, 16);
    call {:si_unique_call 700} {:cexpr "__cil_tmp144"} boogie_si_record_i64($i137);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p138 := $i2p.i64.ref($i137);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p139, $mul.ref(52, 1));
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $i141 := readl($p140);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    call {:si_unique_call 702} {:cexpr "tmp___20"} boogie_si_record_i32($i141);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i142 := $zext.i32.i64($i135);
    call {:si_unique_call 703} {:cexpr "__cil_tmp148"} boogie_si_record_i64($i142);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($p9, $mul.ref($i142, 1));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i144 := $sub.i32(1024, $i135);
    call {:si_unique_call 704} {:cexpr "__cil_tmp150"} boogie_si_record_i32($i144);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i145 := $zext.i32.i64($i144);
    call {:si_unique_call 705} {:cexpr "__cil_tmp151"} boogie_si_record_i64($i145);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $i146 := snprintf.ref.i64.ref.i32($p143, $i145, .str.32, $i141);
    call {:si_unique_call 707} {:cexpr "tmp___21"} boogie_si_record_i32($i146);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i147 := $add.i32($i146, $i135);
    call {:si_unique_call 708} {:cexpr "len"} boogie_si_record_i32($i147);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i148 := $p2i.ref.i64($p8);
    call {:si_unique_call 709} {:cexpr "__cil_tmp153"} boogie_si_record_i64($i148);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i149 := $add.i64($i148, 16);
    call {:si_unique_call 710} {:cexpr "__cil_tmp154"} boogie_si_record_i64($i149);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p150 := $i2p.i64.ref($i149);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($p151, $mul.ref(56, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $i153 := readl($p152);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 712} {:cexpr "tmp___22"} boogie_si_record_i32($i153);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i154 := $zext.i32.i64($i147);
    call {:si_unique_call 713} {:cexpr "__cil_tmp158"} boogie_si_record_i64($i154);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($p9, $mul.ref($i154, 1));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i156 := $sub.i32(1024, $i147);
    call {:si_unique_call 714} {:cexpr "__cil_tmp160"} boogie_si_record_i32($i156);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i157 := $zext.i32.i64($i156);
    call {:si_unique_call 715} {:cexpr "__cil_tmp161"} boogie_si_record_i64($i157);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $i158 := snprintf.ref.i64.ref.i32($p155, $i157, .str.31, $i153);
    call {:si_unique_call 717} {:cexpr "tmp___23"} boogie_si_record_i32($i158);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i159 := $add.i32($i158, $i147);
    call {:si_unique_call 718} {:cexpr "len"} boogie_si_record_i32($i159);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p8);
    call {:si_unique_call 719} {:cexpr "__cil_tmp163"} boogie_si_record_i64($i160);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i161 := $add.i64($i160, 16);
    call {:si_unique_call 720} {:cexpr "__cil_tmp164"} boogie_si_record_i64($i161);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p162 := $i2p.i64.ref($i161);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.0, $p162);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($p163, $mul.ref(60, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i165 := readl($p164);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    call {:si_unique_call 722} {:cexpr "tmp___24"} boogie_si_record_i32($i165);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i166 := $zext.i32.i64($i159);
    call {:si_unique_call 723} {:cexpr "__cil_tmp168"} boogie_si_record_i64($i166);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($p9, $mul.ref($i166, 1));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i168 := $sub.i32(1024, $i159);
    call {:si_unique_call 724} {:cexpr "__cil_tmp170"} boogie_si_record_i32($i168);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i169 := $zext.i32.i64($i168);
    call {:si_unique_call 725} {:cexpr "__cil_tmp171"} boogie_si_record_i64($i169);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i170 := snprintf.ref.i64.ref.i32($p167, $i169, .str.32, $i165);
    call {:si_unique_call 727} {:cexpr "tmp___25"} boogie_si_record_i32($i170);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i171 := $add.i32($i170, $i159);
    call {:si_unique_call 728} {:cexpr "len"} boogie_si_record_i32($i171);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i172 := $ugt.i32($i171, 1024);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    $i173 := $i171;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i174 := $zext.i32.i64($i173);
    call {:si_unique_call 729} {:cexpr "__cil_tmp175"} boogie_si_record_i64($i174);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i175 := simple_read_from_buffer($p1, $i2, $p3, $p9, $i174);
    call {:si_unique_call 731} {:cexpr "ret"} boogie_si_record_i64($i175);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} kfree($p9);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i13 := $i175;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb5:
    assume $i172 == 1;
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i173 := 1024;
    goto $bb7;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const serial_hsu_probe: ref;

axiom serial_hsu_probe == $sub.ref(0, 91496);

procedure serial_hsu_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $CurrAddr;



implementation serial_hsu_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i25: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $i63: i64;
  var $i64: i64;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i64;
  var $p77: ref;
  var $i78: i32;
  var $i79: i64;
  var $i80: i64;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $i86: i64;
  var $i87: i64;
  var $p88: ref;
  var $p90: ref;
  var $p92: ref;
  var $i93: i64;
  var $i94: i64;
  var $p95: ref;
  var $i96: i64;
  var $i97: i64;
  var $p98: ref;
  var $i46: i32;
  var $i30: i32;
  var vslice_dummy_var_10: i32;
  var vslice_dummy_var_11: i32;
  var vslice_dummy_var_12: i32;
  var vslice_dummy_var_13: i32;
  var vslice_dummy_var_14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 733} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 60);
    call {:si_unique_call 734} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i3);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    call {:si_unique_call 735} {:cexpr "__cil_tmp8"} boogie_si_record_i16($i5);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    call {:si_unique_call 736} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i6);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    call {:si_unique_call 737} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i7);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 62);
    call {:si_unique_call 738} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i8);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    call {:si_unique_call 739} {:cexpr "__cil_tmp12"} boogie_si_record_i16($i10);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    call {:si_unique_call 740} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i11);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} vslice_dummy_var_10 := printk.ref.i32.i32(.str.33, $i6, $i11);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    call {:si_unique_call 742} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i13);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 62);
    call {:si_unique_call 743} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i14);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    call {:si_unique_call 744} {:cexpr "__cil_tmp16"} boogie_si_record_i16($i16);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 2075);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i16);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2076);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i16);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2077);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i16);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 2078);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p0);
    call {:si_unique_call 745} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i26);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, 144);
    call {:si_unique_call 746} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i27);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p28 := $i2p.i64.ref($i27);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} vslice_dummy_var_11 := dev_err.ref.ref($p28, .str.34);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 19);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i25 := 3;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $i31 := pci_enable_device($p0);
    call {:si_unique_call 749} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i25, 3);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i33 == 1);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i25);
    call {:si_unique_call 755} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i49);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p50 := $M.3;
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    call {:si_unique_call 756} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i51);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 32);
    call {:si_unique_call 757} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i52);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p54, $mul.ref($i49, 416));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    call {:si_unique_call 758} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i56);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i57 := $add.i64($i56, 128);
    call {:si_unique_call 759} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i57);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p0);
    call {:si_unique_call 760} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i58);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 1300);
    call {:si_unique_call 761} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i59);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p60 := $i2p.i64.ref($i59);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p62 := $i2p.i64.ref($i57);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i61);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p55);
    call {:si_unique_call 762} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i63);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 280);
    call {:si_unique_call 763} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i64);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p0);
    call {:si_unique_call 764} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i65);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i66 := $add.i64($i65, 144);
    call {:si_unique_call 765} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i66);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p67 := $i2p.i64.ref($i66);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p68 := $i2p.i64.ref($i64);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $p67);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p55);
    call {:si_unique_call 766} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i69);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, 328);
    call {:si_unique_call 767} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i70);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p0);
    call {:si_unique_call 768} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i71);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i72 := $add.i64($i71, 144);
    call {:si_unique_call 769} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i72);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p73 := $i2p.i64.ref($i72);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p74 := $i2p.i64.ref($i70);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, $p73);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p0);
    call {:si_unique_call 770} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i75);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i76 := $add.i64($i75, 1300);
    call {:si_unique_call 771} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i76);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p77 := $i2p.i64.ref($i76);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    call {:si_unique_call 772} {:cexpr "__cil_tmp51"} boogie_si_record_i32($i78);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p55);
    call {:si_unique_call 773} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i79);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i80 := $add.i64($i79, 312);
    call {:si_unique_call 774} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i80);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $p81 := $i2p.i64.ref($i80);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p55);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $i84 := request_irq($i78, port_irq, 0, $p82, $p83);
    call {:si_unique_call 776} {:cexpr "ret"} boogie_si_record_i32($i84);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p55);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} vslice_dummy_var_14 := uart_add_one_port(serial_hsu_reg, $p90);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p55);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} pci_set_drvdata($p0, $p92);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p0);
    call {:si_unique_call 782} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i93);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i94 := $add.i64($i93, 144);
    call {:si_unique_call 783} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i94);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p95 := $i2p.i64.ref($i94);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} pm_runtime_put_noidle($p95);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p0);
    call {:si_unique_call 785} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i96);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i97 := $add.i64($i96, 144);
    call {:si_unique_call 786} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i97);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p98 := $i2p.i64.ref($i97);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} pm_runtime_allow($p98);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb18;

  $bb35:
    assume $i85 == 1;
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p0);
    call {:si_unique_call 788} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i86);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i87 := $add.i64($i86, 144);
    call {:si_unique_call 789} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i87);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p88 := $i2p.i64.ref($i87);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} vslice_dummy_var_13 := dev_err.ref.ref($p88, .str.36);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i46 := $i84;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} pci_disable_device($p0);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i30 := $i46;
    goto $bb18;

  $bb28:
    assume $i33 == 1;
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p0);
    call {:si_unique_call 750} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i34);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 1300);
    call {:si_unique_call 751} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i35);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    call {:si_unique_call 752} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i37);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p38 := $M.3;
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $i40 := request_irq($i37, dma_irq, 0, .str.35, $p39);
    call {:si_unique_call 754} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p47 := $M.3;
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} pci_set_drvdata($p0, $p48);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb30:
    assume $i41 == 1;
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p0);
    call {:si_unique_call 777} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i42);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, 144);
    call {:si_unique_call 778} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i43);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i43);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} vslice_dummy_var_12 := dev_err.ref.ref($p44, .str.36);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i46 := $i40;
    goto $bb32;

  $bb25:
    assume $i32 == 1;
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i30 := $i31;
    goto $bb18;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i25 := 2;
    goto $bb17;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb17;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb17;
}



const serial_hsu_remove: ref;

axiom serial_hsu_remove == $sub.ref(0, 92528);

procedure serial_hsu_remove($p0: ref);



const serial_hsu_suspend: ref;

axiom serial_hsu_suspend == $sub.ref(0, 93560);

procedure serial_hsu_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation serial_hsu_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i16: i32;
  var vslice_dummy_var_15: i32;
  var vslice_dummy_var_16: i32;
  var vslice_dummy_var_17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} {:cexpr "serial_hsu_suspend:arg:state_event15"} boogie_si_record_i32($i1);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $p2 := pci_get_drvdata($p0);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 795} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i3);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p2);
    call {:si_unique_call 796} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i4);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, $i3);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} vslice_dummy_var_16 := pci_save_state($p0);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $i16 := pci_choose_state($p0, $i1);
    call {:si_unique_call 804} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} vslice_dummy_var_17 := pci_set_power_state($p0, $i16);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 797} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i6);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 62);
    call {:si_unique_call 798} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i7);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    call {:si_unique_call 799} {:cexpr "__cil_tmp12"} boogie_si_record_i16($i9);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    call {:si_unique_call 800} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i10);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 2078);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} vslice_dummy_var_15 := uart_suspend_port(serial_hsu_reg, $p13);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const serial_hsu_resume: ref;

axiom serial_hsu_resume == $sub.ref(0, 94592);

procedure serial_hsu_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation serial_hsu_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var vslice_dummy_var_18: i32;
  var vslice_dummy_var_19: i32;
  var vslice_dummy_var_20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} vslice_dummy_var_18 := pci_set_power_state($p0, 0);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} pci_restore_state($p0);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $i3 := pci_enable_device($p0);
    call {:si_unique_call 810} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 814} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i9);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    call {:si_unique_call 815} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i10);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, $i9);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    call {:si_unique_call 816} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i12);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 62);
    call {:si_unique_call 817} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i13);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    call {:si_unique_call 818} {:cexpr "__cil_tmp15"} boogie_si_record_i16($i15);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    call {:si_unique_call 819} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i16);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 2078);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} vslice_dummy_var_20 := uart_resume_port(serial_hsu_reg, $p19);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 811} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i5);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 144);
    call {:si_unique_call 812} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} vslice_dummy_var_19 := dev_warn.ref.ref($p7, .str.37);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 95624);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 821} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 144);
    call {:si_unique_call 822} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $p4 := dev_get_drvdata($p3);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const pci_set_power_state: ref;

axiom pci_set_power_state == $sub.ref(0, 96656);

procedure pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 824} {:cexpr "pci_set_power_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 1} true;
    call {:si_unique_call 825} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 826} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_restore_state: ref;

axiom pci_restore_state == $sub.ref(0, 97688);

procedure pci_restore_state($p0: ref);
  free requires assertsPassed;



implementation pci_restore_state($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 98720);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 1} true;
    call {:si_unique_call 827} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 828} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 99752);

procedure dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 1} true;
    call {:si_unique_call 829} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 830} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 1} true;
    call {:si_unique_call 831} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 832} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const uart_resume_port: ref;

axiom uart_resume_port == $sub.ref(0, 100784);

procedure uart_resume_port($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation uart_resume_port($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 1} true;
    call {:si_unique_call 833} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 834} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 101816);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $p1 := external_alloc();
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 102848);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 1} true;
    call {:si_unique_call 836} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 837} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const uart_suspend_port: ref;

axiom uart_suspend_port == $sub.ref(0, 103880);

procedure uart_suspend_port($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation uart_suspend_port($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 1} true;
    call {:si_unique_call 838} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 839} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_save_state: ref;

axiom pci_save_state == $sub.ref(0, 104912);

procedure pci_save_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_save_state($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 1} true;
    call {:si_unique_call 840} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 841} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_choose_state: ref;

axiom pci_choose_state == $sub.ref(0, 105944);

procedure pci_choose_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_choose_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 842} {:cexpr "pci_choose_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 1} true;
    call {:si_unique_call 843} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 844} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pm_runtime_forbid: ref;

axiom pm_runtime_forbid == $sub.ref(0, 106976);

procedure pm_runtime_forbid($p0: ref);



const pm_runtime_get_noresume: ref;

axiom pm_runtime_get_noresume == $sub.ref(0, 108008);

procedure pm_runtime_get_noresume($p0: ref);



const uart_remove_one_port: ref;

axiom uart_remove_one_port == $sub.ref(0, 109040);

procedure uart_remove_one_port($p0: ref, $p1: ref) returns ($r: i32);



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 110072);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var vslice_dummy_var_21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 845} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 144);
    call {:si_unique_call 846} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i3);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} vslice_dummy_var_21 := dev_set_drvdata($p4, $p1);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 111104);

procedure free_irq($i0: i32, $p1: ref);



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 112136);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 113168);

procedure dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 1} true;
    call {:si_unique_call 848} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 849} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 114200);

procedure atomic_inc($p0: ref);



const printk: ref;

axiom printk == $sub.ref(0, 115232);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 1} true;
    call {:si_unique_call 850} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 851} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 1} true;
    call {:si_unique_call 852} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 853} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 116264);

procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 1} true;
    call {:si_unique_call 854} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 855} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dma_irq: ref;

axiom dma_irq == $sub.ref(0, 117296);

procedure dma_irq($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, assertsPassed;



implementation dma_irq($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} {:cexpr "dma_irq:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.4, $p3);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(1028, 1));
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $i6 := readl($p5);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    call {:si_unique_call 858} {:cexpr "int_sts"} boogie_si_record_i32($i6);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i7, $i8 := 0, $i6;
    goto $bb1;

  $bb1:
    call $i9, $i10, $i11, $i12, $i13, $p14, $p15, $p16, $i17, $i18, $i19, $i7, $i8 := dma_irq_loop_$bb1($p2, $i9, $i10, $i11, $i12, $i13, $p14, $p15, $p16, $i17, $i18, $i19, $i7, $i8);
    goto $bb1_last;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 1);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i32($i8, 1);
    call {:si_unique_call 863} {:cexpr "int_sts"} boogie_si_record_i32($i17);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i7, 1);
    call {:si_unique_call 864} {:cexpr "i"} boogie_si_record_i32($i18);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i19 := $ule.i32($i18, 5);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb6:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i7, $i8 := $i18, $i17;
    goto $bb6_dummy;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i7);
    call {:si_unique_call 859} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i11);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p2);
    call {:si_unique_call 860} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i12);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 1280);
    call {:si_unique_call 861} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i13);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref($i11, 24));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} dma_chan_irq($p16);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1541;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 118328);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 866} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 868} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const port_irq: ref;

axiom port_irq == $sub.ref(0, 119360);

procedure port_irq($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $M.2, $M.0, $CurrAddr, assertsPassed;



implementation port_irq($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i32;
  var $i12: i64;
  var $i13: i1;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i32;
  var $i27: i64;
  var $i28: i1;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i14: i32;
  var vslice_dummy_var_22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 870} {:cexpr "port_irq:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    call {:si_unique_call 871} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i4);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 404);
    call {:si_unique_call 872} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i5);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 873} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i7);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 874} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i9);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    call {:si_unique_call 875} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i10);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $i11 := __builtinx_expect.i64.i64($i10, 0);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    call {:si_unique_call 877} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} ldv_spin_lock();
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p3);
    call {:si_unique_call 879} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i15);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 400);
    call {:si_unique_call 880} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i16);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    call {:si_unique_call 881} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i18);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $i36 := serial_in($p3, 2);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    call {:si_unique_call 896} {:cexpr "iir"} boogie_si_record_i32($i36);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 1);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $i40 := serial_in($p3, 5);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p2, $i40);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.5, $p2);
    call {:si_unique_call 899} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i41);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 1);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} check_modem_status($p3);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.5, $p2);
    call {:si_unique_call 902} {:cexpr "__cil_tmp38"} boogie_si_record_i32($i44);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 32);
    call {:si_unique_call 903} {:cexpr "__cil_tmp39"} boogie_si_record_i32($i45);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p3);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} spin_unlock_irqrestore($p47, $u0);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb17:
    assume $i46 == 1;
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} transmit_chars($p3);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i43 == 1;
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} receive_chars($p3, $p2);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p3);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} spin_unlock_irqrestore($p39, $u0);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $i20 := serial_in($p3, 5);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p2, $i20);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.5, $p2);
    call {:si_unique_call 883} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i21);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 30);
    call {:si_unique_call 884} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i22);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    call {:si_unique_call 885} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i24);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    call {:si_unique_call 886} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i25);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $i26 := __builtinx_expect.i64.i64($i25, 0);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    call {:si_unique_call 888} {:cexpr "tmp___0"} boogie_si_record_i64($i27);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} check_modem_status($p3);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p3);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} spin_unlock_irqrestore($p35, $u0);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb3;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p3);
    call {:si_unique_call 889} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i29);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 328);
    call {:si_unique_call 890} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i30);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.5, $p2);
    call {:si_unique_call 891} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i33);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} vslice_dummy_var_22 := dev_warn.ref.ref.i32($p32, .str.38, $i33);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;
}



const uart_add_one_port: ref;

axiom uart_add_one_port == $sub.ref(0, 120392);

procedure uart_add_one_port($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation uart_add_one_port($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 1} true;
    call {:si_unique_call 906} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 907} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pm_runtime_put_noidle: ref;

axiom pm_runtime_put_noidle == $sub.ref(0, 121424);

procedure pm_runtime_put_noidle($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr;



implementation pm_runtime_put_noidle($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var vslice_dummy_var_23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 908} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 800);
    call {:si_unique_call 909} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} vslice_dummy_var_23 := atomic_add_unless($p3, $sub.i32(0, 1), 0);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_allow: ref;

axiom pm_runtime_allow == $sub.ref(0, 122456);

procedure pm_runtime_allow($p0: ref);
  free requires assertsPassed;



implementation pm_runtime_allow($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    return;
}



const atomic_add_unless: ref;

axiom atomic_add_unless == $sub.ref(0, 123488);

procedure atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr;



implementation atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} {:cexpr "atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 912} {:cexpr "atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $i3 := __atomic_add_unless($p0, $i1, $i2);
    call {:si_unique_call 914} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, $i2);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __atomic_add_unless: ref;

axiom __atomic_add_unless == $sub.ref(0, 124520);

procedure __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr;



implementation __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i32;
  var $i8: i64;
  var $i9: i1;
  var $i12: i32;
  var $i10: i32;
  var $i11: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i32;
  var $i20: i64;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i32;
  var $i27: i64;
  var $i28: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} {:cexpr "__atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 916} {:cexpr "__atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $i3 := atomic_read($p0);
    call {:si_unique_call 918} {:cexpr "c"} boogie_si_record_i32($i3);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $i2);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 919} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i5);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    call {:si_unique_call 920} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i6);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $i7 := __builtinx_expect.i64.i64($i6, 0);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    call {:si_unique_call 922} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i10 := $i3;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i11 := $i3;
    goto $bb4;

  $bb4:
    call $i12, $i11, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28 := __atomic_add_unless_loop_$bb4($p0, $i1, $i2, $i12, $i11, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i11, $i1);
    call {:si_unique_call 923} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i14);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $i15 := atomic_cmpxchg($p0, $i11, $i14);
    call {:si_unique_call 925} {:cexpr "old"} boogie_si_record_i32($i15);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, $i11);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    call {:si_unique_call 926} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i17);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    call {:si_unique_call 927} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i18);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} $i19 := __builtinx_expect.i64.i64($i18, 1);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    call {:si_unique_call 929} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i22 := $i11;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i15, $i2);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    call {:si_unique_call 930} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i24);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    call {:si_unique_call 931} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i25);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $i26 := __builtinx_expect.i64.i64($i25, 0);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    call {:si_unique_call 933} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i12 := $i15;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i15;
    goto $bb11_dummy;

  $bb5:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i13 := $i10;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb8:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 125552);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1, $i3);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.6, $p1);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __builtinx_expect: ref;

axiom __builtinx_expect == $sub.ref(0, 126584);

procedure __builtinx_expect() returns ($r: i32);



procedure __builtinx_expect.i64.i64(p.0: i64, p.1: i64) returns ($r: i32);



const atomic_cmpxchg: ref;

axiom atomic_cmpxchg == $sub.ref(0, 127616);

procedure atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} {:cexpr "atomic_cmpxchg:arg:old"} boogie_si_record_i32($i1);
    call {:si_unique_call 936} {:cexpr "atomic_cmpxchg:arg:new"} boogie_si_record_i32($i2);
    call {:si_unique_call 937} {:cexpr "atomic_cmpxchg:arg:__old"} boogie_si_record_i32($i1);
    call {:si_unique_call 938} {:cexpr "atomic_cmpxchg:arg:__new"} boogie_si_record_i32($i2);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(1 == 1);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} __cmpxchg_wrong_size();
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i6 := $u2;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume 1 == 1;
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    call {:si_unique_call 939} $i11 := devirtbounce.5(0, $p10, $i2, $i1, $p10);
    call {:si_unique_call 940} {:cexpr "__ret"} boogie_si_record_i32($i11);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb9;
}



const __cmpxchg_wrong_size: ref;

axiom __cmpxchg_wrong_size == $sub.ref(0, 128648);

procedure __cmpxchg_wrong_size();



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 129680);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 945} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    return;
}



const check_modem_status: ref;

axiom check_modem_status == $sub.ref(0, 130712);

procedure check_modem_status($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, assertsPassed;



implementation check_modem_status($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $i1 := serial_in($p0, 6);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 947} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 15);
    call {:si_unique_call 948} {:cexpr "__cil_tmp4"} boogie_si_record_i32($i2);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i1, 4);
    call {:si_unique_call 949} {:cexpr "__cil_tmp5"} boogie_si_record_i32($i4);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i1, 2);
    call {:si_unique_call 957} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i16);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i1, 8);
    call {:si_unique_call 965} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i28);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i1, 1);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p0);
    call {:si_unique_call 970} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i36);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 168);
    call {:si_unique_call 971} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i37);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    call {:si_unique_call 972} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i40);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 272);
    call {:si_unique_call 973} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i41);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} __wake_up($p42, 1, 1, $0.ref);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i33 == 1;
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p0);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i1, 16);
    call {:si_unique_call 968} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i35);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} uart_handle_cts_change($p34, $i35);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p0);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i1, 128);
    call {:si_unique_call 966} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i31);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} uart_handle_dcd_change($p30, $i31);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i18 := $add.i64(0, 180);
    call {:si_unique_call 958} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i18);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    call {:si_unique_call 959} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i19);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, $i18);
    call {:si_unique_call 960} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i20);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i21 := $add.i64(0, 180);
    call {:si_unique_call 961} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i21);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p0);
    call {:si_unique_call 962} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i22);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, $i21);
    call {:si_unique_call 963} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i23);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    call {:si_unique_call 964} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i25);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i20);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i6 := $add.i64(0, 184);
    call {:si_unique_call 950} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    call {:si_unique_call 951} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i7);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, $i6);
    call {:si_unique_call 952} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i8);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i9 := $add.i64(0, 184);
    call {:si_unique_call 953} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i9);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    call {:si_unique_call 954} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i10);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, $i9);
    call {:si_unique_call 955} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i11);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    call {:si_unique_call 956} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i13);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 1);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i8);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 131744);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.2;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} ldv_spin_unlock();
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} ldv_spin_unlock_irqrestore_8($p0, $i1);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    return;
}



const receive_chars: ref;

axiom receive_chars == $sub.ref(0, 132776);

procedure receive_chars($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.2, assertsPassed;



implementation receive_chars($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i64;
  var $i28: i32;
  var $i29: i64;
  var $i30: i1;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i32;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $i71: i64;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $i76: i64;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i84: i64;
  var $i85: i64;
  var $i86: i64;
  var $i87: i64;
  var $i88: i64;
  var $i89: i64;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $i94: i64;
  var $i95: i64;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $i108: i32;
  var $i109: i32;
  var $i110: i1;
  var $i111: i32;
  var $i107: i32;
  var $i103: i32;
  var $i112: i32;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i1;
  var vslice_dummy_var_24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 978} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i2);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 168);
    call {:si_unique_call 979} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i3);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 980} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i8);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p7);
    call {:si_unique_call 981} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i9);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, $i8);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := 256;
    goto $bb5;

  $bb5:
    call $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $p19, $i20, $i21, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $p33, $p34, $i35, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $p51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $i78, $i79, $p80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $p90, $i91, $i92, $p93, $i94, $i95, $p96, $i97, $i98, $i99, $i100, $i101, $i102, $i104, $i105, $i106, $i108, $i109, $i110, $i111, $i107, $i103, $i112, $p113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, vslice_dummy_var_24 := receive_chars_loop_$bb5($p0, $p1, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $p19, $i20, $i21, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $p33, $p34, $i35, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $p51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $i78, $i79, $p80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $p90, $i91, $i92, $p93, $i94, $i95, $p96, $i97, $i98, $i99, $i100, $i101, $i102, $i104, $i105, $i106, $i108, $i109, $i110, $i111, $i107, $i103, $i112, $p113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, vslice_dummy_var_24);
    goto $bb5_last;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $i12 := serial_in($p0, 0);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    call {:si_unique_call 983} {:cexpr "ch"} boogie_si_record_i32($i12);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i13 := $add.i64(0, 192);
    call {:si_unique_call 984} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i13);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    call {:si_unique_call 985} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i14);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, $i13);
    call {:si_unique_call 986} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i15);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i16 := $add.i64(0, 192);
    call {:si_unique_call 987} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i16);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p0);
    call {:si_unique_call 988} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i17);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, $i16);
    call {:si_unique_call 989} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i18);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    call {:si_unique_call 990} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i20);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 1);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i15);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.5, $p1);
    call {:si_unique_call 991} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i23);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 30);
    call {:si_unique_call 992} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i24);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 993} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i26);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    call {:si_unique_call 994} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i27);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $i28 := __builtinx_expect.i64.i64($i27, 0);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    call {:si_unique_call 996} {:cexpr "tmp___0"} boogie_si_record_i64($i29);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i112 := 0;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p0);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.5, $p1);
    call {:si_unique_call 1054} {:cexpr "__cil_tmp96"} boogie_si_record_i32($i114);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} uart_insert_char($p113, $i114, 2, $i12, $i112);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} $i115 := serial_in($p0, 5);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    call {:si_unique_call 1016} {:cexpr "tmp___1"} boogie_si_record_i32($i115);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p1, $i115);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.5, $p1);
    call {:si_unique_call 1017} {:cexpr "__cil_tmp98"} boogie_si_record_i32($i116);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i117 := $and.i32($i116, 1);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i118 == 1);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} tty_flip_buffer_push($p7);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb34:
    assume $i118 == 1;
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i119 := $sub.i32($i11, 1);
    call {:si_unique_call 1056} {:cexpr "max_count"} boogie_si_record_i32($i119);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i11, 0);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i120 == 1);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume $i120 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i119;
    goto $bb36_dummy;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    call {:si_unique_call 997} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i31);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 328);
    call {:si_unique_call 998} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i32);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.5, $p1);
    call {:si_unique_call 999} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i35);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} vslice_dummy_var_24 := dev_warn.ref.ref.i32($p34, .str.39, $i35);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.5, $p1);
    call {:si_unique_call 1001} {:cexpr "__cil_tmp36"} boogie_si_record_i32($i37);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 16);
    call {:si_unique_call 1002} {:cexpr "__cil_tmp37"} boogie_si_record_i32($i38);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i39 == 1);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.5, $p1);
    call {:si_unique_call 1013} {:cexpr "__cil_tmp49"} boogie_si_record_i32($i55);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i55, 4);
    call {:si_unique_call 1014} {:cexpr "__cil_tmp50"} boogie_si_record_i32($i56);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i57 == 1);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.5, $p1);
    call {:si_unique_call 1027} {:cexpr "__cil_tmp60"} boogie_si_record_i32($i68);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 8);
    call {:si_unique_call 1028} {:cexpr "__cil_tmp61"} boogie_si_record_i32($i69);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.5, $p1);
    call {:si_unique_call 1018} {:cexpr "__cil_tmp71"} boogie_si_record_i32($i81);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 2);
    call {:si_unique_call 1019} {:cexpr "__cil_tmp72"} boogie_si_record_i32($i82);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p0);
    call {:si_unique_call 1043} {:cexpr "__cil_tmp83"} boogie_si_record_i64($i94);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i95 := $add.i64($i94, 156);
    call {:si_unique_call 1044} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i95);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p96 := $i2p.i64.ref($i95);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    call {:si_unique_call 1045} {:cexpr "__cil_tmp85"} boogie_si_record_i32($i97);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.5, $p1);
    call {:si_unique_call 1046} {:cexpr "__cil_tmp86"} boogie_si_record_i32($i98);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, $i97);
    call {:si_unique_call 1047} {:cexpr "__cil_tmp88"} boogie_si_record_i32($i99);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p1, $i99);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.5, $p1);
    call {:si_unique_call 1048} {:cexpr "__cil_tmp89"} boogie_si_record_i32($i100);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i100, 16);
    call {:si_unique_call 1049} {:cexpr "__cil_tmp90"} boogie_si_record_i32($i101);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i102 == 1);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.5, $p1);
    call {:si_unique_call 1050} {:cexpr "__cil_tmp91"} boogie_si_record_i32($i104);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i105 := $and.i32($i104, 4);
    call {:si_unique_call 1051} {:cexpr "__cil_tmp92"} boogie_si_record_i32($i105);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i106 == 1);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.5, $p1);
    call {:si_unique_call 1052} {:cexpr "__cil_tmp93"} boogie_si_record_i32($i108);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i109 := $and.i32($i108, 8);
    call {:si_unique_call 1053} {:cexpr "__cil_tmp94"} boogie_si_record_i32($i109);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    $i111 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i107 := $i111;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i103 := $i107;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i112 := $i103;
    goto $bb33;

  $bb30:
    assume $i110 == 1;
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i111 := 2;
    goto $bb32;

  $bb27:
    assume $i106 == 1;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i107 := 3;
    goto $bb29;

  $bb24:
    assume $i102 == 1;
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i103 := 1;
    goto $bb26;

  $bb21:
    assume $i83 == 1;
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i84 := $add.i64(0, 204);
    call {:si_unique_call 1036} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i84);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p0);
    call {:si_unique_call 1037} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i85);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, $i84);
    call {:si_unique_call 1038} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i86);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i87 := $add.i64(0, 204);
    call {:si_unique_call 1039} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i87);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p0);
    call {:si_unique_call 1040} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i88);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i89 := $add.i64($i88, $i87);
    call {:si_unique_call 1041} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i89);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p90 := $i2p.i64.ref($i89);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    call {:si_unique_call 1042} {:cexpr "__cil_tmp81"} boogie_si_record_i32($i91);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i91, 1);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p93 := $i2p.i64.ref($i86);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, $i92);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i70 == 1;
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i71 := $add.i64(0, 200);
    call {:si_unique_call 1029} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i71);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p0);
    call {:si_unique_call 1030} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i72);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i72, $i71);
    call {:si_unique_call 1031} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i73);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i74 := $add.i64(0, 200);
    call {:si_unique_call 1032} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i74);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p0);
    call {:si_unique_call 1033} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i75);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i76 := $add.i64($i75, $i74);
    call {:si_unique_call 1034} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i76);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p77 := $i2p.i64.ref($i76);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    call {:si_unique_call 1035} {:cexpr "__cil_tmp70"} boogie_si_record_i32($i78);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, 1);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p80 := $i2p.i64.ref($i73);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i79);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i57 == 1;
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i58 := $add.i64(0, 208);
    call {:si_unique_call 1020} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i58);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p0);
    call {:si_unique_call 1021} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i59);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, $i58);
    call {:si_unique_call 1022} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i60);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i61 := $add.i64(0, 208);
    call {:si_unique_call 1023} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i61);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p0);
    call {:si_unique_call 1024} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i62);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, $i61);
    call {:si_unique_call 1025} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i63);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p64 := $i2p.i64.ref($i63);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    call {:si_unique_call 1026} {:cexpr "__cil_tmp59"} boogie_si_record_i32($i65);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i65, 1);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p67 := $i2p.i64.ref($i60);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i66);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb8:
    assume $i39 == 1;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.5, $p1);
    call {:si_unique_call 1003} {:cexpr "__cil_tmp38"} boogie_si_record_i32($i40);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, $sub.i32(0, 13));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p1, $i41);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i42 := $add.i64(0, 212);
    call {:si_unique_call 1004} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i42);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p0);
    call {:si_unique_call 1005} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i43);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, $i42);
    call {:si_unique_call 1006} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i44);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i45 := $add.i64(0, 212);
    call {:si_unique_call 1007} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i45);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p0);
    call {:si_unique_call 1008} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i46);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, $i45);
    call {:si_unique_call 1009} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i47);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    call {:si_unique_call 1010} {:cexpr "__cil_tmp47"} boogie_si_record_i32($i49);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, 1);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p51 := $i2p.i64.ref($i44);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i50);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p0);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} $i53 := uart_handle_break($p52);
    call {:si_unique_call 1012} {:cexpr "tmp"} boogie_si_record_i32($i53);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb10:
    assume $i54 == 1;
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb36_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1809;
}



const transmit_chars: ref;

axiom transmit_chars == $sub.ref(0, 133808);

procedure transmit_chars($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation transmit_chars($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $i65: i64;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $i71: i64;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $i76: i64;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $i81: i64;
  var $i82: i64;
  var $p83: ref;
  var $i84: i32;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i1;
  var $i92: i64;
  var $i93: i64;
  var $p94: ref;
  var $i95: i32;
  var $i96: i64;
  var $i97: i64;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $i101: i64;
  var $i102: i64;
  var $i103: i1;
  var $p104: ref;
  var $i105: i64;
  var $i106: i64;
  var $p107: ref;
  var $i108: i32;
  var $i109: i64;
  var $i110: i64;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1058} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i1);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 168);
    call {:si_unique_call 1059} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i2);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    call {:si_unique_call 1060} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i5);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 744);
    call {:si_unique_call 1061} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i6);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 1062} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i8);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 152);
    call {:si_unique_call 1063} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i9);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    call {:si_unique_call 1064} {:cexpr "__cil_tmp14"} boogie_si_record_i8($i11);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    call {:si_unique_call 1065} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i12);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p7);
    call {:si_unique_call 1080} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i32);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 12);
    call {:si_unique_call 1081} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i33);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    call {:si_unique_call 1082} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i35);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p7);
    call {:si_unique_call 1083} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i36);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 8);
    call {:si_unique_call 1084} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i37);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    call {:si_unique_call 1085} {:cexpr "__cil_tmp38"} boogie_si_record_i32($i39);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, $i35);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i40 == 1);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p0);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $i43 := uart_tx_stopped($p42);
    call {:si_unique_call 1088} {:cexpr "tmp"} boogie_si_record_i32($i43);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p0);
    call {:si_unique_call 1090} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i46);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 148);
    call {:si_unique_call 1091} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i47);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    call {:si_unique_call 1092} {:cexpr "__cil_tmp45"} boogie_si_record_i32($i49);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i50 := $udiv.i32($i49, 2);
    call {:si_unique_call 1093} {:cexpr "__cil_tmp46"} boogie_si_record_i32($i50);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i51 := $i50;
    goto $bb11;

  $bb11:
    call $i51, $i52, $i53, $p54, $i55, $i56, $p57, $p58, $p59, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $i67, $i68, $i69, $p70, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $i78, $i79, $p80, $i81, $i82, $p83, $i84, $i85, $i86, $p87, $i88, $i89, $i90, $i91 := transmit_chars_loop_$bb11($p0, $p7, $i51, $i52, $i53, $p54, $i55, $i56, $p57, $p58, $p59, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $i67, $i68, $i69, $p70, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $i78, $i79, $p80, $i81, $i82, $p83, $i84, $i85, $i86, $p87, $i88, $i89, $i90, $i91);
    goto $bb11_last;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p7);
    call {:si_unique_call 1094} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i52);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 12);
    call {:si_unique_call 1095} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i53);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i53);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    call {:si_unique_call 1096} {:cexpr "__cil_tmp49"} boogie_si_record_i32($i55);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i55);
    call {:si_unique_call 1097} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i56);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p7);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref($i56, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    call {:si_unique_call 1098} {:cexpr "__cil_tmp53"} boogie_si_record_i8($i60);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i61 := $sext.i8.i32($i60);
    call {:si_unique_call 1099} {:cexpr "__cil_tmp54"} boogie_si_record_i32($i61);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} serial_out($p0, 0, $i61);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p7);
    call {:si_unique_call 1101} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i62);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 12);
    call {:si_unique_call 1102} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i63);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p7);
    call {:si_unique_call 1103} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i64);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i65 := $add.i64($i64, 12);
    call {:si_unique_call 1104} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i65);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p66 := $i2p.i64.ref($i65);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    call {:si_unique_call 1105} {:cexpr "__cil_tmp59"} boogie_si_record_i32($i67);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i67, 1);
    call {:si_unique_call 1106} {:cexpr "__cil_tmp60"} boogie_si_record_i32($i68);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 4095);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p70 := $i2p.i64.ref($i63);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, $i69);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i71 := $add.i64(0, 196);
    call {:si_unique_call 1107} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i71);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p0);
    call {:si_unique_call 1108} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i72);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i72, $i71);
    call {:si_unique_call 1109} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i73);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i74 := $add.i64(0, 196);
    call {:si_unique_call 1110} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i74);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p0);
    call {:si_unique_call 1111} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i75);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i76 := $add.i64($i75, $i74);
    call {:si_unique_call 1112} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i76);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p77 := $i2p.i64.ref($i76);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    call {:si_unique_call 1113} {:cexpr "__cil_tmp69"} boogie_si_record_i32($i78);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, 1);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p80 := $i2p.i64.ref($i73);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i79);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p7);
    call {:si_unique_call 1114} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i81);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i81, 12);
    call {:si_unique_call 1115} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i82);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p83 := $i2p.i64.ref($i82);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    call {:si_unique_call 1116} {:cexpr "__cil_tmp72"} boogie_si_record_i32($i84);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p7);
    call {:si_unique_call 1117} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i85);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 8);
    call {:si_unique_call 1118} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i86);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p87 := $i2p.i64.ref($i86);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    call {:si_unique_call 1119} {:cexpr "__cil_tmp75"} boogie_si_record_i32($i88);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, $i84);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i90 := $sub.i32($i51, 1);
    call {:si_unique_call 1129} {:cexpr "count"} boogie_si_record_i32($i90);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i91 := $sgt.i32($i90, 0);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i91 == 1);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p7);
    call {:si_unique_call 1120} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i92);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i93 := $add.i64($i92, 12);
    call {:si_unique_call 1121} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i93);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p94 := $i2p.i64.ref($i93);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    call {:si_unique_call 1122} {:cexpr "__cil_tmp78"} boogie_si_record_i32($i95);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p7);
    call {:si_unique_call 1123} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i96);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i97 := $add.i64($i96, 8);
    call {:si_unique_call 1124} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i97);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p98 := $i2p.i64.ref($i97);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    call {:si_unique_call 1125} {:cexpr "__cil_tmp81"} boogie_si_record_i32($i99);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i100 := $sub.i32($i99, $i95);
    call {:si_unique_call 1126} {:cexpr "__cil_tmp82"} boogie_si_record_i32($i100);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i100);
    call {:si_unique_call 1127} {:cexpr "__cil_tmp83"} boogie_si_record_i64($i101);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i102 := $and.i64($i101, 4095);
    call {:si_unique_call 1128} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i102);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i103 := $ule.i64($i102, 255);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p7);
    call {:si_unique_call 1131} {:cexpr "__cil_tmp86"} boogie_si_record_i64($i105);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i106 := $add.i64($i105, 12);
    call {:si_unique_call 1132} {:cexpr "__cil_tmp87"} boogie_si_record_i64($i106);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p107 := $i2p.i64.ref($i106);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    call {:si_unique_call 1133} {:cexpr "__cil_tmp88"} boogie_si_record_i32($i108);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p7);
    call {:si_unique_call 1134} {:cexpr "__cil_tmp89"} boogie_si_record_i64($i109);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i110 := $add.i64($i109, 8);
    call {:si_unique_call 1135} {:cexpr "__cil_tmp90"} boogie_si_record_i64($i110);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p111 := $i2p.i64.ref($i110);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    call {:si_unique_call 1136} {:cexpr "__cil_tmp91"} boogie_si_record_i32($i112);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, $i108);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i113 == 1;
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p0);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} serial_hsu_stop_tx($p114);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i103 == 1;
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p0);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} uart_write_wakeup($p104);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb16:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    $i51 := $i90;
    goto $bb16_dummy;

  $bb12:
    assume $i89 == 1;
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb7:
    assume $i44 == 1;
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p0);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} serial_hsu_stop_tx($p45);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i40 == 1;
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p0);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} serial_hsu_stop_tx($p41);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    call {:si_unique_call 1066} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i14);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 152);
    call {:si_unique_call 1067} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i15);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    call {:si_unique_call 1068} {:cexpr "__cil_tmp19"} boogie_si_record_i8($i17);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    call {:si_unique_call 1069} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i18);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} serial_out($p0, 0, $i18);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i19 := $add.i64(0, 196);
    call {:si_unique_call 1071} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i19);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p0);
    call {:si_unique_call 1072} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i20);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, $i19);
    call {:si_unique_call 1073} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i21);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i22 := $add.i64(0, 196);
    call {:si_unique_call 1074} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i22);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    call {:si_unique_call 1075} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i23);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, $i22);
    call {:si_unique_call 1076} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i24);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    call {:si_unique_call 1077} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i26);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 1);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p28 := $i2p.i64.ref($i21);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    call {:si_unique_call 1078} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i29);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 152);
    call {:si_unique_call 1079} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i30);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, 0);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2033;
}



const serial_out: ref;

axiom serial_out == $sub.ref(0, 134840);

procedure serial_out($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation serial_out($p0: ref, $i1: i32, $i2: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} {:cexpr "serial_out:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 1139} {:cexpr "serial_out:arg:value"} boogie_si_record_i32($i2);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i1, 6);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i2);
    call {:si_unique_call 1146} {:cexpr "val"} boogie_si_record_i8($i11);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    call {:si_unique_call 1147} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i12);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    call {:si_unique_call 1148} {:cexpr "__cil_tmp14"} boogie_si_record_i8($i13);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i1);
    call {:si_unique_call 1149} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i14);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    call {:si_unique_call 1150} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i15);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 80);
    call {:si_unique_call 1151} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i16);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref($i14, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} writeb($i13, $p19);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i1, 2);
    call {:si_unique_call 1140} {:cexpr "offset"} boogie_si_record_i32($i4);
    call {:si_unique_call 1141} {:cexpr "serial_out:arg:__cil_tmp5"} boogie_si_record_i32($i2);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    call {:si_unique_call 1142} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i5);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 1143} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i6);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 80);
    call {:si_unique_call 1144} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i7);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($i5, 1));
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} writel($i2, $p10);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const uart_tx_stopped: ref;

axiom uart_tx_stopped == $sub.ref(0, 135872);

procedure uart_tx_stopped($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation uart_tx_stopped($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1153} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 168);
    call {:si_unique_call 1154} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(580, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    call {:si_unique_call 1155} {:cexpr "__cil_tmp8"} boogie_si_record_i8($i9);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 1156} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i10);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p6);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(580, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    call {:si_unique_call 1157} {:cexpr "__cil_tmp12"} boogie_si_record_i8($i15);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    call {:si_unique_call 1158} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i16);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb3;
}



const uart_write_wakeup: ref;

axiom uart_write_wakeup == $sub.ref(0, 136904);

procedure uart_write_wakeup($p0: ref);
  free requires assertsPassed;



implementation uart_write_wakeup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    return;
}



const writel: ref;

axiom writel == $sub.ref(0, 137936);

procedure writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} {:cexpr "writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 1160} devirtbounce.7(0, $i0, $p2);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    return;
}



const writeb: ref;

axiom writeb == $sub.ref(0, 138968);

procedure writeb($i0: i8, $p1: ref);
  free requires assertsPassed;



implementation writeb($i0: i8, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} {:cexpr "writeb:arg:val"} boogie_si_record_i8($i0);
    call {:si_unique_call 1162} devirtbounce.8(0, $i0, $p1);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    return;
}



const uart_handle_break: ref;

axiom uart_handle_break == $sub.ref(0, 140000);

procedure uart_handle_break($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation uart_handle_break($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1163} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 168);
    call {:si_unique_call 1164} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 1165} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i5);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 240);
    call {:si_unique_call 1166} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i6);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 1167} {:cexpr "__cil_tmp7"} boogie_si_record_i32($i8);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 4);
    call {:si_unique_call 1168} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i9);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p4);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} do_SAK($p12);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const uart_insert_char: ref;

axiom uart_insert_char == $sub.ref(0, 141032);

procedure uart_insert_char($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32);
  free requires assertsPassed;



implementation uart_insert_char($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} {:cexpr "uart_insert_char:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1171} {:cexpr "uart_insert_char:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1172} {:cexpr "uart_insert_char:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1173} {:cexpr "uart_insert_char:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    return;
}



const tty_flip_buffer_push: ref;

axiom tty_flip_buffer_push == $sub.ref(0, 142064);

procedure tty_flip_buffer_push($p0: ref);
  free requires assertsPassed;



implementation tty_flip_buffer_push($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    return;
}



const do_SAK: ref;

axiom do_SAK == $sub.ref(0, 143096);

procedure do_SAK($p0: ref);
  free requires assertsPassed;



implementation do_SAK($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 144128);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $M.2 := 0;
    call {:si_unique_call 1174} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_8: ref;

axiom ldv_spin_unlock_irqrestore_8 == $sub.ref(0, 145160);

procedure ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} {:cexpr "ldv_spin_unlock_irqrestore_8:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} _raw_spin_unlock_irqrestore($p2, $i1);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 146192);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    return;
}



const uart_handle_dcd_change: ref;

axiom uart_handle_dcd_change == $sub.ref(0, 147224);

procedure uart_handle_dcd_change($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation uart_handle_dcd_change($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} {:cexpr "uart_handle_dcd_change:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    return;
}



const uart_handle_cts_change: ref;

axiom uart_handle_cts_change == $sub.ref(0, 148256);

procedure uart_handle_cts_change($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation uart_handle_cts_change($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} {:cexpr "uart_handle_cts_change:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 149288);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1181} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    return;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 150320);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1182} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1183} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1184} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1185} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const dma_chan_irq: ref;

axiom dma_chan_irq == $sub.ref(0, 151352);

procedure dma_chan_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.0, assertsPassed;



implementation dma_chan_irq($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1186} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i1);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 8);
    call {:si_unique_call 1187} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} ldv_spin_lock();
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    call {:si_unique_call 1189} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i5);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 400);
    call {:si_unique_call 1190} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i6);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 1191} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i8);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p4);
    call {:si_unique_call 1192} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i10);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 404);
    call {:si_unique_call 1193} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i11);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    call {:si_unique_call 1194} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i13);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    call {:si_unique_call 1196} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i15);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 16);
    call {:si_unique_call 1197} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i16);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} $i19 := readl($p18);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    call {:si_unique_call 1199} {:cexpr "int_sts"} boogie_si_record_i32($i19);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p0);
    call {:si_unique_call 1200} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i20);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 4);
    call {:si_unique_call 1201} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i21);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    call {:si_unique_call 1202} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i23);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 2);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p0);
    call {:si_unique_call 1204} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i25);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 4);
    call {:si_unique_call 1205} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i26);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    call {:si_unique_call 1206} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i28);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p4);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} spin_unlock_irqrestore($p38, $u0);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p0);
    call {:si_unique_call 1207} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i30);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 16);
    call {:si_unique_call 1208} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i31);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p33, $mul.ref(4, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} writel(0, $p34);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p4);
    call {:si_unique_call 1210} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i35);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 408);
    call {:si_unique_call 1211} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i36);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i36);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 0);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} hsu_dma_tx($p4);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} hsu_dma_rx($p4, $i19);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hsu_dma_rx: ref;

axiom hsu_dma_rx == $sub.ref(0, 152384);

procedure hsu_dma_rx($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, assertsPassed;



implementation hsu_dma_rx($p0: ref, $i1: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i64;
  var $p75: ref;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $i80: i32;
  var $i81: i64;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $i85: i64;
  var $i86: i32;
  var $i87: i64;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i64;
  var $p94: ref;
  var $i95: i32;
  var $i96: i64;
  var $i97: i64;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i64;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $i107: i64;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var vslice_dummy_var_25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} {:cexpr "hsu_dma_rx:arg:int_sts"} boogie_si_record_i32($i1);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1214} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i2);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 376);
    call {:si_unique_call 1215} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i3);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 1216} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i5);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 344);
    call {:si_unique_call 1217} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i6);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    call {:si_unique_call 1218} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i10);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 168);
    call {:si_unique_call 1219} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i11);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1220} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i16);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p15);
    call {:si_unique_call 1221} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i17);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, $i16);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i1, 3840);
    call {:si_unique_call 1222} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i19);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p8);
    call {:si_unique_call 1224} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i21);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 16);
    call {:si_unique_call 1225} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i22);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(4, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} writel(0, $p25);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p8);
    call {:si_unique_call 1227} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i26);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, 16);
    call {:si_unique_call 1228} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i27);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p28 := $i2p.i64.ref($i27);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref(32, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} $i31 := readl($p30);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    call {:si_unique_call 1230} {:cexpr "tmp"} boogie_si_record_i32($i31);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p4);
    call {:si_unique_call 1231} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i32);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 8);
    call {:si_unique_call 1232} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i33);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    call {:si_unique_call 1233} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i35);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i64.i32($i35);
    call {:si_unique_call 1234} {:cexpr "__cil_tmp33"} boogie_si_record_i32($i36);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32($i31, $i36);
    call {:si_unique_call 1235} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i37);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p9);
    call {:si_unique_call 1239} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i44);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 280);
    call {:si_unique_call 1240} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i45);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p46 := $i2p.i64.ref($i45);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p4);
    call {:si_unique_call 1241} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i48);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, 8);
    call {:si_unique_call 1242} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i49);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p50 := $i2p.i64.ref($i49);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    call {:si_unique_call 1243} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i51);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p4);
    call {:si_unique_call 1244} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i52);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 16);
    call {:si_unique_call 1245} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i53);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i53);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    call {:si_unique_call 1246} {:cexpr "__cil_tmp48"} boogie_si_record_i32($i55);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i56 := $zext.i32.i64($i55);
    call {:si_unique_call 1247} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i56);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} dma_sync_single_for_cpu($p47, $i51, $i56, 2);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p4);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i37);
    call {:si_unique_call 1249} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i59);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} vslice_dummy_var_25 := tty_insert_flip_string($p15, $p58, $i59);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p9);
    call {:si_unique_call 1251} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i61);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, 192);
    call {:si_unique_call 1252} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i62);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p9);
    call {:si_unique_call 1253} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i63);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 192);
    call {:si_unique_call 1254} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i64);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p65 := $i2p.i64.ref($i64);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    call {:si_unique_call 1255} {:cexpr "__cil_tmp61"} boogie_si_record_i32($i66);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i66, $i37);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p68 := $i2p.i64.ref($i62);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i67);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p0);
    call {:si_unique_call 1256} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i69);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, 280);
    call {:si_unique_call 1257} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i70);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p71 := $i2p.i64.ref($i70);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p4);
    call {:si_unique_call 1258} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i73);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i73, 8);
    call {:si_unique_call 1259} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i74);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p75 := $i2p.i64.ref($i74);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.0, $p75);
    call {:si_unique_call 1260} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i76);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p4);
    call {:si_unique_call 1261} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i77);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i78 := $add.i64($i77, 16);
    call {:si_unique_call 1262} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i78);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p79 := $i2p.i64.ref($i78);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    call {:si_unique_call 1263} {:cexpr "__cil_tmp71"} boogie_si_record_i32($i80);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i81 := $zext.i32.i64($i80);
    call {:si_unique_call 1264} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i81);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} dma_sync_single_for_device($p72, $i76, $i81, 2);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p4);
    call {:si_unique_call 1266} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i82);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, 8);
    call {:si_unique_call 1267} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i83);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p84 := $i2p.i64.ref($i83);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.0, $p84);
    call {:si_unique_call 1268} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i85);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i64.i32($i85);
    call {:si_unique_call 1269} {:cexpr "__cil_tmp77"} boogie_si_record_i32($i86);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p8);
    call {:si_unique_call 1270} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i87);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i88 := $add.i64($i87, 16);
    call {:si_unique_call 1271} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i88);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p89 := $i2p.i64.ref($i88);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p90, $mul.ref(32, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} writel($i86, $p91);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p4);
    call {:si_unique_call 1273} {:cexpr "__cil_tmp83"} boogie_si_record_i64($i92);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i93 := $add.i64($i92, 16);
    call {:si_unique_call 1274} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i93);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p94 := $i2p.i64.ref($i93);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    call {:si_unique_call 1275} {:cexpr "__cil_tmp85"} boogie_si_record_i32($i95);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p8);
    call {:si_unique_call 1276} {:cexpr "__cil_tmp86"} boogie_si_record_i64($i96);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i97 := $add.i64($i96, 16);
    call {:si_unique_call 1277} {:cexpr "__cil_tmp87"} boogie_si_record_i64($i97);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p98 := $i2p.i64.ref($i97);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p99, $mul.ref(36, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} writel($i95, $p100);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p8);
    call {:si_unique_call 1279} {:cexpr "__cil_tmp91"} boogie_si_record_i64($i101);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i102 := $add.i64($i101, 16);
    call {:si_unique_call 1280} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i102);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p103 := $i2p.i64.ref($i102);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p104, $mul.ref(8, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} writel(16843009, $p105);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} tty_flip_buffer_push($p15);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p8);
    call {:si_unique_call 1283} {:cexpr "__cil_tmp96"} boogie_si_record_i64($i106);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i107 := $add.i64($i106, 16);
    call {:si_unique_call 1284} {:cexpr "__cil_tmp97"} boogie_si_record_i64($i107);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $p108 := $i2p.i64.ref($i107);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p109, $mul.ref(4, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} writel(3, $p110);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p8);
    call {:si_unique_call 1236} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i39);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 16);
    call {:si_unique_call 1237} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i40);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i40);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(4, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} writel(3, $p43);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} __const_udelay(8590);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hsu_dma_tx: ref;

axiom hsu_dma_tx == $sub.ref(0, 153416);

procedure hsu_dma_tx($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation hsu_dma_tx($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i64;
  var $i67: i64;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i64;
  var $p80: ref;
  var $i81: i64;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $i85: i32;
  var $i86: i64;
  var $i87: i64;
  var $i88: i64;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $i92: i64;
  var $i93: i64;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i64;
  var $i101: i64;
  var $p102: ref;
  var $i103: i64;
  var $i104: i64;
  var $p105: ref;
  var $i106: i32;
  var $i107: i64;
  var $i108: i64;
  var $p109: ref;
  var $i110: i64;
  var $i111: i32;
  var $i112: i32;
  var $i113: i64;
  var $i114: i64;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $i118: i64;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $i123: i64;
  var $p124: ref;
  var $p125: ref;
  var $i126: i64;
  var $i127: i64;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i64;
  var $i132: i64;
  var $p133: ref;
  var $p134: ref;
  var $i135: i64;
  var $i136: i64;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i64;
  var $i141: i64;
  var $p142: ref;
  var $i143: i64;
  var $i144: i64;
  var $p145: ref;
  var $p146: ref;
  var $i147: i64;
  var $i148: i64;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i64;
  var $i153: i64;
  var $p154: ref;
  var $i155: i32;
  var $i156: i64;
  var $i157: i64;
  var $p158: ref;
  var $i159: i32;
  var $i160: i32;
  var $i161: i64;
  var $i162: i64;
  var $i163: i1;
  var $p164: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1286} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i1);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 168);
    call {:si_unique_call 1287} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i2);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    call {:si_unique_call 1288} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i5);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 744);
    call {:si_unique_call 1289} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i6);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 1290} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i8);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 352);
    call {:si_unique_call 1291} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i9);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p0);
    call {:si_unique_call 1292} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i11);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 408);
    call {:si_unique_call 1293} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i12);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    call {:si_unique_call 1294} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i14);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p7);
    call {:si_unique_call 1295} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i16);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 12);
    call {:si_unique_call 1296} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i17);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p10);
    call {:si_unique_call 1297} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i18);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 20);
    call {:si_unique_call 1298} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i19);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    call {:si_unique_call 1299} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i21);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p7);
    call {:si_unique_call 1300} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i22);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 12);
    call {:si_unique_call 1301} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i23);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    call {:si_unique_call 1302} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i25);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, $i21);
    call {:si_unique_call 1303} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i26);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i17);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p7);
    call {:si_unique_call 1304} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i28);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 12);
    call {:si_unique_call 1305} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i29);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p7);
    call {:si_unique_call 1306} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i30);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 12);
    call {:si_unique_call 1307} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i31);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    call {:si_unique_call 1308} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i33);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 4095);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i29);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i36 := $add.i64(0, 196);
    call {:si_unique_call 1309} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i36);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p0);
    call {:si_unique_call 1310} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i37);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, $i36);
    call {:si_unique_call 1311} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i38);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p10);
    call {:si_unique_call 1312} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i39);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 20);
    call {:si_unique_call 1313} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i40);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i40);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    call {:si_unique_call 1314} {:cexpr "__cil_tmp41"} boogie_si_record_i32($i42);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i43 := $add.i64(0, 196);
    call {:si_unique_call 1315} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i43);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p0);
    call {:si_unique_call 1316} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i44);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, $i43);
    call {:si_unique_call 1317} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i45);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p46 := $i2p.i64.ref($i45);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    call {:si_unique_call 1318} {:cexpr "__cil_tmp46"} boogie_si_record_i32($i47);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i47, $i42);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i38);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i48);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p10);
    call {:si_unique_call 1319} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i50);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 20);
    call {:si_unique_call 1320} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i51);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 0);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p0);
    call {:si_unique_call 1321} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i53);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i53, 336);
    call {:si_unique_call 1322} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i54);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p55 := $i2p.i64.ref($i54);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    call {:si_unique_call 1323} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i57);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 16);
    call {:si_unique_call 1324} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i58);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p59 := $i2p.i64.ref($i58);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p60, $mul.ref(4, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} writel(0, $p61);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p7);
    call {:si_unique_call 1326} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i62);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 12);
    call {:si_unique_call 1327} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i63);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p64 := $i2p.i64.ref($i63);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    call {:si_unique_call 1328} {:cexpr "__cil_tmp59"} boogie_si_record_i32($i65);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p7);
    call {:si_unique_call 1329} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i66);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i67 := $add.i64($i66, 8);
    call {:si_unique_call 1330} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i67);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p68 := $i2p.i64.ref($i67);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    call {:si_unique_call 1331} {:cexpr "__cil_tmp62"} boogie_si_record_i32($i69);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, $i65);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i152 := $p2i.ref.i64($p7);
    call {:si_unique_call 1385} {:cexpr "__cil_tmp131"} boogie_si_record_i64($i152);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i153 := $add.i64($i152, 12);
    call {:si_unique_call 1386} {:cexpr "__cil_tmp132"} boogie_si_record_i64($i153);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p154 := $i2p.i64.ref($i153);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    call {:si_unique_call 1387} {:cexpr "__cil_tmp133"} boogie_si_record_i32($i155);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i156 := $p2i.ref.i64($p7);
    call {:si_unique_call 1388} {:cexpr "__cil_tmp134"} boogie_si_record_i64($i156);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i157 := $add.i64($i156, 8);
    call {:si_unique_call 1389} {:cexpr "__cil_tmp135"} boogie_si_record_i64($i157);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p158 := $i2p.i64.ref($i157);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.0, $p158);
    call {:si_unique_call 1390} {:cexpr "__cil_tmp136"} boogie_si_record_i32($i159);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i160 := $sub.i32($i159, $i155);
    call {:si_unique_call 1391} {:cexpr "__cil_tmp137"} boogie_si_record_i32($i160);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i161 := $sext.i32.i64($i160);
    call {:si_unique_call 1392} {:cexpr "__cil_tmp138"} boogie_si_record_i64($i161);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i162 := $and.i64($i161, 4095);
    call {:si_unique_call 1393} {:cexpr "__cil_tmp139"} boogie_si_record_i64($i162);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i163 := $ule.i64($i162, 255);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i163 == 1;
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p164 := $bitcast.ref.ref($p0);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} uart_write_wakeup($p164);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb5:
    assume $i70 == 1;
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p0);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $i72 := uart_tx_stopped($p71);
    call {:si_unique_call 1333} {:cexpr "tmp___0"} boogie_si_record_i32($i72);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 0);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i73 == 1;
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p0);
    call {:si_unique_call 1334} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i74);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i75 := $add.i64($i74, 280);
    call {:si_unique_call 1335} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i75);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p76 := $i2p.i64.ref($i75);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p10);
    call {:si_unique_call 1336} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i78);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i79 := $add.i64($i78, 8);
    call {:si_unique_call 1337} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i79);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p80 := $i2p.i64.ref($i79);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.0, $p80);
    call {:si_unique_call 1338} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i81);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p10);
    call {:si_unique_call 1339} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i82);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, 16);
    call {:si_unique_call 1340} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i83);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p84 := $i2p.i64.ref($i83);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    call {:si_unique_call 1341} {:cexpr "__cil_tmp73"} boogie_si_record_i32($i85);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i86 := $zext.i32.i64($i85);
    call {:si_unique_call 1342} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i86);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} dma_sync_single_for_device($p77, $i81, $i86, 1);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p7);
    call {:si_unique_call 1344} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i87);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i88 := $add.i64($i87, 12);
    call {:si_unique_call 1345} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i88);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p89 := $i2p.i64.ref($i88);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    call {:si_unique_call 1346} {:cexpr "__cil_tmp78"} boogie_si_record_i32($i90);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i91 := $sub.i32(4096, $i90);
    call {:si_unique_call 1347} {:cexpr "__cil_tmp80"} boogie_si_record_i32($i91);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p7);
    call {:si_unique_call 1348} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i92);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i93 := $add.i64($i92, 8);
    call {:si_unique_call 1349} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i93);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p94 := $i2p.i64.ref($i93);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    call {:si_unique_call 1350} {:cexpr "__cil_tmp83"} boogie_si_record_i32($i95);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i95, $i91);
    call {:si_unique_call 1351} {:cexpr "__cil_tmp84"} boogie_si_record_i32($i96);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i96, 4095);
    call {:si_unique_call 1352} {:cexpr "n"} boogie_si_record_i32($i97);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i97, $i91);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := $i91;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p10);
    call {:si_unique_call 1353} {:cexpr "__cil_tmp85"} boogie_si_record_i64($i100);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i101 := $add.i64($i100, 20);
    call {:si_unique_call 1354} {:cexpr "__cil_tmp86"} boogie_si_record_i64($i101);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p102 := $i2p.i64.ref($i101);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, $i99);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i103 := $p2i.ref.i64($p7);
    call {:si_unique_call 1355} {:cexpr "__cil_tmp87"} boogie_si_record_i64($i103);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i104 := $add.i64($i103, 12);
    call {:si_unique_call 1356} {:cexpr "__cil_tmp88"} boogie_si_record_i64($i104);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p105 := $i2p.i64.ref($i104);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p105);
    call {:si_unique_call 1357} {:cexpr "__cil_tmp89"} boogie_si_record_i32($i106);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p10);
    call {:si_unique_call 1358} {:cexpr "__cil_tmp91"} boogie_si_record_i64($i107);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i108 := $add.i64($i107, 8);
    call {:si_unique_call 1359} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i108);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p109 := $i2p.i64.ref($i108);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i110 := $load.i64($M.0, $p109);
    call {:si_unique_call 1360} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i110);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i64.i32($i110);
    call {:si_unique_call 1361} {:cexpr "__cil_tmp94"} boogie_si_record_i32($i111);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i112 := $add.i32($i111, $i106);
    call {:si_unique_call 1362} {:cexpr "__cil_tmp95"} boogie_si_record_i32($i112);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p0);
    call {:si_unique_call 1363} {:cexpr "__cil_tmp96"} boogie_si_record_i64($i113);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i114 := $add.i64($i113, 336);
    call {:si_unique_call 1364} {:cexpr "__cil_tmp97"} boogie_si_record_i64($i114);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p115 := $i2p.i64.ref($i114);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p116);
    call {:si_unique_call 1365} {:cexpr "__cil_tmp99"} boogie_si_record_i64($i117);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i118 := $add.i64($i117, 16);
    call {:si_unique_call 1366} {:cexpr "__cil_tmp100"} boogie_si_record_i64($i118);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p119 := $i2p.i64.ref($i118);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p120, $mul.ref(32, 1));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} writel($i112, $p121);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p0);
    call {:si_unique_call 1368} {:cexpr "__cil_tmp105"} boogie_si_record_i64($i122);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i123 := $add.i64($i122, 336);
    call {:si_unique_call 1369} {:cexpr "__cil_tmp106"} boogie_si_record_i64($i123);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p124 := $i2p.i64.ref($i123);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p125);
    call {:si_unique_call 1370} {:cexpr "__cil_tmp108"} boogie_si_record_i64($i126);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i127 := $add.i64($i126, 16);
    call {:si_unique_call 1371} {:cexpr "__cil_tmp109"} boogie_si_record_i64($i127);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p128 := $i2p.i64.ref($i127);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p129, $mul.ref(36, 1));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} writel($i99, $p130);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($p0);
    call {:si_unique_call 1373} {:cexpr "__cil_tmp113"} boogie_si_record_i64($i131);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i132 := $add.i64($i131, 336);
    call {:si_unique_call 1374} {:cexpr "__cil_tmp114"} boogie_si_record_i64($i132);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p133 := $i2p.i64.ref($i132);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p134);
    call {:si_unique_call 1375} {:cexpr "__cil_tmp116"} boogie_si_record_i64($i135);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i136 := $add.i64($i135, 16);
    call {:si_unique_call 1376} {:cexpr "__cil_tmp117"} boogie_si_record_i64($i136);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p137 := $i2p.i64.ref($i136);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p138, $mul.ref(8, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} writel(16843009, $p139);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p0);
    call {:si_unique_call 1378} {:cexpr "__cil_tmp121"} boogie_si_record_i64($i140);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i141 := $add.i64($i140, 408);
    call {:si_unique_call 1379} {:cexpr "__cil_tmp122"} boogie_si_record_i64($i141);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p142 := $i2p.i64.ref($i141);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p142, 1);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i143 := $p2i.ref.i64($p0);
    call {:si_unique_call 1380} {:cexpr "__cil_tmp123"} boogie_si_record_i64($i143);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i144 := $add.i64($i143, 336);
    call {:si_unique_call 1381} {:cexpr "__cil_tmp124"} boogie_si_record_i64($i144);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p145 := $i2p.i64.ref($i144);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i147 := $p2i.ref.i64($p146);
    call {:si_unique_call 1382} {:cexpr "__cil_tmp126"} boogie_si_record_i64($i147);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i148 := $add.i64($i147, 16);
    call {:si_unique_call 1383} {:cexpr "__cil_tmp127"} boogie_si_record_i64($i148);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p149 := $i2p.i64.ref($i148);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p150, $mul.ref(4, 1));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} writel(1, $p151);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i98 == 1;
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i99 := $i97;
    goto $bb11;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dma_sync_single_for_device: ref;

axiom dma_sync_single_for_device == $sub.ref(0, 154448);

procedure dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i32;
  var $i10: i64;
  var $i11: i1;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} {:cexpr "dma_sync_single_for_device:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 1396} {:cexpr "dma_sync_single_for_device:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1397} {:cexpr "dma_sync_single_for_device:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $p4 := get_dma_ops($p0);
    call {:si_unique_call 1399} {:cexpr "dma_sync_single_for_device:arg:__cil_tmp9"} boogie_si_record_i32($i3);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} $i5 := valid_dma_direction($i3);
    call {:si_unique_call 1401} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 1402} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i7);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    call {:si_unique_call 1403} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i8);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} $i9 := __builtinx_expect.i64.i64($i8, 0);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    call {:si_unique_call 1405} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1407} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i12);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p4);
    call {:si_unique_call 1408} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i13);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 64);
    call {:si_unique_call 1409} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i14);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    call {:si_unique_call 1410} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i17);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, $i12);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call {:si_unique_call 1414} {:cexpr "dma_sync_single_for_device:arg:__cil_tmp21"} boogie_si_record_i32($i3);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} debug_dma_sync_single_for_device($p0, $i1, $i2, $i3);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p4);
    call {:si_unique_call 1411} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i19);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 64);
    call {:si_unique_call 1412} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i20);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    call {:si_unique_call 1413} devirtbounce.10($p22, $p0, $i1, $i2, $i3);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 1406} devirtbounce.9(0, .str, 115, 12);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_sync_single_for_device_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 155480);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1416} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i1);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1417} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, $i1);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 1418} {:cexpr "__cil_tmp6"} boogie_si_record_i32($i4);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    call {:si_unique_call 1419} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i5);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} $i6 := __builtinx_expect.i64.i64($i5, 0);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    call {:si_unique_call 1421} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1422} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i11);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    call {:si_unique_call 1423} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i12);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 976);
    call {:si_unique_call 1424} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i13);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    call {:si_unique_call 1425} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i16);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, $i11);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    call {:si_unique_call 1426} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i19);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 976);
    call {:si_unique_call 1427} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i20);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p10 := $p22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, dma_ops);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p10 := $p18;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, dma_ops);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p10 := $p9;
    goto $bb3;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 156512);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i5: i1;
  var $i6: i32;
  var $i4: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 2);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb9;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i2 := 1;
    goto $bb3;
}



const debug_dma_sync_single_for_device: ref;

axiom debug_dma_sync_single_for_device == $sub.ref(0, 157544);

procedure debug_dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation debug_dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} {:cexpr "debug_dma_sync_single_for_device:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1430} {:cexpr "debug_dma_sync_single_for_device:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1431} {:cexpr "debug_dma_sync_single_for_device:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 158576);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    return;
}



const dma_sync_single_for_cpu: ref;

axiom dma_sync_single_for_cpu == $sub.ref(0, 159608);

procedure dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i32;
  var $i10: i64;
  var $i11: i1;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} {:cexpr "dma_sync_single_for_cpu:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 1434} {:cexpr "dma_sync_single_for_cpu:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1435} {:cexpr "dma_sync_single_for_cpu:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $p4 := get_dma_ops($p0);
    call {:si_unique_call 1437} {:cexpr "dma_sync_single_for_cpu:arg:__cil_tmp9"} boogie_si_record_i32($i3);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} $i5 := valid_dma_direction($i3);
    call {:si_unique_call 1439} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 1440} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i7);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    call {:si_unique_call 1441} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i8);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} $i9 := __builtinx_expect.i64.i64($i8, 0);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    call {:si_unique_call 1443} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1445} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i12);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p4);
    call {:si_unique_call 1446} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i13);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 56);
    call {:si_unique_call 1447} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i14);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    call {:si_unique_call 1448} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i17);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, $i12);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call {:si_unique_call 1452} {:cexpr "dma_sync_single_for_cpu:arg:__cil_tmp21"} boogie_si_record_i32($i3);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} debug_dma_sync_single_for_cpu($p0, $i1, $i2, $i3);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p4);
    call {:si_unique_call 1449} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i19);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 56);
    call {:si_unique_call 1450} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i20);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    call {:si_unique_call 1451} devirtbounce.10($p22, $p0, $i1, $i2, $i3);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 1444} devirtbounce.9(0, .str, 103, 12);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_sync_single_for_cpu_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const tty_insert_flip_string: ref;

axiom tty_insert_flip_string == $sub.ref(0, 160640);

procedure tty_insert_flip_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} {:cexpr "tty_insert_flip_string:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} $i3 := tty_insert_flip_string_fixed_flag($p0, $p1, 0, $i2);
    call {:si_unique_call 1456} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tty_insert_flip_string_fixed_flag: ref;

axiom tty_insert_flip_string_fixed_flag == $sub.ref(0, 161672);

procedure tty_insert_flip_string_fixed_flag($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string_fixed_flag($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1457} {:cexpr "tty_insert_flip_string_fixed_flag:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 1458} {:cexpr "tty_insert_flip_string_fixed_flag:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1459} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1460} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const debug_dma_sync_single_for_cpu: ref;

axiom debug_dma_sync_single_for_cpu == $sub.ref(0, 162704);

procedure debug_dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation debug_dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} {:cexpr "debug_dma_sync_single_for_cpu:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1462} {:cexpr "debug_dma_sync_single_for_cpu:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1463} {:cexpr "debug_dma_sync_single_for_cpu:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    return;
}



const serial_hsu_runtime_suspend: ref;

axiom serial_hsu_runtime_suspend == $sub.ref(0, 163736);

procedure serial_hsu_runtime_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation serial_hsu_runtime_suspend($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const serial_hsu_runtime_resume: ref;

axiom serial_hsu_runtime_resume == $sub.ref(0, 164768);

procedure serial_hsu_runtime_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation serial_hsu_runtime_resume($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const serial_hsu_runtime_idle: ref;

axiom serial_hsu_runtime_idle == $sub.ref(0, 165800);

procedure serial_hsu_runtime_idle($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation serial_hsu_runtime_idle($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} $i1 := pm_schedule_suspend($p0, 500);
    call {:si_unique_call 1465} {:cexpr "err"} boogie_si_record_i32($i1);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 16);
    goto $bb3;
}



const pm_schedule_suspend: ref;

axiom pm_schedule_suspend == $sub.ref(0, 166832);

procedure pm_schedule_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pm_schedule_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1466} {:cexpr "pm_schedule_suspend:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1467} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1468} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const uart_get_baud_rate: ref;

axiom uart_get_baud_rate == $sub.ref(0, 167864);

procedure uart_get_baud_rate($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation uart_get_baud_rate($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1469} {:cexpr "uart_get_baud_rate:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1470} {:cexpr "uart_get_baud_rate:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1471} $i5 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1472} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i5);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const uart_get_divisor: ref;

axiom uart_get_divisor == $sub.ref(0, 168896);

procedure uart_get_divisor($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation uart_get_divisor($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1473} {:cexpr "uart_get_divisor:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1474} $i2 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1475} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i2);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const uart_update_timeout: ref;

axiom uart_update_timeout == $sub.ref(0, 169928);

procedure uart_update_timeout($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation uart_update_timeout($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} {:cexpr "uart_update_timeout:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1477} {:cexpr "uart_update_timeout:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_put: ref;

axiom pm_runtime_put == $sub.ref(0, 170960);

procedure pm_runtime_put($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pm_runtime_put($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} $i1 := __pm_runtime_idle($p0, 5);
    call {:si_unique_call 1479} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __pm_runtime_idle: ref;

axiom __pm_runtime_idle == $sub.ref(0, 171992);

procedure __pm_runtime_idle($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __pm_runtime_idle($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1480} {:cexpr "__pm_runtime_idle:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1481} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1482} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pm_runtime_get_sync: ref;

axiom pm_runtime_get_sync == $sub.ref(0, 173024);

procedure pm_runtime_get_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pm_runtime_get_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} $i1 := __pm_runtime_resume($p0, 4);
    call {:si_unique_call 1484} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 174056);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i32;
  var $i12: i64;
  var $i13: i1;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1486} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} $p5 := get_dma_ops($p0);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    call {:si_unique_call 1488} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i6);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} kmemcheck_mark_initialized($p1, $i6);
    call {:si_unique_call 1490} {:cexpr "dma_map_single_attrs:arg:__cil_tmp14"} boogie_si_record_i32($i3);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 1492} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 1493} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i9);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    call {:si_unique_call 1494} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i10);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} $i11 := __builtinx_expect.i64.i64($i10, 0);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    call {:si_unique_call 1496} {:cexpr "tmp___1"} boogie_si_record_i64($i12);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p1);
    call {:si_unique_call 1498} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i14);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} $i15 := __phys_addr($i14);
    call {:si_unique_call 1500} {:cexpr "tmp___2"} boogie_si_record_i64($i15);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p5);
    call {:si_unique_call 1501} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i16);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 24);
    call {:si_unique_call 1502} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i17);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i20 := $lshr.i64($i15, 12);
    call {:si_unique_call 1503} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i20);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($sub.i64(0, 24189255811072), $i20);
    call {:si_unique_call 1504} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i21);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p1);
    call {:si_unique_call 1505} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i23);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 4095);
    call {:si_unique_call 1506} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i24);
    call {:si_unique_call 1507} $i25 := devirtbounce.11($p19, $p0, $p22, $i24, $i2, $i3, $p4);
    call {:si_unique_call 1508} {:cexpr "addr"} boogie_si_record_i64($i25);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    call {:si_unique_call 1509} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i26);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} $i27 := __phys_addr($i26);
    call {:si_unique_call 1511} {:cexpr "tmp___3"} boogie_si_record_i64($i27);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i28 := $lshr.i64($i27, 12);
    call {:si_unique_call 1512} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i28);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($sub.i64(0, 24189255811072), $i28);
    call {:si_unique_call 1513} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i29);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p1);
    call {:si_unique_call 1514} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i31);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 4095);
    call {:si_unique_call 1515} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i32);
    call {:si_unique_call 1516} {:cexpr "dma_map_single_attrs:arg:__cil_tmp32"} boogie_si_record_i32($i3);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1(1);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} debug_dma_map_page($p0, $p30, $i32, $i2, $i3, $i25, $i33);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb1:
    assume $i13 == 1;
    call {:si_unique_call 1497} devirtbounce.9(0, .str, 19, 12);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const hsu_dma_start_rx_chan: ref;

axiom hsu_dma_start_rx_chan == $sub.ref(0, 175088);

procedure hsu_dma_start_rx_chan($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation hsu_dma_start_rx_chan($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    call {:si_unique_call 1518} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 20);
    call {:si_unique_call 1519} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i3);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 1520} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i5);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 16);
    call {:si_unique_call 1521} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i6);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(16, 1));
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} writel(32, $p9);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    call {:si_unique_call 1523} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i10);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 16);
    call {:si_unique_call 1524} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i11);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(20, 1));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} writel(4, $p14);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p1);
    call {:si_unique_call 1526} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i15);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 8);
    call {:si_unique_call 1527} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i16);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    call {:si_unique_call 1528} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i18);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i32($i18);
    call {:si_unique_call 1529} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i19);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p0);
    call {:si_unique_call 1530} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i20);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 16);
    call {:si_unique_call 1531} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i21);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(32, 1));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} writel($i19, $p24);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p1);
    call {:si_unique_call 1533} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i25);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 16);
    call {:si_unique_call 1534} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i26);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    call {:si_unique_call 1535} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i28);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    call {:si_unique_call 1536} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i29);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 16);
    call {:si_unique_call 1537} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i30);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref(36, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} writel($i28, $p33);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p0);
    call {:si_unique_call 1539} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i34);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 16);
    call {:si_unique_call 1540} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i35);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(8, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} writel(16843009, $p38);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p0);
    call {:si_unique_call 1542} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i39);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 16);
    call {:si_unique_call 1543} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i40);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i40);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(4, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} writel(3, $p43);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    return;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 176120);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 177152);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1546} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1547} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1548} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 178184);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1550} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 1551} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1552} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 1553} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    return;
}



const __pm_runtime_resume: ref;

axiom __pm_runtime_resume == $sub.ref(0, 179216);

procedure __pm_runtime_resume($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __pm_runtime_resume($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1554} {:cexpr "__pm_runtime_resume:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1555} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1556} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 180248);

procedure main();
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.10, $M.11, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.3, $M.9, $M.8, $M.2, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $CurrAddr, assertsPassed, $M.6;



implementation main()
{
  var $i0: i32;
  var $i1: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i64;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i43: i1;
  var $i44: i64;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i65: i32;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: ref;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;

  $bb0:
    call {:si_unique_call 1557} $initialize();
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} ldv_initialize();
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} $i0 := hsu_pci_init();
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 1562} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i2, $i3, $i4 := 0, 0, 0;
    goto $bb5;

  $bb5:
    call $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i43, $i44, $i45, $i46, $i47, $i57, $i58, $i59, $i60, $i40, $i41, $i42, $i2, $i3, $i4, $i65, $i66, $i67, $i68, $i69, vslice_dummy_var_26, vslice_dummy_var_27, vslice_dummy_var_28, vslice_dummy_var_29, vslice_dummy_var_30, vslice_dummy_var_31, vslice_dummy_var_32, vslice_dummy_var_33, vslice_dummy_var_34, vslice_dummy_var_35, vslice_dummy_var_36, vslice_dummy_var_37, vslice_dummy_var_38 := main_loop_$bb5($i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i43, $i44, $i45, $i46, $i47, $i57, $i58, $i59, $i60, $i40, $i41, $i42, $i2, $i3, $i4, $i65, $i66, $i67, $i68, $i69, vslice_dummy_var_26, vslice_dummy_var_27, vslice_dummy_var_28, vslice_dummy_var_29, vslice_dummy_var_30, vslice_dummy_var_31, vslice_dummy_var_32, vslice_dummy_var_33, vslice_dummy_var_34, vslice_dummy_var_35, vslice_dummy_var_36, vslice_dummy_var_37, vslice_dummy_var_38);
    goto $bb5_last;

  corral_source_split_2853:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1564} $i65 := __VERIFIER_nondet_int();
    call {:si_unique_call 1565} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i65);
    call {:si_unique_call 1566} {:cexpr "tmp___1"} boogie_si_record_i32($i65);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i66 == 1);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i2, 0);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i67 == 1);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i3, 0);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i68 == 1);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i4, 0);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i69 == 1);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} hsu_pci_exit();
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} ldv_check_final_state();
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    return;

  $bb155:
    assume $i69 == 1;
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1567} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1568} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1569} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i6 == 1);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i5, 1);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 2);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i8 == 1);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i5, 3);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i5, 4);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i10 == 1);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i5, 5);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i11 == 1);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i5, 6);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i12 == 1);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i5, 7);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i13 == 1);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i5, 8);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i14 == 1);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i5, 9);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i15 == 1);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i5, 10);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i16 == 1);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i5, 11);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i17 == 1);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i5, 12);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i18 == 1);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i5, 13);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i19 == 1);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i5, 14);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i20 == 1);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i5, 15);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i21 == 1);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i5, 16);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i22 == 1);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i5, 17);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i23 == 1);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i5, 18);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i24 == 1);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i5, 19);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i25 == 1);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i5, 20);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i26 == 1);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i5, 21);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i27 == 1);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i5, 22);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i28 == 1);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i5, 23);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i29 == 1);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i5, 24);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i30 == 1);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i5, 25);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i31 == 1);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i5, 26);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i32 == 1);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i5, 27);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i33 == 1);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i5, 28);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i34 == 1);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i2, $i3, $i4 := $i40, $i41, $i42;
    goto corral_source_split_3076_dummy;

  $bb91:
    assume $i34 == 1;
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} vslice_dummy_var_38 := port_irq($u2, $u5);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb88:
    assume $i33 == 1;
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} vslice_dummy_var_37 := dma_irq($u2, $u5);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb85:
    assume $i32 == 1;
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} vslice_dummy_var_36 := serial_hsu_resume($u11);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  $bb82:
    assume $i31 == 1;
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} vslice_dummy_var_35 := serial_hsu_suspend($u11, $u2);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  $bb79:
    assume $i30 == 1;
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i4, 0);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i60 := $i4;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i60;
    goto $bb105;

  $bb112:
    assume $i57 == 1;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} $i58 := serial_hsu_probe($u11, $u12);
    call {:si_unique_call 1608} {:cexpr "res_serial_hsu_probe_43"} boogie_si_record_i32($i58);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} ldv_check_return_value($i58);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $i60 := 0;
    goto $bb117;

  $bb114:
    assume $i59 == 1;
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb76:
    assume $i29 == 1;
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} vslice_dummy_var_34 := serial_hsu_runtime_idle($u10);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  $bb73:
    assume $i28 == 1;
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} vslice_dummy_var_33 := serial_hsu_runtime_resume($u10);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  $bb70:
    assume $i27 == 1;
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} vslice_dummy_var_32 := serial_hsu_runtime_suspend($u10);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  $bb67:
    assume $i26 == 1;
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} vslice_dummy_var_31 := serial_hsu_verify_port($u7, $u9);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  $bb64:
    assume $i25 == 1;
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} serial_hsu_config_port($u7, $u2);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  $bb61:
    assume $i24 == 1;
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} vslice_dummy_var_30 := serial_hsu_request_port($u7);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  $bb58:
    assume $i23 == 1;
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} serial_hsu_release_port($u7);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  $bb55:
    assume $i22 == 1;
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} vslice_dummy_var_29 := serial_hsu_type($u7);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  $bb52:
    assume $i21 == 1;
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} serial_hsu_pm($u7, $u2, $u2);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  $bb49:
    assume $i20 == 1;
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} serial_hsu_set_termios($u7, $u8, $u8);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  $bb46:
    assume $i19 == 1;
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} serial_hsu_shutdown($u7);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i18 == 1;
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} vslice_dummy_var_28 := serial_hsu_startup($u7);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i17 == 1;
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} serial_hsu_break_ctl($u7, $u2);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  $bb37:
    assume $i16 == 1;
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} serial_hsu_enable_ms($u7);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  $bb34:
    assume $i15 == 1;
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} serial_hsu_stop_rx($u7);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  $bb31:
    assume $i14 == 1;
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} serial_hsu_start_tx($u7);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  $bb28:
    assume $i13 == 1;
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} serial_hsu_stop_tx($u7);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  $bb25:
    assume $i12 == 1;
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} vslice_dummy_var_27 := serial_hsu_get_mctrl($u7);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i11 == 1;
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} serial_hsu_set_mctrl($u7, $u2);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  $bb19:
    assume $i10 == 1;
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} vslice_dummy_var_26 := serial_hsu_tx_empty($u7);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i9 == 1;
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i3, $i4;
    goto $bb105;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i3, 0);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i47 := $i3;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i2, $i47, $i4;
    goto $bb105;

  $bb106:
    assume $i43 == 1;
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} $i44 := dma_show_regs($u4, $u5, $u0, $u6);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    call {:si_unique_call 1604} {:cexpr "res_dma_show_regs_3"} boogie_si_record_i64($i44);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i64.i32($i44);
    call {:si_unique_call 1605} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i45);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} ldv_check_return_value($i45);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i46 := $slt.i64($i44, 0);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb111;

  $bb108:
    assume $i46 == 1;
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    goto $bb102;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i6 == 1;
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i2, 0);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i39 := $i2;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i39, $i3, $i4;
    goto $bb105;

  $bb98:
    assume $i35 == 1;
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} $i36 := port_show_regs($u4, $u5, $u0, $u6);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    call {:si_unique_call 1599} {:cexpr "res_port_show_regs_2"} boogie_si_record_i64($i36);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i64.i32($i36);
    call {:si_unique_call 1600} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i37);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} ldv_check_return_value($i37);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i38 := $slt.i64($i36, 0);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb104;

  $bb100:
    assume $i38 == 1;
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    goto $bb102;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb153:
    assume $i68 == 1;
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb151:
    assume $i67 == 1;
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb149:
    assume $i66 == 1;
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  corral_source_split_3076_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2853;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 181280);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    return;
}



const hsu_pci_init: ref;

axiom hsu_pci_init == $sub.ref(0, 182312);

procedure hsu_pci_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.3, assertsPassed, $CurrAddr;



implementation hsu_pci_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} hsu_global_init();
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} $i0 := uart_register_driver(serial_hsu_reg);
    call {:si_unique_call 1612} {:cexpr "ret"} boogie_si_record_i32($i0);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} $i3 := __pci_register_driver(hsu_pci_driver, __this_module, .str.1);
    call {:si_unique_call 1614} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i2 := $i0;
    goto $bb3;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const ldv_check_return_value: ref;

axiom ldv_check_return_value == $sub.ref(0, 183344);

procedure ldv_check_return_value($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} {:cexpr "ldv_check_return_value:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    return;
}



const hsu_pci_exit: ref;

axiom hsu_pci_exit == $sub.ref(0, 184376);

procedure hsu_pci_exit();
  free requires assertsPassed;



implementation hsu_pci_exit()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} pci_unregister_driver(hsu_pci_driver);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} uart_unregister_driver(serial_hsu_reg);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p0 := $M.3;
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} hsu_debugfs_remove($p0);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p1 := $M.3;
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} kfree($p2);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 185408);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 186440);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    return;
}



const uart_unregister_driver: ref;

axiom uart_unregister_driver == $sub.ref(0, 187472);

procedure uart_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation uart_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    return;
}



const hsu_debugfs_remove: ref;

axiom hsu_debugfs_remove == $sub.ref(0, 188504);

procedure hsu_debugfs_remove($p0: ref);
  free requires assertsPassed;



implementation hsu_debugfs_remove($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1620} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1621} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 1520);
    call {:si_unique_call 1622} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    call {:si_unique_call 1623} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, $i1);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 1624} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i8);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 1520);
    call {:si_unique_call 1625} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i9);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} debugfs_remove_recursive($p11);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const debugfs_remove_recursive: ref;

axiom debugfs_remove_recursive == $sub.ref(0, 189536);

procedure debugfs_remove_recursive($p0: ref);
  free requires assertsPassed;



implementation debugfs_remove_recursive($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    return;
}



const hsu_global_init: ref;

axiom hsu_global_init == $sub.ref(0, 190568);

procedure hsu_global_init();
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.3, assertsPassed, $CurrAddr;



implementation hsu_global_init()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $i75: i64;
  var $i76: i64;
  var $p77: ref;
  var $i78: i64;
  var $i79: i64;
  var $p80: ref;
  var $i81: i64;
  var $i82: i64;
  var $p83: ref;
  var $i84: i64;
  var $i85: i64;
  var $p86: ref;
  var $i87: i64;
  var $i88: i64;
  var $i89: i64;
  var $i90: i64;
  var $p91: ref;
  var $p93: ref;
  var $i94: i64;
  var $i95: i64;
  var $i96: i64;
  var $i97: i64;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $i103: i64;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $i108: i64;
  var $i109: i64;
  var $p110: ref;
  var $i111: i64;
  var $i112: i64;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $i116: i64;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i64;
  var $i121: i64;
  var $p122: ref;
  var $i123: i64;
  var $i124: i64;
  var $p125: ref;
  var $i126: i64;
  var $i127: i64;
  var $i128: i64;
  var $i129: i64;
  var $p130: ref;
  var $p132: ref;
  var $i133: i64;
  var $i134: i64;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i141: i64;
  var $i142: i64;
  var $p143: ref;
  var $i144: i64;
  var $i145: i64;
  var $i146: i64;
  var $p147: ref;
  var $i148: i64;
  var $p149: ref;
  var $p150: ref;
  var $i151: i64;
  var $i152: i64;
  var $p153: ref;
  var $i154: i64;
  var $i155: i64;
  var $p156: ref;
  var $i157: i64;
  var $i158: i64;
  var $i159: i64;
  var $i160: i64;
  var $p161: ref;
  var $p163: ref;
  var $i164: i64;
  var $i165: i64;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i64;
  var $p171: ref;
  var $p172: ref;
  var $i173: i64;
  var $i174: i64;
  var $p175: ref;
  var $i176: i64;
  var $i177: i64;
  var $p178: ref;
  var $i179: i64;
  var $i180: i64;
  var $i181: i64;
  var $i182: i64;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $i187: i64;
  var $i188: i64;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i64;
  var $p194: ref;
  var $p195: ref;
  var $i196: i64;
  var $i197: i64;
  var $p198: ref;
  var $i199: i64;
  var $i200: i64;
  var $p201: ref;
  var $i202: i64;
  var $i203: i64;
  var $i204: i64;
  var $i205: i64;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $i210: i64;
  var $i211: i64;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $i216: i64;
  var $p217: ref;
  var $p218: ref;
  var $i219: i64;
  var $i220: i64;
  var $p221: ref;
  var $i222: i64;
  var $i223: i64;
  var $p224: ref;
  var $i225: i64;
  var $i226: i64;
  var $i227: i64;
  var $i228: i64;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $i233: i64;
  var $i234: i64;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $i239: i64;
  var $p240: ref;
  var $p241: ref;
  var $i242: i64;
  var $i243: i64;
  var $p244: ref;
  var $i245: i64;
  var $i246: i64;
  var $p247: ref;
  var $i248: i64;
  var $i249: i64;
  var $i250: i64;
  var $i251: i64;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $i256: i64;
  var $i257: i64;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $i262: i64;
  var $i263: i64;
  var $p264: ref;
  var $i265: i64;
  var $i266: i64;
  var $p267: ref;
  var $i268: i64;
  var $i269: i64;
  var $i270: i64;
  var $i271: i64;
  var $p272: ref;
  var $i273: i64;
  var $i274: i64;
  var $i275: i64;
  var $p276: ref;
  var $i277: i64;
  var $i278: i64;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $i283: i64;
  var $i284: i64;
  var $p285: ref;
  var $p286: ref;
  var $i288: i64;
  var $i289: i64;
  var $p290: ref;
  var $i291: i64;
  var $i292: i64;
  var $p293: ref;
  var $i294: i64;
  var $i295: i64;
  var $p296: ref;
  var $i297: i64;
  var $i298: i64;
  var $p299: ref;
  var $i300: i64;
  var $i301: i64;
  var $p302: ref;
  var $i303: i64;
  var $i304: i64;
  var $p305: ref;
  var $i306: i64;
  var $i307: i64;
  var $i308: i64;
  var $i309: i64;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $i314: i64;
  var $i315: i64;
  var $i316: i64;
  var $i317: i64;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $i322: i64;
  var $i323: i64;
  var $p324: ref;
  var $i325: i32;
  var $i326: i32;
  var $i327: i32;
  var $i328: i1;
  var $i329: i64;
  var $i330: i64;
  var $p331: ref;
  var $i332: i64;
  var $i333: i64;
  var $p334: ref;
  var $i335: i64;
  var $p336: ref;
  var $i337: i64;
  var $i338: i64;
  var $p339: ref;
  var $i340: i64;
  var $i341: i64;
  var $p342: ref;
  var $i343: i64;
  var $i344: i64;
  var $i345: i64;
  var $i346: i64;
  var $p347: ref;
  var $i348: i64;
  var $i349: i64;
  var $i350: i64;
  var $p351: ref;
  var $i352: i64;
  var $i353: i64;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $i358: i64;
  var $i359: i64;
  var $p360: ref;
  var $p361: ref;
  var $i363: i64;
  var $i364: i64;
  var $p365: ref;
  var $i366: i64;
  var $i367: i64;
  var $p368: ref;
  var $i369: i64;
  var $i370: i64;
  var $p371: ref;
  var $i372: i64;
  var $i373: i64;
  var $p374: ref;
  var $i375: i64;
  var $i376: i64;
  var $p377: ref;
  var $i378: i64;
  var $i379: i64;
  var $p380: ref;
  var $i381: i64;
  var $i382: i64;
  var $i383: i64;
  var $i384: i64;
  var $p385: ref;
  var $p386: ref;
  var $p387: ref;
  var $p388: ref;
  var $i389: i64;
  var $i390: i64;
  var $i391: i64;
  var $i392: i64;
  var $p393: ref;
  var $p394: ref;
  var $p395: ref;
  var $p396: ref;
  var $i397: i64;
  var $i398: i64;
  var $p399: ref;
  var $i400: i32;
  var $i401: i32;
  var $i402: i32;
  var $i403: i1;
  var $i404: i64;
  var $i405: i64;
  var $p406: ref;
  var $i407: i64;
  var $i408: i64;
  var $p409: ref;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} $p0 := kzalloc(1528, 208);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1628} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i2);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    call {:si_unique_call 1629} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i3);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $i2);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    call {:si_unique_call 1630} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i5);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 8);
    call {:si_unique_call 1631} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i6);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, 4288839680);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p1);
    call {:si_unique_call 1632} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i8);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 16);
    call {:si_unique_call 1633} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i9);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, 4096);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p1);
    call {:si_unique_call 1634} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i11);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 8);
    call {:si_unique_call 1635} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i12);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    call {:si_unique_call 1636} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i14);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p1);
    call {:si_unique_call 1637} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i15);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 16);
    call {:si_unique_call 1638} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i16);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    call {:si_unique_call 1639} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i18);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} $p19 := __request_region(iomem_resource, $i14, $i18, .str.2, 0);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1641} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i20);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p19);
    call {:si_unique_call 1642} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i21);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, $i20);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p1);
    call {:si_unique_call 1644} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i24);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 8);
    call {:si_unique_call 1645} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i25);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    call {:si_unique_call 1646} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i27);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p1);
    call {:si_unique_call 1647} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i28);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 16);
    call {:si_unique_call 1648} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i29);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    call {:si_unique_call 1649} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i31);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} $p32 := ioremap_nocache($i27, $i31);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p1);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p32);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1651} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i34);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p1);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    call {:si_unique_call 1652} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i37);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, $i34);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p1);
    call {:si_unique_call 1662} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i40);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 32);
    call {:si_unique_call 1663} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i41);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    call {:si_unique_call 1664} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i44);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 252);
    call {:si_unique_call 1665} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i45);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $p46 := $i2p.i64.ref($i45);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 95);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p43);
    call {:si_unique_call 1666} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i47);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 154);
    call {:si_unique_call 1667} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i48);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i48);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, 2);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p43);
    call {:si_unique_call 1668} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i50);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 272);
    call {:si_unique_call 1669} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i51);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p1);
    call {:si_unique_call 1670} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i52);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 8);
    call {:si_unique_call 1671} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i53);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i53);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    call {:si_unique_call 1672} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i55);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 128);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i51);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p57, $i56);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p43);
    call {:si_unique_call 1673} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i58);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 80);
    call {:si_unique_call 1674} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i59);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p1);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(128, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p63 := $i2p.i64.ref($i59);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p63, $p62);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p43);
    call {:si_unique_call 1675} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i64);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i65 := $add.i64($i64, 312);
    call {:si_unique_call 1676} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i65);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p66 := $i2p.i64.ref($i65);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} vslice_dummy_var_41 := sprintf.ref.ref.i32($p67, .str.5, 0);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p43);
    call {:si_unique_call 1678} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i69);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, 148);
    call {:si_unique_call 1679} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i70);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p71 := $i2p.i64.ref($i70);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, 64);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p43);
    call {:si_unique_call 1680} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i72);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i72, 256);
    call {:si_unique_call 1681} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i73);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p74 := $i2p.i64.ref($i73);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, serial_hsu_pops);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p43);
    call {:si_unique_call 1682} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i75);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i76 := $add.i64($i75, 268);
    call {:si_unique_call 1683} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i76);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p77 := $i2p.i64.ref($i76);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, 0);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p43);
    call {:si_unique_call 1684} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i78);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i79 := $add.i64($i78, 240);
    call {:si_unique_call 1685} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i79);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p80 := $i2p.i64.ref($i79);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $sub.i32(0, 2147483648));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p43);
    call {:si_unique_call 1686} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i81);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i81, 144);
    call {:si_unique_call 1687} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i82);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p83 := $i2p.i64.ref($i82);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, 44236800);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p43);
    call {:si_unique_call 1688} {:cexpr "__cil_tmp83"} boogie_si_record_i64($i84);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i85 := $add.i64($i84, 404);
    call {:si_unique_call 1689} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i85);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p86 := $i2p.i64.ref($i85);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, 0);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p43);
    call {:si_unique_call 1690} {:cexpr "__cil_tmp85"} boogie_si_record_i64($i87);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i88 := $add.i64($i87, 336);
    call {:si_unique_call 1691} {:cexpr "__cil_tmp86"} boogie_si_record_i64($i88);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p1);
    call {:si_unique_call 1692} {:cexpr "__cil_tmp89"} boogie_si_record_i64($i89);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i90 := $add.i64($i89, 1280);
    call {:si_unique_call 1693} {:cexpr "__cil_tmp90"} boogie_si_record_i64($i90);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p91 := $i2p.i64.ref($i90);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p93 := $i2p.i64.ref($i88);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p93, $p91);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p43);
    call {:si_unique_call 1694} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i94);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i95 := $add.i64($i94, 344);
    call {:si_unique_call 1695} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i95);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p1);
    call {:si_unique_call 1696} {:cexpr "__cil_tmp98"} boogie_si_record_i64($i96);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i97 := $add.i64($i96, 1280);
    call {:si_unique_call 1697} {:cexpr "__cil_tmp99"} boogie_si_record_i64($i97);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p98 := $i2p.i64.ref($i97);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p99, $mul.ref(1, 24));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p101 := $i2p.i64.ref($i95);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p101, $p100);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, serial_hsu_ports, $p42);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p43);
    call {:si_unique_call 1698} {:cexpr "__cil_tmp104"} boogie_si_record_i64($i102);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i103 := $add.i64($i102, 324);
    call {:si_unique_call 1699} {:cexpr "__cil_tmp105"} boogie_si_record_i64($i103);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p104 := $i2p.i64.ref($i103);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p104, 0);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i105 := $M.9;
    call {:si_unique_call 1700} {:cexpr "__cil_tmp107"} boogie_si_record_i32($i105);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i105, 1);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i107 == 1);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p43);
    call {:si_unique_call 1703} {:cexpr "__cil_tmp111"} boogie_si_record_i64($i111);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i112 := $add.i64($i111, 400);
    call {:si_unique_call 1704} {:cexpr "__cil_tmp112"} boogie_si_record_i64($i112);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p113 := $i2p.i64.ref($i112);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, 0);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p43, $mul.ref(1, 416));
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i262 := $p2i.ref.i64($p114);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i263 := $add.i64($i262, 252);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $p264 := $i2p.i64.ref($i263);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p264, 95);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i265 := $p2i.ref.i64($p114);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i266 := $add.i64($i265, 154);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p267 := $i2p.i64.ref($i266);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p267, 2);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i268 := $p2i.ref.i64($p114);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i269 := $add.i64($i268, 272);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i270 := $p2i.ref.i64($p1);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i271 := $add.i64($i270, 8);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p272 := $i2p.i64.ref($i271);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i273 := $load.i64($M.0, $p272);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i274 := $add.i64($i273, 128);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i275 := $add.i64($i274, 128);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p276 := $i2p.i64.ref($i269);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p276, $i275);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i277 := $p2i.ref.i64($p114);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i278 := $add.i64($i277, 80);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p279 := $bitcast.ref.ref($p1);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.0, $p279);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($p280, $mul.ref(256, 1));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p282 := $i2p.i64.ref($i278);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p282, $p281);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i283 := $p2i.ref.i64($p114);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i284 := $add.i64($i283, 312);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p285 := $i2p.i64.ref($i284);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p286 := $bitcast.ref.ref($p285);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} vslice_dummy_var_42 := sprintf.ref.ref.i32($p286, .str.5, 1);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i288 := $p2i.ref.i64($p114);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i289 := $add.i64($i288, 148);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p290 := $i2p.i64.ref($i289);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p290, 64);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i291 := $p2i.ref.i64($p114);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i292 := $add.i64($i291, 256);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p293 := $i2p.i64.ref($i292);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p293, serial_hsu_pops);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i294 := $p2i.ref.i64($p114);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i295 := $add.i64($i294, 268);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p296 := $i2p.i64.ref($i295);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p296, 1);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i297 := $p2i.ref.i64($p114);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i298 := $add.i64($i297, 240);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p299 := $i2p.i64.ref($i298);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p299, $sub.i32(0, 2147483648));
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i300 := $p2i.ref.i64($p114);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i301 := $add.i64($i300, 144);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p302 := $i2p.i64.ref($i301);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p302, 44236800);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i303 := $p2i.ref.i64($p114);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i304 := $add.i64($i303, 404);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p305 := $i2p.i64.ref($i304);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p305, 0);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i306 := $p2i.ref.i64($p114);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i307 := $add.i64($i306, 336);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i308 := $p2i.ref.i64($p1);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i309 := $add.i64($i308, 1280);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $p310 := $i2p.i64.ref($i309);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p311 := $bitcast.ref.ref($p310);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($p311, $mul.ref(2, 24));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p313 := $i2p.i64.ref($i307);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p313, $p312);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i314 := $p2i.ref.i64($p114);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i315 := $add.i64($i314, 344);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i316 := $p2i.ref.i64($p1);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i317 := $add.i64($i316, 1280);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p318 := $i2p.i64.ref($i317);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p319 := $bitcast.ref.ref($p318);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($p319, $mul.ref(3, 24));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p321 := $i2p.i64.ref($i315);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p321, $p320);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $i2p.i64.ref($add.i64($p2i.ref.i64(serial_hsu_ports), 8)), $p114);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i322 := $p2i.ref.i64($p114);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i323 := $add.i64($i322, 324);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p324 := $i2p.i64.ref($i323);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p324, 1);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i325 := $M.9;
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i326 := $ashr.i32($i325, 1);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i327 := $and.i32($i326, 1);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i328 := $ne.i32($i327, 0);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i328} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i328 == 1);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i329 := $p2i.ref.i64($p114);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i330 := $add.i64($i329, 400);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p331 := $i2p.i64.ref($i330);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p331, 0);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    $i335 := $add.i64(1, 1);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($p43, $mul.ref($i335, 416));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i337 := $p2i.ref.i64($p336);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i338 := $add.i64($i337, 252);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $p339 := $i2p.i64.ref($i338);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p339, 95);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i340 := $p2i.ref.i64($p336);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i341 := $add.i64($i340, 154);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p342 := $i2p.i64.ref($i341);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p342, 2);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i343 := $p2i.ref.i64($p336);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i344 := $add.i64($i343, 272);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i345 := $p2i.ref.i64($p1);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i346 := $add.i64($i345, 8);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p347 := $i2p.i64.ref($i346);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i348 := $load.i64($M.0, $p347);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i349 := $add.i64($i348, 256);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i350 := $add.i64($i349, 128);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p351 := $i2p.i64.ref($i344);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p351, $i350);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i352 := $p2i.ref.i64($p336);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i353 := $add.i64($i352, 80);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p354 := $bitcast.ref.ref($p1);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p355 := $load.ref($M.0, $p354);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($p355, $mul.ref(384, 1));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p357 := $i2p.i64.ref($i353);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p357, $p356);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i358 := $p2i.ref.i64($p336);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i359 := $add.i64($i358, 312);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p360 := $i2p.i64.ref($i359);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p361 := $bitcast.ref.ref($p360);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} vslice_dummy_var_44 := sprintf.ref.ref.i32($p361, .str.5, 2);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i363 := $p2i.ref.i64($p336);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i364 := $add.i64($i363, 148);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p365 := $i2p.i64.ref($i364);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p365, 64);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i366 := $p2i.ref.i64($p336);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i367 := $add.i64($i366, 256);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p368 := $i2p.i64.ref($i367);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p368, serial_hsu_pops);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i369 := $p2i.ref.i64($p336);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i370 := $add.i64($i369, 268);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p371 := $i2p.i64.ref($i370);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p371, 2);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i372 := $p2i.ref.i64($p336);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i373 := $add.i64($i372, 240);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p374 := $i2p.i64.ref($i373);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p374, $sub.i32(0, 2147483648));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i375 := $p2i.ref.i64($p336);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i376 := $add.i64($i375, 144);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p377 := $i2p.i64.ref($i376);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p377, 44236800);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i378 := $p2i.ref.i64($p336);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i379 := $add.i64($i378, 404);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p380 := $i2p.i64.ref($i379);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p380, 0);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i381 := $p2i.ref.i64($p336);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i382 := $add.i64($i381, 336);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i383 := $p2i.ref.i64($p1);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i384 := $add.i64($i383, 1280);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p385 := $i2p.i64.ref($i384);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p386 := $bitcast.ref.ref($p385);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($p386, $mul.ref(4, 24));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p388 := $i2p.i64.ref($i382);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p388, $p387);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i389 := $p2i.ref.i64($p336);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i390 := $add.i64($i389, 344);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i391 := $p2i.ref.i64($p1);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i392 := $add.i64($i391, 1280);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p393 := $i2p.i64.ref($i392);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p394 := $bitcast.ref.ref($p393);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($p394, $mul.ref(5, 24));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p396 := $i2p.i64.ref($i390);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p396, $p395);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $i2p.i64.ref($add.i64($p2i.ref.i64(serial_hsu_ports), 16)), $p336);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i397 := $p2i.ref.i64($p336);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i398 := $add.i64($i397, 324);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p399 := $i2p.i64.ref($i398);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p399, 2);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i400 := $M.9;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i401 := $ashr.i32($i400, 2);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i402 := $and.i32($i401, 1);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i403 := $ne.i32($i402, 0);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    assume {:branchcond $i403} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i403 == 1);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i404 := $p2i.ref.i64($p336);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i405 := $add.i64($i404, 400);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $p406 := $i2p.i64.ref($i405);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p406, 0);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p1);
    call {:si_unique_call 1706} {:cexpr "__cil_tmp113"} boogie_si_record_i64($i115);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i116 := $add.i64($i115, 1280);
    call {:si_unique_call 1707} {:cexpr "__cil_tmp114"} boogie_si_record_i64($i116);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p117 := $i2p.i64.ref($i116);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p117);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p119, 0);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb21, $bb22;

  $bb22:
    assume !(0 == 1);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i123 := $p2i.ref.i64($p118);
    call {:si_unique_call 1710} {:cexpr "__cil_tmp118"} boogie_si_record_i64($i123);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i124 := $add.i64($i123, 4);
    call {:si_unique_call 1711} {:cexpr "__cil_tmp119"} boogie_si_record_i64($i124);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p125 := $i2p.i64.ref($i124);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p125, 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p118);
    call {:si_unique_call 1712} {:cexpr "__cil_tmp120"} boogie_si_record_i64($i126);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i127 := $add.i64($i126, 8);
    call {:si_unique_call 1713} {:cexpr "__cil_tmp121"} boogie_si_record_i64($i127);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p1);
    call {:si_unique_call 1714} {:cexpr "__cil_tmp124"} boogie_si_record_i64($i128);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i129 := $add.i64($i128, 32);
    call {:si_unique_call 1715} {:cexpr "__cil_tmp125"} boogie_si_record_i64($i129);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p130 := $i2p.i64.ref($i129);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p132 := $i2p.i64.ref($i127);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p132, $p130);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i133 := $p2i.ref.i64($p118);
    call {:si_unique_call 1716} {:cexpr "__cil_tmp128"} boogie_si_record_i64($i133);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i134 := $add.i64($i133, 16);
    call {:si_unique_call 1717} {:cexpr "__cil_tmp129"} boogie_si_record_i64($i134);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p1);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($p136, $mul.ref(1280, 1));
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p138 := $i2p.i64.ref($i134);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p138, $p137);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p118, $mul.ref(1, 24));
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p139);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p150, 1);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb26, $bb27;

  $bb27:
    assume !(1 == 1);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i151 := $p2i.ref.i64($p139);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i152 := $add.i64($i151, 4);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p153 := $i2p.i64.ref($i152);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p153, 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i157 := $p2i.ref.i64($p139);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i158 := $add.i64($i157, 8);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i159 := $p2i.ref.i64($p1);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i160 := $add.i64($i159, 32);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p161 := $i2p.i64.ref($i160);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $p163 := $i2p.i64.ref($i158);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p163, $p161);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i164 := $p2i.ref.i64($p139);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i165 := $add.i64($i164, 16);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p166 := $bitcast.ref.ref($p1);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.0, $p166);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($p167, $mul.ref(1344, 1));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p169 := $i2p.i64.ref($i165);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p169, $p168);
    $i170 := $add.i64(1, 1);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($p118, $mul.ref($i170, 24));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p172 := $bitcast.ref.ref($p171);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p172, 2);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb30, $bb31;

  $bb31:
    assume !(0 == 1);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i173 := $p2i.ref.i64($p171);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i174 := $add.i64($i173, 4);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $p175 := $i2p.i64.ref($i174);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p175, 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i179 := $p2i.ref.i64($p171);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i180 := $add.i64($i179, 8);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i181 := $p2i.ref.i64($p1);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i182 := $add.i64($i181, 32);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p183 := $i2p.i64.ref($i182);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p183);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($p184, $mul.ref(1, 416));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $p186 := $i2p.i64.ref($i180);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p186, $p185);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i187 := $p2i.ref.i64($p171);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i188 := $add.i64($i187, 16);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p189 := $bitcast.ref.ref($p1);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($p190, $mul.ref(1408, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p192 := $i2p.i64.ref($i188);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p192, $p191);
    $i193 := $add.i64($i170, 1);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($p118, $mul.ref($i193, 24));
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p195 := $bitcast.ref.ref($p194);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p195, 3);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb34, $bb35;

  $bb35:
    assume !(1 == 1);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i196 := $p2i.ref.i64($p194);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i197 := $add.i64($i196, 4);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p198 := $i2p.i64.ref($i197);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p198, 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i202 := $p2i.ref.i64($p194);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i203 := $add.i64($i202, 8);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i204 := $p2i.ref.i64($p1);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i205 := $add.i64($i204, 32);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p206 := $i2p.i64.ref($i205);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p207 := $bitcast.ref.ref($p206);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($p207, $mul.ref(1, 416));
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p209 := $i2p.i64.ref($i203);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p209, $p208);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i210 := $p2i.ref.i64($p194);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i211 := $add.i64($i210, 16);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p212 := $bitcast.ref.ref($p1);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p213 := $load.ref($M.0, $p212);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($p213, $mul.ref(1472, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p215 := $i2p.i64.ref($i211);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p215, $p214);
    $i216 := $add.i64($i193, 1);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($p118, $mul.ref($i216, 24));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p218 := $bitcast.ref.ref($p217);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p218, 4);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb38, $bb39;

  $bb39:
    assume !(0 == 1);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i219 := $p2i.ref.i64($p217);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i220 := $add.i64($i219, 4);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p221 := $i2p.i64.ref($i220);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p221, 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i225 := $p2i.ref.i64($p217);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i226 := $add.i64($i225, 8);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i227 := $p2i.ref.i64($p1);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i228 := $add.i64($i227, 32);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p229 := $i2p.i64.ref($i228);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p230 := $bitcast.ref.ref($p229);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($p230, $mul.ref(2, 416));
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p232 := $i2p.i64.ref($i226);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p232, $p231);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i233 := $p2i.ref.i64($p217);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i234 := $add.i64($i233, 16);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p235 := $bitcast.ref.ref($p1);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p236 := $load.ref($M.0, $p235);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($p236, $mul.ref(1536, 1));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p238 := $i2p.i64.ref($i234);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p238, $p237);
    $i239 := $add.i64($i216, 1);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($p118, $mul.ref($i239, 24));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p241 := $bitcast.ref.ref($p240);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p241, 5);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb42, $bb43;

  $bb43:
    assume !(1 == 1);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i242 := $p2i.ref.i64($p240);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i243 := $add.i64($i242, 4);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p244 := $i2p.i64.ref($i243);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p244, 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i248 := $p2i.ref.i64($p240);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i249 := $add.i64($i248, 8);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i250 := $p2i.ref.i64($p1);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i251 := $add.i64($i250, 32);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p252 := $i2p.i64.ref($i251);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $p253 := $bitcast.ref.ref($p252);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($p253, $mul.ref(2, 416));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p255 := $i2p.i64.ref($i249);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p255, $p254);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i256 := $p2i.ref.i64($p240);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i257 := $add.i64($i256, 16);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p258 := $bitcast.ref.ref($p1);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p259 := $load.ref($M.0, $p258);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($p259, $mul.ref(1600, 1));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p261 := $i2p.i64.ref($i257);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p261, $p260);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $M.3 := $p0;
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} vslice_dummy_var_43 := hsu_debugfs_init($p1);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb42:
    assume 1 == 1;
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i245 := $p2i.ref.i64($p240);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i246 := $add.i64($i245, 4);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p247 := $i2p.i64.ref($i246);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p247, 2);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb38:
    assume 0 == 1;
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i222 := $p2i.ref.i64($p217);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i223 := $add.i64($i222, 4);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p224 := $i2p.i64.ref($i223);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p224, 2);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb34:
    assume 1 == 1;
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i199 := $p2i.ref.i64($p194);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i200 := $add.i64($i199, 4);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p201 := $i2p.i64.ref($i200);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p201, 2);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb30:
    assume 0 == 1;
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i176 := $p2i.ref.i64($p171);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i177 := $add.i64($i176, 4);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p178 := $i2p.i64.ref($i177);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p178, 2);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb26:
    assume 1 == 1;
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i154 := $p2i.ref.i64($p139);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i155 := $add.i64($i154, 4);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p156 := $i2p.i64.ref($i155);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p156, 2);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb21:
    assume 0 == 1;
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p118);
    call {:si_unique_call 1708} {:cexpr "__cil_tmp116"} boogie_si_record_i64($i120);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i121 := $add.i64($i120, 4);
    call {:si_unique_call 1709} {:cexpr "__cil_tmp117"} boogie_si_record_i64($i121);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p122 := $i2p.i64.ref($i121);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p122, 2);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb49:
    assume $i403 == 1;
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i407 := $p2i.ref.i64($p336);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i408 := $add.i64($i407, 400);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $p409 := $i2p.i64.ref($i408);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p409, 1);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb45:
    assume $i328 == 1;
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i332 := $p2i.ref.i64($p114);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i333 := $add.i64($i332, 400);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p334 := $i2p.i64.ref($i333);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p334, 1);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb14:
    assume $i107 == 1;
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p43);
    call {:si_unique_call 1701} {:cexpr "__cil_tmp109"} boogie_si_record_i64($i108);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i109 := $add.i64($i108, 400);
    call {:si_unique_call 1702} {:cexpr "__cil_tmp110"} boogie_si_record_i64($i109);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p110 := $i2p.i64.ref($i109);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p110, 1);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} vslice_dummy_var_40 := printk.ref(.str.4);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i141 := $p2i.ref.i64($p1);
    call {:si_unique_call 1654} {:cexpr "__cil_tmp134"} boogie_si_record_i64($i141);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i142 := $add.i64($i141, 8);
    call {:si_unique_call 1655} {:cexpr "__cil_tmp135"} boogie_si_record_i64($i142);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p143 := $i2p.i64.ref($i142);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i144 := $load.i64($M.0, $p143);
    call {:si_unique_call 1656} {:cexpr "__cil_tmp136"} boogie_si_record_i64($i144);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p1);
    call {:si_unique_call 1657} {:cexpr "__cil_tmp138"} boogie_si_record_i64($i145);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i146 := $add.i64($i145, 16);
    call {:si_unique_call 1658} {:cexpr "__cil_tmp139"} boogie_si_record_i64($i146);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p147 := $i2p.i64.ref($i146);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i148 := $load.i64($M.0, $p147);
    call {:si_unique_call 1659} {:cexpr "__cil_tmp140"} boogie_si_record_i64($i148);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} __release_region(iomem_resource, $i144, $i148);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p1);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} kfree($p149);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} vslice_dummy_var_39 := printk.ref(.str.3);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_196:
    assume !assertsPassed;
    return;
}



const uart_register_driver: ref;

axiom uart_register_driver == $sub.ref(0, 191600);

procedure uart_register_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation uart_register_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1720} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1721} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 192632);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1722} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1723} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __request_region: ref;

axiom __request_region == $sub.ref(0, 193664);

procedure __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} {:cexpr "__request_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1725} {:cexpr "__request_region:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1726} {:cexpr "__request_region:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} $p5 := external_alloc();
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ioremap_nocache: ref;

axiom ioremap_nocache == $sub.ref(0, 194696);

procedure ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} {:cexpr "ioremap_nocache:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1729} {:cexpr "ioremap_nocache:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} $p2 := external_alloc();
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 195728);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const hsu_debugfs_init: ref;

axiom hsu_debugfs_init == $sub.ref(0, 196760);

procedure hsu_debugfs_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation hsu_debugfs_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $i13: i32;
  var $p38: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i64;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i64;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i64;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p90: ref;
  var $p92: ref;
  var $i93: i64;
  var $i94: i64;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i64;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p103: ref;
  var $p105: ref;
  var $i106: i64;
  var $i107: i64;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i64;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p116: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i64;
  var $p121: ref;
  var $p122: ref;
  var $i123: i64;
  var $i124: i64;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: ref;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: ref;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: ref;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: ref;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: ref;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: ref;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: ref;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: ref;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1732} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 1520);
    call {:si_unique_call 1733} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} $p4 := debugfs_create_dir(.str.6, $0.ref);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i3);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p4);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1735} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i6);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    call {:si_unique_call 1736} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i7);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 1520);
    call {:si_unique_call 1737} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i8);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    call {:si_unique_call 1738} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i11);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, $i6);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} vslice_dummy_var_45 := snprintf.ref.i64.ref.i32($p14, 32, .str.7, 0);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p0);
    call {:si_unique_call 1740} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i17);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 1520);
    call {:si_unique_call 1741} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i18);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    call {:si_unique_call 1742} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i21);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 32);
    call {:si_unique_call 1743} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i22);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} vslice_dummy_var_46 := debugfs_create_file($p16, $sub.i16(0, 32476), $p20, $p24, port_regs_ops);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p1);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} vslice_dummy_var_47 := snprintf.ref.i64.ref.i32($p103, 32, .str.7, 1);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p1);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p0);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i107 := $add.i64($i106, 1520);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p108 := $i2p.i64.ref($i107);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p0);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i111 := $add.i64($i110, 32);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $p112 := $i2p.i64.ref($i111);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p113, $mul.ref(1, 1));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} vslice_dummy_var_48 := debugfs_create_file($p105, $sub.i16(0, 32476), $p109, $p114, port_regs_ops);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p1);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} vslice_dummy_var_61 := snprintf.ref.i64.ref.i32($p116, 32, .str.7, 2);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p1);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p0);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i120 := $add.i64($i119, 1520);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p121 := $i2p.i64.ref($i120);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i123 := $p2i.ref.i64($p0);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i124 := $add.i64($i123, 32);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p125 := $i2p.i64.ref($i124);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p126, $mul.ref(2, 1));
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} vslice_dummy_var_62 := debugfs_create_file($p118, $sub.i16(0, 32476), $p122, $p127, port_regs_ops);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p1);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} vslice_dummy_var_49 := snprintf.ref.i64.ref.i32($p26, 32, .str.8, 0);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p1);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    call {:si_unique_call 1748} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i29);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 1520);
    call {:si_unique_call 1749} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i30);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p0);
    call {:si_unique_call 1750} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i33);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 1280);
    call {:si_unique_call 1751} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i34);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i34);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} vslice_dummy_var_50 := debugfs_create_file($p28, $sub.i16(0, 32476), $p32, $p36, dma_regs_ops);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p1);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} vslice_dummy_var_51 := snprintf.ref.i64.ref.i32($p38, 32, .str.8, 1);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p1);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p0);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 1520);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i42);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p0);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 1280);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p47 := $i2p.i64.ref($i46);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref(1, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} vslice_dummy_var_52 := debugfs_create_file($p40, $sub.i16(0, 32476), $p44, $p49, dma_regs_ops);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p1);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} vslice_dummy_var_53 := snprintf.ref.i64.ref.i32($p51, 32, .str.8, 2);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p1);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p0);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 1520);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p56 := $i2p.i64.ref($i55);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p0);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 1280);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $p60 := $i2p.i64.ref($i59);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(2, 1));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} vslice_dummy_var_54 := debugfs_create_file($p53, $sub.i16(0, 32476), $p57, $p62, dma_regs_ops);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p1);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} vslice_dummy_var_55 := snprintf.ref.i64.ref.i32($p64, 32, .str.8, 3);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p1);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p0);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i67, 1520);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p69 := $i2p.i64.ref($i68);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p0);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i72 := $add.i64($i71, 1280);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p73 := $i2p.i64.ref($i72);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p74, $mul.ref(3, 1));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} vslice_dummy_var_56 := debugfs_create_file($p66, $sub.i16(0, 32476), $p70, $p75, dma_regs_ops);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p1);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} vslice_dummy_var_57 := snprintf.ref.i64.ref.i32($p77, 32, .str.8, 4);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p1);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p0);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i81 := $add.i64($i80, 1520);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p82 := $i2p.i64.ref($i81);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p0);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i85 := $add.i64($i84, 1280);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p86 := $i2p.i64.ref($i85);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p87, $mul.ref(4, 1));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} vslice_dummy_var_58 := debugfs_create_file($p79, $sub.i16(0, 32476), $p83, $p88, dma_regs_ops);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p1);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} vslice_dummy_var_59 := snprintf.ref.i64.ref.i32($p90, 32, .str.8, 5);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p1);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p0);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i94 := $add.i64($i93, 1520);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p95 := $i2p.i64.ref($i94);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p0);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i98 := $add.i64($i97, 1280);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p99 := $i2p.i64.ref($i98);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p100, $mul.ref(5, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} vslice_dummy_var_60 := debugfs_create_file($p92, $sub.i16(0, 32476), $p96, $p101, dma_regs_ops);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb3;
}



const __release_region: ref;

axiom __release_region == $sub.ref(0, 197792);

procedure __release_region($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation __release_region($p0: ref, $i1: i64, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} {:cexpr "__release_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1766} {:cexpr "__release_region:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    return;
}



const debugfs_create_dir: ref;

axiom debugfs_create_dir == $sub.ref(0, 198824);

procedure debugfs_create_dir($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation debugfs_create_dir($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} $p2 := external_alloc();
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const debugfs_create_file: ref;

axiom debugfs_create_file == $sub.ref(0, 199856);

procedure debugfs_create_file($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation debugfs_create_file($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} {:cexpr "debugfs_create_file:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} $p5 := external_alloc();
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 200888);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1770} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 1} true;
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 201920);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 202952);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 203984);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 205016);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 206048);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 207080);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 208112);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 209144);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 210176);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 211208);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 212240);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 213272);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 214304);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1771} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1772} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1773} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1774} __VERIFIER_assume($i4);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 215336);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 216368);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 217400);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 218432);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1775} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1776} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1777} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1778} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1779} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1780} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1781} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1782} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1783} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1784} __VERIFIER_assume($i7);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1785} __VERIFIER_assume($i11);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 219464);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 220496);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1786} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1787} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1788} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1789} __VERIFIER_assume($i4);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 221528);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 222560);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 223592);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 224624);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 225656);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1790} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1791} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1792} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1793} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1794} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1795} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1796} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1797} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1798} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1799} __VERIFIER_assume($i7);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1800} __VERIFIER_assume($i11);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 226688);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 227720);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 228752);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 229784);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 230816);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 231848);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 232880);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 233912);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 234944);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1801} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1802} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1803} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 235976);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1804} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1805} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1806} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 237008);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1807} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1808} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 238040);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 239072);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1809} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 240104);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 241136);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 242168);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 243200);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.3, $M.9, $M.8, $M.2, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68;



implementation __SMACK_static_init()
{

  $bb0:
    $M.0 := $store.ref($M.0, serial_hsu_pops, serial_hsu_tx_empty);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(8, 1)), serial_hsu_set_mctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(16, 1)), serial_hsu_get_mctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(24, 1)), serial_hsu_stop_tx);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(32, 1)), serial_hsu_start_tx);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(48, 1)), serial_hsu_stop_rx);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(56, 1)), serial_hsu_enable_ms);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(64, 1)), serial_hsu_break_ctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(72, 1)), serial_hsu_startup);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(80, 1)), serial_hsu_shutdown);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(96, 1)), serial_hsu_set_termios);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(112, 1)), serial_hsu_pm);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(128, 1)), serial_hsu_type);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(136, 1)), serial_hsu_release_port);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(144, 1)), serial_hsu_request_port);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(152, 1)), serial_hsu_config_port);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(160, 1)), serial_hsu_verify_port);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_hsu_pops, $mul.ref(0, 192)), $mul.ref(184, 1)), $0.ref);
    $M.10 := $store.ref($M.10, serial_hsu_pm_ops, $0.ref);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(serial_hsu_pm_ops, $mul.ref(0, 184)), $mul.ref(8, 1)), $0.ref);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(serial_hsu_pm_ops, $mul.ref(0, 184)), $mul.ref(16, 1)), $0.ref);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(serial_hsu_pm_ops, $mul.ref(0, 184)), $mul.ref(24, 1)), $0.ref);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(serial_hsu_pm_ops, $mul.ref(0, 184)), $mul.ref(32, 1)), $0.ref);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(serial_hsu_pm_ops, $mul.ref(0, 184)), $mul.ref(40, 1)), $0.ref);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(serial_hsu_pm_ops, $mul.ref(0, 184)), $mul.ref(48, 1)), $0.ref);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(serial_hsu_pm_ops, $mul.ref(0, 184)), $mul.ref(56, 1)), $0.ref);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(serial_hsu_pm_ops, $mul.ref(0, 184)), $mul.ref(64, 1)), $0.ref);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(serial_hsu_pm_ops, $mul.ref(0, 184)), $mul.ref(72, 1)), $0.ref);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(serial_hsu_pm_ops, $mul.ref(0, 184)), $mul.ref(80, 1)), $0.ref);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(serial_hsu_pm_ops, $mul.ref(0, 184)), $mul.ref(88, 1)), $0.ref);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(serial_hsu_pm_ops, $mul.ref(0, 184)), $mul.ref(96, 1)), $0.ref);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(serial_hsu_pm_ops, $mul.ref(0, 184)), $mul.ref(104, 1)), $0.ref);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(serial_hsu_pm_ops, $mul.ref(0, 184)), $mul.ref(112, 1)), $0.ref);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(serial_hsu_pm_ops, $mul.ref(0, 184)), $mul.ref(120, 1)), $0.ref);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(serial_hsu_pm_ops, $mul.ref(0, 184)), $mul.ref(128, 1)), $0.ref);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(serial_hsu_pm_ops, $mul.ref(0, 184)), $mul.ref(136, 1)), $0.ref);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(serial_hsu_pm_ops, $mul.ref(0, 184)), $mul.ref(144, 1)), $0.ref);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(serial_hsu_pm_ops, $mul.ref(0, 184)), $mul.ref(152, 1)), $0.ref);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(serial_hsu_pm_ops, $mul.ref(0, 184)), $mul.ref(160, 1)), serial_hsu_runtime_suspend);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(serial_hsu_pm_ops, $mul.ref(0, 184)), $mul.ref(168, 1)), serial_hsu_runtime_resume);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(serial_hsu_pm_ops, $mul.ref(0, 184)), $mul.ref(176, 1)), serial_hsu_runtime_idle);
    $M.10 := $store.i32($M.10, pci_ids, 32902);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(4, 1)), 2075);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.10 := $store.i64($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), 32902);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(4, 1)), 2076);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.10 := $store.i64($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), 32902);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(4, 1)), 2077);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.10 := $store.i64($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), 32902);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(4, 1)), 2078);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.10 := $store.i64($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(4, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(20, 1)), 0);
    $M.10 := $store.i64($M.10, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.11 := $store.ref($M.11, hsu_pci_driver, $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(16, 1)), .str.13);
    $M.11 := $store.ref($M.11, $add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(24, 1)), pci_ids);
    $M.11 := $store.ref($M.11, $add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(32, 1)), serial_hsu_probe);
    $M.11 := $store.ref($M.11, $add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(40, 1)), serial_hsu_remove);
    $M.11 := $store.ref($M.11, $add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(48, 1)), serial_hsu_suspend);
    $M.11 := $store.ref($M.11, $add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(56, 1)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(64, 1)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(72, 1)), serial_hsu_resume);
    $M.11 := $store.ref($M.11, $add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(80, 1)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(88, 1)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(0, 1)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(8, 1)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(16, 1)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(24, 1)), $0.ref);
    $M.11 := $store.i8($M.11, $add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(32, 1)), 0);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(40, 1)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(48, 1)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(56, 1)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(64, 1)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(72, 1)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(80, 1)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(88, 1)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(96, 1)), serial_hsu_pm_ops);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(104, 1)), $0.ref);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(hsu_pci_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.21 := $store.ref($M.21, dma_regs_ops, __this_module);
    $M.22 := $store.ref($M.22, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(8, 1)), default_llseek);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(16, 1)), dma_show_regs);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(24, 1)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(32, 1)), $0.ref);
    $M.26 := $store.ref($M.26, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(40, 1)), $0.ref);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(48, 1)), $0.ref);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(56, 1)), $0.ref);
    $M.29 := $store.ref($M.29, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(64, 1)), $0.ref);
    $M.30 := $store.ref($M.30, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(72, 1)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(80, 1)), $0.ref);
    $M.32 := $store.ref($M.32, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(88, 1)), simple_open);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(96, 1)), $0.ref);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(104, 1)), $0.ref);
    $M.35 := $store.ref($M.35, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(112, 1)), $0.ref);
    $M.36 := $store.ref($M.36, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(120, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(128, 1)), $0.ref);
    $M.38 := $store.ref($M.38, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(136, 1)), $0.ref);
    $M.39 := $store.ref($M.39, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(144, 1)), $0.ref);
    $M.40 := $store.ref($M.40, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(152, 1)), $0.ref);
    $M.41 := $store.ref($M.41, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(160, 1)), $0.ref);
    $M.42 := $store.ref($M.42, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(168, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(176, 1)), $0.ref);
    $M.44 := $store.ref($M.44, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(184, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(192, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref(dma_regs_ops, $mul.ref(0, 208)), $mul.ref(200, 1)), $0.ref);
    $M.21 := $store.ref($M.21, port_regs_ops, __this_module);
    $M.22 := $store.ref($M.22, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(8, 1)), default_llseek);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(16, 1)), port_show_regs);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(24, 1)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(32, 1)), $0.ref);
    $M.26 := $store.ref($M.26, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(40, 1)), $0.ref);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(48, 1)), $0.ref);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(56, 1)), $0.ref);
    $M.29 := $store.ref($M.29, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(64, 1)), $0.ref);
    $M.30 := $store.ref($M.30, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(72, 1)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(80, 1)), $0.ref);
    $M.32 := $store.ref($M.32, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(88, 1)), simple_open);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(96, 1)), $0.ref);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(104, 1)), $0.ref);
    $M.35 := $store.ref($M.35, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(112, 1)), $0.ref);
    $M.36 := $store.ref($M.36, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(120, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(128, 1)), $0.ref);
    $M.38 := $store.ref($M.38, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(136, 1)), $0.ref);
    $M.39 := $store.ref($M.39, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(144, 1)), $0.ref);
    $M.40 := $store.ref($M.40, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(152, 1)), $0.ref);
    $M.41 := $store.ref($M.41, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(160, 1)), $0.ref);
    $M.42 := $store.ref($M.42, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(168, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(176, 1)), $0.ref);
    $M.44 := $store.ref($M.44, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(184, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(192, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref(port_regs_ops, $mul.ref(0, 208)), $mul.ref(200, 1)), $0.ref);
    $M.3 := $0.ref;
    $M.9 := 0;
    call {:si_unique_call 1810} {:cexpr "hsu_dma_enable"} boogie_si_record_i32(0);
    $M.8 := $store.ref($M.8, serial_hsu_ports, $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(serial_hsu_ports, $mul.ref(0, 24)), $mul.ref(1, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(serial_hsu_ports, $mul.ref(0, 24)), $mul.ref(2, 8)), $0.ref);
    call {:si_unique_call 1811} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
    $M.2 := 0;
    call {:si_unique_call 1812} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.47 := $store.i8($M.47, .str.14, 77);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(1, 1)), 70);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(2, 1)), 68);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(3, 1)), 32);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(4, 1)), 72);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(5, 1)), 83);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(6, 1)), 85);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(7, 1)), 32);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(8, 1)), 112);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(9, 1)), 111);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(10, 1)), 114);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(11, 1)), 116);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(12, 1)), 91);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(13, 1)), 37);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(14, 1)), 100);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(15, 1)), 93);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(16, 1)), 32);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(17, 1)), 114);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(18, 1)), 101);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(19, 1)), 103);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(20, 1)), 115);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(21, 1)), 58);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(22, 1)), 10);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.14, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.48 := $store.i8($M.48, .str.15, 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(1, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(2, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(3, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(4, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(5, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(6, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(7, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(8, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(9, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(10, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(11, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(12, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(13, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(14, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(15, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(16, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(17, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(18, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(19, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(20, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(21, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(22, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(23, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(24, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(25, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(26, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(27, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(28, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(29, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(30, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(31, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(32, 1)), 61);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(33, 1)), 10);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.15, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.49 := $store.i8($M.49, .str.16, 73);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(1, 1)), 69);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(2, 1)), 82);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(3, 1)), 58);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(4, 1)), 32);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(5, 1)), 9);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(6, 1)), 9);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(7, 1)), 48);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(8, 1)), 120);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(9, 1)), 37);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(10, 1)), 48);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(11, 1)), 56);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(12, 1)), 120);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(13, 1)), 10);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.50 := $store.i8($M.50, .str.17, 73);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(.str.17, $mul.ref(0, 15)), $mul.ref(1, 1)), 73);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(.str.17, $mul.ref(0, 15)), $mul.ref(2, 1)), 82);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(.str.17, $mul.ref(0, 15)), $mul.ref(3, 1)), 58);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(.str.17, $mul.ref(0, 15)), $mul.ref(4, 1)), 32);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(.str.17, $mul.ref(0, 15)), $mul.ref(5, 1)), 9);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(.str.17, $mul.ref(0, 15)), $mul.ref(6, 1)), 9);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(.str.17, $mul.ref(0, 15)), $mul.ref(7, 1)), 48);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(.str.17, $mul.ref(0, 15)), $mul.ref(8, 1)), 120);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(.str.17, $mul.ref(0, 15)), $mul.ref(9, 1)), 37);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(.str.17, $mul.ref(0, 15)), $mul.ref(10, 1)), 48);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(.str.17, $mul.ref(0, 15)), $mul.ref(11, 1)), 56);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(.str.17, $mul.ref(0, 15)), $mul.ref(12, 1)), 120);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(.str.17, $mul.ref(0, 15)), $mul.ref(13, 1)), 10);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(.str.17, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.51 := $store.i8($M.51, .str.18, 76);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(1, 1)), 67);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(2, 1)), 82);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(3, 1)), 58);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(4, 1)), 32);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(5, 1)), 9);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(6, 1)), 9);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(7, 1)), 48);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(8, 1)), 120);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(9, 1)), 37);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(10, 1)), 48);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(11, 1)), 56);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(12, 1)), 120);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(13, 1)), 10);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.52 := $store.i8($M.52, .str.19, 77);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.19, $mul.ref(0, 15)), $mul.ref(1, 1)), 67);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.19, $mul.ref(0, 15)), $mul.ref(2, 1)), 82);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.19, $mul.ref(0, 15)), $mul.ref(3, 1)), 58);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.19, $mul.ref(0, 15)), $mul.ref(4, 1)), 32);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.19, $mul.ref(0, 15)), $mul.ref(5, 1)), 9);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.19, $mul.ref(0, 15)), $mul.ref(6, 1)), 9);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.19, $mul.ref(0, 15)), $mul.ref(7, 1)), 48);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.19, $mul.ref(0, 15)), $mul.ref(8, 1)), 120);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.19, $mul.ref(0, 15)), $mul.ref(9, 1)), 37);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.19, $mul.ref(0, 15)), $mul.ref(10, 1)), 48);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.19, $mul.ref(0, 15)), $mul.ref(11, 1)), 56);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.19, $mul.ref(0, 15)), $mul.ref(12, 1)), 120);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.19, $mul.ref(0, 15)), $mul.ref(13, 1)), 10);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.19, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.53 := $store.i8($M.53, .str.20, 76);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(1, 1)), 83);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(2, 1)), 82);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(3, 1)), 58);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(4, 1)), 32);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(5, 1)), 9);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(6, 1)), 9);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(7, 1)), 48);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(8, 1)), 120);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(9, 1)), 37);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(10, 1)), 48);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(11, 1)), 56);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(12, 1)), 120);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(13, 1)), 10);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.54 := $store.i8($M.54, .str.21, 77);
    $M.54 := $store.i8($M.54, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(1, 1)), 83);
    $M.54 := $store.i8($M.54, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(2, 1)), 82);
    $M.54 := $store.i8($M.54, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(3, 1)), 58);
    $M.54 := $store.i8($M.54, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(4, 1)), 32);
    $M.54 := $store.i8($M.54, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(5, 1)), 9);
    $M.54 := $store.i8($M.54, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(6, 1)), 9);
    $M.54 := $store.i8($M.54, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(7, 1)), 48);
    $M.54 := $store.i8($M.54, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(8, 1)), 120);
    $M.54 := $store.i8($M.54, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(9, 1)), 37);
    $M.54 := $store.i8($M.54, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(10, 1)), 48);
    $M.54 := $store.i8($M.54, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(11, 1)), 56);
    $M.54 := $store.i8($M.54, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(12, 1)), 120);
    $M.54 := $store.i8($M.54, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(13, 1)), 10);
    $M.54 := $store.i8($M.54, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.55 := $store.i8($M.55, .str.22, 70);
    $M.55 := $store.i8($M.55, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(1, 1)), 79);
    $M.55 := $store.i8($M.55, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(2, 1)), 82);
    $M.55 := $store.i8($M.55, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(3, 1)), 58);
    $M.55 := $store.i8($M.55, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(4, 1)), 32);
    $M.55 := $store.i8($M.55, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(5, 1)), 9);
    $M.55 := $store.i8($M.55, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(6, 1)), 9);
    $M.55 := $store.i8($M.55, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(7, 1)), 48);
    $M.55 := $store.i8($M.55, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(8, 1)), 120);
    $M.55 := $store.i8($M.55, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(9, 1)), 37);
    $M.55 := $store.i8($M.55, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(10, 1)), 48);
    $M.55 := $store.i8($M.55, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(11, 1)), 56);
    $M.55 := $store.i8($M.55, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(12, 1)), 120);
    $M.55 := $store.i8($M.55, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(13, 1)), 10);
    $M.55 := $store.i8($M.55, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.56 := $store.i8($M.56, .str.23, 80);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(1, 1)), 83);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(2, 1)), 58);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(3, 1)), 32);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(4, 1)), 9);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(5, 1)), 9);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(6, 1)), 48);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(7, 1)), 120);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(8, 1)), 37);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(9, 1)), 48);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(10, 1)), 56);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(11, 1)), 120);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(12, 1)), 10);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.57 := $store.i8($M.57, .str.24, 77);
    $M.57 := $store.i8($M.57, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(1, 1)), 85);
    $M.57 := $store.i8($M.57, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(2, 1)), 76);
    $M.57 := $store.i8($M.57, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(3, 1)), 58);
    $M.57 := $store.i8($M.57, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(4, 1)), 32);
    $M.57 := $store.i8($M.57, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(5, 1)), 9);
    $M.57 := $store.i8($M.57, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(6, 1)), 9);
    $M.57 := $store.i8($M.57, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(7, 1)), 48);
    $M.57 := $store.i8($M.57, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(8, 1)), 120);
    $M.57 := $store.i8($M.57, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(9, 1)), 37);
    $M.57 := $store.i8($M.57, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(10, 1)), 48);
    $M.57 := $store.i8($M.57, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(11, 1)), 56);
    $M.57 := $store.i8($M.57, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(12, 1)), 120);
    $M.57 := $store.i8($M.57, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(13, 1)), 10);
    $M.57 := $store.i8($M.57, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.58 := $store.i8($M.58, .str.25, 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(1, 1)), 73);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(2, 1)), 86);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(3, 1)), 58);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(4, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(5, 1)), 9);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(6, 1)), 9);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(7, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(8, 1)), 120);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(9, 1)), 37);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(10, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(11, 1)), 56);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(12, 1)), 120);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(13, 1)), 10);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.59 := $store.i8($M.59, .str.26, 77);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(1, 1)), 70);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(2, 1)), 68);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(3, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(4, 1)), 72);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(5, 1)), 83);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(6, 1)), 85);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(7, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(8, 1)), 68);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(9, 1)), 77);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(10, 1)), 65);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(11, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(12, 1)), 99);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(13, 1)), 104);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(14, 1)), 97);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(15, 1)), 110);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(16, 1)), 110);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(17, 1)), 101);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(18, 1)), 108);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(19, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(20, 1)), 91);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(21, 1)), 37);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(22, 1)), 100);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(23, 1)), 93);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(24, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(25, 1)), 114);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(26, 1)), 101);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(27, 1)), 103);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(28, 1)), 115);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(29, 1)), 58);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(30, 1)), 10);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.26, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.60 := $store.i8($M.60, .str.27, 67);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.27, $mul.ref(0, 14)), $mul.ref(1, 1)), 82);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.27, $mul.ref(0, 14)), $mul.ref(2, 1)), 58);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.27, $mul.ref(0, 14)), $mul.ref(3, 1)), 32);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.27, $mul.ref(0, 14)), $mul.ref(4, 1)), 9);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.27, $mul.ref(0, 14)), $mul.ref(5, 1)), 9);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.27, $mul.ref(0, 14)), $mul.ref(6, 1)), 48);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.27, $mul.ref(0, 14)), $mul.ref(7, 1)), 120);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.27, $mul.ref(0, 14)), $mul.ref(8, 1)), 37);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.27, $mul.ref(0, 14)), $mul.ref(9, 1)), 48);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.27, $mul.ref(0, 14)), $mul.ref(10, 1)), 56);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.27, $mul.ref(0, 14)), $mul.ref(11, 1)), 120);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.27, $mul.ref(0, 14)), $mul.ref(12, 1)), 10);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.27, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.61 := $store.i8($M.61, .str.28, 68);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(1, 1)), 67);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(2, 1)), 82);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(3, 1)), 58);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(4, 1)), 32);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(5, 1)), 9);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(6, 1)), 9);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(7, 1)), 48);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(8, 1)), 120);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(9, 1)), 37);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(10, 1)), 48);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(11, 1)), 56);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(12, 1)), 120);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(13, 1)), 10);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.62 := $store.i8($M.62, .str.29, 66);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(1, 1)), 83);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(2, 1)), 82);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(3, 1)), 58);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(4, 1)), 32);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(5, 1)), 9);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(6, 1)), 9);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(7, 1)), 48);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(8, 1)), 120);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(9, 1)), 37);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(10, 1)), 48);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(11, 1)), 56);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(12, 1)), 120);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(13, 1)), 10);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(.str.29, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, .str.30, 77);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(1, 1)), 79);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(2, 1)), 84);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(3, 1)), 83);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(4, 1)), 82);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(5, 1)), 58);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(6, 1)), 32);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(7, 1)), 9);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(8, 1)), 9);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(9, 1)), 48);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(10, 1)), 120);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(11, 1)), 37);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(12, 1)), 48);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(13, 1)), 56);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(14, 1)), 120);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(15, 1)), 10);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.64 := $store.i8($M.64, .str.31, 68);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(1, 1)), 48);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(2, 1)), 83);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(3, 1)), 65);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(4, 1)), 82);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(5, 1)), 58);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(6, 1)), 32);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(7, 1)), 9);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(8, 1)), 9);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(9, 1)), 48);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(10, 1)), 120);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(11, 1)), 37);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(12, 1)), 48);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(13, 1)), 56);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(14, 1)), 120);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(15, 1)), 10);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i8($M.65, .str.32, 68);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(1, 1)), 48);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(2, 1)), 84);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(3, 1)), 83);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(4, 1)), 82);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(5, 1)), 58);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(6, 1)), 32);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(7, 1)), 9);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(8, 1)), 9);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(9, 1)), 48);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(10, 1)), 120);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(11, 1)), 37);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(12, 1)), 48);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(13, 1)), 56);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(14, 1)), 120);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(15, 1)), 10);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.66 := $store.i8($M.66, .str.5, 104);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.5, $mul.ref(0, 11)), $mul.ref(1, 1)), 115);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.5, $mul.ref(0, 11)), $mul.ref(2, 1)), 117);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.5, $mul.ref(0, 11)), $mul.ref(3, 1)), 95);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.5, $mul.ref(0, 11)), $mul.ref(4, 1)), 112);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.5, $mul.ref(0, 11)), $mul.ref(5, 1)), 111);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.5, $mul.ref(0, 11)), $mul.ref(6, 1)), 114);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.5, $mul.ref(0, 11)), $mul.ref(7, 1)), 116);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.5, $mul.ref(0, 11)), $mul.ref(8, 1)), 37);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.5, $mul.ref(0, 11)), $mul.ref(9, 1)), 100);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.5, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, .str.7, 112);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.7, $mul.ref(0, 13)), $mul.ref(1, 1)), 111);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.7, $mul.ref(0, 13)), $mul.ref(2, 1)), 114);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.7, $mul.ref(0, 13)), $mul.ref(3, 1)), 116);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.7, $mul.ref(0, 13)), $mul.ref(4, 1)), 95);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.7, $mul.ref(0, 13)), $mul.ref(5, 1)), 37);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.7, $mul.ref(0, 13)), $mul.ref(6, 1)), 100);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.7, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.7, $mul.ref(0, 13)), $mul.ref(8, 1)), 114);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.7, $mul.ref(0, 13)), $mul.ref(9, 1)), 101);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.7, $mul.ref(0, 13)), $mul.ref(10, 1)), 103);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.7, $mul.ref(0, 13)), $mul.ref(11, 1)), 115);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.7, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.68 := $store.i8($M.68, .str.8, 100);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(1, 1)), 109);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(2, 1)), 97);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(4, 1)), 99);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(5, 1)), 104);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(6, 1)), 97);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(7, 1)), 110);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(8, 1)), 95);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(9, 1)), 37);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(10, 1)), 100);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(11, 1)), 95);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(12, 1)), 114);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(13, 1)), 101);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(14, 1)), 103);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(15, 1)), 115);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    call {:si_unique_call 1813} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 244232);

procedure devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i26 := $eq.ref(serial_hsu_runtime_idle, $p0);
    assume true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i26 == 1);
    $i25 := $eq.ref(serial_hsu_runtime_resume, $p0);
    assume true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i25 == 1);
    $i24 := $eq.ref(serial_hsu_runtime_suspend, $p0);
    assume true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i24 == 1);
    $i23 := $eq.ref(__builtinx_expect, $p0);
    assume true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i23 == 1);
    $i22 := $eq.ref(serial_hsu_resume, $p0);
    assume true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i22 == 1);
    $i21 := $eq.ref(serial_hsu_request_port, $p0);
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i21 == 1);
    $i20 := $eq.ref(serial_hsu_startup, $p0);
    assume true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i20 == 1);
    $i19 := $eq.ref(serial_hsu_get_mctrl, $p0);
    assume true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i19 == 1);
    $i18 := $eq.ref(serial_hsu_tx_empty, $p0);
    assume true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume false;
    return;

  $bb2:
    assume $i18 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1814} $i2 := serial_hsu_tx_empty($p1);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    $r := $i2;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i19 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1815} $i4 := serial_hsu_get_mctrl($p3);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    $r := $i4;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i20 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1816} $i6 := serial_hsu_startup($p5);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    $r := $i6;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i21 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1817} $i8 := serial_hsu_request_port($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i22 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1818} $i10 := serial_hsu_resume($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i23 == 1;
    call {:si_unique_call 1819} $i11 := __builtinx_expect();
    $r := $i11;
    return;

  $bb8:
    assume $i24 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1820} $i13 := serial_hsu_runtime_suspend($p12);
    $r := $i13;
    return;

  $bb9:
    assume $i25 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1821} $i15 := serial_hsu_runtime_resume($p14);
    $r := $i15;
    return;

  $bb10:
    assume $i26 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1822} $i17 := serial_hsu_runtime_idle($p16);
    $r := $i17;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 245264);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i8);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i8)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 246296);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref);



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 247328);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_expect, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1823} $i1 := __builtinx_expect();
    $r := $i1;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 248360);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_expect, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1824} $i1 := __builtinx_expect();
    $r := $i1;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 249392);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_expect, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1825} $i1 := __builtinx_expect();
    $r := $i1;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 250424);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_expect, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1826} $i1 := __builtinx_expect();
    $r := $i1;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 251456);

procedure devirtbounce.7(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 252488);

procedure devirtbounce.8(funcPtr: ref, arg: i8, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: i8, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 253520);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 254552);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 255584);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const $u0: i64;

const $u1: i8;

const $u10: ref;

const $u11: ref;

const $u12: ref;

const $u2: i32;

const $u3: ref;

const $u4: ref;

const $u5: ref;

const $u6: ref;

const $u7: ref;

const $u8: ref;

const $u9: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.3, $M.9, $M.8, $M.2, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1827} __SMACK_static_init();
    call {:si_unique_call 1828} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr();
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $M.5, $M.10, $M.11, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.3, $M.9, $M.8, $M.2, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $CurrAddr, $M.6;



implementation {:entrypoint} main_SeqInstr()
{

  start:
    assertsPassed := true;
    call main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation {:SIextraRecBound 6} dma_irq_loop_$bb1(in_$p2: ref, in_$i9: i32, in_$i10: i1, in_$i11: i64, in_$i12: i64, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i7: i32, in_$i8: i32) returns (out_$i9: i32, out_$i10: i1, out_$i11: i64, out_$i12: i64, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i7: i32, out_$i8: i32)
{

  entry:
    out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i7, out_$i8 := in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$p14, in_$p15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i7, in_$i8;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1541;

  $bb6:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i7, out_$i8 := out_$i18, out_$i17;
    goto $bb6_dummy;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    out_$i19 := $ule.i32(out_$i18, 5);
    goto corral_source_split_1557;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i7, 1);
    call {:si_unique_call 864} {:cexpr "i"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_1556;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i17 := $lshr.i32(out_$i8, 1);
    call {:si_unique_call 863} {:cexpr "int_sts"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_1555;

  $bb4:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_129:
    goto corral_source_split_1553;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} dma_chan_irq(out_$p16);
    goto SeqInstr_128;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref(out_$p15, $mul.ref(out_$i11, 24));
    goto corral_source_split_1552;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_1551;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    out_$p14 := $i2p.i64.ref(out_$i13);
    goto corral_source_split_1550;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i64(out_$i12, 1280);
    call {:si_unique_call 861} {:cexpr "__cil_tmp12"} boogie_si_record_i64(out_$i13);
    goto corral_source_split_1549;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(in_$p2);
    call {:si_unique_call 860} {:cexpr "__cil_tmp11"} boogie_si_record_i64(out_$i12);
    goto corral_source_split_1548;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i32.i64(out_$i7);
    call {:si_unique_call 859} {:cexpr "__cil_tmp10"} boogie_si_record_i64(out_$i11);
    goto corral_source_split_1547;

  $bb3:
    assume out_$i10 == 1;
    goto corral_source_split_1546;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_1544;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i9 := $and.i32(out_$i8, 1);
    goto corral_source_split_1543;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i7, out_$i8 := dma_irq_loop_$bb1(in_$p2, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure dma_irq_loop_$bb1(in_$p2: ref, in_$i9: i32, in_$i10: i1, in_$i11: i64, in_$i12: i64, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i7: i32, in_$i8: i32) returns (out_$i9: i32, out_$i10: i1, out_$i11: i64, out_$i12: i64, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i7: i32, out_$i8: i32);
  modifies $M.2, $M.0, assertsPassed;



implementation __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i12: i32, in_$i11: i32, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$i18: i64, in_$i19: i32, in_$i20: i64, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i64, in_$i26: i32, in_$i27: i64, in_$i28: i1) returns (out_$i12: i32, out_$i11: i32, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$i18: i64, out_$i19: i32, out_$i20: i64, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i64, out_$i26: i32, out_$i27: i64, out_$i28: i1)
{

  entry:
    out_$i12, out_$i11, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28 := in_$i12, in_$i11, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$i11 := out_$i15;
    goto $bb11_dummy;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i15;
    assume true;
    goto $bb11;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_1689;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i26);
    call {:si_unique_call 933} {:cexpr "tmp"} boogie_si_record_i64(out_$i27);
    goto corral_source_split_1688;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} out_$i26 := __builtinx_expect.i64.i64(out_$i25, 0);
    goto corral_source_split_1687;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    call {:si_unique_call 931} {:cexpr "__cil_tmp10"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_1686;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i32(out_$i23);
    call {:si_unique_call 930} {:cexpr "__cil_tmp9"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_1685;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i15, in_$i2);
    goto corral_source_split_1684;

  $bb9:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i11;
    assume true;
    goto $bb9;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i64(out_$i20, 0);
    goto corral_source_split_1680;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i19);
    call {:si_unique_call 929} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_1679;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} out_$i19 := __builtinx_expect.i64.i64(out_$i18, 1);
    goto corral_source_split_1678;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i17);
    call {:si_unique_call 927} {:cexpr "__cil_tmp13"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_1677;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i1.i32(out_$i16);
    call {:si_unique_call 926} {:cexpr "__cil_tmp12"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_1676;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i15, out_$i11);
    goto corral_source_split_1675;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} out_$i15 := atomic_cmpxchg(in_$p0, out_$i11, out_$i14);
    call {:si_unique_call 925} {:cexpr "old"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_1674;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i11, in_$i1);
    call {:si_unique_call 923} {:cexpr "__cil_tmp11"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_1673;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i12, out_$i11, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28 := __atomic_add_unless_loop_$bb4(in_$p0, in_$i1, in_$i2, out_$i12, out_$i11, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28);
    return;

  exit:
    return;
}



procedure __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i12: i32, in_$i11: i32, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$i18: i64, in_$i19: i32, in_$i20: i64, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i64, in_$i26: i32, in_$i27: i64, in_$i28: i1) returns (out_$i12: i32, out_$i11: i32, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$i18: i64, out_$i19: i32, out_$i20: i64, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i64, out_$i26: i32, out_$i27: i64, out_$i28: i1);
  modifies $M.0;



implementation receive_chars_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$i11: i32, in_$i12: i32, in_$i13: i64, in_$i14: i64, in_$i15: i64, in_$i16: i64, in_$i17: i64, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i64, in_$i28: i32, in_$i29: i64, in_$i30: i1, in_$i31: i64, in_$i32: i64, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i32, in_$i42: i64, in_$i43: i64, in_$i44: i64, in_$i45: i64, in_$i46: i64, in_$i47: i64, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$i58: i64, in_$i59: i64, in_$i60: i64, in_$i61: i64, in_$i62: i64, in_$i63: i64, in_$p64: ref, in_$i65: i32, in_$i66: i32, in_$p67: ref, in_$i68: i32, in_$i69: i32, in_$i70: i1, in_$i71: i64, in_$i72: i64, in_$i73: i64, in_$i74: i64, in_$i75: i64, in_$i76: i64, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i84: i64, in_$i85: i64, in_$i86: i64, in_$i87: i64, in_$i88: i64, in_$i89: i64, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$p93: ref, in_$i94: i64, in_$i95: i64, in_$p96: ref, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i104: i32, in_$i105: i32, in_$i106: i1, in_$i108: i32, in_$i109: i32, in_$i110: i1, in_$i111: i32, in_$i107: i32, in_$i103: i32, in_$i112: i32, in_$p113: ref, in_$i114: i32, in_$i115: i32, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i1, in_vslice_dummy_var_24: i32) returns (out_$i11: i32, out_$i12: i32, out_$i13: i64, out_$i14: i64, out_$i15: i64, out_$i16: i64, out_$i17: i64, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i64, out_$i28: i32, out_$i29: i64, out_$i30: i1, out_$i31: i64, out_$i32: i64, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i32, out_$i42: i64, out_$i43: i64, out_$i44: i64, out_$i45: i64, out_$i46: i64, out_$i47: i64, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$i58: i64, out_$i59: i64, out_$i60: i64, out_$i61: i64, out_$i62: i64, out_$i63: i64, out_$p64: ref, out_$i65: i32, out_$i66: i32, out_$p67: ref, out_$i68: i32, out_$i69: i32, out_$i70: i1, out_$i71: i64, out_$i72: i64, out_$i73: i64, out_$i74: i64, out_$i75: i64, out_$i76: i64, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i84: i64, out_$i85: i64, out_$i86: i64, out_$i87: i64, out_$i88: i64, out_$i89: i64, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$p93: ref, out_$i94: i64, out_$i95: i64, out_$p96: ref, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i104: i32, out_$i105: i32, out_$i106: i1, out_$i108: i32, out_$i109: i32, out_$i110: i1, out_$i111: i32, out_$i107: i32, out_$i103: i32, out_$i112: i32, out_$p113: ref, out_$i114: i32, out_$i115: i32, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i1, out_vslice_dummy_var_24: i32)
{

  entry:
    out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i106, out_$i108, out_$i109, out_$i110, out_$i111, out_$i107, out_$i103, out_$i112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_vslice_dummy_var_24 := in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p33, in_$p34, in_$i35, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$p51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$p77, in_$i78, in_$i79, in_$p80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$p90, in_$i91, in_$i92, in_$p93, in_$i94, in_$i95, in_$p96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i104, in_$i105, in_$i106, in_$i108, in_$i109, in_$i110, in_$i111, in_$i107, in_$i103, in_$i112, in_$p113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_vslice_dummy_var_24;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1809;

  $bb36:
    assume out_$i120 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i119;
    goto $bb36_dummy;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    out_$i120 := $ne.i32(out_$i11, 0);
    goto corral_source_split_1958;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    out_$i119 := $sub.i32(out_$i11, 1);
    call {:si_unique_call 1056} {:cexpr "max_count"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_1957;

  $bb34:
    assume out_$i118 == 1;
    goto corral_source_split_1956;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i117, 0);
    goto corral_source_split_1872;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    out_$i117 := $and.i32(out_$i116, 1);
    goto corral_source_split_1871;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i32($M.5, in_$p1);
    call {:si_unique_call 1017} {:cexpr "__cil_tmp98"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_1870;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, in_$p1, out_$i115);
    goto corral_source_split_1869;

  SeqInstr_156:
    call {:si_unique_call 1016} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i115);
    goto corral_source_split_1868;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} out_$i115 := serial_in(in_$p0, 5);
    goto SeqInstr_155;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i54 == 1;
    goto corral_source_split_1866;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i53, 0);
    goto corral_source_split_1859;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} out_$i53 := uart_handle_break(out_$p52);
    call {:si_unique_call 1012} {:cexpr "tmp"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_1858;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_1857;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p51, out_$i50);
    goto corral_source_split_1856;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    out_$p51 := $i2p.i64.ref(out_$i44);
    goto corral_source_split_1855;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i49, 1);
    goto corral_source_split_1854;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, out_$p48);
    call {:si_unique_call 1010} {:cexpr "__cil_tmp47"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_1853;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    out_$p48 := $i2p.i64.ref(out_$i47);
    goto corral_source_split_1852;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i64(out_$i46, out_$i45);
    call {:si_unique_call 1009} {:cexpr "__cil_tmp46"} boogie_si_record_i64(out_$i47);
    goto corral_source_split_1851;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1008} {:cexpr "__cil_tmp45"} boogie_si_record_i64(out_$i46);
    goto corral_source_split_1850;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i64(0, 212);
    call {:si_unique_call 1007} {:cexpr "__cil_tmp44"} boogie_si_record_i64(out_$i45);
    goto corral_source_split_1849;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i64(out_$i43, out_$i42);
    call {:si_unique_call 1006} {:cexpr "__cil_tmp42"} boogie_si_record_i64(out_$i44);
    goto corral_source_split_1848;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1005} {:cexpr "__cil_tmp41"} boogie_si_record_i64(out_$i43);
    goto corral_source_split_1847;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i64(0, 212);
    call {:si_unique_call 1004} {:cexpr "__cil_tmp40"} boogie_si_record_i64(out_$i42);
    goto corral_source_split_1846;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, in_$p1, out_$i41);
    goto corral_source_split_1845;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    out_$i41 := $and.i32(out_$i40, $sub.i32(0, 13));
    goto corral_source_split_1844;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.5, in_$p1);
    call {:si_unique_call 1003} {:cexpr "__cil_tmp38"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_1843;

  $bb8:
    assume out_$i39 == 1;
    goto corral_source_split_1842;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_1840;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    out_$i38 := $and.i32(out_$i37, 16);
    call {:si_unique_call 1002} {:cexpr "__cil_tmp37"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_1839;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.5, in_$p1);
    call {:si_unique_call 1001} {:cexpr "__cil_tmp36"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_1838;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} out_vslice_dummy_var_24 := dev_warn.ref.ref.i32(out_$p34, .str.39, out_$i35);
    goto corral_source_split_1837;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.5, in_$p1);
    call {:si_unique_call 999} {:cexpr "__cil_tmp35"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_1836;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_1835;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    out_$p33 := $i2p.i64.ref(out_$i32);
    goto corral_source_split_1834;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i64(out_$i31, 328);
    call {:si_unique_call 998} {:cexpr "__cil_tmp32"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_1833;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 997} {:cexpr "__cil_tmp31"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_1832;

  $bb6:
    assume out_$i30 == 1;
    goto corral_source_split_1831;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, 0);
    goto corral_source_split_1829;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i28);
    call {:si_unique_call 996} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i29);
    goto corral_source_split_1828;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} out_$i28 := __builtinx_expect.i64.i64(out_$i27, 0);
    goto corral_source_split_1827;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i26);
    call {:si_unique_call 994} {:cexpr "__cil_tmp30"} boogie_si_record_i64(out_$i27);
    goto corral_source_split_1826;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i1.i32(out_$i25);
    call {:si_unique_call 993} {:cexpr "__cil_tmp29"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_1825;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_1824;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    out_$i24 := $and.i32(out_$i23, 30);
    call {:si_unique_call 992} {:cexpr "__cil_tmp28"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_1823;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.5, in_$p1);
    call {:si_unique_call 991} {:cexpr "__cil_tmp27"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_1822;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p22, out_$i21);
    goto corral_source_split_1821;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    out_$p22 := $i2p.i64.ref(out_$i15);
    goto corral_source_split_1820;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i20, 1);
    goto corral_source_split_1819;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    call {:si_unique_call 990} {:cexpr "__cil_tmp26"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_1818;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    out_$p19 := $i2p.i64.ref(out_$i18);
    goto corral_source_split_1817;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i64(out_$i17, out_$i16);
    call {:si_unique_call 989} {:cexpr "__cil_tmp25"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_1816;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 988} {:cexpr "__cil_tmp24"} boogie_si_record_i64(out_$i17);
    goto corral_source_split_1815;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i64(0, 192);
    call {:si_unique_call 987} {:cexpr "__cil_tmp23"} boogie_si_record_i64(out_$i16);
    goto corral_source_split_1814;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i64(out_$i14, out_$i13);
    call {:si_unique_call 986} {:cexpr "__cil_tmp21"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_1813;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 985} {:cexpr "__cil_tmp20"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_1812;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i64(0, 192);
    call {:si_unique_call 984} {:cexpr "__cil_tmp19"} boogie_si_record_i64(out_$i13);
    goto corral_source_split_1811;

  SeqInstr_153:
    call {:si_unique_call 983} {:cexpr "ch"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_1810;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} out_$i12 := serial_in(in_$p0, 0);
    goto SeqInstr_152;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} uart_insert_char(out_$p113, out_$i114, 2, out_$i12, out_$i112);
    goto corral_source_split_1954;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i32($M.5, in_$p1);
    call {:si_unique_call 1054} {:cexpr "__cil_tmp96"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_1953;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    out_$p113 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_1952;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_1951;

  $bb7:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    out_$i112 := 0;
    goto $bb33;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    out_$i112 := out_$i103;
    goto $bb33;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1940;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i103 := out_$i107;
    goto $bb26;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    out_$i103 := 1;
    goto $bb26;

  $bb24:
    assume out_$i102 == 1;
    goto corral_source_split_1933;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i32(out_$i101, 0);
    goto corral_source_split_1931;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    out_$i101 := $and.i32(out_$i100, 16);
    call {:si_unique_call 1049} {:cexpr "__cil_tmp90"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_1930;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i32($M.5, in_$p1);
    call {:si_unique_call 1048} {:cexpr "__cil_tmp89"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_1929;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, in_$p1, out_$i99);
    goto corral_source_split_1928;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    out_$i99 := $and.i32(out_$i98, out_$i97);
    call {:si_unique_call 1047} {:cexpr "__cil_tmp88"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_1927;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i32($M.5, in_$p1);
    call {:si_unique_call 1046} {:cexpr "__cil_tmp86"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_1926;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i32($M.0, out_$p96);
    call {:si_unique_call 1045} {:cexpr "__cil_tmp85"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_1925;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    out_$p96 := $i2p.i64.ref(out_$i95);
    goto corral_source_split_1924;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    out_$i95 := $add.i64(out_$i94, 156);
    call {:si_unique_call 1044} {:cexpr "__cil_tmp84"} boogie_si_record_i64(out_$i95);
    goto corral_source_split_1923;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i94 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1043} {:cexpr "__cil_tmp83"} boogie_si_record_i64(out_$i94);
    goto corral_source_split_1922;

  $bb22:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p93, out_$i92);
    goto corral_source_split_1920;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    out_$p93 := $i2p.i64.ref(out_$i86);
    goto corral_source_split_1919;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    out_$i92 := $add.i32(out_$i91, 1);
    goto corral_source_split_1918;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i32($M.0, out_$p90);
    call {:si_unique_call 1042} {:cexpr "__cil_tmp81"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_1917;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    out_$p90 := $i2p.i64.ref(out_$i89);
    goto corral_source_split_1916;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i64(out_$i88, out_$i87);
    call {:si_unique_call 1041} {:cexpr "__cil_tmp80"} boogie_si_record_i64(out_$i89);
    goto corral_source_split_1915;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    out_$i88 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1040} {:cexpr "__cil_tmp79"} boogie_si_record_i64(out_$i88);
    goto corral_source_split_1914;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    out_$i87 := $add.i64(0, 204);
    call {:si_unique_call 1039} {:cexpr "__cil_tmp78"} boogie_si_record_i64(out_$i87);
    goto corral_source_split_1913;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i64(out_$i85, out_$i84);
    call {:si_unique_call 1038} {:cexpr "__cil_tmp76"} boogie_si_record_i64(out_$i86);
    goto corral_source_split_1912;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    out_$i85 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1037} {:cexpr "__cil_tmp75"} boogie_si_record_i64(out_$i85);
    goto corral_source_split_1911;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    out_$i84 := $add.i64(0, 204);
    call {:si_unique_call 1036} {:cexpr "__cil_tmp74"} boogie_si_record_i64(out_$i84);
    goto corral_source_split_1910;

  $bb21:
    assume out_$i83 == 1;
    goto corral_source_split_1909;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    out_$i83 := $ne.i32(out_$i82, 0);
    goto corral_source_split_1876;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    out_$i82 := $and.i32(out_$i81, 2);
    call {:si_unique_call 1019} {:cexpr "__cil_tmp72"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_1875;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i32($M.5, in_$p1);
    call {:si_unique_call 1018} {:cexpr "__cil_tmp71"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_1874;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p67, out_$i66);
    goto corral_source_split_1889;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    out_$p67 := $i2p.i64.ref(out_$i60);
    goto corral_source_split_1888;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    out_$i66 := $add.i32(out_$i65, 1);
    goto corral_source_split_1887;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, out_$p64);
    call {:si_unique_call 1026} {:cexpr "__cil_tmp59"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_1886;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    out_$p64 := $i2p.i64.ref(out_$i63);
    goto corral_source_split_1885;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i64(out_$i62, out_$i61);
    call {:si_unique_call 1025} {:cexpr "__cil_tmp58"} boogie_si_record_i64(out_$i63);
    goto corral_source_split_1884;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1024} {:cexpr "__cil_tmp57"} boogie_si_record_i64(out_$i62);
    goto corral_source_split_1883;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i64(0, 208);
    call {:si_unique_call 1023} {:cexpr "__cil_tmp56"} boogie_si_record_i64(out_$i61);
    goto corral_source_split_1882;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i64(out_$i59, out_$i58);
    call {:si_unique_call 1022} {:cexpr "__cil_tmp54"} boogie_si_record_i64(out_$i60);
    goto corral_source_split_1881;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1021} {:cexpr "__cil_tmp53"} boogie_si_record_i64(out_$i59);
    goto corral_source_split_1880;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i64(0, 208);
    call {:si_unique_call 1020} {:cexpr "__cil_tmp52"} boogie_si_record_i64(out_$i58);
    goto corral_source_split_1879;

  $bb15:
    assume out_$i57 == 1;
    goto corral_source_split_1878;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 0);
    goto corral_source_split_1864;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    out_$i56 := $and.i32(out_$i55, 4);
    call {:si_unique_call 1014} {:cexpr "__cil_tmp50"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_1863;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.5, in_$p1);
    call {:si_unique_call 1013} {:cexpr "__cil_tmp49"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_1862;

  $bb9:
    assume !(out_$i39 == 1);
    goto corral_source_split_1861;

  $bb19:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p80, out_$i79);
    goto corral_source_split_1907;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$p80 := $i2p.i64.ref(out_$i73);
    goto corral_source_split_1906;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i78, 1);
    goto corral_source_split_1905;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.0, out_$p77);
    call {:si_unique_call 1035} {:cexpr "__cil_tmp70"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_1904;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    out_$p77 := $i2p.i64.ref(out_$i76);
    goto corral_source_split_1903;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    out_$i76 := $add.i64(out_$i75, out_$i74);
    call {:si_unique_call 1034} {:cexpr "__cil_tmp69"} boogie_si_record_i64(out_$i76);
    goto corral_source_split_1902;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$i75 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1033} {:cexpr "__cil_tmp68"} boogie_si_record_i64(out_$i75);
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i64(0, 200);
    call {:si_unique_call 1032} {:cexpr "__cil_tmp67"} boogie_si_record_i64(out_$i74);
    goto corral_source_split_1900;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i64(out_$i72, out_$i71);
    call {:si_unique_call 1031} {:cexpr "__cil_tmp65"} boogie_si_record_i64(out_$i73);
    goto corral_source_split_1899;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1030} {:cexpr "__cil_tmp64"} boogie_si_record_i64(out_$i72);
    goto corral_source_split_1898;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i64(0, 200);
    call {:si_unique_call 1029} {:cexpr "__cil_tmp63"} boogie_si_record_i64(out_$i71);
    goto corral_source_split_1897;

  $bb18:
    assume out_$i70 == 1;
    goto corral_source_split_1896;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i32(out_$i69, 0);
    goto corral_source_split_1894;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    out_$i69 := $and.i32(out_$i68, 8);
    call {:si_unique_call 1028} {:cexpr "__cil_tmp61"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_1893;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.5, in_$p1);
    call {:si_unique_call 1027} {:cexpr "__cil_tmp60"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_1892;

  $bb16:
    assume !(out_$i57 == 1);
    goto corral_source_split_1891;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i107 := out_$i111;
    goto $bb29;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    out_$i107 := 3;
    goto $bb29;

  $bb27:
    assume out_$i106 == 1;
    goto corral_source_split_1942;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    out_$i106 := $ne.i32(out_$i105, 0);
    goto corral_source_split_1938;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    out_$i105 := $and.i32(out_$i104, 4);
    call {:si_unique_call 1051} {:cexpr "__cil_tmp92"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_1937;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i32($M.5, in_$p1);
    call {:si_unique_call 1050} {:cexpr "__cil_tmp91"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_1936;

  $bb25:
    assume !(out_$i102 == 1);
    goto corral_source_split_1935;

  $bb31:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    out_$i111 := 0;
    goto $bb32;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    out_$i111 := 2;
    goto $bb32;

  $bb30:
    assume out_$i110 == 1;
    goto corral_source_split_1949;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.i32(out_$i109, 0);
    goto corral_source_split_1947;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    out_$i109 := $and.i32(out_$i108, 8);
    call {:si_unique_call 1053} {:cexpr "__cil_tmp94"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_1946;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i32($M.5, in_$p1);
    call {:si_unique_call 1052} {:cexpr "__cil_tmp93"} boogie_si_record_i32(out_$i108);
    goto corral_source_split_1945;

  $bb28:
    assume !(out_$i106 == 1);
    goto corral_source_split_1944;

  $bb36_dummy:
    call {:si_unique_call 1} out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i106, out_$i108, out_$i109, out_$i110, out_$i111, out_$i107, out_$i103, out_$i112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_vslice_dummy_var_24 := receive_chars_loop_$bb5(in_$p0, in_$p1, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i106, out_$i108, out_$i109, out_$i110, out_$i111, out_$i107, out_$i103, out_$i112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_vslice_dummy_var_24);
    return;

  exit:
    return;
}



procedure receive_chars_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$i11: i32, in_$i12: i32, in_$i13: i64, in_$i14: i64, in_$i15: i64, in_$i16: i64, in_$i17: i64, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i64, in_$i28: i32, in_$i29: i64, in_$i30: i1, in_$i31: i64, in_$i32: i64, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i32, in_$i42: i64, in_$i43: i64, in_$i44: i64, in_$i45: i64, in_$i46: i64, in_$i47: i64, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$i58: i64, in_$i59: i64, in_$i60: i64, in_$i61: i64, in_$i62: i64, in_$i63: i64, in_$p64: ref, in_$i65: i32, in_$i66: i32, in_$p67: ref, in_$i68: i32, in_$i69: i32, in_$i70: i1, in_$i71: i64, in_$i72: i64, in_$i73: i64, in_$i74: i64, in_$i75: i64, in_$i76: i64, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i84: i64, in_$i85: i64, in_$i86: i64, in_$i87: i64, in_$i88: i64, in_$i89: i64, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$p93: ref, in_$i94: i64, in_$i95: i64, in_$p96: ref, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i104: i32, in_$i105: i32, in_$i106: i1, in_$i108: i32, in_$i109: i32, in_$i110: i1, in_$i111: i32, in_$i107: i32, in_$i103: i32, in_$i112: i32, in_$p113: ref, in_$i114: i32, in_$i115: i32, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i1, in_vslice_dummy_var_24: i32) returns (out_$i11: i32, out_$i12: i32, out_$i13: i64, out_$i14: i64, out_$i15: i64, out_$i16: i64, out_$i17: i64, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i64, out_$i28: i32, out_$i29: i64, out_$i30: i1, out_$i31: i64, out_$i32: i64, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i32, out_$i42: i64, out_$i43: i64, out_$i44: i64, out_$i45: i64, out_$i46: i64, out_$i47: i64, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$i58: i64, out_$i59: i64, out_$i60: i64, out_$i61: i64, out_$i62: i64, out_$i63: i64, out_$p64: ref, out_$i65: i32, out_$i66: i32, out_$p67: ref, out_$i68: i32, out_$i69: i32, out_$i70: i1, out_$i71: i64, out_$i72: i64, out_$i73: i64, out_$i74: i64, out_$i75: i64, out_$i76: i64, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i84: i64, out_$i85: i64, out_$i86: i64, out_$i87: i64, out_$i88: i64, out_$i89: i64, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$p93: ref, out_$i94: i64, out_$i95: i64, out_$p96: ref, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i104: i32, out_$i105: i32, out_$i106: i1, out_$i108: i32, out_$i109: i32, out_$i110: i1, out_$i111: i32, out_$i107: i32, out_$i103: i32, out_$i112: i32, out_$p113: ref, out_$i114: i32, out_$i115: i32, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i1, out_vslice_dummy_var_24: i32);
  modifies $M.5, $M.0, $M.2, assertsPassed;



implementation transmit_chars_loop_$bb11(in_$p0: ref, in_$p7: ref, in_$i51: i32, in_$i52: i64, in_$i53: i64, in_$p54: ref, in_$i55: i32, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i8, in_$i61: i32, in_$i62: i64, in_$i63: i64, in_$i64: i64, in_$i65: i64, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$p70: ref, in_$i71: i64, in_$i72: i64, in_$i73: i64, in_$i74: i64, in_$i75: i64, in_$i76: i64, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$i81: i64, in_$i82: i64, in_$p83: ref, in_$i84: i32, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i1) returns (out_$i51: i32, out_$i52: i64, out_$i53: i64, out_$p54: ref, out_$i55: i32, out_$i56: i64, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i8, out_$i61: i32, out_$i62: i64, out_$i63: i64, out_$i64: i64, out_$i65: i64, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$p70: ref, out_$i71: i64, out_$i72: i64, out_$i73: i64, out_$i74: i64, out_$i75: i64, out_$i76: i64, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$i81: i64, out_$i82: i64, out_$p83: ref, out_$i84: i32, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i1)
{

  entry:
    out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91 := in_$i51, in_$i52, in_$i53, in_$p54, in_$i55, in_$i56, in_$p57, in_$p58, in_$p59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i69, in_$p70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$p77, in_$i78, in_$i79, in_$p80, in_$i81, in_$i82, in_$p83, in_$i84, in_$i85, in_$i86, in_$p87, in_$i88, in_$i89, in_$i90, in_$i91;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2033;

  $bb16:
    assume out_$i91 == 1;
    assume {:verifier.code 0} true;
    out_$i51 := out_$i90;
    goto $bb16_dummy;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    out_$i91 := $sgt.i32(out_$i90, 0);
    goto corral_source_split_2092;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i90 := $sub.i32(out_$i51, 1);
    call {:si_unique_call 1129} {:cexpr "count"} boogie_si_record_i32(out_$i90);
    goto corral_source_split_2091;

  $bb13:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i88, out_$i84);
    goto corral_source_split_2074;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.0, out_$p87);
    call {:si_unique_call 1119} {:cexpr "__cil_tmp75"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_2073;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    out_$p87 := $i2p.i64.ref(out_$i86);
    goto corral_source_split_2072;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i64(out_$i85, 8);
    call {:si_unique_call 1118} {:cexpr "__cil_tmp74"} boogie_si_record_i64(out_$i86);
    goto corral_source_split_2071;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    out_$i85 := $p2i.ref.i64(in_$p7);
    call {:si_unique_call 1117} {:cexpr "__cil_tmp73"} boogie_si_record_i64(out_$i85);
    goto corral_source_split_2070;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i32($M.0, out_$p83);
    call {:si_unique_call 1116} {:cexpr "__cil_tmp72"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_2069;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    out_$p83 := $i2p.i64.ref(out_$i82);
    goto corral_source_split_2068;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    out_$i82 := $add.i64(out_$i81, 12);
    call {:si_unique_call 1115} {:cexpr "__cil_tmp71"} boogie_si_record_i64(out_$i82);
    goto corral_source_split_2067;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    out_$i81 := $p2i.ref.i64(in_$p7);
    call {:si_unique_call 1114} {:cexpr "__cil_tmp70"} boogie_si_record_i64(out_$i81);
    goto corral_source_split_2066;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p80, out_$i79);
    goto corral_source_split_2065;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    out_$p80 := $i2p.i64.ref(out_$i73);
    goto corral_source_split_2064;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i78, 1);
    goto corral_source_split_2063;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.0, out_$p77);
    call {:si_unique_call 1113} {:cexpr "__cil_tmp69"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_2062;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    out_$p77 := $i2p.i64.ref(out_$i76);
    goto corral_source_split_2061;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    out_$i76 := $add.i64(out_$i75, out_$i74);
    call {:si_unique_call 1112} {:cexpr "__cil_tmp68"} boogie_si_record_i64(out_$i76);
    goto corral_source_split_2060;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    out_$i75 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1111} {:cexpr "__cil_tmp67"} boogie_si_record_i64(out_$i75);
    goto corral_source_split_2059;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i64(0, 196);
    call {:si_unique_call 1110} {:cexpr "__cil_tmp66"} boogie_si_record_i64(out_$i74);
    goto corral_source_split_2058;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i64(out_$i72, out_$i71);
    call {:si_unique_call 1109} {:cexpr "__cil_tmp64"} boogie_si_record_i64(out_$i73);
    goto corral_source_split_2057;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1108} {:cexpr "__cil_tmp63"} boogie_si_record_i64(out_$i72);
    goto corral_source_split_2056;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i64(0, 196);
    call {:si_unique_call 1107} {:cexpr "__cil_tmp62"} boogie_si_record_i64(out_$i71);
    goto corral_source_split_2055;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p70, out_$i69);
    goto corral_source_split_2054;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    out_$p70 := $i2p.i64.ref(out_$i63);
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    out_$i69 := $and.i32(out_$i68, 4095);
    goto corral_source_split_2052;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i32(out_$i67, 1);
    call {:si_unique_call 1106} {:cexpr "__cil_tmp60"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_2051;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i32($M.0, out_$p66);
    call {:si_unique_call 1105} {:cexpr "__cil_tmp59"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_2050;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    out_$p66 := $i2p.i64.ref(out_$i65);
    goto corral_source_split_2049;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i64(out_$i64, 12);
    call {:si_unique_call 1104} {:cexpr "__cil_tmp58"} boogie_si_record_i64(out_$i65);
    goto corral_source_split_2048;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    out_$i64 := $p2i.ref.i64(in_$p7);
    call {:si_unique_call 1103} {:cexpr "__cil_tmp57"} boogie_si_record_i64(out_$i64);
    goto corral_source_split_2047;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i64(out_$i62, 12);
    call {:si_unique_call 1102} {:cexpr "__cil_tmp56"} boogie_si_record_i64(out_$i63);
    goto corral_source_split_2046;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(in_$p7);
    call {:si_unique_call 1101} {:cexpr "__cil_tmp55"} boogie_si_record_i64(out_$i62);
    goto corral_source_split_2045;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} serial_out(in_$p0, 0, out_$i61);
    goto corral_source_split_2044;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i8.i32(out_$i60);
    call {:si_unique_call 1099} {:cexpr "__cil_tmp54"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_2043;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i8($M.0, out_$p59);
    call {:si_unique_call 1098} {:cexpr "__cil_tmp53"} boogie_si_record_i8(out_$i60);
    goto corral_source_split_2042;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref(out_$p58, $mul.ref(out_$i56, 1));
    goto corral_source_split_2041;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_2040;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(in_$p7);
    goto corral_source_split_2039;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i55);
    call {:si_unique_call 1097} {:cexpr "__cil_tmp50"} boogie_si_record_i64(out_$i56);
    goto corral_source_split_2038;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.0, out_$p54);
    call {:si_unique_call 1096} {:cexpr "__cil_tmp49"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_2037;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    out_$p54 := $i2p.i64.ref(out_$i53);
    goto corral_source_split_2036;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i64(out_$i52, 12);
    call {:si_unique_call 1095} {:cexpr "__cil_tmp48"} boogie_si_record_i64(out_$i53);
    goto corral_source_split_2035;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    out_$i52 := $p2i.ref.i64(in_$p7);
    call {:si_unique_call 1094} {:cexpr "__cil_tmp47"} boogie_si_record_i64(out_$i52);
    goto corral_source_split_2034;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91 := transmit_chars_loop_$bb11(in_$p0, in_$p7, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91);
    return;

  exit:
    return;
}



procedure transmit_chars_loop_$bb11(in_$p0: ref, in_$p7: ref, in_$i51: i32, in_$i52: i64, in_$i53: i64, in_$p54: ref, in_$i55: i32, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i8, in_$i61: i32, in_$i62: i64, in_$i63: i64, in_$i64: i64, in_$i65: i64, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$p70: ref, in_$i71: i64, in_$i72: i64, in_$i73: i64, in_$i74: i64, in_$i75: i64, in_$i76: i64, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$i81: i64, in_$i82: i64, in_$p83: ref, in_$i84: i32, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i1) returns (out_$i51: i32, out_$i52: i64, out_$i53: i64, out_$p54: ref, out_$i55: i32, out_$i56: i64, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i8, out_$i61: i32, out_$i62: i64, out_$i63: i64, out_$i64: i64, out_$i65: i64, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$p70: ref, out_$i71: i64, out_$i72: i64, out_$i73: i64, out_$i74: i64, out_$i75: i64, out_$i76: i64, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$i81: i64, out_$i82: i64, out_$p83: ref, out_$i84: i32, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i1);
  modifies $M.0;



implementation dma_sync_single_for_device_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_sync_single_for_device_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_sync_single_for_device_loop_$bb3();



implementation dma_sync_single_for_cpu_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_sync_single_for_cpu_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_sync_single_for_cpu_loop_$bb3();



implementation dma_map_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_single_attrs_loop_$bb3();



implementation main_loop_$bb5(in_$i5: i32, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i64, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i43: i1, in_$i44: i64, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$i65: i32, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_vslice_dummy_var_26: i32, in_vslice_dummy_var_27: i32, in_vslice_dummy_var_28: i32, in_vslice_dummy_var_29: ref, in_vslice_dummy_var_30: i32, in_vslice_dummy_var_31: i32, in_vslice_dummy_var_32: i32, in_vslice_dummy_var_33: i32, in_vslice_dummy_var_34: i32, in_vslice_dummy_var_35: i32, in_vslice_dummy_var_36: i32, in_vslice_dummy_var_37: i32, in_vslice_dummy_var_38: i32) returns (out_$i5: i32, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i64, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i43: i1, out_$i44: i64, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i2: i32, out_$i3: i32, out_$i4: i32, out_$i65: i32, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_vslice_dummy_var_26: i32, out_vslice_dummy_var_27: i32, out_vslice_dummy_var_28: i32, out_vslice_dummy_var_29: ref, out_vslice_dummy_var_30: i32, out_vslice_dummy_var_31: i32, out_vslice_dummy_var_32: i32, out_vslice_dummy_var_33: i32, out_vslice_dummy_var_34: i32, out_vslice_dummy_var_35: i32, out_vslice_dummy_var_36: i32, out_vslice_dummy_var_37: i32, out_vslice_dummy_var_38: i32)
{

  entry:
    out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i57, out_$i58, out_$i59, out_$i60, out_$i40, out_$i41, out_$i42, out_$i2, out_$i3, out_$i4, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_vslice_dummy_var_26, out_vslice_dummy_var_27, out_vslice_dummy_var_28, out_vslice_dummy_var_29, out_vslice_dummy_var_30, out_vslice_dummy_var_31, out_vslice_dummy_var_32, out_vslice_dummy_var_33, out_vslice_dummy_var_34, out_vslice_dummy_var_35, out_vslice_dummy_var_36, out_vslice_dummy_var_37, out_vslice_dummy_var_38 := in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i57, in_$i58, in_$i59, in_$i60, in_$i40, in_$i41, in_$i42, in_$i2, in_$i3, in_$i4, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_vslice_dummy_var_26, in_vslice_dummy_var_27, in_vslice_dummy_var_28, in_vslice_dummy_var_29, in_vslice_dummy_var_30, in_vslice_dummy_var_31, in_vslice_dummy_var_32, in_vslice_dummy_var_33, in_vslice_dummy_var_34, in_vslice_dummy_var_35, in_vslice_dummy_var_36, in_vslice_dummy_var_37, in_vslice_dummy_var_38;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2853;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    out_$i2, out_$i3, out_$i4 := out_$i40, out_$i41, out_$i42;
    goto corral_source_split_3076_dummy;

  $bb105:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3076;

  $bb94:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i60;
    goto $bb105;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i3, out_$i4;
    goto $bb105;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i2, out_$i47, out_$i4;
    goto $bb105;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i39, out_$i3, out_$i4;
    goto $bb105;

  $bb104:
    assume {:verifier.code 0} true;
    goto corral_source_split_3074;

  $bb99:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := out_$i2;
    goto $bb104;

  $bb103:
    assume {:verifier.code 0} true;
    out_$i39 := 0;
    goto $bb104;

  $bb101:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i64(out_$i36, 0);
    goto corral_source_split_3068;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} ldv_check_return_value(out_$i37);
    goto corral_source_split_3067;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i64.i32(out_$i36);
    call {:si_unique_call 1600} {:cexpr "__cil_tmp34"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_3066;

  SeqInstr_189:
    call {:si_unique_call 1599} {:cexpr "res_port_show_regs_2"} boogie_si_record_i64(out_$i36);
    goto corral_source_split_3065;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} out_$i36 := port_show_regs($u4, $u5, $u0, $u6);
    goto SeqInstr_188;

  $bb98:
    assume out_$i35 == 1;
    goto corral_source_split_3064;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i2, 0);
    goto corral_source_split_2865;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume out_$i6 == 1;
    goto corral_source_split_2860;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i5, 0);
    goto corral_source_split_2858;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1567} out_$i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1568} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i5);
    call {:si_unique_call 1569} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_2857;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb149:
    assume out_$i66 == 1;
    goto corral_source_split_3097;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 0);
    goto corral_source_split_2855;

  corral_source_split_2853:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1564} out_$i65 := __VERIFIER_nondet_int();
    call {:si_unique_call 1565} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i65);
    call {:si_unique_call 1566} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_2854;

  $bb151:
    assume out_$i67 == 1;
    goto corral_source_split_3102;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i2, 0);
    goto corral_source_split_3100;

  $bb150:
    assume !(out_$i66 == 1);
    goto corral_source_split_3099;

  $bb153:
    assume out_$i68 == 1;
    goto corral_source_split_3107;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(out_$i3, 0);
    goto corral_source_split_3105;

  $bb152:
    assume !(out_$i67 == 1);
    goto corral_source_split_3104;

  $bb155:
    assume out_$i69 == 1;
    goto corral_source_split_3112;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i4, 0);
    goto corral_source_split_3110;

  $bb154:
    assume !(out_$i68 == 1);
    goto corral_source_split_3109;

  $bb111:
    assume {:verifier.code 0} true;
    goto corral_source_split_3086;

  $bb107:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i47 := out_$i3;
    goto $bb111;

  $bb110:
    assume {:verifier.code 0} true;
    out_$i47 := 0;
    goto $bb111;

  $bb109:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i64(out_$i44, 0);
    goto corral_source_split_3082;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} ldv_check_return_value(out_$i45);
    goto corral_source_split_3081;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    out_$i45 := $trunc.i64.i32(out_$i44);
    call {:si_unique_call 1605} {:cexpr "__cil_tmp35"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_3080;

  SeqInstr_192:
    call {:si_unique_call 1604} {:cexpr "res_dma_show_regs_3"} boogie_si_record_i64(out_$i44);
    goto corral_source_split_3079;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} out_$i44 := dma_show_regs($u4, $u5, $u0, $u6);
    goto SeqInstr_191;

  $bb106:
    assume out_$i43 == 1;
    goto corral_source_split_3078;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i3, 0);
    goto corral_source_split_2872;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i7 == 1;
    goto corral_source_split_2867;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i5, 1);
    goto corral_source_split_2863;

  $bb8:
    assume !(out_$i6 == 1);
    goto corral_source_split_2862;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume out_$i8 == 1;
    goto corral_source_split_2874;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i5, 2);
    goto corral_source_split_2870;

  $bb11:
    assume !(out_$i7 == 1);
    goto corral_source_split_2869;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i9 == 1;
    goto corral_source_split_2879;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i5, 3);
    goto corral_source_split_2877;

  $bb14:
    assume !(out_$i8 == 1);
    goto corral_source_split_2876;

  SeqInstr_171:
    goto corral_source_split_2889;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} out_vslice_dummy_var_26 := serial_hsu_tx_empty($u7);
    goto SeqInstr_170;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i10 == 1;
    goto corral_source_split_2884;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i5, 4);
    goto corral_source_split_2882;

  $bb17:
    assume !(out_$i9 == 1);
    goto corral_source_split_2881;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} serial_hsu_set_mctrl($u7, $u2);
    goto corral_source_split_2896;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i11 == 1;
    goto corral_source_split_2891;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i5, 5);
    goto corral_source_split_2887;

  $bb20:
    assume !(out_$i10 == 1);
    goto corral_source_split_2886;

  SeqInstr_174:
    goto corral_source_split_2903;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} out_vslice_dummy_var_27 := serial_hsu_get_mctrl($u7);
    goto SeqInstr_173;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume out_$i12 == 1;
    goto corral_source_split_2898;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i5, 6);
    goto corral_source_split_2894;

  $bb23:
    assume !(out_$i11 == 1);
    goto corral_source_split_2893;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} serial_hsu_stop_tx($u7);
    goto corral_source_split_2910;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i13 == 1;
    goto corral_source_split_2905;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i5, 7);
    goto corral_source_split_2901;

  $bb26:
    assume !(out_$i12 == 1);
    goto corral_source_split_2900;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} serial_hsu_start_tx($u7);
    goto corral_source_split_2917;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume out_$i14 == 1;
    goto corral_source_split_2912;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i5, 8);
    goto corral_source_split_2908;

  $bb29:
    assume !(out_$i13 == 1);
    goto corral_source_split_2907;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} serial_hsu_stop_rx($u7);
    goto corral_source_split_2924;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb34:
    assume out_$i15 == 1;
    goto corral_source_split_2919;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i5, 9);
    goto corral_source_split_2915;

  $bb32:
    assume !(out_$i14 == 1);
    goto corral_source_split_2914;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} serial_hsu_enable_ms($u7);
    goto corral_source_split_2931;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume out_$i16 == 1;
    goto corral_source_split_2926;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i5, 10);
    goto corral_source_split_2922;

  $bb35:
    assume !(out_$i15 == 1);
    goto corral_source_split_2921;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} serial_hsu_break_ctl($u7, $u2);
    goto corral_source_split_2938;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i17 == 1;
    goto corral_source_split_2933;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i5, 11);
    goto corral_source_split_2929;

  $bb38:
    assume !(out_$i16 == 1);
    goto corral_source_split_2928;

  SeqInstr_177:
    goto corral_source_split_2945;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} out_vslice_dummy_var_28 := serial_hsu_startup($u7);
    goto SeqInstr_176;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume out_$i18 == 1;
    goto corral_source_split_2940;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i5, 12);
    goto corral_source_split_2936;

  $bb41:
    assume !(out_$i17 == 1);
    goto corral_source_split_2935;

  SeqInstr_180:
    goto corral_source_split_2952;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} serial_hsu_shutdown($u7);
    goto SeqInstr_179;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb46:
    assume out_$i19 == 1;
    goto corral_source_split_2947;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i5, 13);
    goto corral_source_split_2943;

  $bb44:
    assume !(out_$i18 == 1);
    goto corral_source_split_2942;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} serial_hsu_set_termios($u7, $u8, $u8);
    goto corral_source_split_2959;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb49:
    assume out_$i20 == 1;
    goto corral_source_split_2954;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i5, 14);
    goto corral_source_split_2950;

  $bb47:
    assume !(out_$i19 == 1);
    goto corral_source_split_2949;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} serial_hsu_pm($u7, $u2, $u2);
    goto corral_source_split_2966;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume out_$i21 == 1;
    goto corral_source_split_2961;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i5, 15);
    goto corral_source_split_2957;

  $bb50:
    assume !(out_$i20 == 1);
    goto corral_source_split_2956;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} out_vslice_dummy_var_29 := serial_hsu_type($u7);
    goto corral_source_split_2973;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb55:
    assume out_$i22 == 1;
    goto corral_source_split_2968;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i5, 16);
    goto corral_source_split_2964;

  $bb53:
    assume !(out_$i21 == 1);
    goto corral_source_split_2963;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} serial_hsu_release_port($u7);
    goto corral_source_split_2980;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb58:
    assume out_$i23 == 1;
    goto corral_source_split_2975;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i5, 17);
    goto corral_source_split_2971;

  $bb56:
    assume !(out_$i22 == 1);
    goto corral_source_split_2970;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} out_vslice_dummy_var_30 := serial_hsu_request_port($u7);
    goto corral_source_split_2987;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb61:
    assume out_$i24 == 1;
    goto corral_source_split_2982;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i5, 18);
    goto corral_source_split_2978;

  $bb59:
    assume !(out_$i23 == 1);
    goto corral_source_split_2977;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} serial_hsu_config_port($u7, $u2);
    goto corral_source_split_2994;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb64:
    assume out_$i25 == 1;
    goto corral_source_split_2989;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i5, 19);
    goto corral_source_split_2985;

  $bb62:
    assume !(out_$i24 == 1);
    goto corral_source_split_2984;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} out_vslice_dummy_var_31 := serial_hsu_verify_port($u7, $u9);
    goto corral_source_split_3001;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb67:
    assume out_$i26 == 1;
    goto corral_source_split_2996;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i5, 20);
    goto corral_source_split_2992;

  $bb65:
    assume !(out_$i25 == 1);
    goto corral_source_split_2991;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} out_vslice_dummy_var_32 := serial_hsu_runtime_suspend($u10);
    goto corral_source_split_3008;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb70:
    assume out_$i27 == 1;
    goto corral_source_split_3003;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i5, 21);
    goto corral_source_split_2999;

  $bb68:
    assume !(out_$i26 == 1);
    goto corral_source_split_2998;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} out_vslice_dummy_var_33 := serial_hsu_runtime_resume($u10);
    goto corral_source_split_3015;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb73:
    assume out_$i28 == 1;
    goto corral_source_split_3010;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i5, 22);
    goto corral_source_split_3006;

  $bb71:
    assume !(out_$i27 == 1);
    goto corral_source_split_3005;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} out_vslice_dummy_var_34 := serial_hsu_runtime_idle($u10);
    goto corral_source_split_3022;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb76:
    assume out_$i29 == 1;
    goto corral_source_split_3017;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i5, 23);
    goto corral_source_split_3013;

  $bb74:
    assume !(out_$i28 == 1);
    goto corral_source_split_3012;

  $bb117:
    assume {:verifier.code 0} true;
    goto corral_source_split_3095;

  $bb113:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    out_$i60 := out_$i4;
    goto $bb117;

  $bb116:
    assume {:verifier.code 0} true;
    out_$i60 := 0;
    goto $bb117;

  $bb115:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 0);
    goto corral_source_split_3091;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} ldv_check_return_value(out_$i58);
    goto corral_source_split_3090;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} out_$i58 := serial_hsu_probe($u11, $u12);
    call {:si_unique_call 1608} {:cexpr "res_serial_hsu_probe_43"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_3089;

  $bb112:
    assume out_$i57 == 1;
    goto corral_source_split_3088;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb81:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i4, 0);
    goto corral_source_split_3029;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb79:
    assume out_$i30 == 1;
    goto corral_source_split_3024;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i5, 24);
    goto corral_source_split_3020;

  $bb77:
    assume !(out_$i29 == 1);
    goto corral_source_split_3019;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} out_vslice_dummy_var_35 := serial_hsu_suspend($u11, $u2);
    goto corral_source_split_3036;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb82:
    assume out_$i31 == 1;
    goto corral_source_split_3031;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i5, 25);
    goto corral_source_split_3027;

  $bb80:
    assume !(out_$i30 == 1);
    goto corral_source_split_3026;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} out_vslice_dummy_var_36 := serial_hsu_resume($u11);
    goto corral_source_split_3043;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb85:
    assume out_$i32 == 1;
    goto corral_source_split_3038;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i5, 26);
    goto corral_source_split_3034;

  $bb83:
    assume !(out_$i31 == 1);
    goto corral_source_split_3033;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_3052;

  SeqInstr_183:
    goto corral_source_split_3051;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} out_vslice_dummy_var_37 := dma_irq($u2, $u5);
    goto SeqInstr_182;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_3050;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb88:
    assume out_$i33 == 1;
    goto corral_source_split_3045;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i5, 27);
    goto corral_source_split_3041;

  $bb86:
    assume !(out_$i32 == 1);
    goto corral_source_split_3040;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_3060;

  SeqInstr_186:
    goto corral_source_split_3059;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} out_vslice_dummy_var_38 := port_irq($u2, $u5);
    goto SeqInstr_185;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_3058;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb91:
    assume out_$i34 == 1;
    goto corral_source_split_3054;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i5, 28);
    goto corral_source_split_3048;

  $bb89:
    assume !(out_$i33 == 1);
    goto corral_source_split_3047;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb92:
    assume !(out_$i34 == 1);
    goto corral_source_split_3056;

  corral_source_split_3076_dummy:
    call {:si_unique_call 1} out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i57, out_$i58, out_$i59, out_$i60, out_$i40, out_$i41, out_$i42, out_$i2, out_$i3, out_$i4, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_vslice_dummy_var_26, out_vslice_dummy_var_27, out_vslice_dummy_var_28, out_vslice_dummy_var_29, out_vslice_dummy_var_30, out_vslice_dummy_var_31, out_vslice_dummy_var_32, out_vslice_dummy_var_33, out_vslice_dummy_var_34, out_vslice_dummy_var_35, out_vslice_dummy_var_36, out_vslice_dummy_var_37, out_vslice_dummy_var_38 := main_loop_$bb5(out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i57, out_$i58, out_$i59, out_$i60, out_$i40, out_$i41, out_$i42, out_$i2, out_$i3, out_$i4, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_vslice_dummy_var_26, out_vslice_dummy_var_27, out_vslice_dummy_var_28, out_vslice_dummy_var_29, out_vslice_dummy_var_30, out_vslice_dummy_var_31, out_vslice_dummy_var_32, out_vslice_dummy_var_33, out_vslice_dummy_var_34, out_vslice_dummy_var_35, out_vslice_dummy_var_36, out_vslice_dummy_var_37, out_vslice_dummy_var_38);
    return;

  exit:
    return;
}



procedure main_loop_$bb5(in_$i5: i32, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i64, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i43: i1, in_$i44: i64, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$i65: i32, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_vslice_dummy_var_26: i32, in_vslice_dummy_var_27: i32, in_vslice_dummy_var_28: i32, in_vslice_dummy_var_29: ref, in_vslice_dummy_var_30: i32, in_vslice_dummy_var_31: i32, in_vslice_dummy_var_32: i32, in_vslice_dummy_var_33: i32, in_vslice_dummy_var_34: i32, in_vslice_dummy_var_35: i32, in_vslice_dummy_var_36: i32, in_vslice_dummy_var_37: i32, in_vslice_dummy_var_38: i32) returns (out_$i5: i32, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i64, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i43: i1, out_$i44: i64, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i2: i32, out_$i3: i32, out_$i4: i32, out_$i65: i32, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_vslice_dummy_var_26: i32, out_vslice_dummy_var_27: i32, out_vslice_dummy_var_28: i32, out_vslice_dummy_var_29: ref, out_vslice_dummy_var_30: i32, out_vslice_dummy_var_31: i32, out_vslice_dummy_var_32: i32, out_vslice_dummy_var_33: i32, out_vslice_dummy_var_34: i32, out_vslice_dummy_var_35: i32, out_vslice_dummy_var_36: i32, out_vslice_dummy_var_37: i32, out_vslice_dummy_var_38: i32);
  modifies $M.0, assertsPassed, $M.2, $M.6, $CurrAddr, $M.5;


