var $M.0: i32;

var $M.1: [ref]i8;

var $M.4: i32;

var $M.5: i32;

var $M.6: i32;

var $M.7: i8;

var $M.8: i8;

var $M.10: [ref]i32;

var $M.11: [ref]i32;

var $M.26: [ref]i8;

var $M.27: [ref]i8;

var $M.31: i8;

var $M.32: i32;

var $M.33: [ref]i32;

var $M.34: [ref]ref;

var $M.35: [ref]ref;

var $M.36: [ref]i32;

var $M.37: [ref]ref;

var $M.38: [ref]ref;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.52: i32;

var $M.53: i16;

var $M.54: i32;

var $M.55: i32;

var $M.56: i32;

var $M.61: [ref]i8;

var $M.64: [ref]i8;

var $M.73: [ref]i8;

var $M.74: [ref]i8;

var $M.75: [ref]i8;

var $M.76: [ref]i8;

var $M.77: [ref]i8;

var $M.78: [ref]i8;

var $M.79: [ref]i8;

var $M.104: [ref]i8;

var $M.105: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 580334);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const gspca_debug: ref;

axiom gspca_debug == $sub.ref(0, 1028);

const __ksymtab_gspca_debug: ref;

axiom __ksymtab_gspca_debug == $sub.ref(0, 2068);

const {:count 12} __kstrtab_gspca_debug: ref;

axiom __kstrtab_gspca_debug == $sub.ref(0, 3104);

const __ksymtab_gspca_frame_add: ref;

axiom __ksymtab_gspca_frame_add == $sub.ref(0, 4144);

const {:count 16} __kstrtab_gspca_frame_add: ref;

axiom __kstrtab_gspca_frame_add == $sub.ref(0, 5184);

const ldv_linux_lib_idr_idr: ref;

axiom ldv_linux_lib_idr_idr == $sub.ref(0, 6212);

const ldv_linux_kernel_sched_completion_completion: ref;

axiom ldv_linux_kernel_sched_completion_completion == $sub.ref(0, 7240);

const ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct == $sub.ref(0, 8268);

const ldv_linux_kernel_locking_spinlock_spin_ptl: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_ptl == $sub.ref(0, 9296);

const ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data == $sub.ref(0, 10324);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN == $sub.ref(0, 11352);

const ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 12380);

const ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode == $sub.ref(0, 13408);

const ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct == $sub.ref(0, 14436);

const __ldv_in_interrupt_context: ref;

axiom __ldv_in_interrupt_context == $sub.ref(0, 15461);

const ldv_linux_block_queue_queue_state: ref;

axiom ldv_linux_block_queue_queue_state == $sub.ref(0, 16489);

const ldv_linux_block_genhd_disk_state: ref;

axiom ldv_linux_block_genhd_disk_state == $sub.ref(0, 17517);

const {:count 35} __kstrtab_gspca_coarse_grained_expo_autogain: ref;

axiom __kstrtab_gspca_coarse_grained_expo_autogain == $sub.ref(0, 18576);

const {:count 20} __kstrtab_gspca_expo_autogain: ref;

axiom __kstrtab_gspca_expo_autogain == $sub.ref(0, 19620);

const gspca_vm_ops: ref;

axiom gspca_vm_ops == $sub.ref(0, 20724);

const {:count 13} __kstrtab_gspca_resume: ref;

axiom __kstrtab_gspca_resume == $sub.ref(0, 21761);

const {:count 14} __kstrtab_gspca_suspend: ref;

axiom __kstrtab_gspca_suspend == $sub.ref(0, 22799);

const {:count 17} __kstrtab_gspca_disconnect: ref;

axiom __kstrtab_gspca_disconnect == $sub.ref(0, 23840);

const {:count 16} __kstrtab_gspca_dev_probe: ref;

axiom __kstrtab_gspca_dev_probe == $sub.ref(0, 24880);

const {:count 17} __kstrtab_gspca_dev_probe2: ref;

axiom __kstrtab_gspca_dev_probe2 == $sub.ref(0, 25921);

const dev_ioctl_ops: ref;

axiom dev_ioctl_ops == $sub.ref(0, 27873);

const dev_fops: ref;

axiom dev_fops == $sub.ref(0, 28985);

const gspca_template: ref;

axiom gspca_template == $sub.ref(0, 31849);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_usb_lock_of_gspca_dev: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_usb_lock_of_gspca_dev == $sub.ref(0, 32874);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_queue_lock_of_gspca_dev: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_queue_lock_of_gspca_dev == $sub.ref(0, 33899);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device == $sub.ref(0, 34924);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock_of_v4l2_ctrl_handler: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock_of_v4l2_ctrl_handler == $sub.ref(0, 35949);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock == $sub.ref(0, 36974);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode == $sub.ref(0, 37999);

const LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS: ref;

axiom LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS == $sub.ref(0, 39027);

const ldv_thread_2: ref;

axiom ldv_thread_2 == $sub.ref(0, 40067);

const ldv_thread_1: ref;

axiom ldv_thread_1 == $sub.ref(0, 41107);

const ldv_thread_0: ref;

axiom ldv_thread_0 == $sub.ref(0, 42147);

const ldv_linux_usb_urb_urb_state: ref;

axiom ldv_linux_usb_urb_urb_state == $sub.ref(0, 43175);

const ldv_linux_usb_register_probe_state: ref;

axiom ldv_linux_usb_register_probe_state == $sub.ref(0, 44203);

const ldv_linux_usb_gadget_usb_gadget: ref;

axiom ldv_linux_usb_gadget_usb_gadget == $sub.ref(0, 45231);

const ldv_linux_usb_coherent_coherent_state: ref;

axiom ldv_linux_usb_coherent_coherent_state == $sub.ref(0, 46259);

const locksocknumber: ref;

axiom locksocknumber == $sub.ref(0, 47287);

const rtnllocknumber: ref;

axiom rtnllocknumber == $sub.ref(0, 48315);

const ldv_linux_net_register_probe_state: ref;

axiom ldv_linux_net_register_probe_state == $sub.ref(0, 49343);

const ldv_linux_mmc_sdio_func_sdio_element: ref;

axiom ldv_linux_mmc_sdio_func_sdio_element == $sub.ref(0, 50369);

const ldv_linux_kernel_rcu_update_lock_rcu_nested: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_nested == $sub.ref(0, 51397);

const ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched == $sub.ref(0, 52425);

const ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh == $sub.ref(0, 53453);

const ldv_linux_kernel_rcu_srcu_srcu_nested: ref;

axiom ldv_linux_kernel_rcu_srcu_srcu_nested == $sub.ref(0, 54481);

const ldv_linux_kernel_module_module_refcounter: ref;

axiom ldv_linux_kernel_module_module_refcounter == $sub.ref(0, 55509);

const ldv_linux_kernel_locking_rwlock_wlock: ref;

axiom ldv_linux_kernel_locking_rwlock_wlock == $sub.ref(0, 56537);

const ldv_linux_kernel_locking_rwlock_rlock: ref;

axiom ldv_linux_kernel_locking_rwlock_rlock == $sub.ref(0, 57565);

const ldv_linux_fs_sysfs_sysfs: ref;

axiom ldv_linux_fs_sysfs_sysfs == $sub.ref(0, 58593);

const ldv_linux_fs_char_dev_usb_gadget_chrdev: ref;

axiom ldv_linux_fs_char_dev_usb_gadget_chrdev == $sub.ref(0, 59621);

const ldv_linux_drivers_base_class_usb_gadget_class: ref;

axiom ldv_linux_drivers_base_class_usb_gadget_class == $sub.ref(0, 60649);

const ldv_linux_block_request_blk_rq: ref;

axiom ldv_linux_block_request_blk_rq == $sub.ref(0, 61677);

const ldv_linux_arch_io_iomem: ref;

axiom ldv_linux_arch_io_iomem == $sub.ref(0, 62705);

const ldv_linux_alloc_usb_lock_lock: ref;

axiom ldv_linux_alloc_usb_lock_lock == $sub.ref(0, 63733);

const __ksymtab_gspca_coarse_grained_expo_autogain: ref;

axiom __ksymtab_gspca_coarse_grained_expo_autogain == $sub.ref(0, 64773);

const __ksymtab_gspca_expo_autogain: ref;

axiom __ksymtab_gspca_expo_autogain == $sub.ref(0, 65813);

const __ksymtab_gspca_resume: ref;

axiom __ksymtab_gspca_resume == $sub.ref(0, 66853);

const __ksymtab_gspca_suspend: ref;

axiom __ksymtab_gspca_suspend == $sub.ref(0, 67893);

const __ksymtab_gspca_disconnect: ref;

axiom __ksymtab_gspca_disconnect == $sub.ref(0, 68933);

const __ksymtab_gspca_dev_probe: ref;

axiom __ksymtab_gspca_dev_probe == $sub.ref(0, 69973);

const __ksymtab_gspca_dev_probe2: ref;

axiom __ksymtab_gspca_dev_probe2 == $sub.ref(0, 71013);

const .str: ref;

axiom .str == $sub.ref(0, 72056);

const {:count 28} .str.1: ref;

axiom .str.1 == $sub.ref(0, 73108);

const {:count 27} .str.2: ref;

axiom .str.2 == $sub.ref(0, 74159);

const {:count 42} .str.3: ref;

axiom .str.3 == $sub.ref(0, 75225);

const {:count 44} .str.4: ref;

axiom .str.4 == $sub.ref(0, 76293);

const {:count 28} .str.5: ref;

axiom .str.5 == $sub.ref(0, 77345);

const {:count 21} .str.6: ref;

axiom .str.6 == $sub.ref(0, 78390);

const {:count 23} .str.7: ref;

axiom .str.7 == $sub.ref(0, 79437);

const {:count 15} .str.8: ref;

axiom .str.8 == $sub.ref(0, 80476);

const {:count 43} .str.9: ref;

axiom .str.9 == $sub.ref(0, 81543);

const {:count 16} .str.10: ref;

axiom .str.10 == $sub.ref(0, 82583);

const {:count 61} .str.20: ref;

axiom .str.20 == $sub.ref(0, 83668);

const {:count 41} .str.21: ref;

axiom .str.21 == $sub.ref(0, 84733);

const {:count 29} .str.22: ref;

axiom .str.22 == $sub.ref(0, 85786);

const {:count 32} .str.23: ref;

axiom .str.23 == $sub.ref(0, 86842);

const {:count 48} .str.24: ref;

axiom .str.24 == $sub.ref(0, 87914);

const {:count 8} .str.17: ref;

axiom .str.17 == $sub.ref(0, 88946);

const {:count 61} .str.18: ref;

axiom .str.18 == $sub.ref(0, 90031);

const {:count 10} .str.19: ref;

axiom .str.19 == $sub.ref(0, 91065);

const {:count 40} .str.11: ref;

axiom .str.11 == $sub.ref(0, 92129);

const {:count 19} .str.12: ref;

axiom .str.12 == $sub.ref(0, 93172);

const {:count 19} .str.25: ref;

axiom .str.25 == $sub.ref(0, 94215);

const {:count 31} .str.26: ref;

axiom .str.26 == $sub.ref(0, 95270);

const {:count 32} .str.27: ref;

axiom .str.27 == $sub.ref(0, 96326);

const {:count 41} .str.28: ref;

axiom .str.28 == $sub.ref(0, 97391);

const {:count 32} .str.29: ref;

axiom .str.29 == $sub.ref(0, 98447);

const {:count 26} .str.30: ref;

axiom .str.30 == $sub.ref(0, 99497);

const {:count 43} .str.31: ref;

axiom .str.31 == $sub.ref(0, 100564);

const {:count 54} .str.32: ref;

axiom .str.32 == $sub.ref(0, 101642);

const {:count 19} .str.48: ref;

axiom .str.48 == $sub.ref(0, 102685);

const {:count 37} .str.37: ref;

axiom .str.37 == $sub.ref(0, 103746);

const {:count 19} .str.38: ref;

axiom .str.38 == $sub.ref(0, 104789);

const {:count 35} .str.39: ref;

axiom .str.39 == $sub.ref(0, 105848);

const {:count 40} .str.40: ref;

axiom .str.40 == $sub.ref(0, 106912);

const {:count 14} .str.46: ref;

axiom .str.46 == $sub.ref(0, 107950);

const {:count 20} .str.42: ref;

axiom .str.42 == $sub.ref(0, 108994);

const {:count 17} .str.47: ref;

axiom .str.47 == $sub.ref(0, 110035);

const {:count 38} .str.45: ref;

axiom .str.45 == $sub.ref(0, 111097);

const {:count 14} .str.41: ref;

axiom .str.41 == $sub.ref(0, 112135);

const {:count 54} .str.43: ref;

axiom .str.43 == $sub.ref(0, 113213);

const {:count 27} .str.44: ref;

axiom .str.44 == $sub.ref(0, 114264);

const {:count 46} .str.33: ref;

axiom .str.33 == $sub.ref(0, 115334);

const {:count 25} .str.34: ref;

axiom .str.34 == $sub.ref(0, 116383);

const {:count 45} .str.35: ref;

axiom .str.35 == $sub.ref(0, 117452);

const {:count 23} .str.36: ref;

axiom .str.36 == $sub.ref(0, 118499);

const {:count 47} .str.13: ref;

axiom .str.13 == $sub.ref(0, 119570);

const {:count 42} .str.14: ref;

axiom .str.14 == $sub.ref(0, 120636);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 16} .str.81: ref;

axiom .str.81 == $sub.ref(0, 121676);

const {:count 16} .str.82: ref;

axiom .str.82 == $sub.ref(0, 122716);

const {:count 16} .str.73: ref;

axiom .str.73 == $sub.ref(0, 123756);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 15} .str.80: ref;

axiom .str.80 == $sub.ref(0, 124795);

const {:count 29} .str.50: ref;

axiom .str.50 == $sub.ref(0, 125848);

const {:count 26} .str.51: ref;

axiom .str.51 == $sub.ref(0, 126898);

const {:count 32} .str.52: ref;

axiom .str.52 == $sub.ref(0, 127954);

const {:count 19} .str.53: ref;

axiom .str.53 == $sub.ref(0, 128997);

const {:count 10} .str.54: ref;

axiom .str.54 == $sub.ref(0, 130031);

const {:count 16} .str.55: ref;

axiom .str.55 == $sub.ref(0, 131071);

const {:count 24} .str.56: ref;

axiom .str.56 == $sub.ref(0, 132119);

const {:count 23} .str.57: ref;

axiom .str.57 == $sub.ref(0, 133166);

const {:count 26} .str.58: ref;

axiom .str.58 == $sub.ref(0, 134216);

const {:count 13} .str.79: ref;

axiom .str.79 == $sub.ref(0, 135253);

const {:count 23} .str.77: ref;

axiom .str.77 == $sub.ref(0, 136300);

const {:count 21} .str.78: ref;

axiom .str.78 == $sub.ref(0, 137345);

const {:count 13} .str.67: ref;

axiom .str.67 == $sub.ref(0, 138382);

const {:count 23} .str.68: ref;

axiom .str.68 == $sub.ref(0, 139429);

const {:count 26} .str.69: ref;

axiom .str.69 == $sub.ref(0, 140479);

const {:count 20} .str.70: ref;

axiom .str.70 == $sub.ref(0, 141523);

const {:count 24} .str.72: ref;

axiom .str.72 == $sub.ref(0, 142571);

const {:count 26} .str.74: ref;

axiom .str.74 == $sub.ref(0, 143621);

const {:count 33} .str.75: ref;

axiom .str.75 == $sub.ref(0, 144678);

const {:count 16} .str.59: ref;

axiom .str.59 == $sub.ref(0, 145718);

const {:count 23} .str.60: ref;

axiom .str.60 == $sub.ref(0, 146765);

const {:count 22} .str.61: ref;

axiom .str.61 == $sub.ref(0, 147811);

const {:count 35} .str.62: ref;

axiom .str.62 == $sub.ref(0, 148870);

const {:count 11} .str.63: ref;

axiom .str.63 == $sub.ref(0, 149905);

const {:count 32} .str.64: ref;

axiom .str.64 == $sub.ref(0, 150961);

const {:count 14} .str.65: ref;

axiom .str.65 == $sub.ref(0, 151999);

const {:count 29} .str.66: ref;

axiom .str.66 == $sub.ref(0, 153052);

const {:count 12} .str.76: ref;

axiom .str.76 == $sub.ref(0, 154088);

const {:count 23} .str.71: ref;

axiom .str.71 == $sub.ref(0, 155135);

const {:count 33} .str.49: ref;

axiom .str.49 == $sub.ref(0, 156192);

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const .str.15: ref;

axiom .str.15 == $sub.ref(0, 157217);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 158249);

const {:count 3} .str.1.110: ref;

axiom .str.1.110 == $sub.ref(0, 159276);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 160314);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 161342);

const gspca_frame_add: ref;

axiom gspca_frame_add == $sub.ref(0, 162374);

procedure gspca_frame_add($p0: ref, $i1: i32, $p2: ref, $i3: i32);



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 163406);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const printk: ref;

axiom printk == $sub.ref(0, 164438);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 0} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 3} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: i32, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: i32, p.3: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 7} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64($p0: ref, p.1: ref, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64($p0: ref, p.1: ref, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 9} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 1} true;
    call {:si_unique_call 10} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 11} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 1} true;
    call {:si_unique_call 12} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 13} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 1} true;
    call {:si_unique_call 14} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 15} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 1} true;
    call {:si_unique_call 16} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 17} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 1} true;
    call {:si_unique_call 18} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 19} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 1} true;
    call {:si_unique_call 20} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 21} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb11:
    assume {:verifier.code 1} true;
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 1} true;
    call {:si_unique_call 22} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 23} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb12:
    assume {:verifier.code 1} true;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 1} true;
    call {:si_unique_call 24} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 25} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 165470);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ktime_get: ref;

axiom ktime_get == $sub.ref(0, 166502);

procedure ktime_get() returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ktime_get() returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $p1 := external_alloc();
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 1} true;
    $i3 := $ne.ref($p2, $0.ref);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 1} true;
    call {:si_unique_call 28} __VERIFIER_assume($i4);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.1;
    cmdloc_dummy_var_1 := $M.1;
    call {:si_unique_call 29} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p5, $p6, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_2;
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.1, $p7);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 167534);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const ns_to_timeval: ref;

axiom ns_to_timeval == $sub.ref(0, 168566);

procedure ns_to_timeval($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ns_to_timeval($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 31} {:cexpr "ns_to_timeval:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $p2 := external_alloc();
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 1} true;
    $i4 := $ne.ref($p3, $0.ref);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 1} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 1} true;
    call {:si_unique_call 33} __VERIFIER_assume($i5);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.1;
    cmdloc_dummy_var_4 := $M.1;
    call {:si_unique_call 34} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p6, $p7, 16, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_5;
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_65;

  corral_source_split_65:
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    $i10 := $load.i64($M.1, $p9);
    goto corral_source_split_67;

  corral_source_split_67:
    assume $extractvalue($p11, 1) == $extractvalue($u0, 1);
    assume $extractvalue($p11, 0) == $i10;
    goto corral_source_split_68;

  corral_source_split_68:
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_69;

  corral_source_split_69:
    $i13 := $load.i64($M.1, $p12);
    goto corral_source_split_70;

  corral_source_split_70:
    assume $extractvalue($p14, 0) == $extractvalue($p11, 0);
    assume $extractvalue($p14, 1) == $i13;
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 169598);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, $i1);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 170630);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 37} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 171662);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 1} true;
    call {:si_unique_call 38} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 39} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const gspca_dev_probe2: ref;

axiom gspca_dev_probe2 == $sub.ref(0, 172694);

procedure gspca_dev_probe2($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32);



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 173726);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 174758);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 175790);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);



const gspca_release: ref;

axiom gspca_release == $sub.ref(0, 176822);

procedure gspca_release($p0: ref);
  free requires assertsPassed;



implementation gspca_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 1840), 4848));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1840), 4848)), $mul.ref(0, 1)), $mul.ref(1576, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} v4l2_ctrl_handler_free($p5);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1840), 4848)), $mul.ref(1848, 1));
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} v4l2_device_unregister($p6);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1840), 4848)), $mul.ref(2600, 1));
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} kfree($p8);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} kfree($p9);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_device_register: ref;

axiom v4l2_device_register == $sub.ref(0, 177854);

procedure v4l2_device_register($p0: ref, $p1: ref) returns ($r: i32);



const video_set_drvdata: ref;

axiom video_set_drvdata == $sub.ref(0, 178886);

procedure video_set_drvdata($p0: ref, $p1: ref);



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 179918);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 180950);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);



const gspca_set_default_mode: ref;

axiom gspca_set_default_mode == $sub.ref(0, 181982);

procedure gspca_set_default_mode($p0: ref);



const gspca_input_connect: ref;

axiom gspca_input_connect == $sub.ref(0, 183014);

procedure gspca_input_connect($p0: ref) returns ($r: i32);



const v4l2_disable_ioctl_locking: ref;

axiom v4l2_disable_ioctl_locking == $sub.ref(0, 184046);

procedure v4l2_disable_ioctl_locking($p0: ref, $i1: i32);



const v4l2_disable_ioctl: ref;

axiom v4l2_disable_ioctl == $sub.ref(0, 185078);

procedure v4l2_disable_ioctl($p0: ref, $i1: i32);



const video_register_device: ref;

axiom video_register_device == $sub.ref(0, 186110);

procedure video_register_device($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const usb_set_intfdata: ref;

axiom usb_set_intfdata == $sub.ref(0, 187142);

procedure usb_set_intfdata($p0: ref, $p1: ref);



const video_device_node_name: ref;

axiom video_device_node_name == $sub.ref(0, 188174);

procedure video_device_node_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_device_node_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1840)), $mul.ref(136, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $p2 := dev_name($p1);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const gspca_input_create_urb: ref;

axiom gspca_input_create_urb == $sub.ref(0, 189206);

procedure gspca_input_create_urb($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.4, $M.5, assertsPassed;



implementation gspca_input_create_urb($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i32: i32;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $i20: i32;
  var vslice_dummy_var_38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 176)), $mul.ref(160, 1));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4834, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p9);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $p12 := usb_ifnum_to_if($p8, $i11);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 1560)), $mul.ref(8, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.1, $p16);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32(0, $i18);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb6;

  $bb6:
    call $p21, $p22, $i23, $p25, $i26, $i27, $i28, $i29, $p30, $i32, $i33, $i34, $i35, $i20 := gspca_input_create_urb_loop_$bb6($p14, $p16, $p21, $p22, $i23, $p25, $i26, $i27, $i28, $i29, $p30, $i32, $i33, $i34, $i35, $i20);
    goto $bb6_last;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i20);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p22, $mul.ref($i23, 72)), $mul.ref(0, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i26 := usb_endpoint_dir_in($p25);
    call {:si_unique_call 47} {:cexpr "tmp"} boogie_si_record_i32($i26);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i20, 1);
    call {:si_unique_call 51} {:cexpr "i"} boogie_si_record_i32($i32);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.1, $p16);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i32, $i34);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i35 == 1);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i20 := $i32;
    goto $bb15_dummy;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $i28 := usb_endpoint_xfer_int($p25);
    call {:si_unique_call 49} {:cexpr "tmp___0"} boogie_si_record_i32($i28);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p30 := $p25;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb10:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} vslice_dummy_var_38 := alloc_and_submit_int_urb($p0, $p30);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_124;
}



const input_unregister_device: ref;

axiom input_unregister_device == $sub.ref(0, 190238);

procedure input_unregister_device($p0: ref);
  free requires assertsPassed;



implementation input_unregister_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_ctrl_handler_free: ref;

axiom v4l2_ctrl_handler_free == $sub.ref(0, 191270);

procedure v4l2_ctrl_handler_free($p0: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_handler_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 192302);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} free_($p0);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 193334);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 53} $free($p0);
    return;
}



const usb_ifnum_to_if: ref;

axiom usb_ifnum_to_if == $sub.ref(0, 194366);

procedure usb_ifnum_to_if($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_ifnum_to_if($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} {:cexpr "usb_ifnum_to_if:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p2 := external_alloc();
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const usb_endpoint_dir_in: ref;

axiom usb_endpoint_dir_in == $sub.ref(0, 195398);

procedure usb_endpoint_dir_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const usb_endpoint_xfer_int: ref;

axiom usb_endpoint_xfer_int == $sub.ref(0, 196430);

procedure usb_endpoint_xfer_int($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_int($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 3);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const alloc_and_submit_int_urb: ref;

axiom alloc_and_submit_int_urb == $sub.ref(0, 197462);

procedure alloc_and_submit_int_urb($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4, $M.5, assertsPassed;



implementation alloc_and_submit_int_urb($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i28: i32;
  var $i22: i32;
  var $i46: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.1, $p2);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    call {:si_unique_call 56} {:cexpr "buffer_len"} boogie_si_record_i32($i4);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 57} {:cexpr "interval"} boogie_si_record_i32($i7);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i8 := $M.0;
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 1);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $p19 := ldv_usb_alloc_urb_98(0, 208);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i4);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p19, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $p25 := ldv_usb_alloc_coherent_99($p18, $i23, 208, $p24);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.1, $p29);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $i32 := __create_pipe($p18, $i31);
    call {:si_unique_call 63} {:cexpr "tmp"} boogie_si_record_i32($i32);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i32, 1073741952);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p0);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} usb_fill_int_urb($p19, $p18, $i33, $p25, $i4, int_irq, $p34, $i7);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p19, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.1, $p35);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i36, 4);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p19, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p38, $i37);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i39 := ldv_usb_submit_urb_100($p19, 208);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 66} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 0);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2640, 1));
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p45, $p19);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i46 := $i39;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $r := $i46;
    return;

  $bb12:
    assume $i40 == 1;
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} vslice_dummy_var_40 := printk.ref.ref.i32(.str.21, $p43, $i39);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p19, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.1, $p47);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i48);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p19, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.1, $p50);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p19, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.1, $p52);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} ldv_usb_free_coherent_101($p18, $i49, $p51, $i53);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i28 := $i39;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} ldv_usb_free_urb_102($p19);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i22 := $i28;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i46 := $i22;
    goto $bb16;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 12);
    goto $bb10;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.1, $p13);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} vslice_dummy_var_39 := printk.ref.ref.i32.i32.i32(.str.20, $p12, $i15, $i4, $i7);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_alloc_urb_98: ref;

axiom ldv_usb_alloc_urb_98 == $sub.ref(0, 198494);

procedure ldv_usb_alloc_urb_98($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_usb_alloc_urb_98($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} {:cexpr "ldv_usb_alloc_urb_98:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 70} {:cexpr "ldv_usb_alloc_urb_98:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $p2 := ldv_linux_usb_urb_usb_alloc_urb();
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $i4 := ldv_is_err($p3);
    call {:si_unique_call 73} {:cexpr "tmp___0"} boogie_si_record_i64($i4);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} ldv_assume($i6);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} ldv_linux_alloc_irq_check_alloc_flags($i1);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} ldv_linux_alloc_usb_lock_check_alloc_flags($i1);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const ldv_usb_alloc_coherent_99: ref;

axiom ldv_usb_alloc_coherent_99 == $sub.ref(0, 199526);

procedure ldv_usb_alloc_coherent_99($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_usb_alloc_coherent_99($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} {:cexpr "ldv_usb_alloc_coherent_99:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    call {:si_unique_call 78} {:cexpr "ldv_usb_alloc_coherent_99:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $p4 := ldv_linux_usb_coherent_usb_alloc_coherent();
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i5 := ldv_is_err($p4);
    call {:si_unique_call 81} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} ldv_assume($i7);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} ldv_linux_alloc_irq_check_alloc_flags($i2);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} ldv_linux_alloc_usb_lock_check_alloc_flags($i2);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 200558);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2032)), $mul.ref(0, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const int_irq: ref;

axiom int_irq == $sub.ref(0, 201590);

procedure int_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.10, $M.31, $M.11, $M.5, $M.4, assertsPassed, $CurrAddr, $M.8, $M.32;



implementation int_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p32: ref;
  var $i25: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    call {:si_unique_call 86} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i5, $sub.i32(0, 2));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, $sub.i32(0, 104));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i5, $sub.i32(0, 19));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i5, $sub.i32(0, 108));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.1, $p29);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} vslice_dummy_var_41 := printk.ref.ref.i32(.str.23, $p28, $i30);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p32, 0);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i25, 0);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    return;

  $bb27:
    assume $i33 == 1;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $i34 := ldv_usb_submit_urb_97($p0, 32);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 92} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i34, 0);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb29:
    assume $i35 == 1;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} vslice_dummy_var_43 := printk.ref.i32(.str.24, $i34);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i10 == 1;
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i25 := $i5;
    goto $bb25;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i8 == 1;
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 176)), $mul.ref(160, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p17);
    call {:si_unique_call 87} $i19 := devirtbounce.2($p14, $p3, $p16, $i18);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 88} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i25 := $i5;
    goto $bb25;

  $bb22:
    assume $i20 == 1;
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} vslice_dummy_var_42 := printk.ref.ref(.str.22, $p23);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const usb_fill_int_urb: ref;

axiom usb_fill_int_urb == $sub.ref(0, 202622);

procedure usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} {:cexpr "usb_fill_int_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 95} {:cexpr "usb_fill_int_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    call {:si_unique_call 96} {:cexpr "usb_fill_int_urb:arg:interval"} boogie_si_record_i32($i7);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, $p1);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p9, $i2);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, $p3);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p11, $i4);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, $p5);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, $p6);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 2032)), $mul.ref(28, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 3);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i16 == 1);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 2032)), $mul.ref(28, 1));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p17);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 5);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p27, $i7);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p28, $sub.i32(0, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb2:
    call {:si_unique_call 97} {:cexpr "usb_fill_int_urb:arg:_max1"} boogie_si_record_i32($i7);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i7, 1);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 16);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i23 := 16;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, $sub.i32(0, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32(1, $i24);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p26, $i25);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    goto $bb11;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i21 := $i7;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;
}



const ldv_usb_submit_urb_100: ref;

axiom ldv_usb_submit_urb_100 == $sub.ref(0, 203654);

procedure ldv_usb_submit_urb_100($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_100($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} {:cexpr "ldv_usb_submit_urb_100:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} ldv_check_alloc_flags($i1);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $p2 := ldv_malloc_unknown_size();
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const ldv_usb_free_coherent_101: ref;

axiom ldv_usb_free_coherent_101 == $sub.ref(0, 204686);

procedure ldv_usb_free_coherent_101($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_usb_free_coherent_101($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} {:cexpr "ldv_usb_free_coherent_101:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 102} {:cexpr "ldv_usb_free_coherent_101:arg:dma"} boogie_si_record_i64($i3);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} ldv_linux_usb_coherent_usb_free_coherent($p2);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const ldv_usb_free_urb_102: ref;

axiom ldv_usb_free_urb_102 == $sub.ref(0, 205718);

procedure ldv_usb_free_urb_102($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_usb_free_urb_102($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} ldv_linux_usb_urb_usb_free_urb($p0);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_urb_usb_free_urb: ref;

axiom ldv_linux_usb_urb_usb_free_urb == $sub.ref(0, 206750);

procedure ldv_linux_usb_urb_usb_free_urb($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_linux_usb_urb_usb_free_urb($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i3 := $M.4;
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} ldv_assert_linux_usb_urb__less_initial_decrement($i5);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i6 := $M.4;
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, $sub.i32(0, 1));
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $M.4 := $i7;
    call {:si_unique_call 106} {:cexpr "ldv_linux_usb_urb_urb_state"} boogie_si_record_i32($i7);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_urb__less_initial_decrement: ref;

axiom ldv_assert_linux_usb_urb__less_initial_decrement == $sub.ref(0, 207782);

procedure ldv_assert_linux_usb_urb__less_initial_decrement($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_urb__less_initial_decrement($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} {:cexpr "ldv_assert_linux_usb_urb__less_initial_decrement:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 1} true;
    call {:si_unique_call 108} __VERIFIER_error();
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_usb_coherent_usb_free_coherent: ref;

axiom ldv_linux_usb_coherent_usb_free_coherent == $sub.ref(0, 208814);

procedure ldv_linux_usb_coherent_usb_free_coherent($p0: ref);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_linux_usb_coherent_usb_free_coherent($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i3 := $M.5;
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} ldv_assert_linux_usb_coherent__less_initial_decrement($i5);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i6 := $M.5;
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, $sub.i32(0, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $M.5 := $i7;
    call {:si_unique_call 110} {:cexpr "ldv_linux_usb_coherent_coherent_state"} boogie_si_record_i32($i7);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_coherent__less_initial_decrement: ref;

axiom ldv_assert_linux_usb_coherent__less_initial_decrement == $sub.ref(0, 209846);

procedure ldv_assert_linux_usb_coherent__less_initial_decrement($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_coherent__less_initial_decrement($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} {:cexpr "ldv_assert_linux_usb_coherent__less_initial_decrement:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 1} true;
    call {:si_unique_call 112} __VERIFIER_error();
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 210878);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} ldv_linux_alloc_irq_check_alloc_flags($i0);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} ldv_linux_alloc_usb_lock_check_alloc_flags($i0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const ldv_malloc_unknown_size: ref;

axiom ldv_malloc_unknown_size == $sub.ref(0, 211910);

procedure ldv_malloc_unknown_size() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_malloc_unknown_size() returns ($r: ref)
{
  var $i0: i32;
  var $i1: i1;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $i0 := ldv_undef_int();
    call {:si_unique_call 117} {:cexpr "tmp___1"} boogie_si_record_i32($i0);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $p2 := external_allocated_data();
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} ldv_assume($i5);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $i6 := ldv_is_err($p2);
    call {:si_unique_call 121} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} ldv_assume($i8);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p9 := $p2;
    goto $bb3;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 212942);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 1} true;
    call {:si_unique_call 123} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 124} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 125} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const external_allocated_data: ref;

axiom external_allocated_data == $sub.ref(0, 213974);

procedure external_allocated_data() returns ($r: ref);
  free requires assertsPassed;



implementation external_allocated_data() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $p0 := external_alloc();
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_assume: ref;

axiom ldv_assume == $sub.ref(0, 215006);

procedure ldv_assume($i0: i32);
  free requires assertsPassed;



implementation ldv_assume($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} {:cexpr "ldv_assume:arg:expression"} boogie_si_record_i32($i0);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call ldv_assume_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 216038);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 4294967295);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_linux_alloc_irq_check_alloc_flags: ref;

axiom ldv_linux_alloc_irq_check_alloc_flags == $sub.ref(0, 217070);

procedure ldv_linux_alloc_irq_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_irq_check_alloc_flags($i0: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i6: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} {:cexpr "ldv_linux_alloc_irq_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $i1 := ldv_in_interrupt_context();
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 130} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 32);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i6);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} ldv_assert_linux_alloc_irq__wrong_flags($i8);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const ldv_linux_alloc_usb_lock_check_alloc_flags: ref;

axiom ldv_linux_alloc_usb_lock_check_alloc_flags == $sub.ref(0, 218102);

procedure ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i5: i1;
  var $i4: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} {:cexpr "ldv_linux_alloc_usb_lock_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i1 := $M.6;
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 16);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 32);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i4);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} ldv_assert_linux_alloc_usb_lock__wrong_flags($i6);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb4;
}



const ldv_assert_linux_alloc_usb_lock__wrong_flags: ref;

axiom ldv_assert_linux_alloc_usb_lock__wrong_flags == $sub.ref(0, 219134);

procedure ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} {:cexpr "ldv_assert_linux_alloc_usb_lock__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 1} true;
    call {:si_unique_call 135} __VERIFIER_error();
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_in_interrupt_context: ref;

axiom ldv_in_interrupt_context == $sub.ref(0, 220166);

procedure ldv_in_interrupt_context() returns ($r: i1);
  free requires assertsPassed;



implementation ldv_in_interrupt_context() returns ($r: i1)
{
  var $i0: i8;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i0 := $M.7;
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i8.i1($i0);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_assert_linux_alloc_irq__wrong_flags: ref;

axiom ldv_assert_linux_alloc_irq__wrong_flags == $sub.ref(0, 221198);

procedure ldv_assert_linux_alloc_irq__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_irq__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} {:cexpr "ldv_assert_linux_alloc_irq__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 1} true;
    call {:si_unique_call 137} __VERIFIER_error();
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_submit_urb_97: ref;

axiom ldv_usb_submit_urb_97 == $sub.ref(0, 222230);

procedure ldv_usb_submit_urb_97($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_97($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} {:cexpr "ldv_usb_submit_urb_97:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} ldv_check_alloc_flags($i1);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $p2 := ldv_malloc_unknown_size();
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_coherent_usb_alloc_coherent: ref;

axiom ldv_linux_usb_coherent_usb_alloc_coherent == $sub.ref(0, 223262);

procedure ldv_linux_usb_coherent_usb_alloc_coherent() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.5;



implementation ldv_linux_usb_coherent_usb_alloc_coherent() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $p0 := ldv_undef_ptr();
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := $M.5;
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $M.5 := $i4;
    call {:si_unique_call 142} {:cexpr "ldv_linux_usb_coherent_coherent_state"} boogie_si_record_i32($i4);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 224294);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 1} true;
    call {:si_unique_call 143} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 144} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_linux_usb_urb_usb_alloc_urb: ref;

axiom ldv_linux_usb_urb_usb_alloc_urb == $sub.ref(0, 225326);

procedure ldv_linux_usb_urb_usb_alloc_urb() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.4;



implementation ldv_linux_usb_urb_usb_alloc_urb() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i5: i32;
  var $i6: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p0 := ldv_undef_ptr();
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $M.4;
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $M.4 := $i6;
    call {:si_unique_call 146} {:cexpr "ldv_linux_usb_urb_urb_state"} boogie_si_record_i32($i6);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p4 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p4 := $p0;
    goto $bb3;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 226358);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(312, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(16, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $p9 := kobject_name($p8);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(312, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 227390);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 228422);

procedure dev_set_drvdata($p0: ref, $p1: ref);



const __video_register_device: ref;

axiom __video_register_device == $sub.ref(0, 229454);

procedure __video_register_device($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);



const set_bit: ref;

axiom set_bit == $sub.ref(0, 230486);

procedure set_bit($i0: i64, $p1: ref);



const input_allocate_device: ref;

axiom input_allocate_device == $sub.ref(0, 231518);

procedure input_allocate_device() returns ($r: ref);



const usb_make_path: ref;

axiom usb_make_path == $sub.ref(0, 232550);

procedure usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} {:cexpr "usb_make_path:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2032)), $mul.ref(64, 1));
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2032)), $mul.ref(4, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $i9 := snprintf.ref.i64.ref.ref.ref($p1, $i2, .str.19, $p6, $p8);
    call {:si_unique_call 150} {:cexpr "actual"} boogie_si_record_i32($i9);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i2);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i9, $i10);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb3;
}



const strlcat: ref;

axiom strlcat == $sub.ref(0, 233582);

procedure strlcat($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);



const usb_to_input_id: ref;

axiom usb_to_input_id == $sub.ref(0, 234614);

procedure usb_to_input_id($p0: ref, $p1: ref);



const input_register_device: ref;

axiom input_register_device == $sub.ref(0, 235646);

procedure input_register_device($p0: ref) returns ($r: i32);



const input_free_device: ref;

axiom input_free_device == $sub.ref(0, 236678);

procedure input_free_device($p0: ref);



const snprintf: ref;

axiom snprintf == $sub.ref(0, 237710);

procedure snprintf.ref.i64.ref.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);



const v4l2_ctrl_handler_setup: ref;

axiom v4l2_ctrl_handler_setup == $sub.ref(0, 238742);

procedure v4l2_ctrl_handler_setup($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_handler_setup($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 1} true;
    call {:si_unique_call 151} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 152} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const v4l2_device_unregister: ref;

axiom v4l2_device_unregister == $sub.ref(0, 239774);

procedure v4l2_device_unregister($p0: ref);
  free requires assertsPassed;



implementation v4l2_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    return;
}



const ldv_after_alloc: ref;

axiom ldv_after_alloc == $sub.ref(0, 240806);

procedure ldv_after_alloc($p0: ref);



const ldv_kzalloc: ref;

axiom ldv_kzalloc == $sub.ref(0, 241838);

procedure ldv_kzalloc($i0: i64, $i1: i32) returns ($r: ref);



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 242870);

procedure ldv_zalloc($i0: i64) returns ($r: ref);



const ldv_calloc: ref;

axiom ldv_calloc == $sub.ref(0, 243902);

procedure ldv_calloc($i0: i64, $i1: i64) returns ($r: ref);



const gspca_dev_probe: ref;

axiom gspca_dev_probe == $sub.ref(0, 244934);

procedure gspca_dev_probe($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32);



const gspca_disconnect: ref;

axiom gspca_disconnect == $sub.ref(0, 245966);

procedure gspca_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.5, $M.4, $M.10, $M.31, $M.11, assertsPassed, $CurrAddr, $M.32;



implementation gspca_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i3 := $M.0;
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(4504, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} ldv_mutex_lock_145($p11);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(4831, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p12, 0);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} destroy_urbs($p2);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} gspca_input_destroy_urb($p2);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(2216, 1));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 176)), $mul.ref(72, 1));
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(4364, 1));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p32, 0);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p33, $0.ref);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(4416, 1));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} __wake_up($p34, 1, 1, $0.ref);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(1848, 1));
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} v4l2_device_disconnect($p35);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(0, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} video_unregister_device($p36);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(4504, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} ldv_mutex_unlock_146($p37);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(1848, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} vslice_dummy_var_45 := v4l2_device_put($p38);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(4364, 1));
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.1, $p24);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb9;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 176)), $mul.ref(72, 1));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    call {:si_unique_call 160} devirtbounce.4($p31, $p2);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(2216, 1));
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, $0.ref);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} input_unregister_device($p14);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(0, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $p6 := video_device_node_name($p5);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} vslice_dummy_var_44 := printk.ref.ref.ref(.str.12, $p9, $p6);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_get_intfdata: ref;

axiom usb_get_intfdata == $sub.ref(0, 246998);

procedure usb_get_intfdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intfdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1560)), $mul.ref(48, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_mutex_lock_145: ref;

axiom ldv_mutex_lock_145 == $sub.ref(0, 248030);

procedure ldv_mutex_lock_145($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_145($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} ldv_linux_kernel_locking_mutex_mutex_lock_usb_lock_of_gspca_dev($p0);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;
}



const destroy_urbs: ref;

axiom destroy_urbs == $sub.ref(0, 249062);

procedure destroy_urbs($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.5, $M.4, assertsPassed;



implementation destroy_urbs($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i32;
  var $i27: i1;
  var $i7: i32;
  var vslice_dummy_var_46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i1 := $M.0;
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 2);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $i8, $p10, $p11, $i12, $i13, $i14, $p16, $p17, $p18, $p19, $i20, $i21, $p22, $p23, $p24, $i25, $i26, $i27, $i7 := destroy_urbs_loop_$bb4($p0, $i8, $p10, $p11, $i12, $i13, $i14, $p16, $p17, $p18, $p19, $i20, $i21, $p22, $p23, $p24, $i25, $i26, $i27, $i7);
    goto $bb4_last;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2608, 1)), $mul.ref($i8, 8));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i7);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2608, 1)), $mul.ref($i14, 8));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p16, $0.ref);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} usb_kill_urb($p11);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.1, $p24);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} ldv_usb_free_coherent_108($p18, $i21, $p23, $i25);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} ldv_usb_free_urb_109($p11);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i7, 1);
    call {:si_unique_call 172} {:cexpr "i"} boogie_si_record_i32($i26);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i27 := $ule.i32($i26, 3);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i26;
    goto $bb10_dummy;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} vslice_dummy_var_46 := printk.ref.ref(.str.25, $p5);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_672;
}



const gspca_input_destroy_urb: ref;

axiom gspca_input_destroy_urb == $sub.ref(0, 250094);

procedure gspca_input_destroy_urb($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.5, $M.4, assertsPassed;



implementation gspca_input_destroy_urb($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2640, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2640, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, $0.ref);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} usb_kill_urb($p2);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.1, $p13);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} ldv_usb_free_coherent_103($p7, $i10, $p12, $i14);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} ldv_usb_free_urb_104($p2);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const v4l2_device_disconnect: ref;

axiom v4l2_device_disconnect == $sub.ref(0, 251126);

procedure v4l2_device_disconnect($p0: ref);
  free requires assertsPassed;



implementation v4l2_device_disconnect($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    return;
}



const video_unregister_device: ref;

axiom video_unregister_device == $sub.ref(0, 252158);

procedure video_unregister_device($p0: ref);
  free requires assertsPassed;



implementation video_unregister_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_146: ref;

axiom ldv_mutex_unlock_146 == $sub.ref(0, 253190);

procedure ldv_mutex_unlock_146($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_146($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} ldv_linux_kernel_locking_mutex_mutex_unlock_usb_lock_of_gspca_dev($p0);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const v4l2_device_put: ref;

axiom v4l2_device_put == $sub.ref(0, 254222);

procedure v4l2_device_put($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_device_put($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 1} true;
    call {:si_unique_call 177} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 178} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_usb_lock_of_gspca_dev: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_usb_lock_of_gspca_dev == $sub.ref(0, 255254);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_usb_lock_of_gspca_dev($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_usb_lock_of_gspca_dev($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i1 := $M.8;
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 180} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_usb_lock_of_gspca_dev"} boogie_si_record_i8(0);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock == $sub.ref(0, 256286);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 1} true;
    call {:si_unique_call 182} __VERIFIER_error();
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 257318);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_free_coherent_103: ref;

axiom ldv_usb_free_coherent_103 == $sub.ref(0, 258350);

procedure ldv_usb_free_coherent_103($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_usb_free_coherent_103($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} {:cexpr "ldv_usb_free_coherent_103:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 184} {:cexpr "ldv_usb_free_coherent_103:arg:dma"} boogie_si_record_i64($i3);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} ldv_linux_usb_coherent_usb_free_coherent($p2);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const ldv_usb_free_urb_104: ref;

axiom ldv_usb_free_urb_104 == $sub.ref(0, 259382);

procedure ldv_usb_free_urb_104($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_usb_free_urb_104($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} ldv_linux_usb_urb_usb_free_urb($p0);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const ldv_usb_free_coherent_108: ref;

axiom ldv_usb_free_coherent_108 == $sub.ref(0, 260414);

procedure ldv_usb_free_coherent_108($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_usb_free_coherent_108($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} {:cexpr "ldv_usb_free_coherent_108:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 188} {:cexpr "ldv_usb_free_coherent_108:arg:dma"} boogie_si_record_i64($i3);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} ldv_linux_usb_coherent_usb_free_coherent($p2);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const ldv_usb_free_urb_109: ref;

axiom ldv_usb_free_urb_109 == $sub.ref(0, 261446);

procedure ldv_usb_free_urb_109($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_usb_free_urb_109($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} ldv_linux_usb_urb_usb_free_urb($p0);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_usb_lock_of_gspca_dev: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_usb_lock_of_gspca_dev == $sub.ref(0, 262478);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_usb_lock_of_gspca_dev($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_usb_lock_of_gspca_dev($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i1 := $M.8;
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 192} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_usb_lock_of_gspca_dev"} boogie_si_record_i8(1);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock == $sub.ref(0, 263510);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 1} true;
    call {:si_unique_call 194} __VERIFIER_error();
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 264542);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(512, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const gspca_suspend: ref;

axiom gspca_suspend == $sub.ref(0, 265574);

procedure gspca_suspend($p0: ref, $i1: i32) returns ($r: i32);



const ldv_mutex_lock_147: ref;

axiom ldv_mutex_lock_147 == $sub.ref(0, 266606);

procedure ldv_mutex_lock_147($p0: ref);



const gspca_set_alt0: ref;

axiom gspca_set_alt0 == $sub.ref(0, 267638);

procedure gspca_set_alt0($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gspca_set_alt0($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i5: i32;
  var vslice_dummy_var_47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4835, 1));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4834, 1));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $i11 := usb_set_interface($p7, $i10, 0);
    call {:si_unique_call 196} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} vslice_dummy_var_47 := printk.ref.i32(.str.26, $i11);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const ldv_mutex_unlock_148: ref;

axiom ldv_mutex_unlock_148 == $sub.ref(0, 268670);

procedure ldv_mutex_unlock_148($p0: ref);



const usb_set_interface: ref;

axiom usb_set_interface == $sub.ref(0, 269702);

procedure usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 198} {:cexpr "usb_set_interface:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 199} {:cexpr "usb_set_interface:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 1} true;
    call {:si_unique_call 200} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 201} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const gspca_resume: ref;

axiom gspca_resume == $sub.ref(0, 270734);

procedure gspca_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.10, $M.32, $M.5, $M.4, $M.11, assertsPassed, $M.31, $CurrAddr;



implementation gspca_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $p14: ref;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var vslice_dummy_var_48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(4504, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} ldv_mutex_lock_149($p3);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(4830, 1));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p4, 0);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(4824, 1));
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p5, 0);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    call {:si_unique_call 204} vslice_dummy_var_48 := devirtbounce.1($p9, $p2);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(4364, 1));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p11);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    call {:si_unique_call 205} {:cexpr "streaming"} boogie_si_record_i32($i13);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(4364, 1));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p14, 0);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i13, 0);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} gspca_input_create_urb($p2);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(4504, 1));
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} ldv_mutex_unlock_150($p18);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i16 := gspca_init_transfer($p2);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    call {:si_unique_call 207} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_149: ref;

axiom ldv_mutex_lock_149 == $sub.ref(0, 271766);

procedure ldv_mutex_lock_149($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_149($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} ldv_linux_kernel_locking_mutex_mutex_lock_usb_lock_of_gspca_dev($p0);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const gspca_init_transfer: ref;

axiom gspca_init_transfer == $sub.ref(0, 272798);

procedure gspca_init_transfer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.10, $M.11, $M.5, $M.4, $CurrAddr, $M.8, $M.32, $M.31, assertsPassed;



implementation gspca_init_transfer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $p12: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i8;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i64;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $p73: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $i74: i32;
  var $i79: i32;
  var $i80: i64;
  var $p82: ref;
  var $i83: i32;
  var $i84: i8;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $i89: i8;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $i105: i1;
  var $i106: i32;
  var $i107: i32;
  var $i111: i32;
  var $p113: ref;
  var $i114: i8;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i118: i1;
  var $p120: ref;
  var $p121: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $p126: ref;
  var $p127: ref;
  var $i128: i32;
  var $p129: ref;
  var $i130: i32;
  var $i131: i1;
  var $i132: i32;
  var $p134: ref;
  var $i135: i8;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $p139: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i32;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i32;
  var $i151: i1;
  var $i152: i32;
  var $p153: ref;
  var $p155: ref;
  var $p156: ref;
  var $p159: ref;
  var $i160: i8;
  var $i161: i32;
  var $i162: i1;
  var $p164: ref;
  var $i165: i8;
  var $i166: i32;
  var $i167: i1;
  var $i168: i32;
  var $i172: i64;
  var $p174: ref;
  var $p175: ref;
  var $i176: i64;
  var $i177: i1;
  var $i178: i32;
  var $i180: i32;
  var $i181: i1;
  var $i182: i32;
  var $i183: i32;
  var $i184: i1;
  var $i170: i32;
  var $i171: i32;
  var $i185: i32;
  var $i179: i32;
  var $i186: i1;
  var $i187: i32;
  var $i188: i1;
  var $i189: i32;
  var $p190: ref;
  var $i191: i8;
  var $i192: i32;
  var $i108: i32;
  var $p195: ref;
  var $p196: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $i202: i64;
  var $i203: i1;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $i208: i32;
  var $i209: i1;
  var $i210: i32;
  var $i212: i1;
  var $i214: i32;
  var $i215: i64;
  var $p217: ref;
  var $i218: i32;
  var $i219: i8;
  var $p220: ref;
  var $i211: i32;
  var $i169: i32;
  var $i110: i32;
  var $i37: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $p1 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4320, 1));
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $0.ref);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4332, 1));
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p3, 0);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4362, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p4, 0);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4412, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p5, 0);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4824, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p6, 0);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4834, 1));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p9);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $p12 := usb_ifnum_to_if($p8, $i11);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(27, 1));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.1, $p14);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4835, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p24, $i23);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 176)), $mul.ref(48, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(27, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.1, $p39);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i43 := (if $i42 == 1 then 2 else 1);
    call {:si_unique_call 215} {:cexpr "xfer"} boogie_si_record_i32($i43);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4835, 1));
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.1, $p44);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i47 == 1);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p1);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $i76 := build_isoc_ep_tb($p0, $p12, $p75);
    call {:si_unique_call 218} {:cexpr "alt_idx"} boogie_si_record_i32($i76);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i77 := $sle.i32($i76, 0);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i74 := $i76;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} gspca_input_destroy_urb($p0);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i79 := $sub.i32($i74, 1);
    call {:si_unique_call 221} {:cexpr "alt_idx"} boogie_si_record_i32($i79);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i79);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref($i80, 8)), $mul.ref(0, 1));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.10, $p82);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i8($i83);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4835, 1));
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p85, $i84);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i86, $i87 := $sub.i32(0, 1), $i79;
    goto $bb20;

  $bb20:
    call $i86, $i87, $p88, $i89, $i90, $i91, $p92, $i93, $i94, $p95, $i96, $i97, $p98, $p99, $p100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i111, $p113, $i114, $i115, $i116, $i117, $i118, $p120, $p121, $p123, $p124, $i125, $p126, $p127, $i128, $p129, $i130, $i131, $i132, $p134, $i135, $i136, $i137, $p138, $p139, $p141, $p142, $p143, $i144, $p146, $p147, $p148, $p149, $i150, $i151, $i152, $p153, $p155, $p156, $p159, $i160, $i161, $i162, $p164, $i165, $i166, $i167, $i168, $i172, $p174, $p175, $i176, $i177, $i178, $i180, $i181, $i182, $i183, $i184, $i170, $i171, $i185, $i179, $i186, $i187, $i188, $i189, $i108, $p195, $p196, $p198, $p199, $p200, $p201, $i202, $i203, $p204, $p205, $p206, $p207, $i208, $i209, $i210, $i212, $i214, $i215, $p217, $i218, $i219, $p220, $i211, vslice_dummy_var_51, vslice_dummy_var_53, vslice_dummy_var_54, vslice_dummy_var_55 := gspca_init_transfer_loop_$bb20($p0, $p1, $p12, $i43, $i86, $i87, $p88, $i89, $i90, $i91, $p92, $i93, $i94, $p95, $i96, $i97, $p98, $p99, $p100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i111, $p113, $i114, $i115, $i116, $i117, $i118, $p120, $p121, $p123, $p124, $i125, $p126, $p127, $i128, $p129, $i130, $i131, $i132, $p134, $i135, $i136, $i137, $p138, $p139, $p141, $p142, $p143, $i144, $p146, $p147, $p148, $p149, $i150, $i151, $i152, $p153, $p155, $p156, $p159, $i160, $i161, $i162, $p164, $i165, $i166, $i167, $i168, $i172, $p174, $p175, $i176, $i177, $i178, $i180, $i181, $i182, $i183, $i184, $i170, $i171, $i185, $i179, $i186, $i187, $i188, $i189, $i108, $p195, $p196, $p198, $p199, $p200, $p201, $i202, $i203, $p204, $p205, $p206, $p207, $i208, $i209, $i210, $i212, $i214, $i215, $p217, $i218, $i219, $p220, $i211, vslice_dummy_var_51, vslice_dummy_var_53, vslice_dummy_var_54, vslice_dummy_var_55);
    goto $bb20_last;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4835, 1));
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.1, $p88);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i89);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i86, $i90);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i111 := $i86;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(25, 1));
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.1, $p113);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i114);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 0);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(27, 1));
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.1, $p134);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i32($i135);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i137 := $ne.i32($i136, 0);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.1, $p146);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p147, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.1, $p148);
    call {:si_unique_call 236} $i150 := devirtbounce.1($p149, $p0);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    call {:si_unique_call 237} {:cexpr "ret"} boogie_si_record_i32($i150);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i151 := $slt.i32($i150, 0);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i152 := $i150;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4364, 1));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p153, 1);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(0, 1)), $mul.ref(1576, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.1, $p155);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} vslice_dummy_var_55 := v4l2_ctrl_handler_setup($p156);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(27, 1));
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i160 := $load.i8($M.1, $p159);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i161 := $zext.i8.i32($i160);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i162 := $ne.i32($i161, 0);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i162 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i170, $i171 := $i150, 0;
    goto $bb57;

  $bb57:
    call $i172, $p174, $p175, $i176, $i177, $i178, $i180, $i181, $i182, $i183, $i184, $i170, $i171, $i185 := gspca_init_transfer_loop_$bb57($p0, $i172, $p174, $p175, $i176, $i177, $i178, $i180, $i181, $i182, $i183, $i184, $i170, $i171, $i185);
    goto $bb57_last;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i172 := $sext.i32.i64($i171);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2608, 1)), $mul.ref($i172, 8));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.1, $p174);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i176 := $p2i.ref.i64($p175);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i177 := $eq.i64($i176, 0);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i178 := $i170;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $i180 := ldv_usb_submit_urb_112($p175, 208);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    call {:si_unique_call 241} {:cexpr "ret"} boogie_si_record_i32($i180);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i181 := $slt.i32($i180, 0);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i182 := $i180;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i183 := $add.i32($i171, 1);
    call {:si_unique_call 242} {:cexpr "n"} boogie_si_record_i32($i183);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i184 := $sle.i32($i183, 3);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i185 := $i180;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i179 := $i185;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i186 := $sge.i32($i179, 0);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i187 := $i179;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} gspca_stream_off($p0);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i188 := $ne.i32($i179, $sub.i32(0, 28));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i189 := $i179;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i108 := $i111;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p196 := $bitcast.ref.ref($p195);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} vslice_dummy_var_51 := printk.ref.ref.i32(.str.32, $p196, $i108);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} msleep(20);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p199 := $load.ref($M.1, $p198);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p199, $mul.ref(0, 176)), $mul.ref(56, 1));
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p201 := $load.ref($M.1, $p200);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i202 := $p2i.ref.i64($p201);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i203 := $ne.i64($i202, 0);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i203 == 1);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i212 := $sle.i32($i87, 0);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i214 := $sub.i32($i87, 1);
    call {:si_unique_call 248} {:cexpr "alt_idx"} boogie_si_record_i32($i214);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i215 := $sext.i32.i64($i214);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref($i215, 8)), $mul.ref(0, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i218 := $load.i32($M.10, $p217);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i219 := $trunc.i32.i8($i218);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4835, 1));
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p220, $i219);
    assume {:verifier.code 0} true;
    $i211 := $i214;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i86, $i87 := $i108, $i211;
    goto corral_source_split_1105_dummy;

  $bb81:
    assume $i212 == 1;
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} vslice_dummy_var_57 := printk.ref(.str.28);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i110 := $sub.i32(0, 5);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} gspca_input_create_urb($p0);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i37 := $i110;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb75:
    assume $i203 == 1;
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.1, $p204);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p205, $mul.ref(0, 176)), $mul.ref(56, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.1, $p206);
    call {:si_unique_call 245} $i208 := devirtbounce.1($p207, $p0);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    call {:si_unique_call 246} {:cexpr "ret"} boogie_si_record_i32($i208);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i209 := $slt.i32($i208, 0);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i210 := $i208;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i211 := $i87;
    goto $bb80;

  $bb77:
    assume $i209 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i110 := $i210;
    goto $bb31;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb72:
    assume $i188 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4835, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i191 := $load.i8($M.1, $p190);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i192 := $zext.i8.i32($i191);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} vslice_dummy_var_56 := printk.ref.i32.i32(.str.31, $i192, $i189);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i110 := $i189;
    goto $bb31;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb69:
    assume $i186 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i169 := $i187;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i110 := $i169;
    goto $bb31;

  $bb66:
    assume $i184 == 1;
    assume {:verifier.code 0} true;
    $i170, $i171 := $i180, $i183;
    goto $bb66_dummy;

  $bb63:
    assume $i181 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i179 := $i182;
    goto $bb61;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb59:
    assume $i177 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i179 := $i178;
    goto $bb61;

  $bb50:
    assume $i162 == 1;
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(26, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i165 := $load.i8($M.1, $p164);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i166 := $zext.i8.i32($i165);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 0);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i168 := $i150;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i167 == 1);
    goto $bb52;

  $bb53:
    assume $i167 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i169 := $i168;
    goto $bb55;

  $bb47:
    assume $i151 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} destroy_urbs($p0);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i110 := $i152;
    goto $bb31;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i137 == 1;
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.1, $p138);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2608, 1)), $mul.ref(0, 8));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.1, $p141);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p142, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.1, $p143);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} vslice_dummy_var_54 := usb_clear_halt($p139, $i144);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb35:
    assume $i116 == 1;
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i117 := $M.0;
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i118 := $sgt.i32($i117, 2);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p12, $mul.ref(0, 1560)), $mul.ref(0, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.1, $p123);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i125 := $sext.i32.i64($i111);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($p124, $mul.ref($i125, 40));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4836, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.1, $p127);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} $p129 := alt_xfer($p126, $i43, $i128);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $i130 := create_urbs($p0, $p129);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    call {:si_unique_call 233} {:cexpr "ret"} boogie_si_record_i32($i130);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i131 := $slt.i32($i130, 0);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i132 := $i130;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i131 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} destroy_urbs($p0);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i110 := $i132;
    goto $bb31;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i118 == 1;
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} vslice_dummy_var_53 := printk.ref.ref.i32(.str.30, $p121, $i111);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb21:
    assume $i91 == 1;
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4835, 1));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.1, $p92);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    call {:si_unique_call 223} {:cexpr "alt"} boogie_si_record_i32($i94);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p12, $mul.ref(0, 1560)), $mul.ref(16, 1));
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.1, $p95);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i97 := $ugt.i32($i96, 1);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i111 := $i94;
    goto $bb34;

  $bb23:
    assume $i97 == 1;
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.1, $p98);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4834, 1));
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.1, $p100);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i103 := usb_set_interface($p99, $i102, $i94);
    call {:si_unique_call 225} {:cexpr "ret"} boogie_si_record_i32($i103);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i103, 0);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume $i104 == 1;
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i103, $sub.i32(0, 28));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i106, $i107 := $i94, $i103;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} vslice_dummy_var_52 := printk.ref.i32.i32(.str.29, $i106, $i107);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i110 := $i107;
    goto $bb31;

  $bb27:
    assume $i105 == 1;
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i108 := $i94;
    goto $bb29;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i77 == 1;
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} vslice_dummy_var_50 := printk.ref(.str.28);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32(0, 5);
    goto $bb8;

  $bb11:
    assume $i47 == 1;
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4835, 1));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.1, $p48);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32($i50, 1);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4835, 1));
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p53, $i52);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p12, $mul.ref(0, 1560)), $mul.ref(0, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.1, $p54);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4835, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.1, $p56);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i64($i57);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p55, $mul.ref($i58, 40));
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4836, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.1, $p60);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} $p62 := alt_xfer($p59, $i43, $i61);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i63, 0);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4835, 1));
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.1, $p69);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p73, $i71);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i74 := 1;
    goto $bb16;

  $bb13:
    assume $i64 == 1;
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4835, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.1, $p65);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} vslice_dummy_var_49 := printk.ref.i32(.str.27, $i67);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32(0, 5);
    goto $bb8;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 176)), $mul.ref(48, 1));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    call {:si_unique_call 213} $i35 := devirtbounce.1($p34, $p0);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    call {:si_unique_call 214} {:cexpr "ret"} boogie_si_record_i32($i35);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 0);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i36 == 1;
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i37 := $i35;
    goto $bb8;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref(0, 1560)), $mul.ref(16, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p18);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb3;

  $bb66_dummy:
    assume false;
    return;

  $bb57_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1061;

  corral_source_split_1105_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_945;
}



const ldv_mutex_unlock_150: ref;

axiom ldv_mutex_unlock_150 == $sub.ref(0, 273830);

procedure ldv_mutex_unlock_150($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_150($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} ldv_linux_kernel_locking_mutex_mutex_unlock_usb_lock_of_gspca_dev($p0);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;
}



const alt_xfer: ref;

axiom alt_xfer == $sub.ref(0, 274862);

procedure alt_xfer($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alt_xfer($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $p28: ref;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i8: i32;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} {:cexpr "alt_xfer:arg:xfer"} boogie_si_record_i32($i1);
    call {:si_unique_call 251} {:cexpr "alt_xfer:arg:xfer_ep"} boogie_si_record_i32($i2);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.1, $p4);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32(0, $i6);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p34 := $0.ref;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $r := $p34;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $p12, $p14, $i15, $i16, $i17, $i18, $p20, $i21, $i22, $i23, $p24, $i25, $i26, $i27, $p30, $i31, $i32, $i33, $p28, $i35, $i36, $i37, $i38, $i8 := alt_xfer_loop_$bb4($p0, $i1, $i2, $p4, $p9, $p10, $i11, $p12, $p14, $i15, $i16, $i17, $i18, $p20, $i21, $i22, $i23, $p24, $i25, $i26, $i27, $p30, $i31, $i32, $i33, $p28, $i35, $i36, $i37, $i38, $i8);
    goto $bb4_last;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i8);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 72));
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p10, $mul.ref($i11, 72)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.1, $p14);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 3);
    call {:si_unique_call 252} {:cexpr "attr"} boogie_si_record_i32($i17);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, $i1);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i8, 1);
    call {:si_unique_call 255} {:cexpr "i"} boogie_si_record_i32($i35);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.1, $p4);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i35, $i37);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i38 == 1);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i35;
    goto $bb22_dummy;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p10, $mul.ref($i11, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.1, $p20);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb8;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p10, $mul.ref($i11, 72)), $mul.ref(0, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $i25 := usb_endpoint_dir_in($p24);
    call {:si_unique_call 254} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i2, 0);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p28 := $p12;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i27 == 1);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p10, $mul.ref($i11, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.1, $p30);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, $i2);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p28 := $p12;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p34 := $p28;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb14;

  $bb22_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1128;
}



const build_isoc_ep_tb: ref;

axiom build_isoc_ep_tb == $sub.ref(0, 275894);

procedure build_isoc_ep_tb($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.10, $CurrAddr;



implementation build_isoc_ep_tb($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i32;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i24: i32;
  var $i25: i32;
  var $i67: i32;
  var $i68: i1;
  var $i13: i32;
  var $i14: i32;
  var $i69: i32;
  var $i12: i32;
  var $i70: i1;
  var $i71: i32;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $i82: i32;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i8;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $p102: ref;
  var $p103: ref;
  var $i105: i32;
  var $p106: ref;
  var $i107: i32;
  var $p108: ref;
  var $i109: i32;
  var $p110: ref;
  var $i111: i1;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i121: i32;
  var $i122: i1;
  var $p113: ref;
  var $i114: i32;
  var $i123: i32;
  var $i112: i32;
  var $i120: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 1560)), $mul.ref(16, 1));
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    call {:si_unique_call 256} {:cexpr "nbalt"} boogie_si_record_i32($i4);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 16);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i7, $p8, $i9 := 0, $p2, 0;
    goto $bb4;

  $bb4:
    call $i7, $p8, $i9, $p10, $i11, $p15, $p16, $i17, $p18, $p19, $i20, $p21, $i22, $i23, $p27, $i28, $i29, $i30, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $p42, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $i50, $i51, $i52, $i53, $p55, $i56, $i57, $i58, $i59, $i60, $p61, $i62, $i63, $p64, $p65, $i66, $i24, $i25, $i67, $i68, $i13, $i14, $i69, $i12, $i70, $i71, $p72, $i73, $i74, $i75, $p77, $p78, $p79, $i80, $p81, $i82, $p84, $i85, $i86, $p87, vslice_dummy_var_58, vslice_dummy_var_59 := build_isoc_ep_tb_loop_$bb4($p0, $p1, $i6, $i7, $p8, $i9, $p10, $i11, $p15, $p16, $i17, $p18, $p19, $i20, $p21, $i22, $i23, $p27, $i28, $i29, $i30, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $p42, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $i50, $i51, $i52, $i53, $p55, $i56, $i57, $i58, $i59, $i60, $p61, $i62, $i63, $p64, $p65, $i66, $i24, $i25, $i67, $i68, $i13, $i14, $i69, $i12, $i70, $i71, $p72, $i73, $i74, $i75, $p77, $p78, $p79, $i80, $p81, $i82, $p84, $i85, $i86, $p87, vslice_dummy_var_58, vslice_dummy_var_59);
    goto $bb4_last;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p10, 480000000);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32(0, $i6);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i12 := 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i12, 0);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i71, $p72, $i73 := $i7, $p8, $i9;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i74 := $M.0;
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i75 := $sgt.i32($i74, 2);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.11, $p84);
    call {:si_unique_call 266} {:cexpr "last_bw"} boogie_si_record_i32($i85);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i7, 1);
    call {:si_unique_call 267} {:cexpr "i"} boogie_si_record_i32($i86);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p8, $mul.ref(1, 8));
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i7, $p8, $i9 := $i86, $p87, $i85;
    goto corral_source_split_1285_dummy;

  $bb36:
    assume $i75 == 1;
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p8, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.10, $p79);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.11, $p81);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} vslice_dummy_var_59 := printk.ref.ref.i32.i32(.str.34, $p78, $i80, $i82);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb32:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4840, 1));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.1, $p88);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i89);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i107, $p108 := $i71, $p72;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $i109 := which_bandwidth($p0);
    call {:si_unique_call 271} {:cexpr "bandwidth"} boogie_si_record_i32($i109);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p108, $mul.ref($sub.ref(0, 1), 8));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i111 := $sgt.i32($i107, 1);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i112 := $i107;
    assume {:branchcond $i111} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i120 := $i112;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $r := $i120;
    return;

  $bb52:
    assume $i111 == 1;
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p113, $i114 := $p110, $i107;
    goto $bb55;

  $bb55:
    call $p115, $p116, $i117, $i118, $i119, $i121, $i122, $p113, $i114, $i123 := build_isoc_ep_tb_loop_$bb55($i109, $p115, $p116, $i117, $i118, $i119, $i121, $i122, $p113, $i114, $i123);
    goto $bb55_last;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p113, $mul.ref($sub.ref(0, 1), 8));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p113, $mul.ref($sub.ref(0, 1), 8)), $mul.ref(4, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.11, $p116);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i118 := $ult.i32($i117, $i109);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i119 := $i114;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i121 := $sub.i32($i114, 1);
    call {:si_unique_call 272} {:cexpr "i"} boogie_si_record_i32($i121);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i122 := $sgt.i32($i121, 1);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i123 := $i121;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i112 := $i123;
    goto $bb54;

  $bb61:
    assume $i122 == 1;
    assume {:verifier.code 0} true;
    $p113, $i114 := $p115, $i121;
    goto $bb61_dummy;

  $bb57:
    assume $i118 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i120 := $i119;
    goto $bb59;

  $bb39:
    assume $i91 == 1;
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.1, $p92);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 2032)), $mul.ref(28, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.1, $p94);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 2);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i96 == 1);
    goto $bb41;

  $bb42:
    assume $i96 == 1;
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i97 := $ugt.i32($i73, 999999);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb41;

  $bb44:
    assume $i97 == 1;
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i98 := $sgt.i32($i71, 1);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb41;

  $bb46:
    assume $i98 == 1;
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i99 := $M.0;
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i100 := $sgt.i32($i99, 2);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i105 := $sub.i32($i71, 1);
    call {:si_unique_call 269} {:cexpr "i"} boogie_si_record_i32($i105);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p72, $mul.ref($sub.ref(0, 1), 8));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i107, $p108 := $i105, $p106;
    goto $bb51;

  $bb48:
    assume $i100 == 1;
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} vslice_dummy_var_60 := printk.ref.ref(.str.35, $p103);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i13, $i14 := 0, 0;
    goto $bb8;

  $bb8:
    call $p15, $p16, $i17, $p18, $p19, $i20, $p21, $i22, $i23, $p27, $i28, $i29, $i30, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $p42, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $i50, $i51, $i52, $i53, $p55, $i56, $i57, $i58, $i59, $i60, $p61, $i62, $i63, $p64, $p65, $i66, $i24, $i25, $i67, $i68, $i13, $i14, $i69, vslice_dummy_var_58 := build_isoc_ep_tb_loop_$bb8($p0, $p1, $i6, $p8, $i9, $p15, $p16, $i17, $p18, $p19, $i20, $p21, $i22, $i23, $p27, $i28, $i29, $i30, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $p42, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $i50, $i51, $i52, $i53, $p55, $i56, $i57, $i58, $i59, $i60, $p61, $i62, $i63, $p64, $p65, $i66, $i24, $i25, $i67, $i68, $i13, $i14, $i69, vslice_dummy_var_58);
    goto $bb8_last;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 1560)), $mul.ref(0, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i14);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p16, $mul.ref($i17, 40));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4836, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $p21 := alt_xfer($p18, 1, $i20);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.1, $p27);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.1, $p33);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    call {:si_unique_call 260} {:cexpr "psize"} boogie_si_record_i32($i35);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 2047);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i37 := $ashr.i32($i35, 11);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 3);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, 1);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i40 := $mul.i32($i36, $i39);
    call {:si_unique_call 261} {:cexpr "psize"} boogie_si_record_i32($i40);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i41 := $mul.i32($i40, 1000);
    call {:si_unique_call 262} {:cexpr "bandwidth"} boogie_si_record_i32($i41);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 2032)), $mul.ref(28, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.1, $p44);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 3);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i46 == 1);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.1, $p47);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 2032)), $mul.ref(28, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.1, $p49);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 5);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i53 := $i41;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.1, $p55);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i57, $sub.i32(0, 1));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i59 := $lshr.i32($i53, $i58);
    call {:si_unique_call 264} {:cexpr "bandwidth"} boogie_si_record_i32($i59);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i60 := $ule.i32($i59, $i9);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.11, $p61);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i63 := $ult.i32($i59, $i62);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i66 := $i13;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i24, $i25 := $i14, $i66;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i24, 1);
    call {:si_unique_call 258} {:cexpr "j"} boogie_si_record_i32($i67);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i67, $i6);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i69 := $i25;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i12 := $i69;
    goto $bb7;

  $bb29:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i13, $i14 := $i25, $i67;
    goto $bb29_dummy;

  $bb26:
    assume $i63 == 1;
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p64, $i59);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p8, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p65, $i14);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i66 := 1;
    goto $bb28;

  $bb23:
    assume $i60 == 1;
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i24, $i25 := $i14, $i13;
    goto $bb12;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i52 := $mul.i32($i41, 8);
    call {:si_unique_call 263} {:cexpr "bandwidth"} boogie_si_record_i32($i52);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb18;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} vslice_dummy_var_58 := printk.ref.i32(.str.33, $i14);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i24, $i25 := $i14, $i13;
    goto $bb12;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i24, $i25 := $i14, $i13;
    goto $bb12;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i6 := 16;
    goto $bb3;

  $bb61_dummy:
    assume false;
    return;

  $bb55_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1319;

  $bb29_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1187;

  corral_source_split_1285_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1180;
}



const create_urbs: ref;

axiom create_urbs == $sub.ref(0, 276926);

procedure create_urbs($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4, $M.5, assertsPassed;



implementation create_urbs($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i20: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p49: ref;
  var $p50: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i62: i1;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $i69: i64;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $p98: ref;
  var $p99: ref;
  var $p101: ref;
  var $i102: i8;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i1;
  var $i111: i64;
  var $p114: ref;
  var $i115: i32;
  var $i116: i64;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $i110: i32;
  var $p122: ref;
  var $p123: ref;
  var $p125: ref;
  var $i126: i8;
  var $i127: i32;
  var $i128: i32;
  var $i129: i32;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i32;
  var $i134: i1;
  var $i63: i32;
  var $i68: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.1, $p3);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    call {:si_unique_call 273} {:cexpr "psize"} boogie_si_record_i32($i5);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(27, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(16, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.1, $p42);
    call {:si_unique_call 274} {:cexpr "bsize"} boogie_si_record_i32($i43);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $i43;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i46 := $M.0;
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i47 := $sgt.i32($i46, 2);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(26, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.1, $p53);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i61 := 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i37, $i38, $i39, $i40 := $i61, $i5, 0, $i45;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32(0, $i37);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i68 := 0;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $r := $i68;
    return;

  $bb22:
    assume $i62 == 1;
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i63 := 0;
    goto $bb25;

  $bb25:
    call $p64, $i65, $i66, $i69, $p71, $p72, $p73, $i74, $p75, $p76, $p77, $p78, $p79, $i80, $i81, $p83, $p84, $p85, $p87, $p88, $i89, $p90, $p91, $p93, $i94, $i95, $i96, $i97, $p98, $p99, $p101, $i102, $i103, $i104, $i105, $p106, $p107, $p108, $i109, $i111, $p114, $i115, $i116, $p119, $i120, $i121, $i110, $p122, $p123, $p125, $i126, $i127, $i128, $i129, $p130, $p131, $p132, $i133, $i134, $i63 := create_urbs_loop_$bb25($p0, $p1, $i37, $i38, $i39, $i40, $p64, $i65, $i66, $i69, $p71, $p72, $p73, $i74, $p75, $p76, $p77, $p78, $p79, $i80, $i81, $p83, $p84, $p85, $p87, $p88, $i89, $p90, $p91, $p93, $i94, $i95, $i96, $i97, $p98, $p99, $p101, $i102, $i103, $i104, $i105, $p106, $p107, $p108, $i109, $i111, $p114, $i115, $i116, $p119, $i120, $i121, $i110, $p122, $p123, $p125, $i126, $i127, $i128, $i129, $p130, $p131, $p132, $i133, $i134, $i63);
    goto $bb25_last;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $p64 := ldv_usb_alloc_urb_110($i39, 208);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i66 := $eq.i64($i65, 0);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i63);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2608, 1)), $mul.ref($i69, 8));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p71, $p64);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.1, $p72);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i40);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $p76 := ldv_usb_alloc_coherent_111($p73, $i74, 208, $p75);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p77, $p76);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.1, $p78);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i81 := $eq.i64($i80, 0);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.1, $p83);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p85, $p84);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p87, $p0);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p88, $i40);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i39, 0);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i89 == 1);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.1, $p122);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.1, $p125);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i126);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i128 := __create_pipe($p123, $i127);
    call {:si_unique_call 289} {:cexpr "tmp___0"} boogie_si_record_i32($i128);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i129 := $or.i32($i128, $sub.i32(0, 1073741696));
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p130, $i129);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p131, 4);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p132, bulk_irq);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i133 := $add.i32($i63, 1);
    call {:si_unique_call 291} {:cexpr "n"} boogie_si_record_i32($i133);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i134 := $slt.i32($i133, $i37);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i134 == 1);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb45:
    assume $i134 == 1;
    assume {:verifier.code 0} true;
    $i63 := $i133;
    goto $bb45_dummy;

  $bb34:
    assume $i89 == 1;
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.1, $p90);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.1, $p93);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i96 := __create_pipe($p91, $i95);
    call {:si_unique_call 287} {:cexpr "tmp"} boogie_si_record_i32($i96);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i97 := $or.i32($i96, 128);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p98, $i97);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p99, 6);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.1, $p101);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i103, $sub.i32(0, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i105 := $shl.i32(1, $i104);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p106, $i105);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p107, isoc_irq);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p108, $i39);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i109 := $slt.i32(0, $i39);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb36:
    assume $i109 == 1;
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i110 := 0;
    goto $bb39;

  $bb39:
    call $i111, $p114, $i115, $i116, $p119, $i120, $i121, $i110 := create_urbs_loop_$bb39($i38, $i39, $p64, $i111, $p114, $i115, $i116, $p119, $i120, $i121, $i110);
    goto $bb39_last;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i111 := $sext.i32.i64($i110);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i111, 16)), $mul.ref(4, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p114, $i38);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i115 := $mul.i32($i38, $i110);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i116 := $sext.i32.i64($i110);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i116, 16)), $mul.ref(0, 1));
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p119, $i115);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i120 := $add.i32($i110, 1);
    call {:si_unique_call 290} {:cexpr "i"} boogie_si_record_i32($i120);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i121 := $slt.i32($i120, $i39);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i121 == 1);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb41:
    assume $i121 == 1;
    assume {:verifier.code 0} true;
    $i110 := $i120;
    goto $bb41_dummy;

  $bb31:
    assume $i81 == 1;
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} vslice_dummy_var_64 := printk.ref(.str.40);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32(0, 12);
    goto $bb29;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i66 == 1;
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} vslice_dummy_var_63 := printk.ref(.str.39);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32(0, 12);
    goto $bb29;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i56 == 1;
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(26, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.1, $p58);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    call {:si_unique_call 281} {:cexpr "nurbs"} boogie_si_record_i32($i60);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i61 := $i60;
    goto $bb21;

  $bb16:
    assume $i47 == 1;
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} vslice_dummy_var_62 := printk.ref.ref.i32(.str.38, $p50, $i45);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i44 == 1;
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i45 := $i5;
    goto $bb15;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4828, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.1, $p11);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4828, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.1, $p21);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    call {:si_unique_call 276} {:cexpr "psize"} boogie_si_record_i32($i23);
    assume {:verifier.code 0} true;
    $i20 := $i23;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(28, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.1, $p25);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    call {:si_unique_call 277} {:cexpr "npkt"} boogie_si_record_i32($i27);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i30 := $mul.i32($i20, $i29);
    call {:si_unique_call 278} {:cexpr "bsize"} boogie_si_record_i32($i30);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i31 := $M.0;
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i31, 2);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39, $i40 := 3, $i20, $i29, $i30;
    goto $bb12;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} vslice_dummy_var_61 := printk.ref.ref.i32.i32.i32(.str.37, $p35, $i29, $i20, $i30);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i28 == 1;
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i29 := 32;
    goto $bb8;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i5, 2047);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i16 := $ashr.i32($i5, 11);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 3);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 1);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i19 := $mul.i32($i15, $i18);
    call {:si_unique_call 275} {:cexpr "psize"} boogie_si_record_i32($i19);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb5;

  $bb41_dummy:
    assume false;
    return;

  $bb39_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1491;

  $bb45_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1410;
}



const usb_clear_halt: ref;

axiom usb_clear_halt == $sub.ref(0, 277958);

procedure usb_clear_halt($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_clear_halt($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 292} {:cexpr "usb_clear_halt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 1} true;
    call {:si_unique_call 293} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 294} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_usb_submit_urb_112: ref;

axiom ldv_usb_submit_urb_112 == $sub.ref(0, 278990);

procedure ldv_usb_submit_urb_112($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_112($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} {:cexpr "ldv_usb_submit_urb_112:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} ldv_check_alloc_flags($i1);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $p2 := ldv_malloc_unknown_size();
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const gspca_stream_off: ref;

axiom gspca_stream_off == $sub.ref(0, 280022);

procedure gspca_stream_off($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.5, $M.4, $M.10, $M.31, $M.11, $M.8, assertsPassed, $CurrAddr, $M.32;



implementation gspca_stream_off($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4364, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1, 0);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4824, 1));
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, 0);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} destroy_urbs($p0);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} gspca_input_destroy_urb($p0);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} vslice_dummy_var_65 := gspca_set_alt0($p0);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} gspca_input_create_urb($p0);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 176)), $mul.ref(72, 1));
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i24 := $M.0;
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, 2);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} vslice_dummy_var_66 := printk.ref.ref(.str.48, $p28);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 176)), $mul.ref(72, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    call {:si_unique_call 303} devirtbounce.4($p23, $p0);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    call {:si_unique_call 298} devirtbounce.4($p12, $p0);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_196:
    assume !assertsPassed;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 281054);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_alloc_urb_110: ref;

axiom ldv_usb_alloc_urb_110 == $sub.ref(0, 282086);

procedure ldv_usb_alloc_urb_110($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_usb_alloc_urb_110($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} {:cexpr "ldv_usb_alloc_urb_110:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 307} {:cexpr "ldv_usb_alloc_urb_110:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $p2 := ldv_linux_usb_urb_usb_alloc_urb();
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $i4 := ldv_is_err($p3);
    call {:si_unique_call 310} {:cexpr "tmp___0"} boogie_si_record_i64($i4);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} ldv_assume($i6);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} ldv_linux_alloc_irq_check_alloc_flags($i1);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} ldv_linux_alloc_usb_lock_check_alloc_flags($i1);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;
}



const ldv_usb_alloc_coherent_111: ref;

axiom ldv_usb_alloc_coherent_111 == $sub.ref(0, 283118);

procedure ldv_usb_alloc_coherent_111($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_usb_alloc_coherent_111($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} {:cexpr "ldv_usb_alloc_coherent_111:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    call {:si_unique_call 315} {:cexpr "ldv_usb_alloc_coherent_111:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $p4 := ldv_linux_usb_coherent_usb_alloc_coherent();
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i5 := ldv_is_err($p4);
    call {:si_unique_call 318} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} ldv_assume($i7);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} ldv_linux_alloc_irq_check_alloc_flags($i2);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} ldv_linux_alloc_usb_lock_check_alloc_flags($i2);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;
}



const isoc_irq: ref;

axiom isoc_irq == $sub.ref(0, 284150);

procedure isoc_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation isoc_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var vslice_dummy_var_67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i4 := $M.0;
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 4);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(4364, 1));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} fill_frame($p3, $p0);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} vslice_dummy_var_67 := printk.ref.ref(.str.41, $p8);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bulk_irq: ref;

axiom bulk_irq == $sub.ref(0, 285182);

procedure bulk_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation bulk_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i4 := $M.0;
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 4);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(4364, 1));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p17);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, $sub.i32(0, 108));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(4830, 1));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.1, $p20);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i22 := $sext.i8.i32($i21);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.1, $p27);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} vslice_dummy_var_69 := printk.ref.ref.i32(.str.42, $p26, $i28);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p30, 0);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(26, 1));
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.1, $p48);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb26:
    assume $i51 == 1;
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $i52 := ldv_usb_submit_urb_106($p0, 32);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    call {:si_unique_call 329} {:cexpr "st"} boogie_si_record_i32($i52);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i52, 0);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i53 == 1;
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} vslice_dummy_var_71 := printk.ref.i32(.str.45, $i52);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i23 == 1;
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume $i19 == 1;
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i31 := $M.0;
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i31, 4);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 176)), $mul.ref(40, 1));
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.1, $p45);
    call {:si_unique_call 327} devirtbounce.5($p42, $p3, $p44, $i46);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb23:
    assume $i32 == 1;
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.1, $p36);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} vslice_dummy_var_70 := printk.ref.ref.i32(.str.47, $p35, $i37);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} vslice_dummy_var_68 := printk.ref.ref(.str.46, $p8);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_submit_urb_106: ref;

axiom ldv_usb_submit_urb_106 == $sub.ref(0, 286214);

procedure ldv_usb_submit_urb_106($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_106($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} {:cexpr "ldv_usb_submit_urb_106:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} ldv_check_alloc_flags($i1);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $p2 := ldv_malloc_unknown_size();
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;
}



const fill_frame: ref;

axiom fill_frame == $sub.ref(0, 287246);

procedure fill_frame($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation fill_frame($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i27: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $i41: i1;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $p55: ref;
  var $i56: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p63: ref;
  var $i64: i32;
  var $i65: i64;
  var $p66: ref;
  var $i40: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i26: i32;
  var $i70: i32;
  var $i71: i1;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 176)), $mul.ref(40, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32(0, $i24);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $i70 := ldv_usb_submit_urb_105($p1, 32);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    call {:si_unique_call 336} {:cexpr "st"} boogie_si_record_i32($i70);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i70, 0);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  $bb33:
    assume $i71 == 1;
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} vslice_dummy_var_75 := printk.ref.i32(.str.45, $i70);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb15;

  $bb15:
    call $i27, $p30, $i31, $i32, $p35, $i36, $i37, $p39, $i41, $p42, $i43, $i44, $i45, $p46, $i47, $i48, $p50, $p51, $i52, $p55, $i56, $p58, $p59, $i60, $p63, $i64, $i65, $p66, $i40, $i67, $i68, $i69, $i26, vslice_dummy_var_73, vslice_dummy_var_74 := fill_frame_loop_$bb15($p0, $p1, $p22, $p23, $i27, $p30, $i31, $i32, $p35, $i36, $i37, $p39, $i41, $p42, $i43, $i44, $i45, $p46, $i47, $i48, $p50, $p51, $i52, $p55, $i56, $p58, $p59, $i60, $p63, $i64, $i65, $p66, $i40, $i67, $i68, $i69, $i26, vslice_dummy_var_73, vslice_dummy_var_74);
    goto $bb15_last;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i27, 16)), $mul.ref(8, 1));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    call {:si_unique_call 337} {:cexpr "len"} boogie_si_record_i32($i31);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i26);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i32, 16)), $mul.ref(12, 1));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.1, $p35);
    call {:si_unique_call 338} {:cexpr "st"} boogie_si_record_i32($i36);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i31, 0);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i47 := $M.0;
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i48 := $sgt.i32($i47, 4);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.1, $p58);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i26);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i60, 16)), $mul.ref(0, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.1, $p63);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i65 := $zext.i32.i64($i64);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p59, $mul.ref($i65, 1));
    call {:si_unique_call 342} devirtbounce.5($p22, $p0, $p66, $i31);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i40 := $i26;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i40, 1);
    call {:si_unique_call 340} {:cexpr "i"} boogie_si_record_i32($i67);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.1, $p23);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i67, $i68);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i69 == 1);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb30:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i26 := $i67;
    goto $bb30_dummy;

  $bb27:
    assume $i48 == 1;
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i26);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i52, 16)), $mul.ref(0, 1));
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.1, $p55);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} vslice_dummy_var_74 := printk.ref.ref.i32.i32.i32(.str.44, $p51, $i26, $i56, $i31);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb21:
    assume $i41 == 1;
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4363, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.1, $p42);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i44 := $sext.i8.i32($i43);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i40 := $i26;
    goto $bb19;

  $bb23:
    assume $i45 == 1;
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4363, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p46, 1);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} vslice_dummy_var_73 := printk.ref.i32.i32.i32(.str.43, $i26, $i31, $i36);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4362, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p39, 0);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i40 := $i26;
    goto $bb19;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, $sub.i32(0, 108));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4830, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} vslice_dummy_var_72 := printk.ref.ref.i32(.str.42, $p14, $i16);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p18, 0);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb30_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1727;
}



const ldv_usb_submit_urb_105: ref;

axiom ldv_usb_submit_urb_105 == $sub.ref(0, 288278);

procedure ldv_usb_submit_urb_105($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_105($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} {:cexpr "ldv_usb_submit_urb_105:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} ldv_check_alloc_flags($i1);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $p2 := ldv_malloc_unknown_size();
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;
}



const which_bandwidth: ref;

axiom which_bandwidth == $sub.ref(0, 289310);

procedure which_bandwidth($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation which_bandwidth($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i32;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i55: i32;
  var $i54: i32;
  var $i43: i32;
  var $i56: i32;
  var $i57: i1;
  var $p59: ref;
  var $p60: ref;
  var vslice_dummy_var_76: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $p1 := $alloc($mul.ref(204, $zext.i32.i64(1)));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4368, 1)), $mul.ref(20, 1));
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    call {:si_unique_call 348} {:cexpr "bandwidth"} boogie_si_record_i32($i4);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(29, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i20 := $i4;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i26 == 1);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4368, 1)), $mul.ref(0, 1));
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.1, $p45);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i47 := $ugt.i32($i46, 639);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i55 := $mul.i32($i20, 30);
    call {:si_unique_call 353} {:cexpr "bandwidth"} boogie_si_record_i32($i55);
    assume {:verifier.code 0} true;
    $i54 := $i55;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i43 := $i54;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i56 := $M.0;
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i57 := $sgt.i32($i56, 2);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $r := $i43;
    return;

  $bb16:
    assume $i57 == 1;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} vslice_dummy_var_76 := printk.ref.ref.i32(.str.36, $p60, $i43);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i47 == 1;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.1, $p48);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 2032)), $mul.ref(28, 1));
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.1, $p50);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 2);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb12;

  $bb13:
    assume $i52 == 1;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i53 := $mul.i32($i20, 15);
    call {:si_unique_call 354} {:cexpr "bandwidth"} boogie_si_record_i32($i53);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i54 := $i53;
    goto $bb15;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    call {:si_unique_call 350} devirtbounce.6($p30, $p0, $p1);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i36 := $mul.i32($i20, $i35);
    call {:si_unique_call 351} {:cexpr "bandwidth"} boogie_si_record_i32($i36);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.1, $p40);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i42 := $udiv.i32($i36, $i41);
    call {:si_unique_call 352} {:cexpr "bandwidth"} boogie_si_record_i32($i42);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4368, 1)), $mul.ref(0, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4368, 1)), $mul.ref(4, 1));
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i16 := $mul.i32($i12, $i15);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i17 := $ult.i32($i4, $i16);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i18 := $mul.i32($i4, 3);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i19 := $udiv.i32($i18, 8);
    call {:si_unique_call 349} {:cexpr "bandwidth"} boogie_si_record_i32($i19);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb6;
}



const gspca_expo_autogain: ref;

axiom gspca_expo_autogain == $sub.ref(0, 290342);

procedure gspca_expo_autogain($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32);



const v4l2_ctrl_g_ctrl: ref;

axiom v4l2_ctrl_g_ctrl == $sub.ref(0, 291374);

procedure v4l2_ctrl_g_ctrl($p0: ref) returns ($r: i32);



const v4l2_ctrl_s_ctrl: ref;

axiom v4l2_ctrl_s_ctrl == $sub.ref(0, 292406);

procedure v4l2_ctrl_s_ctrl($p0: ref, $i1: i32) returns ($r: i32);



const v4l2_ctrl_lock: ref;

axiom v4l2_ctrl_lock == $sub.ref(0, 293438);

procedure v4l2_ctrl_lock($p0: ref);



const __v4l2_ctrl_s_ctrl: ref;

axiom __v4l2_ctrl_s_ctrl == $sub.ref(0, 294470);

procedure __v4l2_ctrl_s_ctrl($p0: ref, $i1: i32) returns ($r: i32);



const v4l2_ctrl_unlock: ref;

axiom v4l2_ctrl_unlock == $sub.ref(0, 295502);

procedure v4l2_ctrl_unlock($p0: ref);



const ldv_mutex_unlock_96: ref;

axiom ldv_mutex_unlock_96 == $sub.ref(0, 296534);

procedure ldv_mutex_unlock_96($p0: ref);



const ldv_linux_kernel_locking_mutex_mutex_unlock_lock_of_v4l2_ctrl_handler: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_lock_of_v4l2_ctrl_handler == $sub.ref(0, 297566);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_lock_of_v4l2_ctrl_handler($p0: ref);



const ldv_mutex_lock_95: ref;

axiom ldv_mutex_lock_95 == $sub.ref(0, 298598);

procedure ldv_mutex_lock_95($p0: ref);



const ldv_linux_kernel_locking_mutex_mutex_lock_lock_of_v4l2_ctrl_handler: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_lock_of_v4l2_ctrl_handler == $sub.ref(0, 299630);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_lock_of_v4l2_ctrl_handler($p0: ref);



const gspca_coarse_grained_expo_autogain: ref;

axiom gspca_coarse_grained_expo_autogain == $sub.ref(0, 300662);

procedure gspca_coarse_grained_expo_autogain($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);



const video_device_release_empty: ref;

axiom video_device_release_empty == $sub.ref(0, 301694);

procedure video_device_release_empty($p0: ref);
  free requires assertsPassed;



implementation video_device_release_empty($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    return;
}



const dev_read: ref;

axiom dev_read == $sub.ref(0, 302726);

procedure dev_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $M.26, $M.27, $M.33, $CurrAddr, $M.8, $M.10, $M.31, $M.34, $M.35, assertsPassed, $M.5, $M.4, $M.11, $M.32;



implementation dev_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i64;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i51: i32;
  var $i49: i32;
  var $i52: i32;
  var $i53: i1;
  var $p55: ref;
  var $p56: ref;
  var $i58: i64;
  var $i50: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p71: ref;
  var $i72: i64;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $p84: ref;
  var $p85: ref;
  var $i87: i64;
  var $i88: i32;
  var $i89: i1;
  var $p68: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i64;
  var $i94: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i64;
  var $i99: i64;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $i103: i32;
  var $i104: i1;
  var $p106: ref;
  var $p107: ref;
  var $i110: i32;
  var $i109: i32;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $i114: i64;
  var $i115: i64;
  var $i24: i64;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $p4 := $alloc($mul.ref(88, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $p8 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 361} {:cexpr "dev_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $p9 := video_drvdata($p0);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i11 := $M.0;
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 3);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p10, $mul.ref(0, 4848)), $mul.ref(4833, 1));
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i19 := $sext.i8.i32($i18);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $i25 := ktime_get();
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $M.26 := $store.i64($M.26, $p26, $i25);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p6);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p7);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.26;
    cmdloc_dummy_var_7 := $M.26;
    call {:si_unique_call 367} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p27, $p28, 8, $zext.i32.i64(8), 0 == 1);
    $M.26 := cmdloc_dummy_var_8;
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p6);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.26, $p29);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $p31 := ns_to_timeval($i30);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p8);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i34 := $extractvalue($p31, 0);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $M.27 := $store.i64($M.27, $p33, $i34);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p32, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i36 := $extractvalue($p31, 1);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $M.27 := $store.i64($M.27, $p35, $i36);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p5);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p8);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.27;
    cmdloc_dummy_var_10 := $M.27;
    call {:si_unique_call 369} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p37, $p38, 16, $zext.i32.i64(8), 0 == 1);
    $M.27 := cmdloc_dummy_var_11;
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.27, $p39);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i41 := $sub.i64($i40, 1);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $M.27 := $store.i64($M.27, $p42, $i41);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p4);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.1;
    call {:si_unique_call 370} cmdloc_dummy_var_13 := $memset.i8(cmdloc_dummy_var_12, $p43, 0, 88, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_13;
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p44, 1);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p45, 7);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p10);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i47 := vidioc_dqbuf($p0, $p46, $p4);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    call {:si_unique_call 372} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i49 := $i47;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i48 == 1);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i50 := 2;
    goto $bb14;

  $bb14:
    call $i51, $i50, $p59, $p60, $p61, $i62, $i63, $p64, $i65, $i66, $p67, $p71, $i72, $p73, $i74, $i75, $p76, $p77, $i78, $i79, $i80, $i88, $i89, cmdloc_dummy_var_14, cmdloc_dummy_var_15 := dev_read_loop_$bb14($p0, $p4, $p5, $p10, $p43, $p44, $p45, $p46, $i51, $i50, $p59, $p60, $p61, $i62, $i63, $p64, $i65, $i66, $p67, $p71, $i72, $p73, $i74, $i75, $p76, $p77, $i78, $i79, $i80, $i88, $i89, cmdloc_dummy_var_14, cmdloc_dummy_var_15);
    goto $bb14_last;

  $bb19:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p10, $mul.ref(0, 4848)), $mul.ref(2656, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.1, $p61);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i63 := $zext.i32.i64($i62);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p60, $mul.ref($i63, 104));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32($i50, 1);
    call {:si_unique_call 374} {:cexpr "n"} boogie_si_record_i32($i65);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i65, 0);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p67 := $p64;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p60, $mul.ref($i63, 104)), $mul.ref(16, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.1, $p71);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.27, $p73);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i75 := $sge.i64($i72, $i74);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p76 := $p64;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p10);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $i78 := vidioc_qbuf($p0, $p77, $p4);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    call {:si_unique_call 376} {:cexpr "ret"} boogie_si_record_i32($i78);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i80 := $i78;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.1;
    call {:si_unique_call 378} cmdloc_dummy_var_15 := $memset.i8(cmdloc_dummy_var_14, $p43, 0, 88, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_15;
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p44, 1);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p45, 7);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $i88 := vidioc_dqbuf($p0, $p46, $p4);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    call {:si_unique_call 380} {:cexpr "ret"} boogie_si_record_i32($i88);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i51 := $i88;
    assume true;
    goto $bb15, $bb33;

  $bb33:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $i50 := $i65;
    goto $bb33_dummy;

  $bb15:
    assume $i89 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i49 := $i51;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i52 := $M.0;
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i53 := $sgt.i32($i52, 2);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i49);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i24 := $i58;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb16:
    assume $i53 == 1;
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} vslice_dummy_var_78 := printk.ref.ref.i32(.str.60, $p56, $i49);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i81 := $M.0;
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i82 := $sgt.i32($i81, 2);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i80);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i24 := $i87;
    goto $bb8;

  $bb29:
    assume $i82 == 1;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} vslice_dummy_var_79 := printk.ref.ref.i32(.str.61, $p85, $i80);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p68 := $p76;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p68, $mul.ref(0, 104)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.1, $p91);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i93 := $zext.i32.i64($i92);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i94 := $ugt.i64($i2, $i93);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i99 := $i2;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p68, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.1, $p100);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $i102 := copy_to_user($p1, $p101, $i99);
    call {:si_unique_call 383} {:cexpr "tmp___1"} boogie_si_record_i64($i102);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i64.i32($i102);
    call {:si_unique_call 384} {:cexpr "ret"} boogie_si_record_i32($i103);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i64.i32($i99);
    call {:si_unique_call 388} {:cexpr "ret"} boogie_si_record_i32($i110);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i109 := $i110;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p10);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $i112 := vidioc_qbuf($p0, $p111, $p4);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    call {:si_unique_call 387} {:cexpr "ret2"} boogie_si_record_i32($i112);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i115 := $sext.i32.i64($i109);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i24 := $i115;
    goto $bb8;

  $bb41:
    assume $i113 == 1;
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i114 := $sext.i32.i64($i112);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i24 := $i114;
    goto $bb8;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i104 == 1;
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} vslice_dummy_var_80 := printk.ref.ref.i32.i64(.str.62, $p107, $i103, $i99);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i109 := $sub.i32(0, 14);
    goto $bb39;

  $bb34:
    assume $i94 == 1;
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p68, $mul.ref(0, 104)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.1, $p96);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i98 := $zext.i32.i64($i97);
    call {:si_unique_call 381} {:cexpr "count"} boogie_si_record_i64($i98);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i99 := $i98;
    goto $bb36;

  $bb20:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p68 := $p67;
    goto $bb22;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb12;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $i21 := read_alloc($p10, $p0);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    call {:si_unique_call 365} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i21);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb8;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} vslice_dummy_var_77 := printk.ref.ref.i64(.str.59, $p15, $i2);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb33_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;
}



const dev_poll: ref;

axiom dev_poll == $sub.ref(0, 303758);

procedure dev_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.8, $M.10, assertsPassed, $CurrAddr, $M.5, $M.4, $M.11, $M.32;



implementation dev_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i25: i32;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var vslice_dummy_var_81: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $p2 := video_drvdata($p0);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $i4 := poll_requested_events($p1);
    call {:si_unique_call 391} {:cexpr "tmp___0"} boogie_si_record_i64($i4);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i5 := $M.0;
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 3);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $and.i64($i4, 2);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i4, 65);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i40 := $i15;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i25 := $i40;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(4831, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.1, $p41);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i43 := $sext.i8.i32($i42);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i46 := $i25;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $r := $i46;
    return;

  $bb23:
    assume $i44 == 1;
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i25, 16);
    call {:si_unique_call 407} {:cexpr "ret"} boogie_si_record_i32($i45);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb25;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(4833, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i20 := $sext.i8.i32($i19);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(4416, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} poll_wait($p0, $p26, $p1);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i28 := ldv_mutex_lock_interruptible_143($p27);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    call {:si_unique_call 401} {:cexpr "tmp___3"} boogie_si_record_i32($i28);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(4340, 1));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i32 := atomic_read($p31);
    call {:si_unique_call 404} {:cexpr "tmp___4"} boogie_si_record_i32($i32);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(4361, 1));
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.1, $p33);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, $i32);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i38 := $i15;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} ldv_mutex_unlock_144($p39);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i40 := $i38;
    goto $bb22;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i15, 65);
    call {:si_unique_call 405} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb21;

  $bb16:
    assume $i29 == 1;
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i15, 8);
    call {:si_unique_call 402} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i25 := $i30;
    goto $bb13;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $i22 := read_alloc($p3, $p0);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    call {:si_unique_call 397} {:cexpr "tmp___2"} boogie_si_record_i32($i22);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i15, 8);
    call {:si_unique_call 398} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb13;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $i13 := v4l2_ctrl_poll($p0, $p1);
    call {:si_unique_call 394} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i14 := $or.i32(0, $i13);
    call {:si_unique_call 395} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} vslice_dummy_var_81 := printk.ref.ref(.str.54, $p9);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const video_ioctl2: ref;

axiom video_ioctl2 == $sub.ref(0, 304790);

procedure video_ioctl2($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation video_ioctl2($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 408} {:cexpr "video_ioctl2:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 409} {:cexpr "video_ioctl2:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 1} true;
    call {:si_unique_call 410} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 411} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dev_mmap: ref;

axiom dev_mmap == $sub.ref(0, 305822);

procedure dev_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.31, assertsPassed;



implementation dev_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i34: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $i48: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i64;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $i33: i32;
  var $p47: ref;
  var $i69: i64;
  var $i70: i1;
  var $i71: i32;
  var $i72: i1;
  var $p74: ref;
  var $p75: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i64;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $p85: ref;
  var $p86: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i64;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $i95: i1;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i64;
  var $i105: i64;
  var $i106: i64;
  var $i107: i1;
  var $i96: i64;
  var $i97: i64;
  var $i98: i64;
  var $p108: ref;
  var $p110: ref;
  var $i28: i32;
  var $p111: ref;
  var $i22: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $p2 := video_drvdata($p0);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.1, $p4);
    call {:si_unique_call 413} {:cexpr "start"} boogie_si_record_i64($i5);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.1, $p6);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.1, $p8);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64($i7, $i9);
    call {:si_unique_call 414} {:cexpr "size"} boogie_si_record_i64($i10);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i11 := $M.0;
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 2);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $i20 := ldv_mutex_lock_interruptible_129($p19);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    call {:si_unique_call 417} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(2208, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p0);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i25, $i26);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(4360, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.1, $p29);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i31 := $sext.i8.i32($i30);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32(0, $i31);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p47 := $0.ref;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p47);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i69, 0);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p47, $mul.ref(0, 104)), $mul.ref(16, 1)), $mul.ref(72, 1));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.1, $p78);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i80 := $zext.i32.i64($i79);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i10, $i80);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.1, $p88);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i90 := $or.i64($i89, 16384);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p91, $i90);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p47, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.1, $p92);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p93);
    call {:si_unique_call 423} {:cexpr "addr"} boogie_si_record_i64($i94);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i10, 0);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p108, gspca_vm_ops);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p110, $p47);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} gspca_vm_open($p1);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} ldv_mutex_unlock_130($p111);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i22 := $i28;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i95 == 1;
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i96, $i97, $i98 := $i10, $i5, $i94;
    goto $bb45;

  $bb45:
    call $p99, $p100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i96, $i97, $i98 := dev_mmap_loop_$bb45($p1, $p99, $p100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i96, $i97, $i98);
    goto $bb45_last;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p99 := $i2p.i64.ref($i98);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $p100 := vmalloc_to_page($p99);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $i101 := vm_insert_page($p1, $i97, $p100);
    call {:si_unique_call 426} {:cexpr "ret"} boogie_si_record_i32($i101);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i101, 0);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i103 := $i101;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i104 := $add.i64($i97, 4096);
    call {:si_unique_call 427} {:cexpr "start"} boogie_si_record_i64($i104);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i105 := $add.i64($i98, 4096);
    call {:si_unique_call 428} {:cexpr "addr"} boogie_si_record_i64($i105);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i106 := $sub.i64($i96, 4096);
    call {:si_unique_call 429} {:cexpr "size"} boogie_si_record_i64($i106);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i107 := $ne.i64($i106, 0);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i107 == 1);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb50:
    assume $i107 == 1;
    assume {:verifier.code 0} true;
    $i96, $i97, $i98 := $i106, $i104, $i105;
    goto $bb50_dummy;

  $bb47:
    assume $i102 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i28 := $i103;
    goto $bb10;

  $bb36:
    assume $i81 == 1;
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i82 := $M.0;
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i83 := $sgt.i32($i82, 2);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 22);
    goto $bb10;

  $bb38:
    assume $i83 == 1;
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} vslice_dummy_var_85 := printk.ref.ref(.str.53, $p86);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb30:
    assume $i70 == 1;
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i71 := $M.0;
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i72 := $sgt.i32($i71, 2);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 22);
    goto $bb10;

  $bb32:
    assume $i72 == 1;
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} vslice_dummy_var_84 := printk.ref.ref(.str.52, $p75);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb15;

  $bb15:
    call $i34, $p38, $i39, $i40, $i48, $p52, $p53, $i54, $i55, $i56, $p57, $i58, $i59, $i60, $i65, $i66, $i67, $i68, $i33 := dev_mmap_loop_$bb15($p1, $p3, $p29, $i34, $p38, $i39, $i40, $i48, $p52, $p53, $i54, $i55, $i56, $p57, $i58, $i59, $i60, $i65, $i66, $i67, $i68, $i33);
    goto $bb15_last;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(2656, 1)), $mul.ref($i34, 104)), $mul.ref(16, 1)), $mul.ref(60, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.1, $p38);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 1);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i33);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(2656, 1)), $mul.ref($i48, 104)), $mul.ref(16, 1)), $mul.ref(64, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.1, $p53);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i55 := $lshr.i32($i54, 12);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i56 := $zext.i32.i64($i55);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.1, $p57);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i56, $i58);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i60 := $i33;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i33, 1);
    call {:si_unique_call 420} {:cexpr "i"} boogie_si_record_i32($i65);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.1, $p29);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i67 := $sext.i8.i32($i66);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i65, $i67);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i68 == 1);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb27:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i33 := $i65;
    goto $bb27_dummy;

  $bb24:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(2656, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i60);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p62, $mul.ref($i63, 104));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p47 := $p64;
    goto $bb22;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i41 := $M.0;
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i41, 2);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p47 := $0.ref;
    goto $bb22;

  $bb19:
    assume $i42 == 1;
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} vslice_dummy_var_83 := printk.ref.ref(.str.51, $p45);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 22);
    goto $bb10;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 512);
    goto $bb6;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i5);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i10);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} vslice_dummy_var_82 := printk.ref.ref.i32.i32(.str.50, $p15, $i16, $i17);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb50_dummy:
    assume false;
    return;

  $bb45_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2208;

  $bb27_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2130;
}



const dev_open: ref;

axiom dev_open == $sub.ref(0, 306854);

procedure dev_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.32, assertsPassed;



implementation dev_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i19: i32;
  var vslice_dummy_var_86: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $p1 := video_drvdata($p0);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i3 := $M.0;
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 2);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(1840, 1));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $i14 := ldv_try_module_get_115($p13);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 435} {:cexpr "tmp___1"} boogie_si_record_i8($i15);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $i20 := v4l2_fh_open($p0);
    call {:si_unique_call 437} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i19 := $i20;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(1840, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} ldv_module_put_116($p23);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 19);
    goto $bb9;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $p5 := get_current();
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 10680)), $mul.ref(2536, 1));
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} vslice_dummy_var_86 := printk.ref.ref.ref(.str.80, $p8, $p10);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_close: ref;

axiom dev_close == $sub.ref(0, 307886);

procedure dev_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.5, $M.4, $M.31, $M.10, $M.32, assertsPassed, $M.11, $CurrAddr;



implementation dev_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $i39: i32;
  var $i15: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $p1 := video_drvdata($p0);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i3 := $M.0;
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 2);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(4504, 1));
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $i13 := ldv_mutex_lock_interruptible_117($p12);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    call {:si_unique_call 443} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i17 := ldv_mutex_lock_interruptible_118($p16);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    call {:si_unique_call 445} {:cexpr "tmp___2"} boogie_si_record_i32($i17);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(2208, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(1840, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} ldv_module_put_120($p30);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} ldv_mutex_unlock_121($p31);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(4504, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} ldv_mutex_unlock_122($p32);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i33 := $M.0;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i34 := $sgt.i32($i33, 2);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $i39 := v4l2_fh_release($p0);
    call {:si_unique_call 454} {:cexpr "tmp___3"} boogie_si_record_i32($i39);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i15 := $i39;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} vslice_dummy_var_88 := printk.ref.ref(.str.82, $p37);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(4364, 1));
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.1, $p25);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} frame_free($p2);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} gspca_stream_off($p2);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(4504, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} ldv_mutex_unlock_119($p19);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 512);
    goto $bb6;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 512);
    goto $bb6;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $p5 := get_current();
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 10680)), $mul.ref(2536, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} vslice_dummy_var_87 := printk.ref.ref.ref(.str.81, $p8, $p10);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const video_drvdata: ref;

axiom video_drvdata == $sub.ref(0, 308918);

procedure video_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $p1 := video_devdata($p0);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $p2 := video_get_drvdata($p1);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 309950);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call {:si_unique_call 457} $p3 := devirtbounce.7(0, current_task);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv_mutex_lock_interruptible_117: ref;

axiom ldv_mutex_lock_interruptible_117 == $sub.ref(0, 310982);

procedure ldv_mutex_lock_interruptible_117($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_interruptible_117($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $i1 := ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_usb_lock_of_gspca_dev($p0);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    call {:si_unique_call 463} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_118: ref;

axiom ldv_mutex_lock_interruptible_118 == $sub.ref(0, 312014);

procedure ldv_mutex_lock_interruptible_118($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_lock_interruptible_118($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $i1 := ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_queue_lock_of_gspca_dev($p0);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    call {:si_unique_call 465} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_119: ref;

axiom ldv_mutex_unlock_119 == $sub.ref(0, 313046);

procedure ldv_mutex_unlock_119($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_119($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} ldv_linux_kernel_locking_mutex_mutex_unlock_usb_lock_of_gspca_dev($p0);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const frame_free: ref;

axiom frame_free == $sub.ref(0, 314078);

procedure frame_free($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation frame_free($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $i19: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i18: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var vslice_dummy_var_89: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i1 := $M.0;
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 2);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2648, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4360, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p27, 0);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4328, 1));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p28, 0);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2208, 1));
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p29, $0.ref);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4833, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p30, 0);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2648, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} vfree($p12);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2648, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, $0.ref);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4360, 1));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.1, $p14);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i16 := $sext.i8.i32($i15);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32(0, $i16);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb9;

  $bb9:
    call $i19, $p22, $i23, $i24, $i25, $i26, $i18 := frame_free_loop_$bb9($p0, $p14, $i19, $p22, $i23, $i24, $i25, $i26, $i18);
    goto $bb9_last;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2656, 1)), $mul.ref($i19, 104)), $mul.ref(0, 1));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p22, $0.ref);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i18, 1);
    call {:si_unique_call 469} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.1, $p14);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i25 := $sext.i8.i32($i24);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i23, $i25);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb11:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i18 := $i23;
    goto $bb11_dummy;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} vslice_dummy_var_89 := printk.ref.ref(.str.73, $p5);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2387;
}



const ldv_module_put_120: ref;

axiom ldv_module_put_120 == $sub.ref(0, 315110);

procedure ldv_module_put_120($p0: ref);
  free requires assertsPassed;
  modifies $M.32, assertsPassed;



implementation ldv_module_put_120($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} ldv_linux_kernel_module_module_put($p0);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_121: ref;

axiom ldv_mutex_unlock_121 == $sub.ref(0, 316142);

procedure ldv_mutex_unlock_121($p0: ref);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_unlock_121($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} ldv_linux_kernel_locking_mutex_mutex_unlock_queue_lock_of_gspca_dev($p0);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_122: ref;

axiom ldv_mutex_unlock_122 == $sub.ref(0, 317174);

procedure ldv_mutex_unlock_122($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_122($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} ldv_linux_kernel_locking_mutex_mutex_unlock_usb_lock_of_gspca_dev($p0);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;
}



const v4l2_fh_release: ref;

axiom v4l2_fh_release == $sub.ref(0, 318206);

procedure v4l2_fh_release($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_fh_release($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 1} true;
    call {:si_unique_call 473} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 474} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_queue_lock_of_gspca_dev: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_queue_lock_of_gspca_dev == $sub.ref(0, 319238);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_queue_lock_of_gspca_dev($p0: ref);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_queue_lock_of_gspca_dev($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i1 := $M.31;
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $M.31 := 0;
    call {:si_unique_call 476} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_queue_lock_of_gspca_dev"} boogie_si_record_i8(0);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_module_module_put: ref;

axiom ldv_linux_kernel_module_module_put == $sub.ref(0, 320270);

procedure ldv_linux_kernel_module_module_put($p0: ref);
  free requires assertsPassed;
  modifies $M.32, assertsPassed;



implementation ldv_linux_kernel_module_module_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i3 := $M.32;
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 1);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} ldv_assert_linux_kernel_module__less_initial_decrement($i5);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i6 := $M.32;
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i6, 1);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $M.32 := $i7;
    call {:si_unique_call 478} {:cexpr "ldv_linux_kernel_module_module_refcounter"} boogie_si_record_i32($i7);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_313:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_module__less_initial_decrement: ref;

axiom ldv_assert_linux_kernel_module__less_initial_decrement == $sub.ref(0, 321302);

procedure ldv_assert_linux_kernel_module__less_initial_decrement($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_module__less_initial_decrement($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} {:cexpr "ldv_assert_linux_kernel_module__less_initial_decrement:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 1} true;
    call {:si_unique_call 480} __VERIFIER_error();
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vfree: ref;

axiom vfree == $sub.ref(0, 322334);

procedure vfree($p0: ref);
  free requires assertsPassed;



implementation vfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_queue_lock_of_gspca_dev: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_queue_lock_of_gspca_dev == $sub.ref(0, 323366);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_queue_lock_of_gspca_dev($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_queue_lock_of_gspca_dev($p0: ref) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i1 := $M.31;
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $i5 := ldv_undef_int();
    call {:si_unique_call 483} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 4);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 484} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_queue_lock_of_gspca_dev"} boogie_si_record_i8(1);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  SeqInstr_319:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_usb_lock_of_gspca_dev: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_usb_lock_of_gspca_dev == $sub.ref(0, 324398);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_usb_lock_of_gspca_dev($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_usb_lock_of_gspca_dev($p0: ref) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i1 := $M.8;
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $i5 := ldv_undef_int();
    call {:si_unique_call 487} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 4);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 488} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_usb_lock_of_gspca_dev"} boogie_si_record_i8(1);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  SeqInstr_322:
    assume !assertsPassed;
    return;
}



const __bad_percpu_size: ref;

axiom __bad_percpu_size == $sub.ref(0, 325430);

procedure __bad_percpu_size();



const video_devdata: ref;

axiom video_devdata == $sub.ref(0, 326462);

procedure video_devdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_devdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $p1 := external_alloc();
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const video_get_drvdata: ref;

axiom video_get_drvdata == $sub.ref(0, 327494);

procedure video_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1840)), $mul.ref(136, 1));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_try_module_get_115: ref;

axiom ldv_try_module_get_115 == $sub.ref(0, 328526);

procedure ldv_try_module_get_115($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.32;



implementation ldv_try_module_get_115($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i1 := ldv_linux_kernel_module_try_module_get($p0);
    call {:si_unique_call 492} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const v4l2_fh_open: ref;

axiom v4l2_fh_open == $sub.ref(0, 329558);

procedure v4l2_fh_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_fh_open($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 1} true;
    call {:si_unique_call 493} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 494} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_module_put_116: ref;

axiom ldv_module_put_116 == $sub.ref(0, 330590);

procedure ldv_module_put_116($p0: ref);
  free requires assertsPassed;
  modifies $M.32, assertsPassed;



implementation ldv_module_put_116($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} ldv_linux_kernel_module_module_put($p0);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_module_try_module_get: ref;

axiom ldv_linux_kernel_module_try_module_get == $sub.ref(0, 331622);

procedure ldv_linux_kernel_module_try_module_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32;



implementation ldv_linux_kernel_module_try_module_get($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $i3 := ldv_undef_int();
    call {:si_unique_call 497} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i5 := $M.32;
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $M.32 := $i6;
    call {:si_unique_call 498} {:cexpr "ldv_linux_kernel_module_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb5;
}



const ldv_mutex_lock_interruptible_129: ref;

axiom ldv_mutex_lock_interruptible_129 == $sub.ref(0, 332654);

procedure ldv_mutex_lock_interruptible_129($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_lock_interruptible_129($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i1 := ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_queue_lock_of_gspca_dev($p0);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    call {:si_unique_call 500} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;
}



const vmalloc_to_page: ref;

axiom vmalloc_to_page == $sub.ref(0, 333686);

procedure vmalloc_to_page($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vmalloc_to_page($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $p1 := external_alloc();
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const vm_insert_page: ref;

axiom vm_insert_page == $sub.ref(0, 334718);

procedure vm_insert_page($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vm_insert_page($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 502} {:cexpr "vm_insert_page:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 1} true;
    call {:si_unique_call 503} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 504} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const gspca_vm_open: ref;

axiom gspca_vm_open == $sub.ref(0, 335750);

procedure gspca_vm_open($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation gspca_vm_open($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, $i6);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 1);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p13, $i11);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_130: ref;

axiom ldv_mutex_unlock_130 == $sub.ref(0, 336782);

procedure ldv_mutex_unlock_130($p0: ref);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_unlock_130($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} ldv_linux_kernel_locking_mutex_mutex_unlock_queue_lock_of_gspca_dev($p0);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;
}



const poll_requested_events: ref;

axiom poll_requested_events == $sub.ref(0, 337814);

procedure poll_requested_events($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation poll_requested_events($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.1, $p3);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const v4l2_ctrl_poll: ref;

axiom v4l2_ctrl_poll == $sub.ref(0, 338846);

procedure v4l2_ctrl_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 1} true;
    call {:si_unique_call 506} $i2 := __VERIFIER_nondet_uint();
    call {:si_unique_call 507} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i2);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const read_alloc: ref;

axiom read_alloc == $sub.ref(0, 339878);

procedure read_alloc($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.10, $CurrAddr, assertsPassed, $M.31, $M.5, $M.4, $M.11, $M.32;



implementation read_alloc($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p51: ref;
  var $p52: ref;
  var $i54: i32;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $i42: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $p64: ref;
  var $p65: ref;
  var $i34: i32;
  var $p67: ref;
  var $i13: i32;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $p2 := $alloc($mul.ref(88, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $p3 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i4 := $M.0;
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 2);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4504, 1));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i11 := ldv_mutex_lock_interruptible_141($p10);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    call {:si_unique_call 512} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4360, 1));
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.1, $p14);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i16 := $sext.i8.i32($i15);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p0);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $i59 := vidioc_streamon($p1, $p58, 1);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    call {:si_unique_call 524} {:cexpr "ret"} boogie_si_record_i32($i59);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i34 := $i59;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4504, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} ldv_mutex_unlock_142($p67);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i13 := $i34;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i60 == 1;
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i61 := $M.0;
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i62 := $sgt.i32($i61, 2);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i62 == 1;
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} vslice_dummy_var_93 := printk.ref.ref.i32(.str.58, $p65, $i59);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p3);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.1;
    call {:si_unique_call 513} cmdloc_dummy_var_17 := $memset.i8(cmdloc_dummy_var_16, $p18, 0, 20, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_17;
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4832, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.1, $p19);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i21 := $sext.i8.i32($i20);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p22, $i21);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p23, 1);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p24, 7);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p0);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $i26 := vidioc_reqbufs($p1, $p25, $p3);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    call {:si_unique_call 515} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p2);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.1;
    call {:si_unique_call 518} cmdloc_dummy_var_19 := $memset.i8(cmdloc_dummy_var_18, $p35, 0, 88, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_19;
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p36, 1);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p37, 7);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4832, 1));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.1, $p38);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i40 := $sext.i8.i32($i39);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32(0, $i40);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb17:
    assume $i41 == 1;
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb20;

  $bb20:
    call $p43, $p44, $i45, $i46, $i47, $i54, $i55, $i56, $i57, $i42 := read_alloc_loop_$bb20($p0, $p1, $p2, $p38, $p43, $p44, $i45, $i46, $i47, $i54, $i55, $i56, $i57, $i42);
    goto $bb20_last;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p43, $i42);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p0);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $i45 := vidioc_qbuf($p1, $p44, $p2);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    call {:si_unique_call 520} {:cexpr "ret"} boogie_si_record_i32($i45);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i47 := $i45;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i42, 1);
    call {:si_unique_call 522} {:cexpr "i"} boogie_si_record_i32($i54);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.1, $p38);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i56 := $sext.i8.i32($i55);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i54, $i56);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i57 == 1);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb28:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i42 := $i54;
    goto $bb28_dummy;

  $bb22:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i48 := $M.0;
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i49 := $sgt.i32($i48, 2);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i34 := $i47;
    goto $bb15;

  $bb24:
    assume $i49 == 1;
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} vslice_dummy_var_92 := printk.ref.ref.i32(.str.57, $p52, $i47);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i28 := $M.0;
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i29 := $sgt.i32($i28, 2);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i34 := $i26;
    goto $bb15;

  $bb12:
    assume $i29 == 1;
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} vslice_dummy_var_91 := printk.ref.ref.i32(.str.56, $p32, $i26);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 512);
    goto $bb6;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} vslice_dummy_var_90 := printk.ref.ref(.str.55, $p8);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb28_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2622;
}



const poll_wait: ref;

axiom poll_wait == $sub.ref(0, 340910);

procedure poll_wait($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation poll_wait($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    call {:si_unique_call 526} devirtbounce.8($p12, $p0, $p1, $p2);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const ldv_mutex_lock_interruptible_143: ref;

axiom ldv_mutex_lock_interruptible_143 == $sub.ref(0, 341942);

procedure ldv_mutex_lock_interruptible_143($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_lock_interruptible_143($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $i1 := ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_queue_lock_of_gspca_dev($p0);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    call {:si_unique_call 528} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_144: ref;

axiom ldv_mutex_unlock_144 == $sub.ref(0, 342974);

procedure ldv_mutex_unlock_144($p0: ref);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_unlock_144($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} ldv_linux_kernel_locking_mutex_mutex_unlock_queue_lock_of_gspca_dev($p0);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_141: ref;

axiom ldv_mutex_lock_interruptible_141 == $sub.ref(0, 344006);

procedure ldv_mutex_lock_interruptible_141($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_interruptible_141($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i1 := ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_usb_lock_of_gspca_dev($p0);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    call {:si_unique_call 531} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 345038);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const vidioc_reqbufs: ref;

axiom vidioc_reqbufs == $sub.ref(0, 346070);

procedure vidioc_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.10, $M.31, $M.5, $M.4, $M.11, assertsPassed, $CurrAddr, $M.8, $M.32;



implementation vidioc_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $i43: i64;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $i42: i32;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $p79: ref;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i28: i32;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i10: i32;
  var vslice_dummy_var_94: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $p3 := video_drvdata($p0);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    call {:si_unique_call 533} {:cexpr "i"} boogie_si_record_i32($i6);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 7);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i6, 1);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, 2);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $i12 := ldv_mutex_lock_interruptible_123($p11);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    call {:si_unique_call 535} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4833, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.1, $p14);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i16 := $sext.i8.i32($i15);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2208, 1));
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4360, 1));
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.1, $p38);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i40 := $sext.i8.i32($i39);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32(0, $i40);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4364, 1));
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.1, $p53);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    call {:si_unique_call 538} {:cexpr "streaming"} boogie_si_record_i32($i55);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i62 := $i55;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4360, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.1, $p63);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i65 := $sext.i8.i32($i64);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.1, $p67);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.1, $p70);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.1, $p72);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $i74 := frame_alloc($p4, $p0, $i71, $i73);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    call {:si_unique_call 542} {:cexpr "ret"} boogie_si_record_i32($i74);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 0);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i83 := $i74;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i28 := $i83;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} ldv_mutex_unlock_124($p84);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i85 := $M.0;
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i86 := $sgt.i32($i85, 2);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i10 := $i28;
    goto $bb15;

  $bb64:
    assume $i86 == 1;
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.1, $p90);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} vslice_dummy_var_94 := printk.ref.ref.i32.i32(.str.72, $p89, $i28, $i91);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    goto $bb66;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb58:
    assume $i75 == 1;
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4360, 1));
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.1, $p76);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i78 := $sext.i8.i32($i77);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p79, $i78);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i62, 0);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i82 := $i74;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i83 := $i82;
    goto $bb63;

  $bb60:
    assume $i80 == 1;
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i81 := gspca_init_transfer($p4);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    call {:si_unique_call 544} {:cexpr "ret"} boogie_si_record_i32($i81);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i82 := $i81;
    goto $bb62;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i69 == 1;
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb27;

  $bb52:
    assume $i66 == 1;
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} frame_free($p4);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb46:
    assume $i56 == 1;
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} gspca_stream_off($p4);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4833, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.1, $p57);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i59 := $sext.i8.i32($i58);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 7);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $i55;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i62 := $i61;
    goto $bb51;

  $bb48:
    assume $i60 == 1;
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i61 := 0;
    goto $bb50;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i41 == 1;
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb38;

  $bb38:
    call $i43, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $i42 := vidioc_reqbufs_loop_$bb38($p4, $p38, $i43, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $i42);
    goto $bb38_last;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2656, 1)), $mul.ref($i43, 104)), $mul.ref(8, 1));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.1, $p46);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i42, 1);
    call {:si_unique_call 537} {:cexpr "i"} boogie_si_record_i32($i49);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.1, $p38);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i51 := $sext.i8.i32($i50);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i49, $i51);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i52 == 1);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb43:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i42 := $i49;
    goto $bb43_dummy;

  $bb40:
    assume $i48 == 1;
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 16);
    goto $bb27;

  $bb29:
    assume $i32 == 1;
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2208, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p0);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i35, $i36);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb31;

  $bb32:
    assume $i37 == 1;
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 16);
    goto $bb27;

  $bb20:
    assume $i17 == 1;
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4833, 1));
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i20 := $sext.i8.i32($i19);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 7);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb22;

  $bb23:
    assume $i21 == 1;
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4833, 1));
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.1, $p22);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i24 := $sext.i8.i32($i23);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.1, $p25);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i24, $i26);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb22;

  $bb25:
    assume $i27 == 1;
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 16);
    goto $bb27;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 512);
    goto $bb15;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb43_dummy:
    assume false;
    return;

  $bb38_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2759;
}



const vidioc_qbuf: ref;

axiom vidioc_qbuf == $sub.ref(0, 347102);

procedure vidioc_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.31, assertsPassed;



implementation vidioc_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $p57: ref;
  var $p58: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p65: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i8;
  var $i83: i64;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $p96: ref;
  var $i32: i32;
  var $p97: ref;
  var $i16: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $p3 := video_drvdata($p0);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i5 := $M.0;
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 3);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $i14 := ldv_mutex_lock_interruptible_139($p13);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    call {:si_unique_call 549} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p17);
    call {:si_unique_call 550} {:cexpr "index"} boogie_si_record_i32($i18);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4360, 1));
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.1, $p19);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i21 := $sext.i8.i32($i20);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i22 := $uge.i32($i18, $i21);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.1, $p33);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4833, 1));
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.1, $p35);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i37 := $sext.i8.i32($i36);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i34, $i37);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2656, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i18);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p46, $mul.ref($i47, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.1, $p50);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 6);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p46, $mul.ref($i47, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.1, $p61);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i62, 2);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p46, $mul.ref($i47, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p65, $i63);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p46, $mul.ref($i47, 104)), $mul.ref(16, 1)), $mul.ref(60, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.1, $p67);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 2);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4336, 1));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $i81 := atomic_read($p80);
    call {:si_unique_call 556} {:cexpr "i"} boogie_si_record_i32($i81);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i8($i18);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i81);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4344, 1)), $mul.ref($i83, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p85, $i82);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4336, 1));
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i87 := $add.i32($i81, 1);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i88 := $srem.i32($i87, 16);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} atomic_set($p86, $i88);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.1, $p89);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i91 := $or.i32($i90, 2);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p92, $i91);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.1, $p93);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i94, $sub.i32(0, 5));
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p96, $i95);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} ldv_mutex_unlock_140($p97);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i16 := $i32;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i69 == 1;
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.1, $p71);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p46, $mul.ref($i47, 104)), $mul.ref(16, 1)), $mul.ref(64, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p75, $i72);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.1, $p76);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p46, $mul.ref($i47, 104)), $mul.ref(16, 1)), $mul.ref(72, 1));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p79, $i77);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb21:
    assume $i53 == 1;
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i54 := $M.0;
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i55 := $sgt.i32($i54, 3);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 22);
    goto $bb13;

  $bb23:
    assume $i55 == 1;
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} vslice_dummy_var_98 := printk.ref.ref(.str.70, $p58);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb15:
    assume $i38 == 1;
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i39 := $M.0;
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i40 := $sgt.i32($i39, 3);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 22);
    goto $bb13;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} vslice_dummy_var_97 := printk.ref.ref(.str.69, $p43);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i23 := $M.0;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i23, 3);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 22);
    goto $bb13;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4360, 1));
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.1, $p28);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i30 := $sext.i8.i32($i29);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} vslice_dummy_var_96 := printk.ref.ref.i32.i32(.str.68, $p27, $i18, $i30);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 512);
    goto $bb6;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} vslice_dummy_var_95 := printk.ref.ref.i32(.str.67, $p9, $i11);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vidioc_streamon: ref;

axiom vidioc_streamon == $sub.ref(0, 348134);

procedure vidioc_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.10, $M.31, $M.11, $M.5, $M.4, assertsPassed, $CurrAddr, $M.8, $M.32;



implementation vidioc_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $i35: i32;
  var $p37: ref;
  var $i38: i32;
  var $p40: ref;
  var $i41: i32;
  var $i15: i32;
  var $p42: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} {:cexpr "vidioc_streamon:arg:buf_type"} boogie_si_record_i32($i2);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $p3 := video_drvdata($p0);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 1);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $i8 := ldv_mutex_lock_interruptible_125($p7);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    call {:si_unique_call 561} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2208, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i12, $i13);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4360, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.1, $p16);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i18 := $sext.i8.i32($i17);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i19 == 1);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2656, 1)), $mul.ref(0, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 2);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4364, 1));
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.1, $p27);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4368, 1)), $mul.ref(8, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4368, 1)), $mul.ref(0, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.1, $p37);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4368, 1)), $mul.ref(4, 1));
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.1, $p40);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} PDEBUG_MODE($p4, 3, .str.79, $i35, $i38, $i41);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} ldv_mutex_unlock_126($p42);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i6 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i30 == 1;
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $i31 := gspca_init_transfer($p4);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    call {:si_unique_call 564} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i32 == 1;
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i15 := $i31;
    goto $bb10;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb10;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb13;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 16);
    goto $bb10;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 512);
    goto $bb3;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const ldv_mutex_unlock_142: ref;

axiom ldv_mutex_unlock_142 == $sub.ref(0, 349166);

procedure ldv_mutex_unlock_142($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_142($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} ldv_linux_kernel_locking_mutex_mutex_unlock_usb_lock_of_gspca_dev($p0);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_125: ref;

axiom ldv_mutex_lock_interruptible_125 == $sub.ref(0, 350198);

procedure ldv_mutex_lock_interruptible_125($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_lock_interruptible_125($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $i1 := ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_queue_lock_of_gspca_dev($p0);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    call {:si_unique_call 568} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;
}



const PDEBUG_MODE: ref;

axiom PDEBUG_MODE == $sub.ref(0, 351230);

procedure PDEBUG_MODE($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32, $i5: i32);
  free requires assertsPassed;



implementation PDEBUG_MODE($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32, $i5: i32)
{
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} {:cexpr "PDEBUG_MODE:arg:debug"} boogie_si_record_i32($i1);
    call {:si_unique_call 570} {:cexpr "PDEBUG_MODE:arg:pixfmt"} boogie_si_record_i32($i3);
    call {:si_unique_call 571} {:cexpr "PDEBUG_MODE:arg:w"} boogie_si_record_i32($i4);
    call {:si_unique_call 572} {:cexpr "PDEBUG_MODE:arg:h"} boogie_si_record_i32($i5);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i32($i3, 24);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i6, 48);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i8 := $ule.i32($i7, 74);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i21 := $M.0;
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i22 := $sge.i32($i21, $i1);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} vslice_dummy_var_100 := printk.ref.ref.ref.i32.i32.i32(.str.78, $p25, $p2, $i3, $i4, $i5);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i9 := $M.0;
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i10 := $sge.i32($i9, $i1);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i3, 255);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i32($i3, 8);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 255);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i32($i3, 16);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 255);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i32($i3, 24);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} vslice_dummy_var_99 := printk.ref.ref.ref.i32.i32.i32.i32.i32.i32(.str.77, $p13, $p2, $i14, $i16, $i18, $i19, $i4, $i5);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_mutex_unlock_126: ref;

axiom ldv_mutex_unlock_126 == $sub.ref(0, 352262);

procedure ldv_mutex_unlock_126($p0: ref);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_unlock_126($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} ldv_linux_kernel_locking_mutex_mutex_unlock_queue_lock_of_gspca_dev($p0);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_139: ref;

axiom ldv_mutex_lock_interruptible_139 == $sub.ref(0, 353294);

procedure ldv_mutex_lock_interruptible_139($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_lock_interruptible_139($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $i1 := ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_queue_lock_of_gspca_dev($p0);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    call {:si_unique_call 577} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_140: ref;

axiom ldv_mutex_unlock_140 == $sub.ref(0, 354326);

procedure ldv_mutex_unlock_140($p0: ref);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_unlock_140($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} ldv_linux_kernel_locking_mutex_mutex_unlock_queue_lock_of_gspca_dev($p0);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_123: ref;

axiom ldv_mutex_lock_interruptible_123 == $sub.ref(0, 355358);

procedure ldv_mutex_lock_interruptible_123($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_lock_interruptible_123($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i1 := ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_queue_lock_of_gspca_dev($p0);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    call {:si_unique_call 580} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;
}



const frame_alloc: ref;

axiom frame_alloc == $sub.ref(0, 356390);

procedure frame_alloc($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation frame_alloc($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p27: ref;
  var $i28: i8;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $p32: ref;
  var $i33: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i34: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i26: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} {:cexpr "frame_alloc:arg:memory"} boogie_si_record_i32($i2);
    call {:si_unique_call 582} {:cexpr "frame_alloc:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4368, 1)), $mul.ref(20, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    call {:si_unique_call 583} {:cexpr "frsz"} boogie_si_record_i32($i6);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i7 := $M.0;
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 2);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i6, 4095);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, $sub.i32(0, 4096));
    call {:si_unique_call 585} {:cexpr "frsz"} boogie_si_record_i32($i14);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i3, 15);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $i3;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i14, $i16);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $p19 := ldv_vmalloc_32_107($i18);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2648, 1));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p20, $p19);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2648, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2208, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p27, $p1);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i2);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4833, 1));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p29, $i28);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4328, 1));
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p30, $i14);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i16);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4360, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p32, $i31);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i33 := $ult.i32(0, $i16);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4336, 1));
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} atomic_set($p65, 0);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4340, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} atomic_set($p66, 0);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4361, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p67, 0);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb14;

  $bb14:
    call $p35, $p36, $i37, $p40, $p42, $p44, $p46, $p48, $p50, $p52, $p53, $p54, $i55, $i56, $p57, $p58, $i59, $p61, $p62, $i63, $i64, $i34 := frame_alloc_loop_$bb14($p0, $i2, $i14, $i16, $p35, $p36, $i37, $p40, $p42, $p44, $p46, $p48, $p50, $p52, $p53, $p54, $i55, $i56, $p57, $p58, $i59, $p61, $p62, $i63, $i64, $i34);
    goto $bb14_last;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2656, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i34);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p36, $mul.ref($i37, 104)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p40, $i34);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p36, $mul.ref($i37, 104)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p42, 1);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p36, $mul.ref($i37, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p44, 0);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p36, $mul.ref($i37, 104)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p46, 1);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p36, $mul.ref($i37, 104)), $mul.ref(16, 1)), $mul.ref(72, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p48, $i14);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p36, $mul.ref($i37, 104)), $mul.ref(16, 1)), $mul.ref(60, 1));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p50, $i2);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p36, $mul.ref($i37, 104)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p52, 0);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2648, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.1, $p53);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i55 := $mul.i32($i34, $i14);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i56 := $zext.i32.i64($i55);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p54, $mul.ref($i56, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p36, $mul.ref($i37, 104)), $mul.ref(0, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p58, $p57);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i59 := $mul.i32($i34, $i14);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p36, $mul.ref($i37, 104)), $mul.ref(16, 1)), $mul.ref(64, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p62, $i59);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i34, 1);
    call {:si_unique_call 588} {:cexpr "i"} boogie_si_record_i32($i63);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i64 := $ult.i32($i63, $i16);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i64 == 1);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i34 := $i63;
    goto $bb16_dummy;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} vslice_dummy_var_102 := printk.ref(.str.75);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 12);
    goto $bb9;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i16 := 15;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} vslice_dummy_var_101 := printk.ref.ref.i32(.str.74, $p11, $i6);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3106;
}



const ldv_mutex_unlock_124: ref;

axiom ldv_mutex_unlock_124 == $sub.ref(0, 357422);

procedure ldv_mutex_unlock_124($p0: ref);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_unlock_124($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} ldv_linux_kernel_locking_mutex_mutex_unlock_queue_lock_of_gspca_dev($p0);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;
}



const ldv_vmalloc_32_107: ref;

axiom ldv_vmalloc_32_107 == $sub.ref(0, 358454);

procedure ldv_vmalloc_32_107($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_vmalloc_32_107($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} {:cexpr "ldv_vmalloc_32_107:arg:ldv_func_arg1"} boogie_si_record_i64($i0);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} ldv_check_alloc_nonatomic();
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $p1 := ldv_malloc_unknown_size();
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_nonatomic: ref;

axiom ldv_check_alloc_nonatomic == $sub.ref(0, 359486);

procedure ldv_check_alloc_nonatomic();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_nonatomic()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} ldv_linux_alloc_irq_check_alloc_nonatomic();
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} ldv_linux_alloc_usb_lock_check_alloc_nonatomic();
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;
}



const ldv_linux_alloc_irq_check_alloc_nonatomic: ref;

axiom ldv_linux_alloc_irq_check_alloc_nonatomic == $sub.ref(0, 360518);

procedure ldv_linux_alloc_irq_check_alloc_nonatomic();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_irq_check_alloc_nonatomic()
{
  var $i0: i1;
  var $i1: i8;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $i0 := ldv_in_interrupt_context();
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i1 := $zext.i1.i8($i0);
    call {:si_unique_call 598} {:cexpr "tmp"} boogie_si_record_i8($i1);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} ldv_assert_linux_alloc_irq__nonatomic(0);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_421:
    assume !assertsPassed;
    return;
}



const ldv_linux_alloc_usb_lock_check_alloc_nonatomic: ref;

axiom ldv_linux_alloc_usb_lock_check_alloc_nonatomic == $sub.ref(0, 361550);

procedure ldv_linux_alloc_usb_lock_check_alloc_nonatomic();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_usb_lock_check_alloc_nonatomic()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i0 := $M.6;
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} ldv_assert_linux_alloc_usb_lock__nonatomic($i2);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_alloc_usb_lock__nonatomic: ref;

axiom ldv_assert_linux_alloc_usb_lock__nonatomic == $sub.ref(0, 362582);

procedure ldv_assert_linux_alloc_usb_lock__nonatomic($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_usb_lock__nonatomic($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} {:cexpr "ldv_assert_linux_alloc_usb_lock__nonatomic:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 1} true;
    call {:si_unique_call 602} __VERIFIER_error();
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_alloc_irq__nonatomic: ref;

axiom ldv_assert_linux_alloc_irq__nonatomic == $sub.ref(0, 363614);

procedure ldv_assert_linux_alloc_irq__nonatomic($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_irq__nonatomic($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} {:cexpr "ldv_assert_linux_alloc_irq__nonatomic:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 1} true;
    call {:si_unique_call 604} __VERIFIER_error();
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vidioc_dqbuf: ref;

axiom vidioc_dqbuf == $sub.ref(0, 364646);

procedure vidioc_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.33, $M.31, $M.34, $M.35, $M.8, $CurrAddr, assertsPassed, $M.10, $M.11, $M.5, $M.4, $M.32;



implementation vidioc_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i22: i32;
  var $i20: i32;
  var $i21: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i8;
  var $i36: i1;
  var $i37: i1;
  var $i38: i64;
  var $i39: i1;
  var $i41: i1;
  var $i40: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i8;
  var $i55: i1;
  var $i56: i1;
  var $i57: i64;
  var $i58: i1;
  var $i60: i1;
  var $i59: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i64;
  var $i65: i1;
  var $i66: i64;
  var $i67: i64;
  var $i64: i64;
  var $p68: ref;
  var $i69: i64;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i64;
  var $p85: ref;
  var $i86: i8;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i92: i32;
  var $i93: i32;
  var $i94: i8;
  var $p95: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $p108: ref;
  var $p109: ref;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $i114: i1;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p123: ref;
  var $i124: i32;
  var $i125: i64;
  var $i126: i64;
  var $i127: i1;
  var $p129: ref;
  var $p130: ref;
  var $i132: i32;
  var $i133: i32;
  var $i23: i32;
  var $p134: ref;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i64;
  var $i141: i1;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i8;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i15: i32;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $p4 := video_drvdata($p0);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i6 := $M.0;
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 3);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i13 := ldv_mutex_lock_interruptible_133($p12);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    call {:si_unique_call 609} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.1, $p16);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i18 := frame_ready_nolock($p5, $p0, $i17);
    call {:si_unique_call 611} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    assume {:branchcond $i19} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i19 == 1);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i21 := $i18;
    goto $bb11;

  $bb11:
    call $i22, $i21, $i24, $p25, $p26, $i27, $i28, $i29, $i30, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i41, $i40, $i42, $i43, $i44, $p45, $p46, $i47, $p48, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i60, $i59, $i61, $i62, $i63, $i65, $i66, $i67, $i64, $p68, $i69, $i70, $i71, $i72, $i73, $p74, $i75, $i76, $i77, $i78, $i79 := vidioc_dqbuf_loop_$bb11($p0, $p2, $p3, $p5, $p16, $i22, $i21, $i24, $p25, $p26, $i27, $i28, $i29, $i30, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i41, $i40, $i42, $i43, $i44, $p45, $p46, $i47, $p48, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i60, $i59, $i61, $i62, $i63, $i65, $i66, $i67, $i64, $p68, $i69, $i70, $i71, $i72, $i73, $p74, $i75, $i76, $i77, $i78, $i79);
    goto $bb11_last;

  $bb14:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i21, 0);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} ldv_mutex_unlock_134($p25);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(128, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p26);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 2048);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $i30 := msecs_to_jiffies(3000);
    call {:si_unique_call 618} {:cexpr "tmp___1"} boogie_si_record_i64($i30);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} __might_sleep(.str.64, 1707, 0);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.1, $p31);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $i33 := frame_ready($p5, $p0, $i32);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    call {:si_unique_call 621} {:cexpr "tmp___5"} boogie_si_record_i32($i33);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i8($i34);
    call {:si_unique_call 622} {:cexpr "__cond___0"} boogie_si_record_i8($i35);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i38 := $i30;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i35);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i40 := 1;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i39 == 1);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i38, 0);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i40 := $i41;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i40);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i69 := $i38;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i64.i32($i69);
    call {:si_unique_call 634} {:cexpr "ret"} boogie_si_record_i32($i70);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i70, 0);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i72 := $i70;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i70, 0);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $i75 := ldv_mutex_lock_interruptible_135($p74);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    call {:si_unique_call 636} {:cexpr "tmp___6"} boogie_si_record_i32($i75);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.1, $p16);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $i78 := frame_ready_nolock($p5, $p0, $i77);
    call {:si_unique_call 638} {:cexpr "ret"} boogie_si_record_i32($i78);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i78, 0);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i22 := $i78;
    assume true;
    goto $bb12, $bb60;

  $bb60:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i21 := $i78;
    goto $bb60_dummy;

  $bb12:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i20 := $i22;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i23 := $i20;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} ldv_mutex_unlock_136($p134);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i23, 0);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i15 := $i23;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb70:
    assume $i135 == 1;
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.1, $p136);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.1, $p138);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p139);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i141 := $ne.i64($i140, 0);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i141 == 1);
    goto $bb72;

  $bb73:
    assume $i141 == 1;
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(4504, 1));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} ldv_mutex_lock_137($p142);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(4824, 1));
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p143, 0);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(4831, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i145 := $load.i8($M.1, $p144);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i146 := $sext.i8.i32($i145);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(4504, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} ldv_mutex_unlock_138($p152);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    goto $bb78;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb75:
    assume $i147 == 1;
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.1, $p148);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p149, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.1, $p150);
    call {:si_unique_call 644} devirtbounce.4($p151, $p5);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i76 == 1;
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 512);
    goto $bb6;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i73 == 1;
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 5);
    goto $bb6;

  $bb51:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i15 := $i72;
    goto $bb6;

  $bb31:
    assume $i43 == 1;
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $i44 := msecs_to_jiffies(3000);
    call {:si_unique_call 624} {:cexpr "tmp___2"} boogie_si_record_i64($i44);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} INIT_LIST_HEAD($p45);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p46, 0);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i47 := $i44;
    goto $bb33;

  $bb33:
    call $i47, $p48, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i60, $i59, $i61, $i62, $i63, $i65, $i66, $i67 := vidioc_dqbuf_loop_$bb33($p0, $p2, $p3, $p5, $i47, $p48, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i60, $i59, $i61, $i62, $i63, $i65, $i66, $i67);
    goto $bb33_last;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(4416, 1));
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $i49 := prepare_to_wait_event($p48, $p3, 1);
    call {:si_unique_call 627} {:cexpr "tmp___3"} boogie_si_record_i64($i49);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.1, $p50);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $i52 := frame_ready($p5, $p0, $i51);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    call {:si_unique_call 629} {:cexpr "tmp___4"} boogie_si_record_i32($i52);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i54 := $zext.i1.i8($i53);
    call {:si_unique_call 630} {:cexpr "__cond"} boogie_si_record_i8($i54);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i8.i1($i54);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i57 := $i47;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i54);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i59 := 1;
    assume true;
    goto $bb40, $bb42;

  $bb42:
    assume !($i58 == 1);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i57, 0);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i59 := $i60;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i32($i59);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i63 := $i57;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i49, 0);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i66 := $i49;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i67 := schedule_timeout($i57);
    call {:si_unique_call 633} {:cexpr "__ret___0"} boogie_si_record_i64($i67);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i47 := $i67;
    goto corral_source_split_3328_dummy;

  $bb47:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i64 := $i66;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(4416, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} finish_wait($p68, $p3);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i69 := $i64;
    goto $bb50;

  $bb43:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i64 := $i63;
    goto $bb45;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb41;

  $bb34:
    assume $i55 == 1;
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i47, 0);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb36;

  $bb37:
    assume $i56 == 1;
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i57 := 1;
    goto $bb39;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb29;

  $bb22:
    assume $i36 == 1;
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i30, 0);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb24;

  $bb25:
    assume $i37 == 1;
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i38 := 1;
    goto $bb27;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i29 == 1;
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 11);
    goto $bb6;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(4361, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.1, $p80);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    call {:si_unique_call 613} {:cexpr "i"} boogie_si_record_i32($i82);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i82);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(4344, 1)), $mul.ref($i83, 1));
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.1, $p85);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i87 := $sext.i8.i32($i86);
    call {:si_unique_call 614} {:cexpr "j"} boogie_si_record_i32($i87);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(2656, 1));
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i87);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i82, 1);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i93 := $srem.i32($i92, 16);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i32.i8($i93);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(4361, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p95, $i94);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p89, $mul.ref($i90, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.1, $p97);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, $sub.i32(0, 5));
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p89, $mul.ref($i90, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p101, $i99);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p2);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p89, $mul.ref($i90, 104)), $mul.ref(16, 1));
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.1;
    cmdloc_dummy_var_21 := $M.1;
    call {:si_unique_call 615} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p102, $p104, 88, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_22;
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i105 := $M.0;
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i106 := $sgt.i32($i105, 3);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(4833, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.1, $p111);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i113 := $sext.i8.i32($i112);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 2);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    $i133 := 0;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i23 := $i133;
    goto $bb13;

  $bb64:
    assume $i114 == 1;
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p89, $mul.ref($i90, 104)), $mul.ref(16, 1)), $mul.ref(64, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i118 := $load.i64($M.1, $p117);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p119 := $i2p.i64.ref($i118);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p89, $mul.ref($i90, 104)), $mul.ref(0, 1));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.1, $p120);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p89, $mul.ref($i90, 104)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.1, $p123);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i125 := $zext.i32.i64($i124);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $i126 := copy_to_user($p119, $p121, $i125);
    call {:si_unique_call 641} {:cexpr "tmp___7"} boogie_si_record_i64($i126);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 0);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    $i132 := 0;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i133 := $i132;
    goto $bb69;

  $bb66:
    assume $i127 == 1;
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p129);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} vslice_dummy_var_105 := printk.ref.ref(.str.66, $p130);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i132 := $sub.i32(0, 14);
    goto $bb68;

  $bb61:
    assume $i106 == 1;
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} vslice_dummy_var_104 := printk.ref.ref.i32(.str.65, $p109, $i87);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb9;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 512);
    goto $bb6;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} vslice_dummy_var_103 := printk.ref.ref(.str.63, $p10);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_3328_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3293;

  $bb60_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 365678);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} might_fault();
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($sub.i32(0, 1), 0);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $i6 := ldv__builtin_expect($i5, 1);
    call {:si_unique_call 649} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($sub.i32(0, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i12 := $uge.i64($i11, $i2);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $i15 := ldv__builtin_expect($i14, 1);
    call {:si_unique_call 653} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i19 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i10 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i2);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i18 := _copy_to_user($p0, $p1, $i17);
    call {:si_unique_call 655} {:cexpr "n"} boogie_si_record_i64($i18);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i2);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $i9 := _copy_to_user($p0, $p1, $i8);
    call {:si_unique_call 651} {:cexpr "n"} boogie_si_record_i64($i9);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const might_fault: ref;

axiom might_fault == $sub.ref(0, 366710);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 367742);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 658} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 368774);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 659} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 1} true;
    call {:si_unique_call 660} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 661} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 369806);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_interruptible_133: ref;

axiom ldv_mutex_lock_interruptible_133 == $sub.ref(0, 370838);

procedure ldv_mutex_lock_interruptible_133($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_lock_interruptible_133($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i1 := ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_queue_lock_of_gspca_dev($p0);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    call {:si_unique_call 663} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;
}



const frame_ready_nolock: ref;

axiom frame_ready_nolock == $sub.ref(0, 371870);

procedure frame_ready_nolock($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation frame_ready_nolock($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} {:cexpr "frame_ready_nolock:arg:memory"} boogie_si_record_i32($i2);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4831, 1));
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.1, $p3);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i5 := $sext.i8.i32($i4);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2208, 1));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p1);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i10, $i11);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4833, 1));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.1, $p13);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i15 := $sext.i8.i32($i14);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, $i2);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4364, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4340, 1));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $i22 := atomic_read($p21);
    call {:si_unique_call 666} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4361, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.1, $p23);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, $i22);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i7 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;
}



const ldv_mutex_unlock_134: ref;

axiom ldv_mutex_unlock_134 == $sub.ref(0, 372902);

procedure ldv_mutex_unlock_134($p0: ref);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_unlock_134($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} ldv_linux_kernel_locking_mutex_mutex_unlock_queue_lock_of_gspca_dev($p0);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_463:
    assume !assertsPassed;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 373934);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 668} {:cexpr "msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 1} true;
    call {:si_unique_call 669} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 670} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 374966);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 672} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    return;
}



const frame_ready: ref;

axiom frame_ready == $sub.ref(0, 375998);

procedure frame_ready($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation frame_ready($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $p8: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} {:cexpr "frame_ready:arg:memory"} boogie_si_record_i32($i2);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $i4 := ldv_mutex_lock_interruptible_131($p3);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    call {:si_unique_call 675} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $i7 := frame_ready_nolock($p0, $p1, $i2);
    call {:si_unique_call 677} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} ldv_mutex_unlock_132($p8);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 512);
    goto $bb3;

  SeqInstr_466:
    assume !assertsPassed;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 377030);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.34, $M.35;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p1, $p0);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p2, $p0);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    return;
}



const prepare_to_wait_event: ref;

axiom prepare_to_wait_event == $sub.ref(0, 378062);

procedure prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 679} {:cexpr "prepare_to_wait_event:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 1} true;
    call {:si_unique_call 680} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 681} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 379094);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 682} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 1} true;
    call {:si_unique_call 683} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 684} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 380126);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_interruptible_135: ref;

axiom ldv_mutex_lock_interruptible_135 == $sub.ref(0, 381158);

procedure ldv_mutex_lock_interruptible_135($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_lock_interruptible_135($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $i1 := ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_queue_lock_of_gspca_dev($p0);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    call {:si_unique_call 686} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_472:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_136: ref;

axiom ldv_mutex_unlock_136 == $sub.ref(0, 382190);

procedure ldv_mutex_unlock_136($p0: ref);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_unlock_136($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} ldv_linux_kernel_locking_mutex_mutex_unlock_queue_lock_of_gspca_dev($p0);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_475:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_137: ref;

axiom ldv_mutex_lock_137 == $sub.ref(0, 383222);

procedure ldv_mutex_lock_137($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_137($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} ldv_linux_kernel_locking_mutex_mutex_lock_usb_lock_of_gspca_dev($p0);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_478:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_138: ref;

axiom ldv_mutex_unlock_138 == $sub.ref(0, 384254);

procedure ldv_mutex_unlock_138($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_138($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} ldv_linux_kernel_locking_mutex_mutex_unlock_usb_lock_of_gspca_dev($p0);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_481:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_131: ref;

axiom ldv_mutex_lock_interruptible_131 == $sub.ref(0, 385286);

procedure ldv_mutex_lock_interruptible_131($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_lock_interruptible_131($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $i1 := ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_queue_lock_of_gspca_dev($p0);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    call {:si_unique_call 691} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_484:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_132: ref;

axiom ldv_mutex_unlock_132 == $sub.ref(0, 386318);

procedure ldv_mutex_unlock_132($p0: ref);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_unlock_132($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} ldv_linux_kernel_locking_mutex_mutex_unlock_queue_lock_of_gspca_dev($p0);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_487:
    assume !assertsPassed;
    return;
}



const vidioc_querycap: ref;

axiom vidioc_querycap == $sub.ref(0, 387350);

procedure vidioc_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation vidioc_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var vslice_dummy_var_106: i64;
  var vslice_dummy_var_107: i64;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $p3 := video_drvdata($p0);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} vslice_dummy_var_106 := strlcpy($p6, $p10, 16);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2032)), $mul.ref(1888, 1));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 2032)), $mul.ref(1560, 1)), $mul.ref(8, 1));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.1, $p30);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 2032)), $mul.ref(1560, 1)), $mul.ref(10, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.1, $p36);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} vslice_dummy_var_108 := snprintf.ref.i64.ref.i32.i32($p26, 32, .str.71, $i32, $i38);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} vslice_dummy_var_109 := usb_make_path($p41, $p43, 32);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p45, 83886081);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.1, $p46);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i47, $sub.i32(0, 2147483648));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(84, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p49, $i48);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 2032)), $mul.ref(1888, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} vslice_dummy_var_107 := strlcpy($p19, $p23, 32);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vidioc_enum_fmt_vid_cap: ref;

axiom vidioc_enum_fmt_vid_cap == $sub.ref(0, 388382);

procedure vidioc_enum_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.36, $M.1, $CurrAddr;



implementation vidioc_enum_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i33: i32;
  var $i31: i32;
  var $i32: i32;
  var $i34: i32;
  var $i35: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i48: i32;
  var $i49: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i14: i32;
  var $i15: i32;
  var $i54: i32;
  var $i55: i32;
  var $i12: i32;
  var $i13: i32;
  var $i46: i32;
  var $i47: i32;
  var $i56: i1;
  var $i57: i64;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $p66: ref;
  var $i67: i32;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p73: ref;
  var $i74: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i8;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i93: i8;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i8;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i32;
  var $i105: i8;
  var $p107: ref;
  var $p109: ref;
  var $i50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $p4 := video_drvdata($p0);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(24, 1));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    call {:si_unique_call 700} {:cexpr "i"} boogie_si_record_i32($i9);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i9, 1);
    call {:si_unique_call 701} {:cexpr "i"} boogie_si_record_i32($i10);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i11 := $sge.i32($i10, 0);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i12, $i13 := 0, $i10;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i46, $i47 := $i12, $i13;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i47, 0);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i46);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i57, 4));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.36, $p58);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p60, $i59);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.1, $p62);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i47);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p63, $mul.ref($i64, 44)), $mul.ref(20, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.1, $p66);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.1, $p69);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i47);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p70, $mul.ref($i71, 44)), $mul.ref(0, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.1, $p73);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.1, $p76);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i47);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p77, $mul.ref($i78, 44)), $mul.ref(4, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.1, $p80);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i82 := $mul.i32($i74, $i81);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i83 := $ult.i32($i67, $i82);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.1, $p85);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i8($i86);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p89, $i87);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.1, $p90);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i92 := $lshr.i32($i91, 8);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i8($i92);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(1, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p95, $i93);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.1, $p96);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i98 := $lshr.i32($i97, 16);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i8($i98);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(2, 1));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p101, $i99);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.1, $p102);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i104 := $lshr.i32($i103, 24);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i32.i8($i104);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(3, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p107, $i105);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(4, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p109, 0);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $r := $i50;
    return;

  $bb31:
    assume $i83 == 1;
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p84, 1);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i56 == 1;
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 22);
    goto $bb22;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i14, $i15 := $i10, 0;
    goto $bb4;

  $bb4:
    call $p17, $p18, $i19, $p21, $i22, $i23, $p24, $p25, $i26, $i27, $p28, $i29, $i30, $i33, $i31, $i32, $i34, $i35, $p36, $i37, $i38, $i39, $i40, $p41, $i42, $i43, $i44, $i45, $i48, $i49, $i51, $i52, $i53, $i14, $i15, $i54, $i55 := vidioc_enum_fmt_vid_cap_loop_$bb4($p2, $p3, $p5, $p17, $p18, $i19, $p21, $i22, $i23, $p24, $p25, $i26, $i27, $p28, $i29, $i30, $i33, $i31, $i32, $i34, $i35, $p36, $i37, $i38, $i39, $i40, $p41, $i42, $i43, $i44, $i45, $i48, $i49, $i51, $i52, $i53, $i14, $i15, $i54, $i55);
    goto $bb4_last;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i14);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref($i19, 44)), $mul.ref(8, 1));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i15);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i23, 4));
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $M.36 := $store.i32($M.36, $p24, $i22);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 4));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.36, $p25);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i15);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i27, 4));
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.36, $p28);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i26, $i29);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i31 := 0;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i30 == 1);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb9;

  $bb9:
    call $i33, $i32, $i34, $i35, $p36, $i37, $i38, $i39 := vidioc_enum_fmt_vid_cap_loop_$bb9($p3, $p28, $i33, $i32, $i34, $i35, $p36, $i37, $i38, $i39);
    goto $bb9_last;

  $bb12:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i32, 1);
    call {:si_unique_call 702} {:cexpr "j"} boogie_si_record_i32($i34);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i35, 4));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.36, $p36);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.36, $p28);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i37, $i38);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i33 := $i34;
    assume true;
    goto $bb10, $bb13;

  $bb13:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i34;
    goto $bb13_dummy;

  $bb10:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i31 := $i33;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i31, $i15);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i51 := $i15;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i14, 1);
    call {:si_unique_call 704} {:cexpr "i"} boogie_si_record_i32($i52);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i53 := $sge.i32($i52, 0);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i54, $i55 := $i51, $i52;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i12, $i13 := $i54, $i55;
    goto $bb3;

  $bb25:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i14, $i15 := $i52, $i51;
    goto $bb25_dummy;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.1, $p41);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, $i15);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i44, $i45 := $i15, $i14;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i15, 1);
    call {:si_unique_call 703} {:cexpr "index"} boogie_si_record_i32($i48);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i49 := $ugt.i32($i48, 7);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i51 := $i48;
    goto $bb24;

  $bb20:
    assume $i49 == 1;
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 22);
    goto $bb22;

  $bb16:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i46, $i47 := $i44, $i45;
    goto $bb18;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb7;

  $bb13_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb25_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3602;
}



const vidioc_g_fmt_vid_cap: ref;

axiom vidioc_g_fmt_vid_cap == $sub.ref(0, 389414);

procedure vidioc_g_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation vidioc_g_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $p3 := video_drvdata($p0);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4368, 1));
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p6);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p7);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.1;
    cmdloc_dummy_var_24 := $M.1;
    call {:si_unique_call 706} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p8, $p9, 44, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_25;
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 44)), $mul.ref(28, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p12, 0);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_s_fmt_vid_cap: ref;

axiom vidioc_s_fmt_vid_cap == $sub.ref(0, 390446);

procedure vidioc_s_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.31, assertsPassed;



implementation vidioc_s_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i27: i8;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i11: i32;
  var $p48: ref;
  var $i8: i32;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $p3 := video_drvdata($p0);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $i6 := ldv_mutex_lock_interruptible_113($p5);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    call {:si_unique_call 709} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $i9 := try_fmt_vid_cap($p4, $p2);
    call {:si_unique_call 711} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4360, 1));
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i13);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4364, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.1, $p23);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i9);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4365, 1));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p28, $i27);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i34 == 1);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4368, 1));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i9);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p43, $mul.ref($i44, 44));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p40);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p45);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.1;
    cmdloc_dummy_var_30 := $M.1;
    call {:si_unique_call 714} cmdloc_dummy_var_31 := $memcpy.i8(cmdloc_dummy_var_29, cmdloc_dummy_var_30, $p46, $p47, 44, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_31;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} ldv_mutex_unlock_114($p48);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i8 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i34 == 1;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4368, 1));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p35);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p37);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.1;
    cmdloc_dummy_var_27 := $M.1;
    call {:si_unique_call 713} cmdloc_dummy_var_28 := $memcpy.i8(cmdloc_dummy_var_26, cmdloc_dummy_var_27, $p38, $p39, 44, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_28;
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i26 == 1;
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 16);
    goto $bb7;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 44)), $mul.ref(20, 1));
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p18);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4328, 1));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i32($i19, $i21);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb11;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb7;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 512);
    goto $bb3;

  SeqInstr_490:
    assume !assertsPassed;
    return;
}



const vidioc_try_fmt_vid_cap: ref;

axiom vidioc_try_fmt_vid_cap == $sub.ref(0, 391478);

procedure vidioc_try_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation vidioc_try_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $p3 := video_drvdata($p0);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $i5 := try_fmt_vid_cap($p4, $p2);
    call {:si_unique_call 717} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;
}



const vidioc_querybuf: ref;

axiom vidioc_querybuf == $sub.ref(0, 392510);

procedure vidioc_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation vidioc_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i11: i32;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $p3 := video_drvdata($p0);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4360, 1));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i9 := $sext.i8.i32($i8);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i10 := $uge.i32($i6, $i9);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2656, 1));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p13, $mul.ref($i16, 104)), $mul.ref(16, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.1;
    cmdloc_dummy_var_33 := $M.1;
    call {:si_unique_call 719} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p18, $p20, 88, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_34;
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_streamoff: ref;

axiom vidioc_streamoff == $sub.ref(0, 393542);

procedure vidioc_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.5, $M.4, assertsPassed, $M.10, $M.11, $M.8, $CurrAddr, $M.32;



implementation vidioc_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i26: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $i25: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i14: i32;
  var $p45: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} {:cexpr "vidioc_streamoff:arg:buf_type"} boogie_si_record_i32($i2);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $p3 := video_drvdata($p0);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 1);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $i8 := ldv_mutex_lock_interruptible_127($p7);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    call {:si_unique_call 723} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4364, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2208, 1));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p0);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i17, $i18);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} gspca_stream_off($p4);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4416, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} __wake_up($p20, 1, 1, $0.ref);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4360, 1));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i23 := $sext.i8.i32($i22);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32(0, $i23);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4336, 1));
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} atomic_set($p42, 0);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4340, 1));
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} atomic_set($p43, 0);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4361, 1));
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p44, 0);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} ldv_mutex_unlock_128($p45);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i6 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb18;

  $bb18:
    call $i26, $p30, $i31, $i32, $i33, $p37, $i38, $i39, $i40, $i41, $i25 := vidioc_streamoff_loop_$bb18($p4, $p21, $i26, $p30, $i31, $i32, $i33, $p37, $i38, $i39, $i40, $i41, $i25);
    goto $bb18_last;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2656, 1)), $mul.ref($i26, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, $sub.i32(0, 7));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i25);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2656, 1)), $mul.ref($i33, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p37, $i32);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i25, 1);
    call {:si_unique_call 727} {:cexpr "i"} boogie_si_record_i32($i38);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.1, $p21);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i40 := $sext.i8.i32($i39);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i38, $i40);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i41 == 1);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb20:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i25 := $i38;
    goto $bb20_dummy;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i19 == 1;
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 16);
    goto $bb10;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb10;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 512);
    goto $bb3;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3879;
}



const vidioc_enum_input: ref;

axiom vidioc_enum_input == $sub.ref(0, 394574);

procedure vidioc_enum_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation vidioc_enum_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i8: i32;
  var vslice_dummy_var_110: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $p3 := video_drvdata($p0);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p9, 2);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(20, 1));
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p13, $i12);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} vslice_dummy_var_110 := strlcpy($p15, $p19, 32);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_input: ref;

axiom vidioc_g_input == $sub.ref(0, 395606);

procedure vidioc_g_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation vidioc_g_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, 0);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_s_input: ref;

axiom vidioc_s_input == $sub.ref(0, 396638);

procedure vidioc_s_input($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_s_input($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} {:cexpr "vidioc_s_input:arg:i"} boogie_si_record_i32($i2);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_jpegcomp: ref;

axiom vidioc_g_jpegcomp == $sub.ref(0, 397670);

procedure vidioc_g_jpegcomp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.8, $M.10, assertsPassed, $CurrAddr, $M.5, $M.4, $M.11, $M.32;



implementation vidioc_g_jpegcomp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $p3 := video_drvdata($p0);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4824, 1));
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p5, 0);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(88, 1));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    call {:si_unique_call 734} $i10 := devirtbounce.9($p9, $p4, $p2);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    call {:si_unique_call 735} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_505:
    assume !assertsPassed;
    return;
}



const vidioc_s_jpegcomp: ref;

axiom vidioc_s_jpegcomp == $sub.ref(0, 398702);

procedure vidioc_s_jpegcomp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.8, $M.10, assertsPassed, $CurrAddr, $M.5, $M.4, $M.11, $M.32;



implementation vidioc_s_jpegcomp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $p3 := video_drvdata($p0);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4824, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p5, 0);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(96, 1));
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    call {:si_unique_call 737} $i10 := devirtbounce.9($p9, $p4, $p2);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    call {:si_unique_call 738} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_508:
    assume !assertsPassed;
    return;
}



const vidioc_g_parm: ref;

axiom vidioc_g_parm == $sub.ref(0, 399734);

procedure vidioc_g_parm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation vidioc_g_parm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $p3 := video_drvdata($p0);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4832, 1));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i7 := $sext.i8.i32($i6);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p10, $i7);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4824, 1));
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p17, 0);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    call {:si_unique_call 740} devirtbounce.6($p21, $p4, $p2);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4824, 1));
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p22);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb3;
}



const vidioc_s_parm: ref;

axiom vidioc_s_parm == $sub.ref(0, 400766);

procedure vidioc_s_parm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation vidioc_s_parm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $p3 := video_drvdata($p0);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    call {:si_unique_call 742} {:cexpr "n"} boogie_si_record_i32($i8);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i8, 1);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i32($i9, 14);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i8);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4832, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p18, $i17);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4824, 1));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p25, 0);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    call {:si_unique_call 743} devirtbounce.6($p29, $p4, $p2);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4824, 1));
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4832, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p11);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i13 := $sext.i8.i32($i12);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p16, $i13);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vidioc_g_register: ref;

axiom vidioc_g_register == $sub.ref(0, 401798);

procedure vidioc_g_register($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.8, $M.10, assertsPassed, $CurrAddr, $M.5, $M.4, $M.11, $M.32;



implementation vidioc_g_register($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $p3 := video_drvdata($p0);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4824, 1));
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p5, 0);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(144, 1));
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    call {:si_unique_call 745} $i10 := devirtbounce.10($p9, $p4, $p2);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    call {:si_unique_call 746} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_511:
    assume !assertsPassed;
    return;
}



const vidioc_s_register: ref;

axiom vidioc_s_register == $sub.ref(0, 402830);

procedure vidioc_s_register($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.8, $M.10, assertsPassed, $CurrAddr, $M.5, $M.4, $M.11, $M.32;



implementation vidioc_s_register($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $p3 := video_drvdata($p0);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4824, 1));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p5, 0);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    call {:si_unique_call 748} $i10 := devirtbounce.10($p9, $p4, $p2);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    call {:si_unique_call 749} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_514:
    assume !assertsPassed;
    return;
}



const vidioc_g_chip_info: ref;

axiom vidioc_g_chip_info == $sub.ref(0, 403862);

procedure vidioc_g_chip_info($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.8, $M.10, assertsPassed, $CurrAddr, $M.5, $M.4, $M.11, $M.32;



implementation vidioc_g_chip_info($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $p3 := video_drvdata($p0);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(4824, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p5, 0);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(152, 1));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i23 := (if $i22 == 1 then $sub.i32(0, 22) else 0);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i17 := $i23;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 176)), $mul.ref(152, 1));
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    call {:si_unique_call 751} $i16 := devirtbounce.11($p15, $p4, $p2);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    call {:si_unique_call 752} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;

  SeqInstr_517:
    assume !assertsPassed;
    return;
}



const vidioc_enum_framesizes: ref;

axiom vidioc_enum_framesizes == $sub.ref(0, 404894);

procedure vidioc_enum_framesizes($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.8, $M.10, assertsPassed, $CurrAddr, $M.5, $M.4, $M.11, $M.32;



implementation vidioc_enum_framesizes($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p24: ref;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i34: i32;
  var $i61: i32;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $i22: i32;
  var $i23: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $p3 := video_drvdata($p0);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 176)), $mul.ref(128, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(24, 1));
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32(0, $i20);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i22, $i23 := 0, 0;
    goto $bb8;

  $bb8:
    call $p24, $i25, $p27, $p28, $i29, $p31, $i32, $i33, $p35, $i36, $i37, $i38, $i60, $i34, $i61, $i62, $i63, $i64, $i22, $i23 := vidioc_enum_framesizes_loop_$bb8($p2, $p4, $p18, $p24, $i25, $p27, $p28, $i29, $p31, $i32, $i33, $p35, $i36, $i37, $i38, $i60, $i34, $i61, $i62, $i63, $i64, $i22, $i23);
    goto $bb8_last;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i23);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p28, $mul.ref($i29, 44)), $mul.ref(8, 1));
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.1, $p31);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i25, $i32);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.1, $p35);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, $i22);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i38 := $i23;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i22, 1);
    call {:si_unique_call 757} {:cexpr "index"} boogie_si_record_i32($i60);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i34 := $i60;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i23, 1);
    call {:si_unique_call 756} {:cexpr "i"} boogie_si_record_i32($i61);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.1, $p18);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i61, $i63);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i64 == 1);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb17:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i22, $i23 := $i34, $i61;
    goto $bb17_dummy;

  $bb14:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p39, 1);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i38);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p42, $mul.ref($i43, 44)), $mul.ref(0, 1));
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.1, $p45);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p49, $i46);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i38);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p52, $mul.ref($i53, 44)), $mul.ref(4, 1));
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.1, $p55);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p59, $i56);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb10:
    assume $i33 == 1;
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i34 := $i22;
    goto $bb12;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 176)), $mul.ref(128, 1));
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    call {:si_unique_call 754} $i15 := devirtbounce.12($p14, $p4, $p2);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    call {:si_unique_call 755} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb3;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb17_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4099;
}



const vidioc_enum_frameintervals: ref;

axiom vidioc_enum_frameintervals == $sub.ref(0, 405926);

procedure vidioc_enum_frameintervals($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation vidioc_enum_frameintervals($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $i42: i32;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $p3 := video_drvdata($p0);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(12, 1));
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $i9 := wxh_to_mode($p4, $i6, $i8);
    call {:si_unique_call 760} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(8, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i14 == 1);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(8, 1));
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i9);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p17, $mul.ref($i18, 16)), $mul.ref(8, 1));
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(4, 1));
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i9);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p28, $mul.ref($i29, 44)), $mul.ref(8, 1));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.1, $p31);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i25, $i32);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(8, 1));
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i9);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p36, $mul.ref($i37, 16)), $mul.ref(8, 1));
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.1, $p39);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i41 := $ult.i32(0, $i40);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb14;

  $bb14:
    call $p43, $i44, $i45, $i46, $i65, $p66, $p68, $i69, $i70, $i42 := vidioc_enum_frameintervals_loop_$bb14($p2, $p35, $i37, $p43, $i44, $i45, $i46, $i65, $p66, $p68, $i69, $i70, $i42);
    goto $bb14_last;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.1, $p43);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, $i42);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i46 := $i42;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i42, 1);
    call {:si_unique_call 761} {:cexpr "i"} boogie_si_record_i32($i65);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.1, $p35);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p66, $mul.ref($i37, 16)), $mul.ref(8, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.1, $p68);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i70 := $ult.i32($i65, $i69);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i70 == 1);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb19:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i42 := $i65;
    goto $bb19_dummy;

  $bb16:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(16, 1));
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p47, 1);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(20, 1));
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p50, 1);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(8, 1));
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.1, $p52);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i9);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p53, $mul.ref($i54, 16)), $mul.ref(0, 1));
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, $p56);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i46);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p57, $mul.ref($i58, 1));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.1, $p59);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(20, 1));
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p64, $i61);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb6;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 22);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb19_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4197;
}



const v4l2_ctrl_subscribe_event: ref;

axiom v4l2_ctrl_subscribe_event == $sub.ref(0, 406958);

procedure v4l2_ctrl_subscribe_event($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_subscribe_event($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 1} true;
    call {:si_unique_call 762} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 763} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const v4l2_event_unsubscribe: ref;

axiom v4l2_event_unsubscribe == $sub.ref(0, 407990);

procedure v4l2_event_unsubscribe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_event_unsubscribe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 1} true;
    call {:si_unique_call 764} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 765} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const wxh_to_mode: ref;

axiom wxh_to_mode == $sub.ref(0, 409022);

procedure wxh_to_mode($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation wxh_to_mode($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i29: i32;
  var $i30: i1;
  var $i10: i32;
  var $i31: i32;
  var $i9: i32;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} {:cexpr "wxh_to_mode:arg:width"} boogie_si_record_i32($i1);
    call {:si_unique_call 767} {:cexpr "wxh_to_mode:arg:height"} boogie_si_record_i32($i2);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(24, 1));
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.1, $p4);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    call {:si_unique_call 768} {:cexpr "i"} boogie_si_record_i32($i6);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i6, 1);
    call {:si_unique_call 769} {:cexpr "i"} boogie_si_record_i32($i7);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i28 := $i9;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i10 := $i7;
    goto $bb4;

  $bb4:
    call $p12, $p13, $i14, $p16, $i17, $i18, $p20, $p21, $i22, $p24, $i25, $i26, $i27, $i29, $i30, $i10, $i31 := wxh_to_mode_loop_$bb4($p0, $i1, $i2, $p12, $p13, $i14, $p16, $i17, $i18, $p20, $p21, $i22, $p24, $i25, $i26, $i27, $i29, $i30, $i10, $i31);
    goto $bb4_last;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i10);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref($i14, 44)), $mul.ref(0, 1));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.1, $p16);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i18 := $uge.i32($i1, $i17);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i10, 1);
    call {:si_unique_call 770} {:cexpr "i"} boogie_si_record_i32($i29);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i30 := $sgt.i32($i29, 0);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i9 := $i31;
    goto $bb3;

  $bb13:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i29;
    goto $bb13_dummy;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i10);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p21, $mul.ref($i22, 44)), $mul.ref(4, 1));
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i26 := $uge.i32($i2, $i25);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i27 := $i10;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb8;

  $bb9:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb11;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4249;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 410054);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 771} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 1} true;
    call {:si_unique_call 772} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 773} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_mutex_lock_interruptible_127: ref;

axiom ldv_mutex_lock_interruptible_127 == $sub.ref(0, 411086);

procedure ldv_mutex_lock_interruptible_127($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_lock_interruptible_127($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $i1 := ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_queue_lock_of_gspca_dev($p0);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    call {:si_unique_call 775} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_523:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_128: ref;

axiom ldv_mutex_unlock_128 == $sub.ref(0, 412118);

procedure ldv_mutex_unlock_128($p0: ref);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_unlock_128($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} ldv_linux_kernel_locking_mutex_mutex_unlock_queue_lock_of_gspca_dev($p0);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_526:
    assume !assertsPassed;
    return;
}



const try_fmt_vid_cap: ref;

axiom try_fmt_vid_cap == $sub.ref(0, 413150);

procedure try_fmt_vid_cap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation try_fmt_vid_cap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    call {:si_unique_call 777} {:cexpr "w"} boogie_si_record_i32($i5);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    call {:si_unique_call 778} {:cexpr "h"} boogie_si_record_i32($i9);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} PDEBUG_MODE($p0, 2, .str.76, $i13, $i5, $i9);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i14 := wxh_to_mode($p0, $i5, $i9);
    call {:si_unique_call 781} {:cexpr "mode"} boogie_si_record_i32($i14);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i14);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p17, $mul.ref($i18, 44)), $mul.ref(8, 1));
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i21, $i25);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i14;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i34);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p39, $mul.ref($i40, 44));
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p36);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p41);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.1;
    cmdloc_dummy_var_36 := $M.1;
    call {:si_unique_call 784} cmdloc_dummy_var_37 := $memcpy.i8(cmdloc_dummy_var_35, cmdloc_dummy_var_36, $p42, $p43, 44, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_37;
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.1, $p46);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 44)), $mul.ref(28, 1));
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p62, 0);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb7:
    assume $i49 == 1;
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p52, $i5);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p55, $i9);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, $p56);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.1, $p58);
    call {:si_unique_call 785} devirtbounce.13($p59, $p0, $p1);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.1, $p29);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $i31 := gspca_get_mode($p0, $i14, $i30);
    call {:si_unique_call 783} {:cexpr "mode2"} boogie_si_record_i32($i31);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i32 := $sge.i32($i31, 0);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $i14;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb6;

  $bb3:
    assume $i32 == 1;
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    goto $bb5;
}



const gspca_get_mode: ref;

axiom gspca_get_mode == $sub.ref(0, 414182);

procedure gspca_get_mode($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gspca_get_mode($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i17: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i3: i32;
  var $i4: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} {:cexpr "gspca_get_mode:arg:mode"} boogie_si_record_i32($i1);
    call {:si_unique_call 787} {:cexpr "gspca_get_mode:arg:pixfmt"} boogie_si_record_i32($i2);
    call {:si_unique_call 788} {:cexpr "gspca_get_mode:arg:modeD"} boogie_si_record_i32($i1);
    call {:si_unique_call 789} {:cexpr "gspca_get_mode:arg:modeU"} boogie_si_record_i32($i1);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i3, $i4 := $i1, $i1;
    goto $bb1;

  $bb1:
    call $i5, $i6, $p8, $p9, $i10, $p12, $i13, $i14, $i15, $i17, $p19, $i20, $i21, $i22, $p24, $p25, $i26, $p28, $i29, $i30, $i31, $i3, $i4, $p33, $i34, $i35, $i36, $i37 := gspca_get_mode_loop_$bb1($p0, $i2, $i5, $i6, $p8, $p9, $i10, $p12, $i13, $i14, $i15, $i17, $p19, $i20, $i21, $i22, $p24, $p25, $i26, $p28, $i29, $i30, $i31, $i3, $i4, $p33, $i34, $i35, $i36, $i37);
    goto $bb1_last;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(24, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.1, $p33);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i3, $i35);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i36 == 1);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i37 := $sge.i32($i4, 0);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i4, 1);
    call {:si_unique_call 790} {:cexpr "modeD"} boogie_si_record_i32($i5);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i6 := $sge.i32($i5, 0);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i3, 1);
    call {:si_unique_call 791} {:cexpr "modeU"} boogie_si_record_i32($i17);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(24, 1));
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.1, $p19);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i17, $i21);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i3, $i4 := $i17, $i5;
    goto $bb15_dummy;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i17);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p25, $mul.ref($i26, 44)), $mul.ref(8, 1));
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.1, $p28);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, $i2);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i31 := $i17;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i16 := $i31;
    goto $bb7;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i5);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref($i10, 44)), $mul.ref(8, 1));
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, $i2);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i15 := $i5;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb5:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb7;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb17;

  $bb15_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4363;
}



const ldv_mutex_lock_interruptible_113: ref;

axiom ldv_mutex_lock_interruptible_113 == $sub.ref(0, 415214);

procedure ldv_mutex_lock_interruptible_113($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_lock_interruptible_113($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $i1 := ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_queue_lock_of_gspca_dev($p0);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    call {:si_unique_call 793} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_529:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_114: ref;

axiom ldv_mutex_unlock_114 == $sub.ref(0, 416246);

procedure ldv_mutex_unlock_114($p0: ref);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_unlock_114($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} ldv_linux_kernel_locking_mutex_mutex_unlock_queue_lock_of_gspca_dev($p0);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_532:
    assume !assertsPassed;
    return;
}



const gspca_vm_close: ref;

axiom gspca_vm_close == $sub.ref(0, 417278);

procedure gspca_vm_close($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation gspca_vm_close($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, $i6);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i10 := $sle.i32($i9, 0);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, $sub.i32(0, 2));
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p16, $i14);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_EMGentry_exit_gspca_exit_2_2: ref;

axiom ldv_EMGentry_exit_gspca_exit_2_2 == $sub.ref(0, 418310);

procedure ldv_EMGentry_exit_gspca_exit_2_2($p0: ref);
  free requires assertsPassed;



implementation ldv_EMGentry_exit_gspca_exit_2_2($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} gspca_exit();
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    return;
}



const gspca_exit: ref;

axiom gspca_exit == $sub.ref(0, 419342);

procedure gspca_exit();
  free requires assertsPassed;



implementation gspca_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    return;
}



const ldv_EMGentry_init_gspca_init_2_11: ref;

axiom ldv_EMGentry_init_gspca_init_2_11 == $sub.ref(0, 420374);

procedure ldv_EMGentry_init_gspca_init_2_11($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_EMGentry_init_gspca_init_2_11($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $i1 := gspca_init();
    call {:si_unique_call 797} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const gspca_init: ref;

axiom gspca_init == $sub.ref(0, 421406);

procedure gspca_init() returns ($r: i32);
  free requires assertsPassed;



implementation gspca_init() returns ($r: i32)
{
  var vslice_dummy_var_111: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} vslice_dummy_var_111 := printk.ref(.str.49);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_1_2_4: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_1_2_4 == $sub.ref(0, 422438);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_1_2_4();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_1_2_4()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_io_instance_2_2_5: ref;

axiom ldv_dispatch_deregister_io_instance_2_2_5 == $sub.ref(0, 423470);

procedure ldv_dispatch_deregister_io_instance_2_2_5();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_io_instance_2_2_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_1_2_6: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_1_2_6 == $sub.ref(0, 424502);

procedure ldv_dispatch_register_dummy_resourceless_instance_1_2_6();
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ldv_dispatch_register_dummy_resourceless_instance_1_2_6()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $p0 := ldv_xmalloc(4);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} ldv_struct_vm_operations_struct_dummy_resourceless_instance_0($p2);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    return;
}



const ldv_xmalloc: ref;

axiom ldv_xmalloc == $sub.ref(0, 425534);

procedure ldv_xmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_xmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} {:cexpr "ldv_xmalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $p1 := malloc($i0);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} ldv_assume($i4);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $i5 := ldv_is_err($p1);
    call {:si_unique_call 805} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} ldv_assume($i7);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_struct_vm_operations_struct_dummy_resourceless_instance_0: ref;

axiom ldv_struct_vm_operations_struct_dummy_resourceless_instance_0 == $sub.ref(0, 426566);

procedure ldv_struct_vm_operations_struct_dummy_resourceless_instance_0($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_struct_vm_operations_struct_dummy_resourceless_instance_0($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4 := ldv_struct_vm_operations_struct_dummy_resourceless_instance_0_loop_$bb1($i1, $i2, $i3, $i4);
    goto $bb1_last;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i4 := $i1;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 3);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} ldv_stop();
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i5 == 1;
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} ldv_dummy_resourceless_instance_callback_0_3($u2, $u3);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} ldv_dummy_resourceless_instance_callback_0_7($u2, $u3);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $i1 := ldv_undef_int();
    call {:si_unique_call 808} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4465;
}



const ldv_dummy_resourceless_instance_callback_0_7: ref;

axiom ldv_dummy_resourceless_instance_callback_0_7 == $sub.ref(0, 427598);

procedure ldv_dummy_resourceless_instance_callback_0_7($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_dummy_resourceless_instance_callback_0_7($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} gspca_vm_open($p1);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_0_3: ref;

axiom ldv_dummy_resourceless_instance_callback_0_3 == $sub.ref(0, 428630);

procedure ldv_dummy_resourceless_instance_callback_0_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_dummy_resourceless_instance_callback_0_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} gspca_vm_close($p1);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 429662);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 430694);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 814} $r := $malloc($i0);
    return;
}



const ldv_dispatch_register_io_instance_2_2_7: ref;

axiom ldv_dispatch_register_io_instance_2_2_7 == $sub.ref(0, 431726);

procedure ldv_dispatch_register_io_instance_2_2_7();
  free requires assertsPassed;
  modifies $M.1, $M.10, $M.36, $M.33, $M.26, $M.27, $CurrAddr, $M.32, $M.31, $M.11, $M.5, $M.4, $M.34, $M.35, $M.8, assertsPassed;



implementation ldv_dispatch_register_io_instance_2_2_7()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $p0 := ldv_xmalloc(4);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} ldv_v4l2_file_operations_io_instance_1($p2);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_535:
    assume !assertsPassed;
    return;
}



const ldv_v4l2_file_operations_io_instance_1: ref;

axiom ldv_v4l2_file_operations_io_instance_1 == $sub.ref(0, 432758);

procedure ldv_v4l2_file_operations_io_instance_1($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.10, $M.36, $M.33, $M.26, $M.27, $M.32, $M.31, $M.11, $M.5, $M.4, $M.34, $M.35, $M.8, $CurrAddr, assertsPassed;



implementation ldv_v4l2_file_operations_io_instance_1($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $p1 := ldv_xmalloc(504);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $p3 := ldv_xmalloc(16);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $p5 := ldv_xmalloc(88);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $p7 := ldv_xmalloc(104);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $p9 := ldv_xmalloc(200);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $p11 := ldv_xmalloc(56);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $p13 := ldv_xmalloc(32);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $p15 := ldv_xmalloc(176);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $p17 := ldv_xmalloc(64);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $p19 := ldv_xmalloc(208);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $p21 := ldv_xmalloc(52);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $p23 := ldv_xmalloc(44);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $p25 := ldv_xmalloc(80);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $p27 := ldv_xmalloc(140);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $p29 := ldv_xmalloc(20);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} $p31 := ldv_xmalloc(204);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $p33 := ldv_xmalloc(1832);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $p35 := ldv_xmalloc(184);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $i37 := ldv_undef_int();
    call {:si_unique_call 836} {:cexpr "tmp___18"} boogie_si_record_i32($i37);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p2);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} ldv_free($p51);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p4);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} ldv_free($p52);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p6);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} ldv_free($p53);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p8);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} ldv_free($p54);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p10);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} ldv_free($p55);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p12);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} ldv_free($p56);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p14);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} ldv_free($p57);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p16);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} ldv_free($p58);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p18);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} ldv_free($p59);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p20);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} ldv_free($p60);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p22);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} ldv_free($p61);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p24);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} ldv_free($p62);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p26);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} ldv_free($p63);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p28);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} ldv_free($p64);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p30);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} ldv_free($p65);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p32);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} ldv_free($p66);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p34);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} ldv_free($p67);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p36);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} ldv_free($p68);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i38 == 1;
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p39, $p40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $p102, $p103, $p104, $p105, $p106, $p107, $p108, $p109, $p110, $p111, $p112, $p113, $p114, $p115, $p116, $p117, $p118, $p119, $p120, $p121, $p122, $p123, $p124, $p125, $p126, $p127, $p128, $p129, $p130, $p131, $p132, $p133 := ldv_v4l2_file_operations_io_instance_1_loop_$bb4($p2, $p4, $p6, $p8, $p10, $p12, $p14, $p16, $p18, $p20, $p22, $p24, $p26, $p28, $p30, $p32, $p34, $p36, $p39, $p40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $p102, $p103, $p104, $p105, $p106, $p107, $p108, $p109, $p110, $p111, $p112, $p113, $p114, $p115, $p116, $p117, $p118, $p119, $p120, $p121, $p122, $p123, $p124, $p125, $p126, $p127, $p128, $p129, $p130, $p131, $p132, $p133);
    goto $bb4_last;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.37, $p39);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $i41 := ldv_io_instance_probe_1_11($p40, $p2);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    call {:si_unique_call 856} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32($i41);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $i42 := ldv_filter_err_code($i41);
    call {:si_unique_call 858} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32($i42);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $i43 := ldv_undef_int();
    call {:si_unique_call 860} {:cexpr "tmp___17"} boogie_si_record_i32($i43);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i44 == 1);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i42, 0);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i32($i47);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} ldv_assume($i48);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $i49 := ldv_undef_int();
    call {:si_unique_call 866} {:cexpr "tmp___18"} boogie_si_record_i32($i49);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i50 == 1);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb9_dummy;

  $bb5:
    assume $i44 == 1;
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i42, 0);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i32($i45);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} ldv_assume($i46);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $p102, $p103, $p104, $p105, $p106, $p107, $p108, $p109, $p110, $p111, $p112, $p113, $p114, $p115, $p116, $p117, $p118, $p119, $p120, $p121, $p122, $p123, $p124, $p125, $p126, $p127, $p128, $p129, $p130, $p131 := ldv_v4l2_file_operations_io_instance_1_loop_$bb7($p2, $p4, $p6, $p8, $p10, $p12, $p14, $p16, $p18, $p20, $p22, $p24, $p26, $p28, $p30, $p32, $p34, $p36, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $p102, $p103, $p104, $p105, $p106, $p107, $p108, $p109, $p110, $p111, $p112, $p113, $p114, $p115, $p116, $p117, $p118, $p119, $p120, $p121, $p122, $p123, $p124, $p125, $p126, $p127, $p128, $p129, $p130, $p131);
    goto $bb7_last;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 1);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i69, 2);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i69, 3);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i69, 4);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i69, 5);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i69, 6);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i69, 7);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i69, 8);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i69, 9);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i69, 10);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i69, 11);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i69, 12);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i69, 13);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i69, 14);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i69, 15);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i69, 16);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i69, 17);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i69, 18);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i69, 19);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i69, 20);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i69, 21);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i69, 22);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i69, 23);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i69, 24);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i69, 25);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i69, 26);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i69, 27);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i69, 28);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i69, 29);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i69, 30);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i100 := $i69;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 31);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} ldv_stop();
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb132:
    assume $i101 == 1;
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($u4, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.38, $p132);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} ldv_io_instance_release_1_2($p133, $p2);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  $bb128:
    assume $i99 == 1;
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} ldv_io_instance_callback_1_4($u26, $p34);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb137_dummy;

  $bb124:
    assume $i98 == 1;
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} ldv_io_instance_callback_1_17($u25, $p2, $p36);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    goto $bb137;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  $bb120:
    assume $i97 == 1;
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} ldv_io_instance_callback_1_18($u24, $p2, $p4);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    goto $bb137;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  $bb116:
    assume $i96 == 1;
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $p128 := ldv_xmalloc(1);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $p129 := ldv_xmalloc(8);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p129);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} ldv_io_instance_callback_1_19($u23, $p2, $p128, $u22, $p130);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} ldv_free($p128);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} ldv_free($p131);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    goto $bb137;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  $bb112:
    assume $i95 == 1;
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} ldv_io_instance_callback_1_22($u21, $p2, $u8, $u22);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb108:
    assume $i94 == 1;
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p4);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} ldv_io_instance_callback_1_25($u14, $p2, $p127, $p6);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    goto $bb137;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb104:
    assume $i93 == 1;
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p4);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} ldv_io_instance_callback_1_26($u20, $p2, $p126, $p18);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb100:
    assume $i92 == 1;
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p4);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} ldv_io_instance_callback_1_27($u19, $p2, $p125, $p22);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb96:
    assume $i91 == 1;
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p4);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} ldv_io_instance_callback_1_28($u18, $p2, $p124, $p24);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    goto $bb137;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  $bb92:
    assume $i90 == 1;
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p4);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} ldv_io_instance_callback_1_29($u17, $p2, $p123, $p26);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb88:
    assume $i89 == 1;
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p4);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} ldv_io_instance_callback_1_30($u16, $p2, $p122, $p10);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    goto $bb137;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb84:
    assume $i88 == 1;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p4);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} ldv_io_instance_callback_1_31($u6, $p2, $p121, $p20);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb80:
    assume $i87 == 1;
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $p117 := ldv_xmalloc(4);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p117);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p4);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} ldv_io_instance_callback_1_32($u15, $p2, $p119, $p118);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p118);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} ldv_free($p120);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb76:
    assume $i86 == 1;
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p4);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} ldv_io_instance_callback_1_35($u11, $p2, $p116, $p28);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    goto $bb137;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  $bb72:
    assume $i85 == 1;
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p4);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} ldv_io_instance_callback_1_36($u10, $p2, $p115, $p32);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb68:
    assume $i84 == 1;
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p4);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} ldv_io_instance_callback_1_37($u9, $p2, $p114, $p12);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    goto $bb137;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  $bb64:
    assume $i83 == 1;
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p4);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} ldv_io_instance_callback_1_38($u14, $p2, $p113, $p6);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    goto $bb137;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i82 == 1;
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p4);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} ldv_io_instance_callback_1_39($u14, $p2, $p112, $p6);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb56:
    assume $i81 == 1;
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p4);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} ldv_io_instance_callback_1_40($u13, $p2, $p111, $p8);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb52:
    assume $i80 == 1;
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p4);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} ldv_io_instance_callback_1_41($u12, $p2, $p110, $p30);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    goto $bb137;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i79 == 1;
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p4);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} ldv_io_instance_callback_1_42($u6, $p2, $p109, $p20);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    goto $bb137;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i78 == 1;
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p4);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} ldv_io_instance_callback_1_43($u7, $p2, $p108, $u8);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb40:
    assume $i77 == 1;
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p4);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} ldv_io_instance_callback_1_46($u11, $p2, $p107, $p28);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    goto $bb137;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i76 == 1;
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p4);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} ldv_io_instance_callback_1_47($u10, $p2, $p106, $p32);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb32:
    assume $i75 == 1;
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p4);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} ldv_io_instance_callback_1_48($u9, $p2, $p105, $p12);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    goto $bb137;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i74 == 1;
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p4);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} ldv_io_instance_callback_1_49($u7, $p2, $p104, $u8);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    goto $bb137;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i73 == 1;
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p4);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} ldv_io_instance_callback_1_50($u7, $p2, $p103, $u8);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    goto $bb137;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i72 == 1;
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} ldv_io_instance_callback_1_51($u5, $p16, $p14);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb16:
    assume $i71 == 1;
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p4);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} ldv_io_instance_callback_1_52($u6, $p2, $p102, $p20);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb12:
    assume $i70 == 1;
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} ldv_io_instance_callback_1_53($u5, $p16, $p14);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    goto $bb137;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  $bb137_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i69 := ldv_undef_int();
    call {:si_unique_call 864} {:cexpr "tmp___19"} boogie_si_record_i32($i69);
    goto corral_source_split_4594;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($u4, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_4577;
}



const ldv_io_instance_probe_1_11: ref;

axiom ldv_io_instance_probe_1_11 == $sub.ref(0, 433790);

procedure ldv_io_instance_probe_1_11($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.32, assertsPassed;



implementation ldv_io_instance_probe_1_11($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} $i2 := dev_open($p1);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    call {:si_unique_call 906} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_589:
    assume !assertsPassed;
    return;
}



const ldv_filter_err_code: ref;

axiom ldv_filter_err_code == $sub.ref(0, 434822);

procedure ldv_filter_err_code($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_err_code($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} {:cexpr "ldv_filter_err_code:arg:ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 909} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_free: ref;

axiom ldv_free == $sub.ref(0, 435854);

procedure ldv_free($p0: ref);
  free requires assertsPassed;



implementation ldv_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} free_($p0);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_53: ref;

axiom ldv_io_instance_callback_1_53 == $sub.ref(0, 436886);

procedure ldv_io_instance_callback_1_53($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_1_53($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_112: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} vslice_dummy_var_112 := v4l2_event_unsubscribe($p1, $p2);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_52: ref;

axiom ldv_io_instance_callback_1_52 == $sub.ref(0, 437918);

procedure ldv_io_instance_callback_1_52($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_io_instance_callback_1_52($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_113: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} vslice_dummy_var_113 := vidioc_try_fmt_vid_cap($p1, $p2, $p3);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_51: ref;

axiom ldv_io_instance_callback_1_51 == $sub.ref(0, 438950);

procedure ldv_io_instance_callback_1_51($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_1_51($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_114: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} vslice_dummy_var_114 := v4l2_ctrl_subscribe_event($p1, $p2);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_50: ref;

axiom ldv_io_instance_callback_1_50 == $sub.ref(0, 439982);

procedure ldv_io_instance_callback_1_50($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.1, $M.10, $M.31, $M.11, $M.5, $M.4, assertsPassed, $CurrAddr, $M.8, $M.32;



implementation ldv_io_instance_callback_1_50($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var vslice_dummy_var_115: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} {:cexpr "ldv_io_instance_callback_1_50:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} vslice_dummy_var_115 := vidioc_streamon($p1, $p2, $i3);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_592:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_49: ref;

axiom ldv_io_instance_callback_1_49 == $sub.ref(0, 441014);

procedure ldv_io_instance_callback_1_49($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.5, $M.4, assertsPassed, $M.10, $M.11, $M.8, $CurrAddr, $M.32;



implementation ldv_io_instance_callback_1_49($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var vslice_dummy_var_116: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} {:cexpr "ldv_io_instance_callback_1_49:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} vslice_dummy_var_116 := vidioc_streamoff($p1, $p2, $i3);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_595:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_48: ref;

axiom ldv_io_instance_callback_1_48 == $sub.ref(0, 442046);

procedure ldv_io_instance_callback_1_48($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.8, $M.10, assertsPassed, $CurrAddr, $M.5, $M.4, $M.11, $M.32;



implementation ldv_io_instance_callback_1_48($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_117: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} vslice_dummy_var_117 := vidioc_s_register($p1, $p2, $p3);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_598:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_47: ref;

axiom ldv_io_instance_callback_1_47 == $sub.ref(0, 443078);

procedure ldv_io_instance_callback_1_47($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_io_instance_callback_1_47($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_118: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} vslice_dummy_var_118 := vidioc_s_parm($p1, $p2, $p3);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_46: ref;

axiom ldv_io_instance_callback_1_46 == $sub.ref(0, 444110);

procedure ldv_io_instance_callback_1_46($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.8, $M.10, assertsPassed, $CurrAddr, $M.5, $M.4, $M.11, $M.32;



implementation ldv_io_instance_callback_1_46($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_119: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} vslice_dummy_var_119 := vidioc_s_jpegcomp($p1, $p2, $p3);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_601:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_43: ref;

axiom ldv_io_instance_callback_1_43 == $sub.ref(0, 445142);

procedure ldv_io_instance_callback_1_43($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation ldv_io_instance_callback_1_43($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var vslice_dummy_var_120: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} {:cexpr "ldv_io_instance_callback_1_43:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} vslice_dummy_var_120 := vidioc_s_input($p1, $p2, $i3);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_42: ref;

axiom ldv_io_instance_callback_1_42 == $sub.ref(0, 446174);

procedure ldv_io_instance_callback_1_42($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.31, assertsPassed;



implementation ldv_io_instance_callback_1_42($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_121: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} vslice_dummy_var_121 := vidioc_s_fmt_vid_cap($p1, $p2, $p3);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_604:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_41: ref;

axiom ldv_io_instance_callback_1_41 == $sub.ref(0, 447206);

procedure ldv_io_instance_callback_1_41($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.10, $M.31, $M.5, $M.4, $M.11, assertsPassed, $CurrAddr, $M.8, $M.32;



implementation ldv_io_instance_callback_1_41($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_122: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} vslice_dummy_var_122 := vidioc_reqbufs($p1, $p2, $p3);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_607:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_40: ref;

axiom ldv_io_instance_callback_1_40 == $sub.ref(0, 448238);

procedure ldv_io_instance_callback_1_40($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_io_instance_callback_1_40($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_123: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} vslice_dummy_var_123 := vidioc_querycap($p1, $p2, $p3);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_39: ref;

axiom ldv_io_instance_callback_1_39 == $sub.ref(0, 449270);

procedure ldv_io_instance_callback_1_39($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_io_instance_callback_1_39($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_124: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} vslice_dummy_var_124 := vidioc_querybuf($p1, $p2, $p3);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_38: ref;

axiom ldv_io_instance_callback_1_38 == $sub.ref(0, 450302);

procedure ldv_io_instance_callback_1_38($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.31, assertsPassed;



implementation ldv_io_instance_callback_1_38($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_125: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} vslice_dummy_var_125 := vidioc_qbuf($p1, $p2, $p3);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_610:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_37: ref;

axiom ldv_io_instance_callback_1_37 == $sub.ref(0, 451334);

procedure ldv_io_instance_callback_1_37($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.8, $M.10, assertsPassed, $CurrAddr, $M.5, $M.4, $M.11, $M.32;



implementation ldv_io_instance_callback_1_37($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_126: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} vslice_dummy_var_126 := vidioc_g_register($p1, $p2, $p3);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_613:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_36: ref;

axiom ldv_io_instance_callback_1_36 == $sub.ref(0, 452366);

procedure ldv_io_instance_callback_1_36($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_io_instance_callback_1_36($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_127: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} vslice_dummy_var_127 := vidioc_g_parm($p1, $p2, $p3);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_35: ref;

axiom ldv_io_instance_callback_1_35 == $sub.ref(0, 453398);

procedure ldv_io_instance_callback_1_35($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.8, $M.10, assertsPassed, $CurrAddr, $M.5, $M.4, $M.11, $M.32;



implementation ldv_io_instance_callback_1_35($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_128: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} vslice_dummy_var_128 := vidioc_g_jpegcomp($p1, $p2, $p3);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_616:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_32: ref;

axiom ldv_io_instance_callback_1_32 == $sub.ref(0, 454430);

procedure ldv_io_instance_callback_1_32($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_io_instance_callback_1_32($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_129: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} vslice_dummy_var_129 := vidioc_g_input($p1, $p2, $p3);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_31: ref;

axiom ldv_io_instance_callback_1_31 == $sub.ref(0, 455462);

procedure ldv_io_instance_callback_1_31($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_io_instance_callback_1_31($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_130: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} vslice_dummy_var_130 := vidioc_g_fmt_vid_cap($p1, $p2, $p3);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_30: ref;

axiom ldv_io_instance_callback_1_30 == $sub.ref(0, 456494);

procedure ldv_io_instance_callback_1_30($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.8, $M.10, assertsPassed, $CurrAddr, $M.5, $M.4, $M.11, $M.32;



implementation ldv_io_instance_callback_1_30($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_131: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} vslice_dummy_var_131 := vidioc_g_chip_info($p1, $p2, $p3);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_619:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_29: ref;

axiom ldv_io_instance_callback_1_29 == $sub.ref(0, 457526);

procedure ldv_io_instance_callback_1_29($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_io_instance_callback_1_29($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_132: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} vslice_dummy_var_132 := vidioc_enum_input($p1, $p2, $p3);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_28: ref;

axiom ldv_io_instance_callback_1_28 == $sub.ref(0, 458558);

procedure ldv_io_instance_callback_1_28($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.8, $M.10, assertsPassed, $CurrAddr, $M.5, $M.4, $M.11, $M.32;



implementation ldv_io_instance_callback_1_28($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_133: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} vslice_dummy_var_133 := vidioc_enum_framesizes($p1, $p2, $p3);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_622:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_27: ref;

axiom ldv_io_instance_callback_1_27 == $sub.ref(0, 459590);

procedure ldv_io_instance_callback_1_27($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_io_instance_callback_1_27($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_134: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} vslice_dummy_var_134 := vidioc_enum_frameintervals($p1, $p2, $p3);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_26: ref;

axiom ldv_io_instance_callback_1_26 == $sub.ref(0, 460622);

procedure ldv_io_instance_callback_1_26($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.36, $M.1, $CurrAddr;



implementation ldv_io_instance_callback_1_26($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_135: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} vslice_dummy_var_135 := vidioc_enum_fmt_vid_cap($p1, $p2, $p3);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_25: ref;

axiom ldv_io_instance_callback_1_25 == $sub.ref(0, 461654);

procedure ldv_io_instance_callback_1_25($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.33, $M.31, $M.34, $M.35, $M.8, $CurrAddr, assertsPassed, $M.10, $M.11, $M.5, $M.4, $M.32;



implementation ldv_io_instance_callback_1_25($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_136: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} vslice_dummy_var_136 := vidioc_dqbuf($p1, $p2, $p3);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_625:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_22: ref;

axiom ldv_io_instance_callback_1_22 == $sub.ref(0, 462686);

procedure ldv_io_instance_callback_1_22($p0: ref, $p1: ref, $i2: i32, $i3: i64);
  free requires assertsPassed;



implementation ldv_io_instance_callback_1_22($p0: ref, $p1: ref, $i2: i32, $i3: i64)
{
  var vslice_dummy_var_137: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} {:cexpr "ldv_io_instance_callback_1_22:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 940} {:cexpr "ldv_io_instance_callback_1_22:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} vslice_dummy_var_137 := video_ioctl2($p1, $i2, $i3);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_19: ref;

axiom ldv_io_instance_callback_1_19 == $sub.ref(0, 463718);

procedure ldv_io_instance_callback_1_19($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;
  modifies $M.1, $M.26, $M.27, $M.33, $CurrAddr, $M.8, $M.10, $M.31, $M.34, $M.35, assertsPassed, $M.5, $M.4, $M.11, $M.32;



implementation ldv_io_instance_callback_1_19($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref)
{
  var vslice_dummy_var_138: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} {:cexpr "ldv_io_instance_callback_1_19:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} vslice_dummy_var_138 := dev_read($p1, $p2, $i3, $p4);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_628:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_18: ref;

axiom ldv_io_instance_callback_1_18 == $sub.ref(0, 464750);

procedure ldv_io_instance_callback_1_18($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.8, $M.10, assertsPassed, $CurrAddr, $M.5, $M.4, $M.11, $M.32;



implementation ldv_io_instance_callback_1_18($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_139: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} vslice_dummy_var_139 := dev_poll($p1, $p2);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_631:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_17: ref;

axiom ldv_io_instance_callback_1_17 == $sub.ref(0, 465782);

procedure ldv_io_instance_callback_1_17($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.1, $M.31, assertsPassed;



implementation ldv_io_instance_callback_1_17($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_140: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} vslice_dummy_var_140 := dev_mmap($p1, $p2);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_634:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_4: ref;

axiom ldv_io_instance_callback_1_4 == $sub.ref(0, 466814);

procedure ldv_io_instance_callback_1_4($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_1_4($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} video_device_release_empty($p1);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_release_1_2: ref;

axiom ldv_io_instance_release_1_2 == $sub.ref(0, 467846);

procedure ldv_io_instance_release_1_2($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.5, $M.4, $M.31, $M.10, $M.32, assertsPassed, $M.11, $CurrAddr;



implementation ldv_io_instance_release_1_2($p0: ref, $p1: ref)
{
  var vslice_dummy_var_141: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} vslice_dummy_var_141 := dev_close($p1);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_637:
    assume !assertsPassed;
    return;
}



const ldv_filter_positive_int: ref;

axiom ldv_filter_positive_int == $sub.ref(0, 468878);

procedure ldv_filter_positive_int($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_positive_int($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} {:cexpr "ldv_filter_positive_int:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} ldv_assume($i2);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_entry_EMGentry_2: ref;

axiom ldv_entry_EMGentry_2 == $sub.ref(0, 469910);

procedure ldv_entry_EMGentry_2($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.10, $M.36, $M.33, $M.26, $M.27, $CurrAddr, $M.32, $M.31, $M.11, $M.5, $M.4, $M.34, $M.35, $M.8, assertsPassed;



implementation ldv_entry_EMGentry_2($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $i1 := ldv_EMGentry_init_gspca_init_2_11($u27);
    call {:si_unique_call 951} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32($i1);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} $i2 := ldv_ldv_post_init_151($i1);
    call {:si_unique_call 953} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32($i2);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $i3 := ldv_undef_int();
    call {:si_unique_call 955} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} ldv_assume($i8);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} $i9 := ldv_undef_int();
    call {:si_unique_call 961} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} ldv_EMGentry_exit_gspca_exit_2_2($u28);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} ldv_ldv_check_final_state_153();
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} ldv_stop();
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_646:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} ldv_dispatch_register_io_instance_2_2_7();
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} ldv_dispatch_register_dummy_resourceless_instance_1_2_6();
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} ldv_dispatch_deregister_io_instance_2_2_5();
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} ldv_dispatch_deregister_dummy_resourceless_instance_1_2_4();
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} ldv_assume($i6);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} ldv_ldv_check_final_state_152();
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} ldv_stop();
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_640:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_init_151: ref;

axiom ldv_ldv_post_init_151 == $sub.ref(0, 470942);

procedure ldv_ldv_post_init_151($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ldv_post_init_151($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} {:cexpr "ldv_ldv_post_init_151:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $i1 := ldv_post_init($i0);
    call {:si_unique_call 973} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ldv_check_final_state_152: ref;

axiom ldv_ldv_check_final_state_152 == $sub.ref(0, 471974);

procedure ldv_ldv_check_final_state_152();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_152()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} ldv_linux_block_request_check_final_state();
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_706:
    assume !assertsPassed;
    return;

  SeqInstr_703:
    assume !assertsPassed;
    return;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  SeqInstr_697:
    assume !assertsPassed;
    return;

  SeqInstr_694:
    assume !assertsPassed;
    return;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  SeqInstr_673:
    assume !assertsPassed;
    return;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  SeqInstr_655:
    assume !assertsPassed;
    return;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  SeqInstr_649:
    assume !assertsPassed;
    return;
}



const ldv_ldv_check_final_state_153: ref;

axiom ldv_ldv_check_final_state_153 == $sub.ref(0, 473006);

procedure ldv_ldv_check_final_state_153();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_153()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} ldv_linux_block_request_check_final_state();
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_766:
    assume !assertsPassed;
    return;

  SeqInstr_763:
    assume !assertsPassed;
    return;

  SeqInstr_760:
    assume !assertsPassed;
    return;

  SeqInstr_757:
    assume !assertsPassed;
    return;

  SeqInstr_754:
    assume !assertsPassed;
    return;

  SeqInstr_751:
    assume !assertsPassed;
    return;

  SeqInstr_748:
    assume !assertsPassed;
    return;

  SeqInstr_745:
    assume !assertsPassed;
    return;

  SeqInstr_742:
    assume !assertsPassed;
    return;

  SeqInstr_739:
    assume !assertsPassed;
    return;

  SeqInstr_736:
    assume !assertsPassed;
    return;

  SeqInstr_733:
    assume !assertsPassed;
    return;

  SeqInstr_730:
    assume !assertsPassed;
    return;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  SeqInstr_718:
    assume !assertsPassed;
    return;

  SeqInstr_715:
    assume !assertsPassed;
    return;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  SeqInstr_709:
    assume !assertsPassed;
    return;
}



const ldv_linux_arch_io_check_final_state: ref;

axiom ldv_linux_arch_io_check_final_state == $sub.ref(0, 474038);

procedure ldv_linux_arch_io_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_arch_io_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i0 := $M.39;
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} ldv_assert_linux_arch_io__more_initial_at_exit($i2);
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_769:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_genhd_check_final_state: ref;

axiom ldv_linux_block_genhd_check_final_state == $sub.ref(0, 475070);

procedure ldv_linux_block_genhd_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_genhd_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i0 := $M.40;
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} ldv_assert_linux_block_genhd__more_initial_at_exit($i2);
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_772:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_queue_check_final_state: ref;

axiom ldv_linux_block_queue_check_final_state == $sub.ref(0, 476102);

procedure ldv_linux_block_queue_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_queue_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i0 := $M.41;
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} ldv_assert_linux_block_queue__more_initial_at_exit($i2);
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_775:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_request_check_final_state: ref;

axiom ldv_linux_block_request_check_final_state == $sub.ref(0, 477134);

procedure ldv_linux_block_request_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_request_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i0 := $M.42;
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} ldv_assert_linux_block_request__get_at_exit($i2);
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_778:
    assume !assertsPassed;
    return;
}



const ldv_linux_drivers_base_class_check_final_state: ref;

axiom ldv_linux_drivers_base_class_check_final_state == $sub.ref(0, 478166);

procedure ldv_linux_drivers_base_class_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_drivers_base_class_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i0 := $M.43;
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} ldv_assert_linux_drivers_base_class__registered_at_exit($i2);
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_781:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_char_dev_check_final_state: ref;

axiom ldv_linux_fs_char_dev_check_final_state == $sub.ref(0, 479198);

procedure ldv_linux_fs_char_dev_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_char_dev_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i0 := $M.44;
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} ldv_assert_linux_fs_char_dev__registered_at_exit($i2);
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_784:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_sysfs_check_final_state: ref;

axiom ldv_linux_fs_sysfs_check_final_state == $sub.ref(0, 480230);

procedure ldv_linux_fs_sysfs_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_sysfs_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i0 := $M.45;
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} ldv_assert_linux_fs_sysfs__more_initial_at_exit($i2);
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_787:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_rwlock_check_final_state: ref;

axiom ldv_linux_kernel_locking_rwlock_check_final_state == $sub.ref(0, 481262);

procedure ldv_linux_kernel_locking_rwlock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_locking_rwlock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i0 := $M.46;
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i2);
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i3 := $M.47;
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i5);
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_793:
    assume !assertsPassed;
    return;

  SeqInstr_790:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_module_check_final_state: ref;

axiom ldv_linux_kernel_module_check_final_state == $sub.ref(0, 482294);

procedure ldv_linux_kernel_module_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_module_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i0 := $M.32;
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} ldv_assert_linux_kernel_module__more_initial_at_exit($i2);
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_796:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_bh_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_check_final_state == $sub.ref(0, 483326);

procedure ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_bh_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i0 := $M.48;
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i2);
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_799:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_sched_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_check_final_state == $sub.ref(0, 484358);

procedure ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_sched_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i0 := $M.49;
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i2);
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_802:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_check_final_state == $sub.ref(0, 485390);

procedure ldv_linux_kernel_rcu_update_lock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i0 := $M.50;
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i2);
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_805:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_srcu_check_final_state: ref;

axiom ldv_linux_kernel_rcu_srcu_check_final_state == $sub.ref(0, 486422);

procedure ldv_linux_kernel_rcu_srcu_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_srcu_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i0 := $M.51;
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i2);
    goto SeqInstr_808, SeqInstr_809;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  SeqInstr_810:
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_808:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_check_final_state: ref;

axiom ldv_linux_lib_idr_check_final_state == $sub.ref(0, 487454);

procedure ldv_linux_lib_idr_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_lib_idr_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i0 := $M.52;
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i3 := $M.52;
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} ldv_assert_linux_lib_idr__more_at_exit($i5);
    goto SeqInstr_811, SeqInstr_812;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  SeqInstr_813:
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_811:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const ldv_linux_mmc_sdio_func_check_final_state: ref;

axiom ldv_linux_mmc_sdio_func_check_final_state == $sub.ref(0, 488486);

procedure ldv_linux_mmc_sdio_func_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_mmc_sdio_func_check_final_state()
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i0 := $M.53;
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i3);
    goto SeqInstr_814, SeqInstr_815;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  SeqInstr_816:
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_814:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_rtnetlink_check_final_state: ref;

axiom ldv_linux_net_rtnetlink_check_final_state == $sub.ref(0, 489518);

procedure ldv_linux_net_rtnetlink_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_rtnetlink_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i0 := $M.54;
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} ldv_assert_linux_net_rtnetlink__lock_on_exit($i2);
    goto SeqInstr_817, SeqInstr_818;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  SeqInstr_819:
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_817:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_sock_check_final_state: ref;

axiom ldv_linux_net_sock_check_final_state == $sub.ref(0, 490550);

procedure ldv_linux_net_sock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_sock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i0 := $M.55;
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i2);
    goto SeqInstr_820, SeqInstr_821;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  SeqInstr_822:
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_820:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_coherent_check_final_state: ref;

axiom ldv_linux_usb_coherent_check_final_state == $sub.ref(0, 491582);

procedure ldv_linux_usb_coherent_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_coherent_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i0 := $M.5;
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} ldv_assert_linux_usb_coherent__more_initial_at_exit($i2);
    goto SeqInstr_823, SeqInstr_824;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  SeqInstr_825:
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_823:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_check_final_state: ref;

axiom ldv_linux_usb_gadget_check_final_state == $sub.ref(0, 492614);

procedure ldv_linux_usb_gadget_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i0 := $M.56;
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i2);
    goto SeqInstr_826, SeqInstr_827;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  SeqInstr_828:
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_826:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_urb_check_final_state: ref;

axiom ldv_linux_usb_urb_check_final_state == $sub.ref(0, 493646);

procedure ldv_linux_usb_urb_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_urb_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i0 := $M.4;
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} ldv_assert_linux_usb_urb__more_initial_at_exit($i2);
    goto SeqInstr_829, SeqInstr_830;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  SeqInstr_831:
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_829:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_urb__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_urb__more_initial_at_exit == $sub.ref(0, 494678);

procedure ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} {:cexpr "ldv_assert_linux_usb_urb__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1036} __VERIFIER_error();
    goto SeqInstr_832, SeqInstr_833;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  SeqInstr_834:
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_832:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit: ref;

axiom ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit == $sub.ref(0, 495710);

procedure ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} {:cexpr "ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1038} __VERIFIER_error();
    goto SeqInstr_835, SeqInstr_836;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  SeqInstr_837:
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_835:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_coherent__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_coherent__more_initial_at_exit == $sub.ref(0, 496742);

procedure ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} {:cexpr "ldv_assert_linux_usb_coherent__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1040} __VERIFIER_error();
    goto SeqInstr_838, SeqInstr_839;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  SeqInstr_840:
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_838:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_sock__all_locked_sockets_must_be_released: ref;

axiom ldv_assert_linux_net_sock__all_locked_sockets_must_be_released == $sub.ref(0, 497774);

procedure ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} {:cexpr "ldv_assert_linux_net_sock__all_locked_sockets_must_be_released:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1042} __VERIFIER_error();
    goto SeqInstr_841, SeqInstr_842;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  SeqInstr_843:
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_841:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_rtnetlink__lock_on_exit: ref;

axiom ldv_assert_linux_net_rtnetlink__lock_on_exit == $sub.ref(0, 498806);

procedure ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} {:cexpr "ldv_assert_linux_net_rtnetlink__lock_on_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1044} __VERIFIER_error();
    goto SeqInstr_844, SeqInstr_845;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  SeqInstr_846:
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_844:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_mmc_sdio_func__unreleased_at_exit: ref;

axiom ldv_assert_linux_mmc_sdio_func__unreleased_at_exit == $sub.ref(0, 499838);

procedure ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} {:cexpr "ldv_assert_linux_mmc_sdio_func__unreleased_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1046} __VERIFIER_error();
    goto SeqInstr_847, SeqInstr_848;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  SeqInstr_849:
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_847:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_lib_idr__more_at_exit: ref;

axiom ldv_assert_linux_lib_idr__more_at_exit == $sub.ref(0, 500870);

procedure ldv_assert_linux_lib_idr__more_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__more_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} {:cexpr "ldv_assert_linux_lib_idr__more_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1048} __VERIFIER_error();
    goto SeqInstr_850, SeqInstr_851;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  SeqInstr_852:
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_850:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_srcu__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_srcu__locked_at_exit == $sub.ref(0, 501902);

procedure ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} {:cexpr "ldv_assert_linux_kernel_rcu_srcu__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1050} __VERIFIER_error();
    goto SeqInstr_853, SeqInstr_854;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  SeqInstr_855:
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_853:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit == $sub.ref(0, 502934);

procedure ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1052} __VERIFIER_error();
    goto SeqInstr_856, SeqInstr_857;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  SeqInstr_858:
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_856:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit == $sub.ref(0, 503966);

procedure ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1054} __VERIFIER_error();
    goto SeqInstr_859, SeqInstr_860;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  SeqInstr_861:
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_859:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit == $sub.ref(0, 504998);

procedure ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1056} __VERIFIER_error();
    goto SeqInstr_862, SeqInstr_863;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  SeqInstr_864:
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_862:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_module__more_initial_at_exit: ref;

axiom ldv_assert_linux_kernel_module__more_initial_at_exit == $sub.ref(0, 506030);

procedure ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} {:cexpr "ldv_assert_linux_kernel_module__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1058} __VERIFIER_error();
    goto SeqInstr_865, SeqInstr_866;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  SeqInstr_867:
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_865:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit == $sub.ref(0, 507062);

procedure ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1060} __VERIFIER_error();
    goto SeqInstr_868, SeqInstr_869;

  SeqInstr_869:
    assume assertsPassed;
    goto SeqInstr_870;

  SeqInstr_870:
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_868:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit == $sub.ref(0, 508094);

procedure ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1062} __VERIFIER_error();
    goto SeqInstr_871, SeqInstr_872;

  SeqInstr_872:
    assume assertsPassed;
    goto SeqInstr_873;

  SeqInstr_873:
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_871:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_sysfs__more_initial_at_exit: ref;

axiom ldv_assert_linux_fs_sysfs__more_initial_at_exit == $sub.ref(0, 509126);

procedure ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} {:cexpr "ldv_assert_linux_fs_sysfs__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1064} __VERIFIER_error();
    goto SeqInstr_874, SeqInstr_875;

  SeqInstr_875:
    assume assertsPassed;
    goto SeqInstr_876;

  SeqInstr_876:
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_874:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__registered_at_exit: ref;

axiom ldv_assert_linux_fs_char_dev__registered_at_exit == $sub.ref(0, 510158);

procedure ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} {:cexpr "ldv_assert_linux_fs_char_dev__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1066} __VERIFIER_error();
    goto SeqInstr_877, SeqInstr_878;

  SeqInstr_878:
    assume assertsPassed;
    goto SeqInstr_879;

  SeqInstr_879:
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_877:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_drivers_base_class__registered_at_exit: ref;

axiom ldv_assert_linux_drivers_base_class__registered_at_exit == $sub.ref(0, 511190);

procedure ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} {:cexpr "ldv_assert_linux_drivers_base_class__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1068} __VERIFIER_error();
    goto SeqInstr_880, SeqInstr_881;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  SeqInstr_882:
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_880:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_request__get_at_exit: ref;

axiom ldv_assert_linux_block_request__get_at_exit == $sub.ref(0, 512222);

procedure ldv_assert_linux_block_request__get_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_request__get_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} {:cexpr "ldv_assert_linux_block_request__get_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1070} __VERIFIER_error();
    goto SeqInstr_883, SeqInstr_884;

  SeqInstr_884:
    assume assertsPassed;
    goto SeqInstr_885;

  SeqInstr_885:
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_883:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_queue__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_queue__more_initial_at_exit == $sub.ref(0, 513254);

procedure ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} {:cexpr "ldv_assert_linux_block_queue__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1072} __VERIFIER_error();
    goto SeqInstr_886, SeqInstr_887;

  SeqInstr_887:
    assume assertsPassed;
    goto SeqInstr_888;

  SeqInstr_888:
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_886:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_genhd__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_genhd__more_initial_at_exit == $sub.ref(0, 514286);

procedure ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} {:cexpr "ldv_assert_linux_block_genhd__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1074} __VERIFIER_error();
    goto SeqInstr_889, SeqInstr_890;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  SeqInstr_891:
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_889:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_arch_io__more_initial_at_exit: ref;

axiom ldv_assert_linux_arch_io__more_initial_at_exit == $sub.ref(0, 515318);

procedure ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} {:cexpr "ldv_assert_linux_arch_io__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1076} __VERIFIER_error();
    goto SeqInstr_892, SeqInstr_893;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  SeqInstr_894:
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_892:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_net_register_reset_error_counter: ref;

axiom ldv_linux_net_register_reset_error_counter == $sub.ref(0, 516350);

procedure ldv_linux_net_register_reset_error_counter();
  free requires assertsPassed;



implementation ldv_linux_net_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_usb_register_reset_error_counter: ref;

axiom ldv_linux_usb_register_reset_error_counter == $sub.ref(0, 517382);

procedure ldv_linux_usb_register_reset_error_counter();
  free requires assertsPassed;



implementation ldv_linux_usb_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    return;
}



const ldv_post_init: ref;

axiom ldv_post_init == $sub.ref(0, 518414);

procedure ldv_post_init($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_init($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} {:cexpr "ldv_post_init:arg:init_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 1081} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 519446);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.61, $M.64, $M.52, $M.7, $M.41, $M.40, $M.73, $M.74, $M.1, $M.75, $M.76, $M.77, $M.78, $M.79, $M.8, $M.31, $M.4, $M.56, $M.5, $M.55, $M.54, $M.53, $M.50, $M.49, $M.48, $M.51, $M.32, $M.47, $M.46, $M.45, $M.44, $M.43, $M.42, $M.39, $M.6, $M.104, $M.105, $CurrAddr, $M.10, $M.36, $M.33, $M.26, $M.27, $M.11, $M.34, $M.35, assertsPassed;



implementation main() returns ($r: i32)
{

  $bb0:
    call {:si_unique_call 1082} $initialize();
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} ldv_ldv_initialize_154();
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} ldv_entry_EMGentry_2($0.ref);
    goto SeqInstr_895, SeqInstr_896;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  SeqInstr_897:
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_895:
    assume !assertsPassed;
    return;
}



const ldv_ldv_initialize_154: ref;

axiom ldv_ldv_initialize_154 == $sub.ref(0, 520478);

procedure ldv_ldv_initialize_154();
  free requires assertsPassed;



implementation ldv_ldv_initialize_154()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} ldv_linux_lib_find_bit_initialize();
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_lib_find_bit_initialize: ref;

axiom ldv_linux_lib_find_bit_initialize == $sub.ref(0, 521510);

procedure ldv_linux_lib_find_bit_initialize();
  free requires assertsPassed;



implementation ldv_linux_lib_find_bit_initialize()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} ldv_assume($i2);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 522542);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1088} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 1} true;
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 523574);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 524606);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 525638);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_898, SeqInstr_899;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  SeqInstr_900:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_898:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 526670);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 527702);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 528734);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 529766);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 530798);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 531830);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 532862);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 533894);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 534926);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 535958);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1089} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1090} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1091} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1092} __VERIFIER_assume($i4);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 536990);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 538022);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 539054);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 540086);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1093} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1094} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1095} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1096} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1097} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1098} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1099} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1100} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1101} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1102} __VERIFIER_assume($i7);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1103} __VERIFIER_assume($i11);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 541118);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 542150);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1104} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1105} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1106} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1107} __VERIFIER_assume($i4);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 543182);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 544214);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 545246);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 546278);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 547310);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1108} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1109} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1110} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1111} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1112} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1113} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1114} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1115} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1116} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1117} __VERIFIER_assume($i7);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1118} __VERIFIER_assume($i11);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 548342);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 549374);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 550406);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 551438);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 552470);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 553502);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 554534);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 555566);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 556598);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1119} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1120} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1121} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 557630);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1122} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1123} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1124} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 558662);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1125} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1126} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 559694);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 560726);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1127} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1128} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 561758);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 562790);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 563822);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 564854);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 565886);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.0, $M.61, $M.64, $M.52, $M.7, $M.41, $M.40, $M.73, $M.74, $M.1, $M.75, $M.76, $M.77, $M.78, $M.79, $M.8, $M.31, $M.4, $M.56, $M.5, $M.55, $M.54, $M.53, $M.50, $M.49, $M.48, $M.51, $M.32, $M.47, $M.46, $M.45, $M.44, $M.43, $M.42, $M.39, $M.6, $M.104, $M.105;



implementation __SMACK_static_init()
{

  $bb0:
    $M.0 := 0;
    call {:si_unique_call 1129} {:cexpr "gspca_debug"} boogie_si_record_i32(0);
    $M.61 := $store.i8($M.61, __kstrtab_gspca_debug, 103);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_gspca_debug, $mul.ref(0, 12)), $mul.ref(1, 1)), 115);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_gspca_debug, $mul.ref(0, 12)), $mul.ref(2, 1)), 112);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_gspca_debug, $mul.ref(0, 12)), $mul.ref(3, 1)), 99);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_gspca_debug, $mul.ref(0, 12)), $mul.ref(4, 1)), 97);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_gspca_debug, $mul.ref(0, 12)), $mul.ref(5, 1)), 95);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_gspca_debug, $mul.ref(0, 12)), $mul.ref(6, 1)), 100);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_gspca_debug, $mul.ref(0, 12)), $mul.ref(7, 1)), 101);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_gspca_debug, $mul.ref(0, 12)), $mul.ref(8, 1)), 98);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_gspca_debug, $mul.ref(0, 12)), $mul.ref(9, 1)), 117);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_gspca_debug, $mul.ref(0, 12)), $mul.ref(10, 1)), 103);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_gspca_debug, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.64 := $store.i8($M.64, __kstrtab_gspca_frame_add, 103);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_gspca_frame_add, $mul.ref(0, 16)), $mul.ref(1, 1)), 115);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_gspca_frame_add, $mul.ref(0, 16)), $mul.ref(2, 1)), 112);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_gspca_frame_add, $mul.ref(0, 16)), $mul.ref(3, 1)), 99);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_gspca_frame_add, $mul.ref(0, 16)), $mul.ref(4, 1)), 97);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_gspca_frame_add, $mul.ref(0, 16)), $mul.ref(5, 1)), 95);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_gspca_frame_add, $mul.ref(0, 16)), $mul.ref(6, 1)), 102);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_gspca_frame_add, $mul.ref(0, 16)), $mul.ref(7, 1)), 114);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_gspca_frame_add, $mul.ref(0, 16)), $mul.ref(8, 1)), 97);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_gspca_frame_add, $mul.ref(0, 16)), $mul.ref(9, 1)), 109);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_gspca_frame_add, $mul.ref(0, 16)), $mul.ref(10, 1)), 101);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_gspca_frame_add, $mul.ref(0, 16)), $mul.ref(11, 1)), 95);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_gspca_frame_add, $mul.ref(0, 16)), $mul.ref(12, 1)), 97);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_gspca_frame_add, $mul.ref(0, 16)), $mul.ref(13, 1)), 100);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_gspca_frame_add, $mul.ref(0, 16)), $mul.ref(14, 1)), 100);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_gspca_frame_add, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.52 := 0;
    call {:si_unique_call 1130} {:cexpr "ldv_linux_lib_idr_idr"} boogie_si_record_i32(0);
    call {:si_unique_call 1131} {:cexpr "ldv_linux_kernel_sched_completion_completion"} boogie_si_record_i32(0);
    call {:si_unique_call 1132} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct"} boogie_si_record_i32(1);
    call {:si_unique_call 1133} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_ptl"} boogie_si_record_i32(1);
    call {:si_unique_call 1134} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data"} boogie_si_record_i32(1);
    call {:si_unique_call 1135} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    call {:si_unique_call 1136} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock"} boogie_si_record_i32(1);
    call {:si_unique_call 1137} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode"} boogie_si_record_i32(1);
    call {:si_unique_call 1138} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct"} boogie_si_record_i32(1);
    $M.7 := 0;
    call {:si_unique_call 1139} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
    $M.41 := 0;
    call {:si_unique_call 1140} {:cexpr "ldv_linux_block_queue_queue_state"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 1141} {:cexpr "ldv_linux_block_genhd_disk_state"} boogie_si_record_i32(0);
    $M.73 := $store.i8($M.73, __kstrtab_gspca_coarse_grained_expo_autogain, 103);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(1, 1)), 115);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(2, 1)), 112);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(3, 1)), 99);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(4, 1)), 97);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(5, 1)), 95);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(6, 1)), 99);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(7, 1)), 111);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(8, 1)), 97);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(9, 1)), 114);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(10, 1)), 115);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(11, 1)), 101);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(12, 1)), 95);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(13, 1)), 103);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(14, 1)), 114);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(15, 1)), 97);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(16, 1)), 105);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(17, 1)), 110);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(18, 1)), 101);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(19, 1)), 100);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(20, 1)), 95);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(21, 1)), 101);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(22, 1)), 120);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(23, 1)), 112);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(24, 1)), 111);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(25, 1)), 95);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(26, 1)), 97);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(27, 1)), 117);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(28, 1)), 116);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(29, 1)), 111);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(30, 1)), 103);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(31, 1)), 97);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(32, 1)), 105);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(33, 1)), 110);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_gspca_coarse_grained_expo_autogain, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.74 := $store.i8($M.74, __kstrtab_gspca_expo_autogain, 103);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_gspca_expo_autogain, $mul.ref(0, 20)), $mul.ref(1, 1)), 115);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_gspca_expo_autogain, $mul.ref(0, 20)), $mul.ref(2, 1)), 112);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_gspca_expo_autogain, $mul.ref(0, 20)), $mul.ref(3, 1)), 99);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_gspca_expo_autogain, $mul.ref(0, 20)), $mul.ref(4, 1)), 97);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_gspca_expo_autogain, $mul.ref(0, 20)), $mul.ref(5, 1)), 95);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_gspca_expo_autogain, $mul.ref(0, 20)), $mul.ref(6, 1)), 101);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_gspca_expo_autogain, $mul.ref(0, 20)), $mul.ref(7, 1)), 120);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_gspca_expo_autogain, $mul.ref(0, 20)), $mul.ref(8, 1)), 112);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_gspca_expo_autogain, $mul.ref(0, 20)), $mul.ref(9, 1)), 111);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_gspca_expo_autogain, $mul.ref(0, 20)), $mul.ref(10, 1)), 95);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_gspca_expo_autogain, $mul.ref(0, 20)), $mul.ref(11, 1)), 97);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_gspca_expo_autogain, $mul.ref(0, 20)), $mul.ref(12, 1)), 117);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_gspca_expo_autogain, $mul.ref(0, 20)), $mul.ref(13, 1)), 116);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_gspca_expo_autogain, $mul.ref(0, 20)), $mul.ref(14, 1)), 111);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_gspca_expo_autogain, $mul.ref(0, 20)), $mul.ref(15, 1)), 103);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_gspca_expo_autogain, $mul.ref(0, 20)), $mul.ref(16, 1)), 97);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_gspca_expo_autogain, $mul.ref(0, 20)), $mul.ref(17, 1)), 105);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_gspca_expo_autogain, $mul.ref(0, 20)), $mul.ref(18, 1)), 110);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_gspca_expo_autogain, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.1 := $store.ref($M.1, gspca_vm_ops, gspca_vm_open);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(gspca_vm_ops, $mul.ref(0, 80)), $mul.ref(8, 1)), gspca_vm_close);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(gspca_vm_ops, $mul.ref(0, 80)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(gspca_vm_ops, $mul.ref(0, 80)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(gspca_vm_ops, $mul.ref(0, 80)), $mul.ref(32, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(gspca_vm_ops, $mul.ref(0, 80)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(gspca_vm_ops, $mul.ref(0, 80)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(gspca_vm_ops, $mul.ref(0, 80)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(gspca_vm_ops, $mul.ref(0, 80)), $mul.ref(64, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(gspca_vm_ops, $mul.ref(0, 80)), $mul.ref(72, 1)), $0.ref);
    $M.75 := $store.i8($M.75, __kstrtab_gspca_resume, 103);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_gspca_resume, $mul.ref(0, 13)), $mul.ref(1, 1)), 115);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_gspca_resume, $mul.ref(0, 13)), $mul.ref(2, 1)), 112);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_gspca_resume, $mul.ref(0, 13)), $mul.ref(3, 1)), 99);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_gspca_resume, $mul.ref(0, 13)), $mul.ref(4, 1)), 97);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_gspca_resume, $mul.ref(0, 13)), $mul.ref(5, 1)), 95);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_gspca_resume, $mul.ref(0, 13)), $mul.ref(6, 1)), 114);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_gspca_resume, $mul.ref(0, 13)), $mul.ref(7, 1)), 101);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_gspca_resume, $mul.ref(0, 13)), $mul.ref(8, 1)), 115);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_gspca_resume, $mul.ref(0, 13)), $mul.ref(9, 1)), 117);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_gspca_resume, $mul.ref(0, 13)), $mul.ref(10, 1)), 109);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_gspca_resume, $mul.ref(0, 13)), $mul.ref(11, 1)), 101);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_gspca_resume, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.76 := $store.i8($M.76, __kstrtab_gspca_suspend, 103);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_gspca_suspend, $mul.ref(0, 14)), $mul.ref(1, 1)), 115);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_gspca_suspend, $mul.ref(0, 14)), $mul.ref(2, 1)), 112);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_gspca_suspend, $mul.ref(0, 14)), $mul.ref(3, 1)), 99);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_gspca_suspend, $mul.ref(0, 14)), $mul.ref(4, 1)), 97);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_gspca_suspend, $mul.ref(0, 14)), $mul.ref(5, 1)), 95);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_gspca_suspend, $mul.ref(0, 14)), $mul.ref(6, 1)), 115);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_gspca_suspend, $mul.ref(0, 14)), $mul.ref(7, 1)), 117);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_gspca_suspend, $mul.ref(0, 14)), $mul.ref(8, 1)), 115);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_gspca_suspend, $mul.ref(0, 14)), $mul.ref(9, 1)), 112);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_gspca_suspend, $mul.ref(0, 14)), $mul.ref(10, 1)), 101);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_gspca_suspend, $mul.ref(0, 14)), $mul.ref(11, 1)), 110);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_gspca_suspend, $mul.ref(0, 14)), $mul.ref(12, 1)), 100);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_gspca_suspend, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, __kstrtab_gspca_disconnect, 103);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_gspca_disconnect, $mul.ref(0, 17)), $mul.ref(1, 1)), 115);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_gspca_disconnect, $mul.ref(0, 17)), $mul.ref(2, 1)), 112);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_gspca_disconnect, $mul.ref(0, 17)), $mul.ref(3, 1)), 99);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_gspca_disconnect, $mul.ref(0, 17)), $mul.ref(4, 1)), 97);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_gspca_disconnect, $mul.ref(0, 17)), $mul.ref(5, 1)), 95);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_gspca_disconnect, $mul.ref(0, 17)), $mul.ref(6, 1)), 100);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_gspca_disconnect, $mul.ref(0, 17)), $mul.ref(7, 1)), 105);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_gspca_disconnect, $mul.ref(0, 17)), $mul.ref(8, 1)), 115);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_gspca_disconnect, $mul.ref(0, 17)), $mul.ref(9, 1)), 99);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_gspca_disconnect, $mul.ref(0, 17)), $mul.ref(10, 1)), 111);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_gspca_disconnect, $mul.ref(0, 17)), $mul.ref(11, 1)), 110);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_gspca_disconnect, $mul.ref(0, 17)), $mul.ref(12, 1)), 110);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_gspca_disconnect, $mul.ref(0, 17)), $mul.ref(13, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_gspca_disconnect, $mul.ref(0, 17)), $mul.ref(14, 1)), 99);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_gspca_disconnect, $mul.ref(0, 17)), $mul.ref(15, 1)), 116);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_gspca_disconnect, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.78 := $store.i8($M.78, __kstrtab_gspca_dev_probe, 103);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_gspca_dev_probe, $mul.ref(0, 16)), $mul.ref(1, 1)), 115);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_gspca_dev_probe, $mul.ref(0, 16)), $mul.ref(2, 1)), 112);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_gspca_dev_probe, $mul.ref(0, 16)), $mul.ref(3, 1)), 99);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_gspca_dev_probe, $mul.ref(0, 16)), $mul.ref(4, 1)), 97);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_gspca_dev_probe, $mul.ref(0, 16)), $mul.ref(5, 1)), 95);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_gspca_dev_probe, $mul.ref(0, 16)), $mul.ref(6, 1)), 100);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_gspca_dev_probe, $mul.ref(0, 16)), $mul.ref(7, 1)), 101);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_gspca_dev_probe, $mul.ref(0, 16)), $mul.ref(8, 1)), 118);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_gspca_dev_probe, $mul.ref(0, 16)), $mul.ref(9, 1)), 95);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_gspca_dev_probe, $mul.ref(0, 16)), $mul.ref(10, 1)), 112);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_gspca_dev_probe, $mul.ref(0, 16)), $mul.ref(11, 1)), 114);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_gspca_dev_probe, $mul.ref(0, 16)), $mul.ref(12, 1)), 111);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_gspca_dev_probe, $mul.ref(0, 16)), $mul.ref(13, 1)), 98);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_gspca_dev_probe, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_gspca_dev_probe, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.79 := $store.i8($M.79, __kstrtab_gspca_dev_probe2, 103);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_gspca_dev_probe2, $mul.ref(0, 17)), $mul.ref(1, 1)), 115);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_gspca_dev_probe2, $mul.ref(0, 17)), $mul.ref(2, 1)), 112);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_gspca_dev_probe2, $mul.ref(0, 17)), $mul.ref(3, 1)), 99);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_gspca_dev_probe2, $mul.ref(0, 17)), $mul.ref(4, 1)), 97);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_gspca_dev_probe2, $mul.ref(0, 17)), $mul.ref(5, 1)), 95);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_gspca_dev_probe2, $mul.ref(0, 17)), $mul.ref(6, 1)), 100);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_gspca_dev_probe2, $mul.ref(0, 17)), $mul.ref(7, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_gspca_dev_probe2, $mul.ref(0, 17)), $mul.ref(8, 1)), 118);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_gspca_dev_probe2, $mul.ref(0, 17)), $mul.ref(9, 1)), 95);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_gspca_dev_probe2, $mul.ref(0, 17)), $mul.ref(10, 1)), 112);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_gspca_dev_probe2, $mul.ref(0, 17)), $mul.ref(11, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_gspca_dev_probe2, $mul.ref(0, 17)), $mul.ref(12, 1)), 111);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_gspca_dev_probe2, $mul.ref(0, 17)), $mul.ref(13, 1)), 98);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_gspca_dev_probe2, $mul.ref(0, 17)), $mul.ref(14, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_gspca_dev_probe2, $mul.ref(0, 17)), $mul.ref(15, 1)), 50);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_gspca_dev_probe2, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.1 := $store.ref($M.1, dev_ioctl_ops, vidioc_querycap);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(24, 1)), vidioc_enum_fmt_vid_cap);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(32, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(64, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(72, 1)), vidioc_g_fmt_vid_cap);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(80, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(88, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(104, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(112, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(120, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(128, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(136, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(144, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(152, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(160, 1)), vidioc_s_fmt_vid_cap);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(168, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(176, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(184, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(192, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(200, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(208, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(216, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(224, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(232, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(240, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(248, 1)), vidioc_try_fmt_vid_cap);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(256, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(264, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(272, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(280, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(288, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(296, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(304, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(312, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(320, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(328, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(336, 1)), vidioc_reqbufs);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(344, 1)), vidioc_querybuf);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(352, 1)), vidioc_qbuf);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(360, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(368, 1)), vidioc_dqbuf);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(376, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(384, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(392, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(400, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(408, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(416, 1)), vidioc_streamon);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(424, 1)), vidioc_streamoff);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(432, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(440, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(448, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(456, 1)), vidioc_enum_input);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(464, 1)), vidioc_g_input);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(472, 1)), vidioc_s_input);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(480, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(488, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(496, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(504, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(512, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(520, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(528, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(536, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(544, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(552, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(560, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(568, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(576, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(584, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(592, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(600, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(608, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(616, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(624, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(632, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(640, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(648, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(656, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(664, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(672, 1)), vidioc_g_jpegcomp);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(680, 1)), vidioc_s_jpegcomp);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(688, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(696, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(704, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(712, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(720, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(728, 1)), vidioc_g_parm);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(736, 1)), vidioc_s_parm);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(744, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(752, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(760, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(768, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(776, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(784, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(792, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(800, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(808, 1)), vidioc_g_register);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(816, 1)), vidioc_s_register);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(824, 1)), vidioc_g_chip_info);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(832, 1)), vidioc_enum_framesizes);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(840, 1)), vidioc_enum_frameintervals);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(848, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(856, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(864, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(872, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(880, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(888, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(896, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(904, 1)), v4l2_ctrl_subscribe_event);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(912, 1)), v4l2_event_unsubscribe);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 928)), $mul.ref(920, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_fops, __this_module);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_fops, $mul.ref(0, 88)), $mul.ref(8, 1)), dev_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_fops, $mul.ref(0, 88)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_fops, $mul.ref(0, 88)), $mul.ref(24, 1)), dev_poll);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_fops, $mul.ref(0, 88)), $mul.ref(32, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_fops, $mul.ref(0, 88)), $mul.ref(40, 1)), video_ioctl2);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_fops, $mul.ref(0, 88)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_fops, $mul.ref(0, 88)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_fops, $mul.ref(0, 88)), $mul.ref(64, 1)), dev_mmap);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_fops, $mul.ref(0, 88)), $mul.ref(72, 1)), dev_open);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_fops, $mul.ref(0, 88)), $mul.ref(80, 1)), dev_close);
    $M.1 := $store.ref($M.1, gspca_template, $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(32, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(44, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(48, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(60, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(62, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(64, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(66, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(96, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(100, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(128, 1)), dev_fops);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(52, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(208, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(216, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(288, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(312, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(320, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(104, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(488, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(496, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(504, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(512, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(11, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(200, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(208, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(209, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(16, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(32, 1)), $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(48, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(52, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(344, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(524, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(528, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(529, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(532, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(536, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(540, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(544, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(552, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(560, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(568, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(576, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(584, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(592, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(600, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1128, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1136, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1144, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1152, 1)), $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1160, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1168, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1176, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1184, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1184, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1200, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1208, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1216, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1216, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1232, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1240, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1248, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1252, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1256, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1256, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1256, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1256, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1256, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1256, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1256, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1256, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1256, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1256, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1328, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1328, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1344, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1344, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1344, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1344, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1376, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1384, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1392, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1400, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1408, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(136, 1)), $mul.ref(1409, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1552, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1560, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1568, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1576, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1584, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1592, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(0, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(1, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(2, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(3, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(4, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(5, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(6, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(7, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(8, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(9, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(10, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(11, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(12, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(13, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(14, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(15, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(16, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(17, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(19, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(21, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(22, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(23, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(25, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(26, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(27, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(28, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(29, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(30, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(31, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1632, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1636, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1640, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1644, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1648, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1656, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1736, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1736, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1752, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1760, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1768, 1)), video_device_release_empty);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1776, 1)), dev_ioctl_ops);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1784, 1)), $mul.ref(0, 8)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1784, 1)), $mul.ref(1, 8)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1784, 1)), $mul.ref(2, 8)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1808, 1)), $mul.ref(0, 8)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1808, 1)), $mul.ref(1, 8)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1808, 1)), $mul.ref(2, 8)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(gspca_template, $mul.ref(0, 1840)), $mul.ref(1832, 1)), $0.ref);
    $M.8 := 0;
    call {:si_unique_call 1142} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_usb_lock_of_gspca_dev"} boogie_si_record_i8(0);
    $M.31 := 0;
    call {:si_unique_call 1143} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_queue_lock_of_gspca_dev"} boogie_si_record_i8(0);
    call {:si_unique_call 1144} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device"} boogie_si_record_i8(0);
    call {:si_unique_call 1145} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock_of_v4l2_ctrl_handler"} boogie_si_record_i8(0);
    call {:si_unique_call 1146} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock"} boogie_si_record_i8(0);
    call {:si_unique_call 1147} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode"} boogie_si_record_i8(0);
    call {:si_unique_call 1148} {:cexpr "LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS"} boogie_si_record_i32(0);
    $M.4 := 0;
    call {:si_unique_call 1149} {:cexpr "ldv_linux_usb_urb_urb_state"} boogie_si_record_i32(0);
    call {:si_unique_call 1150} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 1151} {:cexpr "ldv_linux_usb_gadget_usb_gadget"} boogie_si_record_i32(0);
    $M.5 := 0;
    call {:si_unique_call 1152} {:cexpr "ldv_linux_usb_coherent_coherent_state"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 1153} {:cexpr "locksocknumber"} boogie_si_record_i32(0);
    $M.54 := 0;
    call {:si_unique_call 1154} {:cexpr "rtnllocknumber"} boogie_si_record_i32(0);
    call {:si_unique_call 1155} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 1156} {:cexpr "ldv_linux_mmc_sdio_func_sdio_element"} boogie_si_record_i16(0);
    $M.50 := 0;
    call {:si_unique_call 1157} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1158} {:cexpr "ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1159} {:cexpr "ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 1160} {:cexpr "ldv_linux_kernel_rcu_srcu_srcu_nested"} boogie_si_record_i32(0);
    $M.32 := 1;
    call {:si_unique_call 1161} {:cexpr "ldv_linux_kernel_module_module_refcounter"} boogie_si_record_i32(1);
    $M.47 := 1;
    call {:si_unique_call 1162} {:cexpr "ldv_linux_kernel_locking_rwlock_wlock"} boogie_si_record_i32(1);
    $M.46 := 1;
    call {:si_unique_call 1163} {:cexpr "ldv_linux_kernel_locking_rwlock_rlock"} boogie_si_record_i32(1);
    $M.45 := 0;
    call {:si_unique_call 1164} {:cexpr "ldv_linux_fs_sysfs_sysfs"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 1165} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 1166} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 1167} {:cexpr "ldv_linux_block_request_blk_rq"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 1168} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32(0);
    $M.6 := 1;
    call {:si_unique_call 1169} {:cexpr "ldv_linux_alloc_usb_lock_lock"} boogie_si_record_i32(1);
    $M.104 := $store.i8($M.104, .str.19, 117);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.19, $mul.ref(0, 10)), $mul.ref(1, 1)), 115);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.19, $mul.ref(0, 10)), $mul.ref(2, 1)), 98);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.19, $mul.ref(0, 10)), $mul.ref(3, 1)), 45);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.19, $mul.ref(0, 10)), $mul.ref(4, 1)), 37);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.19, $mul.ref(0, 10)), $mul.ref(5, 1)), 115);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.19, $mul.ref(0, 10)), $mul.ref(6, 1)), 45);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.19, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.19, $mul.ref(0, 10)), $mul.ref(8, 1)), 115);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.19, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, .str.79, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 13)), $mul.ref(1, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 13)), $mul.ref(2, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 13)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 13)), $mul.ref(4, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 13)), $mul.ref(5, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 13)), $mul.ref(6, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 13)), $mul.ref(7, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 13)), $mul.ref(8, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 13)), $mul.ref(9, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 13)), $mul.ref(10, 1)), 79);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 13)), $mul.ref(11, 1)), 75);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, .str.76, 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 12)), $mul.ref(1, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 12)), $mul.ref(2, 1)), 121);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 12)), $mul.ref(3, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 12)), $mul.ref(4, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 12)), $mul.ref(5, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 12)), $mul.ref(6, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 12)), $mul.ref(7, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 12)), $mul.ref(8, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 12)), $mul.ref(9, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 12)), $mul.ref(10, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.105 := $store.i8($M.105, .str.71, 85);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(1, 1)), 83);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(2, 1)), 66);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(3, 1)), 32);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(4, 1)), 67);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(5, 1)), 97);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(6, 1)), 109);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(7, 1)), 101);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(8, 1)), 114);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(9, 1)), 97);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(10, 1)), 32);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(11, 1)), 40);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(12, 1)), 37);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(13, 1)), 48);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(14, 1)), 52);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(15, 1)), 120);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(16, 1)), 58);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(17, 1)), 37);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(18, 1)), 48);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(19, 1)), 52);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(20, 1)), 120);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(21, 1)), 41);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    call {:si_unique_call 1170} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 566918);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 567950);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.10, $M.32, $M.5, $M.4, $M.11, $M.31, assertsPassed, $CurrAddr;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(dev_close, $p0);
    assume {:branchcond $i9} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i9 == 1);
    $i8 := $eq.ref(dev_open, $p0);
    assume {:branchcond $i8} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i8 == 1);
    $i7 := $eq.ref(gspca_resume, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1171} $i2 := gspca_resume($p1);
    goto SeqInstr_901, SeqInstr_902;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  SeqInstr_903:
    $r := $i2;
    return;

  SeqInstr_901:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1172} $i4 := dev_open($p3);
    goto SeqInstr_904, SeqInstr_905;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  SeqInstr_906:
    $r := $i4;
    return;

  SeqInstr_904:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i9 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1173} $i6 := dev_close($p5);
    goto SeqInstr_907, SeqInstr_908;

  SeqInstr_908:
    assume assertsPassed;
    goto SeqInstr_909;

  SeqInstr_909:
    $r := $i6;
    return;

  SeqInstr_907:
    assume !assertsPassed;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 568982);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.10, $M.31, $M.11, $M.5, $M.4, assertsPassed, $CurrAddr, $M.8, $M.32;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(vidioc_s_input, $p0);
    assume {:branchcond $i9} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i9 == 1);
    $i8 := $eq.ref(vidioc_streamoff, $p0);
    assume {:branchcond $i8} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i8 == 1);
    $i7 := $eq.ref(vidioc_streamon, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1174} $i2 := vidioc_streamon($p1, arg1, arg2);
    goto SeqInstr_910, SeqInstr_911;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  SeqInstr_912:
    $r := $i2;
    return;

  SeqInstr_910:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1175} $i4 := vidioc_streamoff($p3, arg1, arg2);
    goto SeqInstr_913, SeqInstr_914;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  SeqInstr_915:
    $r := $i4;
    return;

  SeqInstr_913:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i9 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1176} $i6 := vidioc_s_input($p5, arg1, arg2);
    $r := $i6;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 570014);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 571046);

procedure devirtbounce.4(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.10, $M.31, $M.11, $M.5, $M.4, $M.8, assertsPassed, $CurrAddr, $M.32;



implementation devirtbounce.4(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(gspca_vm_close, $p0);
    assume {:branchcond $i16} true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i16 == 1);
    $i15 := $eq.ref(gspca_vm_open, $p0);
    assume {:branchcond $i15} true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i15 == 1);
    $i14 := $eq.ref(video_device_release_empty, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i14 == 1);
    $i13 := $eq.ref(bulk_irq, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i13 == 1);
    $i12 := $eq.ref(isoc_irq, $p0);
    assume {:branchcond $i12} true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i12 == 1);
    $i11 := $eq.ref(gspca_disconnect, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i11 == 1);
    $i10 := $eq.ref(int_irq, $p0);
    assume {:branchcond $i10} true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(gspca_release, $p0);
    assume {:branchcond $i9} true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1177} gspca_release($p1);
    return;

  $bb3:
    assume $i10 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1178} int_irq($p2);
    goto SeqInstr_916, SeqInstr_917;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  SeqInstr_918:
    return;

  SeqInstr_916:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i11 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1179} gspca_disconnect($p3);
    goto SeqInstr_919, SeqInstr_920;

  SeqInstr_920:
    assume assertsPassed;
    goto SeqInstr_921;

  SeqInstr_921:
    return;

  SeqInstr_919:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1180} isoc_irq($p4);
    goto SeqInstr_922, SeqInstr_923;

  SeqInstr_923:
    assume assertsPassed;
    goto SeqInstr_924;

  SeqInstr_924:
    return;

  SeqInstr_922:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1181} bulk_irq($p5);
    goto SeqInstr_925, SeqInstr_926;

  SeqInstr_926:
    assume assertsPassed;
    goto SeqInstr_927;

  SeqInstr_927:
    return;

  SeqInstr_925:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i14 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1182} video_device_release_empty($p6);
    return;

  $bb8:
    assume $i15 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1183} gspca_vm_open($p7);
    return;

  $bb9:
    assume $i16 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1184} gspca_vm_close($p8);
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 572078);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: i32);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 573110);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 574142);

procedure devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 575174);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 576206);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.8, $M.10, assertsPassed, $CurrAddr, $M.5, $M.4, $M.11, $M.32;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(v4l2_event_unsubscribe, $p0);
    assume {:branchcond $i16} true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i16 == 1);
    $i15 := $eq.ref(v4l2_ctrl_subscribe_event, $p0);
    assume {:branchcond $i15} true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i15 == 1);
    $i14 := $eq.ref(dev_mmap, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i14 == 1);
    $i13 := $eq.ref(dev_poll, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1185} $i3 := dev_poll($p1, $p2);
    goto SeqInstr_928, SeqInstr_929;

  SeqInstr_929:
    assume assertsPassed;
    goto SeqInstr_930;

  SeqInstr_930:
    $r := $i3;
    return;

  SeqInstr_928:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i14 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1186} $i6 := dev_mmap($p4, $p5);
    goto SeqInstr_931, SeqInstr_932;

  SeqInstr_932:
    assume assertsPassed;
    goto SeqInstr_933;

  SeqInstr_933:
    $r := $i6;
    return;

  SeqInstr_931:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1187} $i9 := v4l2_ctrl_subscribe_event($p7, $p8);
    $r := $i9;
    return;

  $bb5:
    assume $i16 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1188} $i12 := v4l2_event_unsubscribe($p10, $p11);
    $r := $i12;
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 577238);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.8, $M.10, assertsPassed, $CurrAddr, $M.5, $M.4, $M.11, $M.32;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(v4l2_event_unsubscribe, $p0);
    assume {:branchcond $i16} true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i16 == 1);
    $i15 := $eq.ref(v4l2_ctrl_subscribe_event, $p0);
    assume {:branchcond $i15} true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i15 == 1);
    $i14 := $eq.ref(dev_mmap, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i14 == 1);
    $i13 := $eq.ref(dev_poll, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1189} $i3 := dev_poll($p1, $p2);
    goto SeqInstr_934, SeqInstr_935;

  SeqInstr_935:
    assume assertsPassed;
    goto SeqInstr_936;

  SeqInstr_936:
    $r := $i3;
    return;

  SeqInstr_934:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i14 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1190} $i6 := dev_mmap($p4, $p5);
    goto SeqInstr_937, SeqInstr_938;

  SeqInstr_938:
    assume assertsPassed;
    goto SeqInstr_939;

  SeqInstr_939:
    $r := $i6;
    return;

  SeqInstr_937:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1191} $i9 := v4l2_ctrl_subscribe_event($p7, $p8);
    $r := $i9;
    return;

  $bb5:
    assume $i16 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1192} $i12 := v4l2_event_unsubscribe($p10, $p11);
    $r := $i12;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 578270);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.8, $M.10, assertsPassed, $CurrAddr, $M.5, $M.4, $M.11, $M.32;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(v4l2_event_unsubscribe, $p0);
    assume {:branchcond $i16} true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i16 == 1);
    $i15 := $eq.ref(v4l2_ctrl_subscribe_event, $p0);
    assume {:branchcond $i15} true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i15 == 1);
    $i14 := $eq.ref(dev_mmap, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i14 == 1);
    $i13 := $eq.ref(dev_poll, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1193} $i3 := dev_poll($p1, $p2);
    goto SeqInstr_940, SeqInstr_941;

  SeqInstr_941:
    assume assertsPassed;
    goto SeqInstr_942;

  SeqInstr_942:
    $r := $i3;
    return;

  SeqInstr_940:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i14 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1194} $i6 := dev_mmap($p4, $p5);
    goto SeqInstr_943, SeqInstr_944;

  SeqInstr_944:
    assume assertsPassed;
    goto SeqInstr_945;

  SeqInstr_945:
    $r := $i6;
    return;

  SeqInstr_943:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1195} $i9 := v4l2_ctrl_subscribe_event($p7, $p8);
    $r := $i9;
    return;

  $bb5:
    assume $i16 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1196} $i12 := v4l2_event_unsubscribe($p10, $p11);
    $r := $i12;
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 579302);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.8, $M.10, assertsPassed, $CurrAddr, $M.5, $M.4, $M.11, $M.32;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(v4l2_event_unsubscribe, $p0);
    assume {:branchcond $i16} true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i16 == 1);
    $i15 := $eq.ref(v4l2_ctrl_subscribe_event, $p0);
    assume {:branchcond $i15} true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i15 == 1);
    $i14 := $eq.ref(dev_mmap, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i14 == 1);
    $i13 := $eq.ref(dev_poll, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1197} $i3 := dev_poll($p1, $p2);
    goto SeqInstr_946, SeqInstr_947;

  SeqInstr_947:
    assume assertsPassed;
    goto SeqInstr_948;

  SeqInstr_948:
    $r := $i3;
    return;

  SeqInstr_946:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i14 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1198} $i6 := dev_mmap($p4, $p5);
    goto SeqInstr_949, SeqInstr_950;

  SeqInstr_950:
    assume assertsPassed;
    goto SeqInstr_951;

  SeqInstr_951:
    $r := $i6;
    return;

  SeqInstr_949:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1199} $i9 := v4l2_ctrl_subscribe_event($p7, $p8);
    $r := $i9;
    return;

  $bb5:
    assume $i16 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1200} $i12 := v4l2_event_unsubscribe($p10, $p11);
    $r := $i12;
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 580334);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: ref;

const $u1: ref;

const $u10: ref;

const $u11: ref;

const $u12: ref;

const $u13: ref;

const $u14: ref;

const $u15: ref;

const $u16: ref;

const $u17: ref;

const $u18: ref;

const $u19: ref;

const $u2: ref;

const $u20: ref;

const $u21: ref;

const $u22: i64;

const $u23: ref;

const $u24: ref;

const $u25: ref;

const $u26: ref;

const $u27: ref;

const $u28: ref;

const $u3: ref;

const $u4: ref;

const $u5: ref;

const $u6: ref;

const $u7: ref;

const $u8: i32;

const $u9: ref;

procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.0, $M.61, $M.64, $M.52, $M.7, $M.41, $M.40, $M.73, $M.74, $M.1, $M.75, $M.76, $M.77, $M.78, $M.79, $M.8, $M.31, $M.4, $M.56, $M.5, $M.55, $M.54, $M.53, $M.50, $M.49, $M.48, $M.51, $M.32, $M.47, $M.46, $M.45, $M.44, $M.43, $M.42, $M.39, $M.6, $M.104, $M.105, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1201} __SMACK_static_init();
    call {:si_unique_call 1202} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $M.61, $M.64, $M.52, $M.7, $M.41, $M.40, $M.73, $M.74, $M.1, $M.75, $M.76, $M.77, $M.78, $M.79, $M.8, $M.31, $M.4, $M.56, $M.5, $M.55, $M.54, $M.53, $M.50, $M.49, $M.48, $M.51, $M.32, $M.47, $M.46, $M.45, $M.44, $M.43, $M.42, $M.39, $M.6, $M.104, $M.105, $CurrAddr, $M.10, $M.36, $M.33, $M.26, $M.27, $M.11, $M.34, $M.35;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation gspca_input_create_urb_loop_$bb6(in_$p14: ref, in_$p16: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$i32: i32, in_$i33: i8, in_$i34: i32, in_$i35: i1, in_$i20: i32) returns (out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$i32: i32, out_$i33: i8, out_$i34: i32, out_$i35: i1, out_$i20: i32)
{

  entry:
    out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i32, out_$i33, out_$i34, out_$i35, out_$i20 := in_$p21, in_$p22, in_$i23, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p30, in_$i32, in_$i33, in_$i34, in_$i35, in_$i20;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_124;

  $bb15:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := out_$i32;
    goto $bb15_dummy;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    out_$i35 := $slt.i32(out_$i32, out_$i34);
    goto corral_source_split_144;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i8.i32(out_$i33);
    goto corral_source_split_143;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i8($M.1, in_$p16);
    goto corral_source_split_142;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i20, 1);
    call {:si_unique_call 51} {:cexpr "i"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_141;

  $bb9:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    out_$p30 := out_$p25;
    assume true;
    goto $bb11;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_136;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} out_$i28 := usb_endpoint_xfer_int(out_$p25);
    call {:si_unique_call 49} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_135;

  $bb8:
    assume out_$i27 == 1;
    goto corral_source_split_134;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_132;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} out_$i26 := usb_endpoint_dir_in(out_$p25);
    call {:si_unique_call 47} {:cexpr "tmp"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_131;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p22, $mul.ref(out_$i23, 72)), $mul.ref(0, 1));
    goto corral_source_split_130;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    goto corral_source_split_129;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i20);
    goto corral_source_split_128;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.1, out_$p21);
    goto corral_source_split_127;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_126;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i32, out_$i33, out_$i34, out_$i35, out_$i20 := gspca_input_create_urb_loop_$bb6(in_$p14, in_$p16, out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i32, out_$i33, out_$i34, out_$i35, out_$i20);
    return;

  exit:
    return;
}



procedure gspca_input_create_urb_loop_$bb6(in_$p14: ref, in_$p16: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$i32: i32, in_$i33: i8, in_$i34: i32, in_$i35: i1, in_$i20: i32) returns (out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$i32: i32, out_$i33: i8, out_$i34: i32, out_$i35: i1, out_$i20: i32);



implementation ldv_assume_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} ldv_assume_loop_$bb3();
    return;

  exit:
    return;
}



procedure ldv_assume_loop_$bb3();



implementation destroy_urbs_loop_$bb4(in_$p0: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$i14: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i32, in_$i27: i1, in_$i7: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$i14: i64, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i32, out_$i27: i1, out_$i7: i32)
{

  entry:
    out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i7 := in_$i8, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$p16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_672;

  $bb10:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i26;
    goto $bb10_dummy;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    out_$i27 := $ule.i32(out_$i26, 3);
    goto corral_source_split_698;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i7, 1);
    call {:si_unique_call 172} {:cexpr "i"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_697;

  SeqInstr_102:
    goto corral_source_split_696;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} ldv_usb_free_urb_109(out_$p11);
    goto SeqInstr_101;

  SeqInstr_99:
    goto corral_source_split_695;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} ldv_usb_free_coherent_108(out_$p18, out_$i21, out_$p23, out_$i25);
    goto SeqInstr_98;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.1, out_$p24);
    goto corral_source_split_694;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p11, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_693;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.1, out_$p22);
    goto corral_source_split_692;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p11, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_691;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i32.i64(out_$i20);
    goto corral_source_split_690;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.1, out_$p19);
    goto corral_source_split_689;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p11, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_688;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.1, out_$p17);
    goto corral_source_split_687;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_686;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} usb_kill_urb(out_$p11);
    goto corral_source_split_685;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p16, $0.ref);
    goto corral_source_split_684;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2608, 1)), $mul.ref(out_$i14, 8));
    goto corral_source_split_683;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i32.i64(out_$i7);
    goto corral_source_split_682;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i64(out_$i12, 0);
    goto corral_source_split_678;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_677;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.1, out_$p10);
    goto corral_source_split_676;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2608, 1)), $mul.ref(out_$i8, 8));
    goto corral_source_split_675;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $zext.i32.i64(out_$i7);
    goto corral_source_split_674;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i7 := destroy_urbs_loop_$bb4(in_$p0, out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i7);
    return;

  exit:
    return;
}



procedure destroy_urbs_loop_$bb4(in_$p0: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$i14: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i32, in_$i27: i1, in_$i7: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$i14: i64, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i32, out_$i27: i1, out_$i7: i32);
  modifies $M.4, assertsPassed, $M.5, $M.1;



implementation gspca_init_transfer_loop_$bb57(in_$p0: ref, in_$i172: i64, in_$p174: ref, in_$p175: ref, in_$i176: i64, in_$i177: i1, in_$i178: i32, in_$i180: i32, in_$i181: i1, in_$i182: i32, in_$i183: i32, in_$i184: i1, in_$i170: i32, in_$i171: i32, in_$i185: i32) returns (out_$i172: i64, out_$p174: ref, out_$p175: ref, out_$i176: i64, out_$i177: i1, out_$i178: i32, out_$i180: i32, out_$i181: i1, out_$i182: i32, out_$i183: i32, out_$i184: i1, out_$i170: i32, out_$i171: i32, out_$i185: i32)
{

  entry:
    out_$i172, out_$p174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i170, out_$i171, out_$i185 := in_$i172, in_$p174, in_$p175, in_$i176, in_$i177, in_$i178, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i170, in_$i171, in_$i185;
    goto $bb57, exit;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1061;

  $bb66:
    assume out_$i184 == 1;
    assume {:verifier.code 0} true;
    out_$i170, out_$i171 := out_$i180, out_$i183;
    goto $bb66_dummy;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    out_$i185 := out_$i180;
    assume true;
    goto $bb66;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    out_$i184 := $sle.i32(out_$i183, 3);
    goto corral_source_split_1080;

  $bb65:
    assume {:verifier.code 0} true;
    out_$i183 := $add.i32(out_$i171, 1);
    call {:si_unique_call 242} {:cexpr "n"} boogie_si_record_i32(out_$i183);
    goto corral_source_split_1079;

  $bb64:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    out_$i182 := out_$i180;
    assume true;
    goto $bb64;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    out_$i181 := $slt.i32(out_$i180, 0);
    goto corral_source_split_1075;

  SeqInstr_177:
    call {:si_unique_call 241} {:cexpr "ret"} boogie_si_record_i32(out_$i180);
    goto corral_source_split_1074;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} out_$i180 := ldv_usb_submit_urb_112(out_$p175, 208);
    goto SeqInstr_176;

  $bb60:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    out_$i178 := out_$i170;
    assume true;
    goto $bb60;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i64(out_$i176, 0);
    goto corral_source_split_1067;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    out_$i176 := $p2i.ref.i64(out_$p175);
    goto corral_source_split_1066;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    out_$p175 := $load.ref($M.1, out_$p174);
    goto corral_source_split_1065;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2608, 1)), $mul.ref(out_$i172, 8));
    goto corral_source_split_1064;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i172 := $sext.i32.i64(out_$i171);
    goto corral_source_split_1063;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb66_dummy:
    call {:si_unique_call 1} out_$i172, out_$p174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i170, out_$i171, out_$i185 := gspca_init_transfer_loop_$bb57(in_$p0, out_$i172, out_$p174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i170, out_$i171, out_$i185);
    return;

  exit:
    return;
}



procedure gspca_init_transfer_loop_$bb57(in_$p0: ref, in_$i172: i64, in_$p174: ref, in_$p175: ref, in_$i176: i64, in_$i177: i1, in_$i178: i32, in_$i180: i32, in_$i181: i1, in_$i182: i32, in_$i183: i32, in_$i184: i1, in_$i170: i32, in_$i171: i32, in_$i185: i32) returns (out_$i172: i64, out_$p174: ref, out_$p175: ref, out_$i176: i64, out_$i177: i1, out_$i178: i32, out_$i180: i32, out_$i181: i1, out_$i182: i32, out_$i183: i32, out_$i184: i1, out_$i170: i32, out_$i171: i32, out_$i185: i32);
  modifies assertsPassed;



implementation gspca_init_transfer_loop_$bb20(in_$p0: ref, in_$p1: ref, in_$p12: ref, in_$i43: i32, in_$i86: i32, in_$i87: i32, in_$p88: ref, in_$i89: i8, in_$i90: i32, in_$i91: i1, in_$p92: ref, in_$i93: i8, in_$i94: i32, in_$p95: ref, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i8, in_$i102: i32, in_$i103: i32, in_$i104: i1, in_$i105: i1, in_$i106: i32, in_$i107: i32, in_$i111: i32, in_$p113: ref, in_$i114: i8, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$i118: i1, in_$p120: ref, in_$p121: ref, in_$p123: ref, in_$p124: ref, in_$i125: i64, in_$p126: ref, in_$p127: ref, in_$i128: i32, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$i132: i32, in_$p134: ref, in_$i135: i8, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$p139: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i32, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$i150: i32, in_$i151: i1, in_$i152: i32, in_$p153: ref, in_$p155: ref, in_$p156: ref, in_$p159: ref, in_$i160: i8, in_$i161: i32, in_$i162: i1, in_$p164: ref, in_$i165: i8, in_$i166: i32, in_$i167: i1, in_$i168: i32, in_$i172: i64, in_$p174: ref, in_$p175: ref, in_$i176: i64, in_$i177: i1, in_$i178: i32, in_$i180: i32, in_$i181: i1, in_$i182: i32, in_$i183: i32, in_$i184: i1, in_$i170: i32, in_$i171: i32, in_$i185: i32, in_$i179: i32, in_$i186: i1, in_$i187: i32, in_$i188: i1, in_$i189: i32, in_$i108: i32, in_$p195: ref, in_$p196: ref, in_$p198: ref, in_$p199: ref, in_$p200: ref, in_$p201: ref, in_$i202: i64, in_$i203: i1, in_$p204: ref, in_$p205: ref, in_$p206: ref, in_$p207: ref, in_$i208: i32, in_$i209: i1, in_$i210: i32, in_$i212: i1, in_$i214: i32, in_$i215: i64, in_$p217: ref, in_$i218: i32, in_$i219: i8, in_$p220: ref, in_$i211: i32, in_vslice_dummy_var_51: i32, in_vslice_dummy_var_53: i32, in_vslice_dummy_var_54: i32, in_vslice_dummy_var_55: i32) returns (out_$i86: i32, out_$i87: i32, out_$p88: ref, out_$i89: i8, out_$i90: i32, out_$i91: i1, out_$p92: ref, out_$i93: i8, out_$i94: i32, out_$p95: ref, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i8, out_$i102: i32, out_$i103: i32, out_$i104: i1, out_$i105: i1, out_$i106: i32, out_$i107: i32, out_$i111: i32, out_$p113: ref, out_$i114: i8, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$i118: i1, out_$p120: ref, out_$p121: ref, out_$p123: ref, out_$p124: ref, out_$i125: i64, out_$p126: ref, out_$p127: ref, out_$i128: i32, out_$p129: ref, out_$i130: i32, out_$i131: i1, out_$i132: i32, out_$p134: ref, out_$i135: i8, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$p139: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i32, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$i150: i32, out_$i151: i1, out_$i152: i32, out_$p153: ref, out_$p155: ref, out_$p156: ref, out_$p159: ref, out_$i160: i8, out_$i161: i32, out_$i162: i1, out_$p164: ref, out_$i165: i8, out_$i166: i32, out_$i167: i1, out_$i168: i32, out_$i172: i64, out_$p174: ref, out_$p175: ref, out_$i176: i64, out_$i177: i1, out_$i178: i32, out_$i180: i32, out_$i181: i1, out_$i182: i32, out_$i183: i32, out_$i184: i1, out_$i170: i32, out_$i171: i32, out_$i185: i32, out_$i179: i32, out_$i186: i1, out_$i187: i32, out_$i188: i1, out_$i189: i32, out_$i108: i32, out_$p195: ref, out_$p196: ref, out_$p198: ref, out_$p199: ref, out_$p200: ref, out_$p201: ref, out_$i202: i64, out_$i203: i1, out_$p204: ref, out_$p205: ref, out_$p206: ref, out_$p207: ref, out_$i208: i32, out_$i209: i1, out_$i210: i32, out_$i212: i1, out_$i214: i32, out_$i215: i64, out_$p217: ref, out_$i218: i32, out_$i219: i8, out_$p220: ref, out_$i211: i32, out_vslice_dummy_var_51: i32, out_vslice_dummy_var_53: i32, out_vslice_dummy_var_54: i32, out_vslice_dummy_var_55: i32)
{

  entry:
    out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i111, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p120, out_$p121, out_$p123, out_$p124, out_$i125, out_$p126, out_$p127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$p134, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p141, out_$p142, out_$p143, out_$i144, out_$p146, out_$p147, out_$p148, out_$p149, out_$i150, out_$i151, out_$i152, out_$p153, out_$p155, out_$p156, out_$p159, out_$i160, out_$i161, out_$i162, out_$p164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i172, out_$p174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i170, out_$i171, out_$i185, out_$i179, out_$i186, out_$i187, out_$i188, out_$i189, out_$i108, out_$p195, out_$p196, out_$p198, out_$p199, out_$p200, out_$p201, out_$i202, out_$i203, out_$p204, out_$p205, out_$p206, out_$p207, out_$i208, out_$i209, out_$i210, out_$i212, out_$i214, out_$i215, out_$p217, out_$i218, out_$i219, out_$p220, out_$i211, out_vslice_dummy_var_51, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55 := in_$i86, in_$i87, in_$p88, in_$i89, in_$i90, in_$i91, in_$p92, in_$i93, in_$i94, in_$p95, in_$i96, in_$i97, in_$p98, in_$p99, in_$p100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i111, in_$p113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$p120, in_$p121, in_$p123, in_$p124, in_$i125, in_$p126, in_$p127, in_$i128, in_$p129, in_$i130, in_$i131, in_$i132, in_$p134, in_$i135, in_$i136, in_$i137, in_$p138, in_$p139, in_$p141, in_$p142, in_$p143, in_$i144, in_$p146, in_$p147, in_$p148, in_$p149, in_$i150, in_$i151, in_$i152, in_$p153, in_$p155, in_$p156, in_$p159, in_$i160, in_$i161, in_$i162, in_$p164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i172, in_$p174, in_$p175, in_$i176, in_$i177, in_$i178, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i170, in_$i171, in_$i185, in_$i179, in_$i186, in_$i187, in_$i188, in_$i189, in_$i108, in_$p195, in_$p196, in_$p198, in_$p199, in_$p200, in_$p201, in_$i202, in_$i203, in_$p204, in_$p205, in_$p206, in_$p207, in_$i208, in_$i209, in_$i210, in_$i212, in_$i214, in_$i215, in_$p217, in_$i218, in_$i219, in_$p220, in_$i211, in_vslice_dummy_var_51, in_vslice_dummy_var_53, in_vslice_dummy_var_54, in_vslice_dummy_var_55;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_945;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    out_$i86, out_$i87 := out_$i108, out_$i211;
    goto corral_source_split_1105_dummy;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_1105;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p220, out_$i219);
    assume {:verifier.code 0} true;
    out_$i211 := out_$i214;
    goto $bb80;

  $bb79:
    assume {:verifier.code 0} true;
    out_$i211 := out_$i87;
    goto $bb80;

  $bb78:
    assume !(out_$i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    out_$i210 := out_$i208;
    assume true;
    goto $bb78;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    out_$i209 := $slt.i32(out_$i208, 0);
    goto corral_source_split_1098;

  SeqInstr_183:
    call {:si_unique_call 246} {:cexpr "ret"} boogie_si_record_i32(out_$i208);
    goto corral_source_split_1097;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    out_$p207 := $load.ref($M.1, out_$p206);
    call {:si_unique_call 245} out_$i208 := devirtbounce.1(out_$p207, in_$p0);
    goto SeqInstr_182;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    out_$p206 := $add.ref($add.ref(out_$p205, $mul.ref(0, 176)), $mul.ref(56, 1));
    goto corral_source_split_1096;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    out_$p205 := $load.ref($M.1, out_$p204);
    goto corral_source_split_1095;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    out_$p204 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_1094;

  $bb75:
    assume out_$i203 == 1;
    goto corral_source_split_1093;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    out_$i203 := $ne.i64(out_$i202, 0);
    goto corral_source_split_983;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    out_$i202 := $p2i.ref.i64(out_$p201);
    goto corral_source_split_982;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    out_$p201 := $load.ref($M.1, out_$p200);
    goto corral_source_split_981;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    out_$p200 := $add.ref($add.ref(out_$p199, $mul.ref(0, 176)), $mul.ref(56, 1));
    goto corral_source_split_980;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    out_$p199 := $load.ref($M.1, out_$p198);
    goto corral_source_split_979;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    out_$p198 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_978;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} msleep(20);
    goto corral_source_split_977;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} out_vslice_dummy_var_51 := printk.ref.ref.i32(.str.32, out_$p196, out_$i108);
    goto corral_source_split_976;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    out_$p196 := $bitcast.ref.ref(out_$p195);
    goto corral_source_split_975;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    out_$p195 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_974;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_973;

  $bb74:
    assume {:verifier.code 0} true;
    out_$i108 := out_$i111;
    goto $bb29;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    out_$i108 := out_$i94;
    goto $bb29;

  $bb27:
    assume out_$i105 == 1;
    goto corral_source_split_971;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    out_$i106, out_$i107 := out_$i94, out_$i103;
    assume true;
    goto $bb27;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i103, $sub.i32(0, 28));
    goto corral_source_split_969;

  $bb25:
    assume out_$i104 == 1;
    goto corral_source_split_968;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    out_$i104 := $slt.i32(out_$i103, 0);
    goto corral_source_split_966;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} out_$i103 := usb_set_interface(out_$p99, out_$i102, out_$i94);
    call {:si_unique_call 225} {:cexpr "ret"} boogie_si_record_i32(out_$i103);
    goto corral_source_split_965;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.i8.i32(out_$i101);
    goto corral_source_split_964;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i8($M.1, out_$p100);
    goto corral_source_split_963;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(4834, 1));
    goto corral_source_split_962;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.1, out_$p98);
    goto corral_source_split_961;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_960;

  $bb23:
    assume out_$i97 == 1;
    goto corral_source_split_959;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    out_$i97 := $ugt.i32(out_$i96, 1);
    goto corral_source_split_957;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i32($M.1, out_$p95);
    goto corral_source_split_956;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(in_$p12, $mul.ref(0, 1560)), $mul.ref(16, 1));
    goto corral_source_split_955;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    out_$i94 := $zext.i8.i32(out_$i93);
    call {:si_unique_call 223} {:cexpr "alt"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_954;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i8($M.1, out_$p92);
    goto corral_source_split_953;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(4835, 1));
    goto corral_source_split_952;

  $bb21:
    assume out_$i91 == 1;
    goto corral_source_split_951;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    out_$i91 := $ne.i32(out_$i86, out_$i90);
    goto corral_source_split_949;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    out_$i90 := $zext.i8.i32(out_$i89);
    goto corral_source_split_948;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i8($M.1, out_$p88);
    goto corral_source_split_947;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(4835, 1));
    goto corral_source_split_946;

  $bb73:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    out_$i189 := out_$i179;
    assume true;
    goto $bb73;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    out_$i188 := $ne.i32(out_$i179, $sub.i32(0, 28));
    goto corral_source_split_1085;

  SeqInstr_180:
    goto corral_source_split_1084;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} gspca_stream_off(in_$p0);
    goto SeqInstr_179;

  $bb70:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    out_$i187 := out_$i179;
    assume true;
    goto $bb70;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    out_$i186 := $sge.i32(out_$i179, 0);
    goto corral_source_split_1072;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_1071;

  $bb68:
    assume {:verifier.code 0} true;
    out_$i179 := out_$i185;
    goto $bb61;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    out_$i179 := out_$i182;
    goto $bb61;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    out_$i179 := out_$i178;
    goto $bb61;

  $bb59:
    assume out_$i177 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1069;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    out_$i178 := out_$i170;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i64(out_$i176, 0);
    goto corral_source_split_1067;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    out_$i176 := $p2i.ref.i64(out_$p175);
    goto corral_source_split_1066;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    out_$p175 := $load.ref($M.1, out_$p174);
    goto corral_source_split_1065;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2608, 1)), $mul.ref(out_$i172, 8));
    goto corral_source_split_1064;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i172 := $sext.i32.i64(out_$i171);
    goto corral_source_split_1063;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb57:
    call out_$i172, out_$p174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i170, out_$i171, out_$i185 := gspca_init_transfer_loop_$bb57(in_$p0, out_$i172, out_$p174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i170, out_$i171, out_$i185);
    goto $bb57_last;

  $bb57_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1061;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i170, out_$i171 := out_$i150, 0;
    goto $bb57;

  $bb66:
    assume out_$i184 == 1;
    assume {:verifier.code 0} true;
    out_$i170, out_$i171 := out_$i180, out_$i183;
    assume false;
    return;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    out_$i185 := out_$i180;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    out_$i184 := $sle.i32(out_$i183, 3);
    goto corral_source_split_1080;

  $bb65:
    assume {:verifier.code 0} true;
    out_$i183 := $add.i32(out_$i171, 1);
    call {:si_unique_call 242} {:cexpr "n"} boogie_si_record_i32(out_$i183);
    goto corral_source_split_1079;

  $bb64:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    out_$i182 := out_$i180;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    out_$i181 := $slt.i32(out_$i180, 0);
    goto corral_source_split_1075;

  SeqInstr_177:
    call {:si_unique_call 241} {:cexpr "ret"} boogie_si_record_i32(out_$i180);
    goto corral_source_split_1074;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} out_$i180 := ldv_usb_submit_urb_112(out_$p175, 208);
    goto SeqInstr_176;

  $bb60:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i162 == 1);
    goto $bb52;

  $bb54:
    assume {:verifier.code 0} true;
    assume !(out_$i167 == 1);
    goto $bb52;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    out_$i168 := out_$i150;
    assume true;
    goto $bb54;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i32(out_$i166, 0);
    goto corral_source_split_1055;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    out_$i166 := $zext.i8.i32(out_$i165);
    goto corral_source_split_1054;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    out_$i165 := $load.i8($M.1, out_$p164);
    goto corral_source_split_1053;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(26, 1));
    goto corral_source_split_1052;

  $bb50:
    assume out_$i162 == 1;
    goto corral_source_split_1051;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    out_$i162 := $ne.i32(out_$i161, 0);
    goto corral_source_split_1049;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    out_$i161 := $zext.i8.i32(out_$i160);
    goto corral_source_split_1048;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    out_$i160 := $load.i8($M.1, out_$p159);
    goto corral_source_split_1047;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(27, 1));
    goto corral_source_split_1046;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} out_vslice_dummy_var_55 := v4l2_ctrl_handler_setup(out_$p156);
    goto corral_source_split_1045;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    out_$p156 := $load.ref($M.1, out_$p155);
    goto corral_source_split_1044;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(0, 1)), $mul.ref(1576, 1));
    goto corral_source_split_1043;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p153, 1);
    goto corral_source_split_1042;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(4364, 1));
    goto corral_source_split_1041;

  $bb48:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    out_$i152 := out_$i150;
    assume true;
    goto $bb48;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    out_$i151 := $slt.i32(out_$i150, 0);
    goto corral_source_split_1036;

  SeqInstr_171:
    call {:si_unique_call 237} {:cexpr "ret"} boogie_si_record_i32(out_$i150);
    goto corral_source_split_1035;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    out_$p149 := $load.ref($M.1, out_$p148);
    call {:si_unique_call 236} out_$i150 := devirtbounce.1(out_$p149, in_$p0);
    goto SeqInstr_170;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(out_$p147, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_1034;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    out_$p147 := $load.ref($M.1, out_$p146);
    goto corral_source_split_1033;

  $bb46:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2320, 1));
    goto corral_source_split_1032;

  $bb45:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} out_vslice_dummy_var_54 := usb_clear_halt(out_$p139, out_$i144);
    goto corral_source_split_1030;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i32($M.1, out_$p143);
    goto corral_source_split_1029;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(out_$p142, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1028;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    out_$p142 := $load.ref($M.1, out_$p141);
    goto corral_source_split_1027;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2608, 1)), $mul.ref(0, 8));
    goto corral_source_split_1026;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    out_$p139 := $load.ref($M.1, out_$p138);
    goto corral_source_split_1025;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_1024;

  $bb44:
    assume out_$i137 == 1;
    goto corral_source_split_1023;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    out_$i137 := $ne.i32(out_$i136, 0);
    goto corral_source_split_1021;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    out_$i136 := $zext.i8.i32(out_$i135);
    goto corral_source_split_1020;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i8($M.1, out_$p134);
    goto corral_source_split_1019;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(27, 1));
    goto corral_source_split_1018;

  $bb36:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb41:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    out_$i132 := out_$i130;
    assume true;
    goto $bb41;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    out_$i131 := $slt.i32(out_$i130, 0);
    goto corral_source_split_1013;

  SeqInstr_165:
    call {:si_unique_call 233} {:cexpr "ret"} boogie_si_record_i32(out_$i130);
    goto corral_source_split_1012;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} out_$i130 := create_urbs(in_$p0, out_$p129);
    goto SeqInstr_164;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} out_$p129 := alt_xfer(out_$p126, in_$i43, out_$i128);
    goto corral_source_split_1011;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    out_$i128 := $load.i32($M.1, out_$p127);
    goto corral_source_split_1010;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(4836, 1));
    goto corral_source_split_1009;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref(out_$p124, $mul.ref(out_$i125, 40));
    goto corral_source_split_1008;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    out_$i125 := $sext.i32.i64(out_$i111);
    goto corral_source_split_1007;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    out_$p124 := $load.ref($M.1, out_$p123);
    goto corral_source_split_1006;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(in_$p12, $mul.ref(0, 1560)), $mul.ref(0, 1));
    goto corral_source_split_1005;

  $bb38:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} out_vslice_dummy_var_53 := printk.ref.ref.i32(.str.30, out_$p121, out_$i111);
    goto corral_source_split_1003;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    out_$p121 := $bitcast.ref.ref(out_$p120);
    goto corral_source_split_1002;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_1001;

  $bb37:
    assume out_$i118 == 1;
    goto corral_source_split_1000;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    out_$i118 := $sgt.i32(out_$i117, 2);
    goto corral_source_split_998;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    out_$i117 := $M.0;
    goto corral_source_split_997;

  $bb35:
    assume out_$i116 == 1;
    goto corral_source_split_996;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    out_$i116 := $eq.i32(out_$i115, 0);
    goto corral_source_split_994;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    out_$i115 := $zext.i8.i32(out_$i114);
    goto corral_source_split_993;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i8($M.1, out_$p113);
    goto corral_source_split_992;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(25, 1));
    goto corral_source_split_991;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_990;

  $bb22:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    out_$i111 := out_$i86;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i111 := out_$i94;
    goto $bb34;

  $bb24:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb26:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb63:
    assume out_$i181 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1077;

  $bb67:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    out_$p220 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(4835, 1));
    goto corral_source_split_1115;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    out_$i219 := $trunc.i32.i8(out_$i218);
    goto corral_source_split_1114;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    out_$i218 := $load.i32($M.10, out_$p217);
    goto corral_source_split_1113;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 128)), $mul.ref(out_$i215, 8)), $mul.ref(0, 1));
    goto corral_source_split_1112;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    out_$i215 := $sext.i32.i64(out_$i214);
    goto corral_source_split_1111;

  $bb83:
    assume {:verifier.code 0} true;
    out_$i214 := $sub.i32(out_$i87, 1);
    call {:si_unique_call 248} {:cexpr "alt_idx"} boogie_si_record_i32(out_$i214);
    goto corral_source_split_1110;

  $bb82:
    assume !(out_$i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    out_$i212 := $sle.i32(out_$i87, 0);
    goto corral_source_split_1101;

  $bb76:
    assume !(out_$i203 == 1);
    goto corral_source_split_1100;

  corral_source_split_1105_dummy:
    call {:si_unique_call 1} out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i111, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p120, out_$p121, out_$p123, out_$p124, out_$i125, out_$p126, out_$p127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$p134, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p141, out_$p142, out_$p143, out_$i144, out_$p146, out_$p147, out_$p148, out_$p149, out_$i150, out_$i151, out_$i152, out_$p153, out_$p155, out_$p156, out_$p159, out_$i160, out_$i161, out_$i162, out_$p164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i172, out_$p174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i170, out_$i171, out_$i185, out_$i179, out_$i186, out_$i187, out_$i188, out_$i189, out_$i108, out_$p195, out_$p196, out_$p198, out_$p199, out_$p200, out_$p201, out_$i202, out_$i203, out_$p204, out_$p205, out_$p206, out_$p207, out_$i208, out_$i209, out_$i210, out_$i212, out_$i214, out_$i215, out_$p217, out_$i218, out_$i219, out_$p220, out_$i211, out_vslice_dummy_var_51, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55 := gspca_init_transfer_loop_$bb20(in_$p0, in_$p1, in_$p12, in_$i43, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i111, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p120, out_$p121, out_$p123, out_$p124, out_$i125, out_$p126, out_$p127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$p134, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p141, out_$p142, out_$p143, out_$i144, out_$p146, out_$p147, out_$p148, out_$p149, out_$i150, out_$i151, out_$i152, out_$p153, out_$p155, out_$p156, out_$p159, out_$i160, out_$i161, out_$i162, out_$p164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i172, out_$p174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i170, out_$i171, out_$i185, out_$i179, out_$i186, out_$i187, out_$i188, out_$i189, out_$i108, out_$p195, out_$p196, out_$p198, out_$p199, out_$p200, out_$p201, out_$i202, out_$i203, out_$p204, out_$p205, out_$p206, out_$p207, out_$i208, out_$i209, out_$i210, out_$i212, out_$i214, out_$i215, out_$p217, out_$i218, out_$i219, out_$p220, out_$i211, out_vslice_dummy_var_51, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55);
    return;

  exit:
    return;
}



procedure gspca_init_transfer_loop_$bb20(in_$p0: ref, in_$p1: ref, in_$p12: ref, in_$i43: i32, in_$i86: i32, in_$i87: i32, in_$p88: ref, in_$i89: i8, in_$i90: i32, in_$i91: i1, in_$p92: ref, in_$i93: i8, in_$i94: i32, in_$p95: ref, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i8, in_$i102: i32, in_$i103: i32, in_$i104: i1, in_$i105: i1, in_$i106: i32, in_$i107: i32, in_$i111: i32, in_$p113: ref, in_$i114: i8, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$i118: i1, in_$p120: ref, in_$p121: ref, in_$p123: ref, in_$p124: ref, in_$i125: i64, in_$p126: ref, in_$p127: ref, in_$i128: i32, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$i132: i32, in_$p134: ref, in_$i135: i8, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$p139: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i32, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$i150: i32, in_$i151: i1, in_$i152: i32, in_$p153: ref, in_$p155: ref, in_$p156: ref, in_$p159: ref, in_$i160: i8, in_$i161: i32, in_$i162: i1, in_$p164: ref, in_$i165: i8, in_$i166: i32, in_$i167: i1, in_$i168: i32, in_$i172: i64, in_$p174: ref, in_$p175: ref, in_$i176: i64, in_$i177: i1, in_$i178: i32, in_$i180: i32, in_$i181: i1, in_$i182: i32, in_$i183: i32, in_$i184: i1, in_$i170: i32, in_$i171: i32, in_$i185: i32, in_$i179: i32, in_$i186: i1, in_$i187: i32, in_$i188: i1, in_$i189: i32, in_$i108: i32, in_$p195: ref, in_$p196: ref, in_$p198: ref, in_$p199: ref, in_$p200: ref, in_$p201: ref, in_$i202: i64, in_$i203: i1, in_$p204: ref, in_$p205: ref, in_$p206: ref, in_$p207: ref, in_$i208: i32, in_$i209: i1, in_$i210: i32, in_$i212: i1, in_$i214: i32, in_$i215: i64, in_$p217: ref, in_$i218: i32, in_$i219: i8, in_$p220: ref, in_$i211: i32, in_vslice_dummy_var_51: i32, in_vslice_dummy_var_53: i32, in_vslice_dummy_var_54: i32, in_vslice_dummy_var_55: i32) returns (out_$i86: i32, out_$i87: i32, out_$p88: ref, out_$i89: i8, out_$i90: i32, out_$i91: i1, out_$p92: ref, out_$i93: i8, out_$i94: i32, out_$p95: ref, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i8, out_$i102: i32, out_$i103: i32, out_$i104: i1, out_$i105: i1, out_$i106: i32, out_$i107: i32, out_$i111: i32, out_$p113: ref, out_$i114: i8, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$i118: i1, out_$p120: ref, out_$p121: ref, out_$p123: ref, out_$p124: ref, out_$i125: i64, out_$p126: ref, out_$p127: ref, out_$i128: i32, out_$p129: ref, out_$i130: i32, out_$i131: i1, out_$i132: i32, out_$p134: ref, out_$i135: i8, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$p139: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i32, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$i150: i32, out_$i151: i1, out_$i152: i32, out_$p153: ref, out_$p155: ref, out_$p156: ref, out_$p159: ref, out_$i160: i8, out_$i161: i32, out_$i162: i1, out_$p164: ref, out_$i165: i8, out_$i166: i32, out_$i167: i1, out_$i168: i32, out_$i172: i64, out_$p174: ref, out_$p175: ref, out_$i176: i64, out_$i177: i1, out_$i178: i32, out_$i180: i32, out_$i181: i1, out_$i182: i32, out_$i183: i32, out_$i184: i1, out_$i170: i32, out_$i171: i32, out_$i185: i32, out_$i179: i32, out_$i186: i1, out_$i187: i32, out_$i188: i1, out_$i189: i32, out_$i108: i32, out_$p195: ref, out_$p196: ref, out_$p198: ref, out_$p199: ref, out_$p200: ref, out_$p201: ref, out_$i202: i64, out_$i203: i1, out_$p204: ref, out_$p205: ref, out_$p206: ref, out_$p207: ref, out_$i208: i32, out_$i209: i1, out_$i210: i32, out_$i212: i1, out_$i214: i32, out_$i215: i64, out_$p217: ref, out_$i218: i32, out_$i219: i8, out_$p220: ref, out_$i211: i32, out_vslice_dummy_var_51: i32, out_vslice_dummy_var_53: i32, out_vslice_dummy_var_54: i32, out_vslice_dummy_var_55: i32);
  modifies $M.1, $M.8, $M.10, $M.32, $M.5, $M.4, $M.11, $M.31, assertsPassed, $CurrAddr;



implementation alt_xfer_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p4: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$p20: ref, in_$i21: i16, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$p30: ref, in_$i31: i8, in_$i32: i32, in_$i33: i1, in_$p28: ref, in_$i35: i32, in_$i36: i8, in_$i37: i32, in_$i38: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$p20: ref, out_$i21: i16, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$p30: ref, out_$i31: i8, out_$i32: i32, out_$i33: i1, out_$p28: ref, out_$i35: i32, out_$i36: i8, out_$i37: i32, out_$i38: i1, out_$i8: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p12, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p30, out_$i31, out_$i32, out_$i33, out_$p28, out_$i35, out_$i36, out_$i37, out_$i38, out_$i8 := in_$p9, in_$p10, in_$i11, in_$p12, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$p20, in_$i21, in_$i22, in_$i23, in_$p24, in_$i25, in_$i26, in_$i27, in_$p30, in_$i31, in_$i32, in_$i33, in_$p28, in_$i35, in_$i36, in_$i37, in_$i38, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1128;

  $bb22:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i35;
    goto $bb22_dummy;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i35, out_$i37);
    goto corral_source_split_1167;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i8.i32(out_$i36);
    goto corral_source_split_1166;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i8($M.1, in_$p4);
    goto corral_source_split_1165;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i8, 1);
    call {:si_unique_call 255} {:cexpr "i"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_1164;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb12:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    out_$p28 := out_$p12;
    assume true;
    goto $bb17;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i32, in_$i2);
    goto corral_source_split_1160;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i8.i32(out_$i31);
    goto corral_source_split_1159;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i8($M.1, out_$p30);
    goto corral_source_split_1158;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1157;

  $bb15:
    assume !(out_$i27 == 1);
    goto corral_source_split_1156;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    out_$p28 := out_$p12;
    assume true;
    goto $bb15;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(in_$i2, 0);
    goto corral_source_split_1152;

  $bb11:
    assume out_$i26 == 1;
    goto corral_source_split_1151;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_1149;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} out_$i25 := usb_endpoint_dir_in(out_$p24);
    call {:si_unique_call 254} {:cexpr "tmp"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_1148;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 72)), $mul.ref(0, 1));
    goto corral_source_split_1147;

  $bb9:
    assume out_$i23 == 1;
    goto corral_source_split_1146;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_1144;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i16.i32(out_$i21);
    goto corral_source_split_1143;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i16($M.1, out_$p20);
    goto corral_source_split_1142;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1141;

  $bb6:
    assume out_$i18 == 1;
    goto corral_source_split_1140;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i17, in_$i1);
    goto corral_source_split_1138;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    out_$i17 := $and.i32(out_$i16, 3);
    call {:si_unique_call 252} {:cexpr "attr"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_1137;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i8.i32(out_$i15);
    goto corral_source_split_1136;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i8($M.1, out_$p14);
    goto corral_source_split_1135;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 72)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_1134;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p10, $mul.ref(out_$i11, 72));
    goto corral_source_split_1133;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i8);
    goto corral_source_split_1132;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.1, out_$p9);
    goto corral_source_split_1131;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1130;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb8;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p12, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p30, out_$i31, out_$i32, out_$i33, out_$p28, out_$i35, out_$i36, out_$i37, out_$i38, out_$i8 := alt_xfer_loop_$bb4(in_$p0, in_$i1, in_$i2, in_$p4, out_$p9, out_$p10, out_$i11, out_$p12, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p30, out_$i31, out_$i32, out_$i33, out_$p28, out_$i35, out_$i36, out_$i37, out_$i38, out_$i8);
    return;

  exit:
    return;
}



procedure alt_xfer_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p4: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$p20: ref, in_$i21: i16, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$p30: ref, in_$i31: i8, in_$i32: i32, in_$i33: i1, in_$p28: ref, in_$i35: i32, in_$i36: i8, in_$i37: i32, in_$i38: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$p20: ref, out_$i21: i16, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$p30: ref, out_$i31: i8, out_$i32: i32, out_$i33: i1, out_$p28: ref, out_$i35: i32, out_$i36: i8, out_$i37: i32, out_$i38: i1, out_$i8: i32);



implementation build_isoc_ep_tb_loop_$bb55(in_$i109: i32, in_$p115: ref, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i121: i32, in_$i122: i1, in_$p113: ref, in_$i114: i32, in_$i123: i32) returns (out_$p115: ref, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i121: i32, out_$i122: i1, out_$p113: ref, out_$i114: i32, out_$i123: i32)
{

  entry:
    out_$p115, out_$p116, out_$i117, out_$i118, out_$i119, out_$i121, out_$i122, out_$p113, out_$i114, out_$i123 := in_$p115, in_$p116, in_$i117, in_$i118, in_$i119, in_$i121, in_$i122, in_$p113, in_$i114, in_$i123;
    goto $bb55, exit;

  $bb55:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1319;

  $bb61:
    assume out_$i122 == 1;
    assume {:verifier.code 0} true;
    out_$p113, out_$i114 := out_$p115, out_$i121;
    goto $bb61_dummy;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    out_$i123 := out_$i121;
    assume true;
    goto $bb61;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    out_$i122 := $sgt.i32(out_$i121, 1);
    goto corral_source_split_1331;

  $bb60:
    assume {:verifier.code 0} true;
    out_$i121 := $sub.i32(out_$i114, 1);
    call {:si_unique_call 272} {:cexpr "i"} boogie_si_record_i32(out_$i121);
    goto corral_source_split_1330;

  $bb58:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    out_$i119 := out_$i114;
    assume true;
    goto $bb58;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    out_$i118 := $ult.i32(out_$i117, in_$i109);
    goto corral_source_split_1324;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i32($M.11, out_$p116);
    goto corral_source_split_1323;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p113, $mul.ref($sub.ref(0, 1), 8)), $mul.ref(4, 1));
    goto corral_source_split_1322;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref(out_$p113, $mul.ref($sub.ref(0, 1), 8));
    goto corral_source_split_1321;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb61_dummy:
    call {:si_unique_call 1} out_$p115, out_$p116, out_$i117, out_$i118, out_$i119, out_$i121, out_$i122, out_$p113, out_$i114, out_$i123 := build_isoc_ep_tb_loop_$bb55(in_$i109, out_$p115, out_$p116, out_$i117, out_$i118, out_$i119, out_$i121, out_$i122, out_$p113, out_$i114, out_$i123);
    return;

  exit:
    return;
}



procedure build_isoc_ep_tb_loop_$bb55(in_$i109: i32, in_$p115: ref, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i121: i32, in_$i122: i1, in_$p113: ref, in_$i114: i32, in_$i123: i32) returns (out_$p115: ref, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i121: i32, out_$i122: i1, out_$p113: ref, out_$i114: i32, out_$i123: i32);



implementation build_isoc_ep_tb_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$i6: i32, in_$p8: ref, in_$i9: i32, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p27: ref, in_$i28: i8, in_$i29: i32, in_$i30: i1, in_$p33: ref, in_$i34: i16, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i32, in_$p55: ref, in_$i56: i8, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i24: i32, in_$i25: i32, in_$i67: i32, in_$i68: i1, in_$i13: i32, in_$i14: i32, in_$i69: i32, in_vslice_dummy_var_58: i32) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p27: ref, out_$i28: i8, out_$i29: i32, out_$i30: i1, out_$p33: ref, out_$i34: i16, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i32, out_$p55: ref, out_$i56: i8, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i24: i32, out_$i25: i32, out_$i67: i32, out_$i68: i1, out_$i13: i32, out_$i14: i32, out_$i69: i32, out_vslice_dummy_var_58: i32)
{

  entry:
    out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p27, out_$i28, out_$i29, out_$i30, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i24, out_$i25, out_$i67, out_$i68, out_$i13, out_$i14, out_$i69, out_vslice_dummy_var_58 := in_$p15, in_$p16, in_$i17, in_$p18, in_$p19, in_$i20, in_$p21, in_$i22, in_$i23, in_$p27, in_$i28, in_$i29, in_$i30, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$p64, in_$p65, in_$i66, in_$i24, in_$i25, in_$i67, in_$i68, in_$i13, in_$i14, in_$i69, in_vslice_dummy_var_58;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1187;

  $bb29:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i13, out_$i14 := out_$i25, out_$i67;
    goto $bb29_dummy;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    out_$i69 := out_$i25;
    assume true;
    goto $bb29;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i67, in_$i6);
    goto corral_source_split_1203;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i24, 1);
    call {:si_unique_call 258} {:cexpr "j"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_1202;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1201;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    out_$i24, out_$i25 := out_$i14, out_$i66;
    goto $bb12;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    out_$i24, out_$i25 := out_$i14, out_$i13;
    goto $bb12;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    out_$i24, out_$i25 := out_$i14, out_$i13;
    goto $bb12;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    out_$i24, out_$i25 := out_$i14, out_$i13;
    goto $bb12;

  $bb10:
    assume out_$i23 == 1;
    goto corral_source_split_1199;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i64(out_$i22, 0);
    goto corral_source_split_1197;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_1196;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} out_$p21 := alt_xfer(out_$p18, 1, out_$i20);
    goto corral_source_split_1195;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.1, out_$p19);
    goto corral_source_split_1194;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(4836, 1));
    goto corral_source_split_1193;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p16, $mul.ref(out_$i17, 40));
    goto corral_source_split_1192;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i14);
    goto corral_source_split_1191;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.1, out_$p15);
    goto corral_source_split_1190;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1560)), $mul.ref(0, 1));
    goto corral_source_split_1189;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} out_vslice_dummy_var_58 := printk.ref.i32(.str.33, out_$i14);
    goto corral_source_split_1211;

  $bb14:
    assume out_$i30 == 1;
    goto corral_source_split_1210;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 0);
    goto corral_source_split_1208;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i32(out_$i28);
    goto corral_source_split_1207;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.1, out_$p27);
    goto corral_source_split_1206;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_1205;

  $bb11:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb23:
    assume out_$i60 == 1;
    goto corral_source_split_1245;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    out_$i60 := $ule.i32(out_$i59, in_$i9);
    goto corral_source_split_1243;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    out_$i59 := $lshr.i32(out_$i53, out_$i58);
    call {:si_unique_call 264} {:cexpr "bandwidth"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_1242;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i32(out_$i57, $sub.i32(0, 1));
    goto corral_source_split_1241;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i8.i32(out_$i56);
    goto corral_source_split_1240;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i8($M.1, out_$p55);
    goto corral_source_split_1239;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_1238;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1237;

  $bb21:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    out_$i53 := out_$i41;
    goto $bb22;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i52;
    goto $bb22;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i52 := $mul.i32(out_$i41, 8);
    call {:si_unique_call 263} {:cexpr "bandwidth"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_1228;

  $bb20:
    assume {:verifier.code 0} true;
    assume out_$i51 == 1;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i46 == 1;
    goto $bb18;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 3);
    goto corral_source_split_1226;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.1, out_$p44);
    goto corral_source_split_1225;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 2032)), $mul.ref(28, 1));
    goto corral_source_split_1224;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.1, out_$p42);
    goto corral_source_split_1223;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_1222;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    out_$i41 := $mul.i32(out_$i40, 1000);
    call {:si_unique_call 262} {:cexpr "bandwidth"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_1221;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    out_$i40 := $mul.i32(out_$i36, out_$i39);
    call {:si_unique_call 261} {:cexpr "psize"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_1220;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i38, 1);
    goto corral_source_split_1219;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    out_$i38 := $and.i32(out_$i37, 3);
    goto corral_source_split_1218;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    out_$i37 := $ashr.i32(out_$i35, 11);
    goto corral_source_split_1217;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    out_$i36 := $and.i32(out_$i35, 2047);
    goto corral_source_split_1216;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i16.i32(out_$i34);
    call {:si_unique_call 260} {:cexpr "psize"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_1215;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i16($M.1, out_$p33);
    goto corral_source_split_1214;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1213;

  $bb15:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i50, 5);
    goto corral_source_split_1235;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.1, out_$p49);
    goto corral_source_split_1234;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p48, $mul.ref(0, 2032)), $mul.ref(28, 1));
    goto corral_source_split_1233;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.1, out_$p47);
    goto corral_source_split_1232;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_1231;

  $bb19:
    assume !(out_$i46 == 1);
    goto corral_source_split_1230;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_1257;

  $bb27:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    out_$i66 := out_$i13;
    goto $bb28;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    out_$i66 := 1;
    goto $bb28;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, out_$p65, out_$i14);
    goto corral_source_split_1255;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p8, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1254;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, out_$p64, out_$i59);
    goto corral_source_split_1253;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1252;

  $bb26:
    assume out_$i63 == 1;
    goto corral_source_split_1251;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    out_$i63 := $ult.i32(out_$i59, out_$i62);
    goto corral_source_split_1249;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.11, out_$p61);
    goto corral_source_split_1248;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1247;

  $bb24:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p27, out_$i28, out_$i29, out_$i30, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i24, out_$i25, out_$i67, out_$i68, out_$i13, out_$i14, out_$i69, out_vslice_dummy_var_58 := build_isoc_ep_tb_loop_$bb8(in_$p0, in_$p1, in_$i6, in_$p8, in_$i9, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p27, out_$i28, out_$i29, out_$i30, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i24, out_$i25, out_$i67, out_$i68, out_$i13, out_$i14, out_$i69, out_vslice_dummy_var_58);
    return;

  exit:
    return;
}



procedure build_isoc_ep_tb_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$i6: i32, in_$p8: ref, in_$i9: i32, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p27: ref, in_$i28: i8, in_$i29: i32, in_$i30: i1, in_$p33: ref, in_$i34: i16, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i32, in_$p55: ref, in_$i56: i8, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i24: i32, in_$i25: i32, in_$i67: i32, in_$i68: i1, in_$i13: i32, in_$i14: i32, in_$i69: i32, in_vslice_dummy_var_58: i32) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p27: ref, out_$i28: i8, out_$i29: i32, out_$i30: i1, out_$p33: ref, out_$i34: i16, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i32, out_$p55: ref, out_$i56: i8, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i24: i32, out_$i25: i32, out_$i67: i32, out_$i68: i1, out_$i13: i32, out_$i14: i32, out_$i69: i32, out_vslice_dummy_var_58: i32);
  modifies $M.10, $M.11;



implementation build_isoc_ep_tb_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i6: i32, in_$i7: i32, in_$p8: ref, in_$i9: i32, in_$p10: ref, in_$i11: i1, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p27: ref, in_$i28: i8, in_$i29: i32, in_$i30: i1, in_$p33: ref, in_$i34: i16, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i32, in_$p55: ref, in_$i56: i8, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i24: i32, in_$i25: i32, in_$i67: i32, in_$i68: i1, in_$i13: i32, in_$i14: i32, in_$i69: i32, in_$i12: i32, in_$i70: i1, in_$i71: i32, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i80: i32, in_$p81: ref, in_$i82: i32, in_$p84: ref, in_$i85: i32, in_$i86: i32, in_$p87: ref, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: i32) returns (out_$i7: i32, out_$p8: ref, out_$i9: i32, out_$p10: ref, out_$i11: i1, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p27: ref, out_$i28: i8, out_$i29: i32, out_$i30: i1, out_$p33: ref, out_$i34: i16, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i32, out_$p55: ref, out_$i56: i8, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i24: i32, out_$i25: i32, out_$i67: i32, out_$i68: i1, out_$i13: i32, out_$i14: i32, out_$i69: i32, out_$i12: i32, out_$i70: i1, out_$i71: i32, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i80: i32, out_$p81: ref, out_$i82: i32, out_$p84: ref, out_$i85: i32, out_$i86: i32, out_$p87: ref, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: i32)
{

  entry:
    out_$i7, out_$p8, out_$i9, out_$p10, out_$i11, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p27, out_$i28, out_$i29, out_$i30, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i24, out_$i25, out_$i67, out_$i68, out_$i13, out_$i14, out_$i69, out_$i12, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p77, out_$p78, out_$p79, out_$i80, out_$p81, out_$i82, out_$p84, out_$i85, out_$i86, out_$p87, out_vslice_dummy_var_58, out_vslice_dummy_var_59 := in_$i7, in_$p8, in_$i9, in_$p10, in_$i11, in_$p15, in_$p16, in_$i17, in_$p18, in_$p19, in_$i20, in_$p21, in_$i22, in_$i23, in_$p27, in_$i28, in_$i29, in_$i30, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$p64, in_$p65, in_$i66, in_$i24, in_$i25, in_$i67, in_$i68, in_$i13, in_$i14, in_$i69, in_$i12, in_$i70, in_$i71, in_$p72, in_$i73, in_$i74, in_$i75, in_$p77, in_$p78, in_$p79, in_$i80, in_$p81, in_$i82, in_$p84, in_$i85, in_$i86, in_$p87, in_vslice_dummy_var_58, in_vslice_dummy_var_59;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1180;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    out_$i7, out_$p8, out_$i9 := out_$i86, out_$p87, out_$i85;
    goto corral_source_split_1285_dummy;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref(out_$p8, $mul.ref(1, 8));
    goto corral_source_split_1285;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i32(out_$i7, 1);
    call {:si_unique_call 267} {:cexpr "i"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_1284;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i32($M.11, out_$p84);
    call {:si_unique_call 266} {:cexpr "last_bw"} boogie_si_record_i32(out_$i85);
    goto corral_source_split_1283;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1282;

  $bb37:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} out_vslice_dummy_var_59 := printk.ref.ref.i32.i32(.str.34, out_$p78, out_$i80, out_$i82);
    goto corral_source_split_1280;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.11, out_$p81);
    goto corral_source_split_1279;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1278;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.10, out_$p79);
    goto corral_source_split_1277;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p8, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1276;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(out_$p77);
    goto corral_source_split_1275;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_1274;

  $bb36:
    assume out_$i75 == 1;
    goto corral_source_split_1273;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    out_$i75 := $sgt.i32(out_$i74, 2);
    goto corral_source_split_1271;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i74 := $M.0;
    goto corral_source_split_1270;

  $bb33:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    out_$i71, out_$p72, out_$i73 := out_$i7, out_$p8, out_$i9;
    assume true;
    goto $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i12, 0);
    goto corral_source_split_1261;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb6:
    assume {:verifier.code 0} true;
    assume !(out_$i11 == 1);
    goto $bb7;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i69;
    goto $bb7;

  $bb30:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1259;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    out_$i69 := out_$i25;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i67, in_$i6);
    goto corral_source_split_1203;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i24, 1);
    call {:si_unique_call 258} {:cexpr "j"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_1202;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1201;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    out_$i24, out_$i25 := out_$i14, out_$i66;
    goto $bb12;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    out_$i24, out_$i25 := out_$i14, out_$i13;
    goto $bb12;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    out_$i24, out_$i25 := out_$i14, out_$i13;
    goto $bb12;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    out_$i24, out_$i25 := out_$i14, out_$i13;
    goto $bb12;

  $bb10:
    assume out_$i23 == 1;
    goto corral_source_split_1199;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i64(out_$i22, 0);
    goto corral_source_split_1197;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_1196;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} out_$p21 := alt_xfer(out_$p18, 1, out_$i20);
    goto corral_source_split_1195;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.1, out_$p19);
    goto corral_source_split_1194;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(4836, 1));
    goto corral_source_split_1193;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p16, $mul.ref(out_$i17, 40));
    goto corral_source_split_1192;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i14);
    goto corral_source_split_1191;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.1, out_$p15);
    goto corral_source_split_1190;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1560)), $mul.ref(0, 1));
    goto corral_source_split_1189;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb8:
    call out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p27, out_$i28, out_$i29, out_$i30, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i24, out_$i25, out_$i67, out_$i68, out_$i13, out_$i14, out_$i69, out_vslice_dummy_var_58 := build_isoc_ep_tb_loop_$bb8(in_$p0, in_$p1, in_$i6, out_$p8, out_$i9, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p27, out_$i28, out_$i29, out_$i30, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i24, out_$i25, out_$i67, out_$i68, out_$i13, out_$i14, out_$i69, out_vslice_dummy_var_58);
    goto $bb8_last;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1187;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    out_$i13, out_$i14 := 0, 0;
    goto $bb8;

  $bb29:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i13, out_$i14 := out_$i25, out_$i67;
    assume false;
    return;

  $bb5:
    assume out_$i11 == 1;
    goto corral_source_split_1185;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    out_$i12 := 0;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(0, in_$i6);
    goto corral_source_split_1183;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, out_$p10, 480000000);
    goto corral_source_split_1182;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1181;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} out_vslice_dummy_var_58 := printk.ref.i32(.str.33, out_$i14);
    goto corral_source_split_1211;

  $bb14:
    assume out_$i30 == 1;
    goto corral_source_split_1210;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 0);
    goto corral_source_split_1208;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i32(out_$i28);
    goto corral_source_split_1207;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.1, out_$p27);
    goto corral_source_split_1206;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_1205;

  $bb11:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb23:
    assume out_$i60 == 1;
    goto corral_source_split_1245;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    out_$i60 := $ule.i32(out_$i59, out_$i9);
    goto corral_source_split_1243;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    out_$i59 := $lshr.i32(out_$i53, out_$i58);
    call {:si_unique_call 264} {:cexpr "bandwidth"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_1242;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i32(out_$i57, $sub.i32(0, 1));
    goto corral_source_split_1241;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i8.i32(out_$i56);
    goto corral_source_split_1240;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i8($M.1, out_$p55);
    goto corral_source_split_1239;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_1238;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1237;

  $bb21:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    out_$i53 := out_$i41;
    goto $bb22;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i52;
    goto $bb22;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i52 := $mul.i32(out_$i41, 8);
    call {:si_unique_call 263} {:cexpr "bandwidth"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_1228;

  $bb20:
    assume {:verifier.code 0} true;
    assume out_$i51 == 1;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i46 == 1;
    goto $bb18;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 3);
    goto corral_source_split_1226;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.1, out_$p44);
    goto corral_source_split_1225;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 2032)), $mul.ref(28, 1));
    goto corral_source_split_1224;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.1, out_$p42);
    goto corral_source_split_1223;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_1222;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    out_$i41 := $mul.i32(out_$i40, 1000);
    call {:si_unique_call 262} {:cexpr "bandwidth"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_1221;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    out_$i40 := $mul.i32(out_$i36, out_$i39);
    call {:si_unique_call 261} {:cexpr "psize"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_1220;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i38, 1);
    goto corral_source_split_1219;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    out_$i38 := $and.i32(out_$i37, 3);
    goto corral_source_split_1218;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    out_$i37 := $ashr.i32(out_$i35, 11);
    goto corral_source_split_1217;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    out_$i36 := $and.i32(out_$i35, 2047);
    goto corral_source_split_1216;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i16.i32(out_$i34);
    call {:si_unique_call 260} {:cexpr "psize"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_1215;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i16($M.1, out_$p33);
    goto corral_source_split_1214;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1213;

  $bb15:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i50, 5);
    goto corral_source_split_1235;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.1, out_$p49);
    goto corral_source_split_1234;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p48, $mul.ref(0, 2032)), $mul.ref(28, 1));
    goto corral_source_split_1233;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.1, out_$p47);
    goto corral_source_split_1232;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_1231;

  $bb19:
    assume !(out_$i46 == 1);
    goto corral_source_split_1230;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_1257;

  $bb27:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    out_$i66 := out_$i13;
    goto $bb28;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    out_$i66 := 1;
    goto $bb28;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, out_$p65, out_$i14);
    goto corral_source_split_1255;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p8, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1254;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, out_$p64, out_$i59);
    goto corral_source_split_1253;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1252;

  $bb26:
    assume out_$i63 == 1;
    goto corral_source_split_1251;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    out_$i63 := $ult.i32(out_$i59, out_$i62);
    goto corral_source_split_1249;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.11, out_$p61);
    goto corral_source_split_1248;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1247;

  $bb24:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_1285_dummy:
    call {:si_unique_call 1} out_$i7, out_$p8, out_$i9, out_$p10, out_$i11, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p27, out_$i28, out_$i29, out_$i30, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i24, out_$i25, out_$i67, out_$i68, out_$i13, out_$i14, out_$i69, out_$i12, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p77, out_$p78, out_$p79, out_$i80, out_$p81, out_$i82, out_$p84, out_$i85, out_$i86, out_$p87, out_vslice_dummy_var_58, out_vslice_dummy_var_59 := build_isoc_ep_tb_loop_$bb4(in_$p0, in_$p1, in_$i6, out_$i7, out_$p8, out_$i9, out_$p10, out_$i11, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p27, out_$i28, out_$i29, out_$i30, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i24, out_$i25, out_$i67, out_$i68, out_$i13, out_$i14, out_$i69, out_$i12, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p77, out_$p78, out_$p79, out_$i80, out_$p81, out_$i82, out_$p84, out_$i85, out_$i86, out_$p87, out_vslice_dummy_var_58, out_vslice_dummy_var_59);
    return;

  exit:
    return;
}



procedure build_isoc_ep_tb_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i6: i32, in_$i7: i32, in_$p8: ref, in_$i9: i32, in_$p10: ref, in_$i11: i1, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p27: ref, in_$i28: i8, in_$i29: i32, in_$i30: i1, in_$p33: ref, in_$i34: i16, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i32, in_$p55: ref, in_$i56: i8, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i24: i32, in_$i25: i32, in_$i67: i32, in_$i68: i1, in_$i13: i32, in_$i14: i32, in_$i69: i32, in_$i12: i32, in_$i70: i1, in_$i71: i32, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i80: i32, in_$p81: ref, in_$i82: i32, in_$p84: ref, in_$i85: i32, in_$i86: i32, in_$p87: ref, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: i32) returns (out_$i7: i32, out_$p8: ref, out_$i9: i32, out_$p10: ref, out_$i11: i1, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p27: ref, out_$i28: i8, out_$i29: i32, out_$i30: i1, out_$p33: ref, out_$i34: i16, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i32, out_$p55: ref, out_$i56: i8, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i24: i32, out_$i25: i32, out_$i67: i32, out_$i68: i1, out_$i13: i32, out_$i14: i32, out_$i69: i32, out_$i12: i32, out_$i70: i1, out_$i71: i32, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i80: i32, out_$p81: ref, out_$i82: i32, out_$p84: ref, out_$i85: i32, out_$i86: i32, out_$p87: ref, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: i32);
  modifies $M.11, $M.10;



implementation create_urbs_loop_$bb39(in_$i38: i32, in_$i39: i32, in_$p64: ref, in_$i111: i64, in_$p114: ref, in_$i115: i32, in_$i116: i64, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$i110: i32) returns (out_$i111: i64, out_$p114: ref, out_$i115: i32, out_$i116: i64, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$i110: i32)
{

  entry:
    out_$i111, out_$p114, out_$i115, out_$i116, out_$p119, out_$i120, out_$i121, out_$i110 := in_$i111, in_$p114, in_$i115, in_$i116, in_$p119, in_$i120, in_$i121, in_$i110;
    goto $bb39, exit;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_1491;

  $bb41:
    assume out_$i121 == 1;
    assume {:verifier.code 0} true;
    out_$i110 := out_$i120;
    goto $bb41_dummy;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    out_$i121 := $slt.i32(out_$i120, in_$i39);
    goto corral_source_split_1501;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    out_$i120 := $add.i32(out_$i110, 1);
    call {:si_unique_call 290} {:cexpr "i"} boogie_si_record_i32(out_$i120);
    goto corral_source_split_1500;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p119, out_$i115);
    goto corral_source_split_1499;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref($add.ref($add.ref(in_$p64, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i116, 16)), $mul.ref(0, 1));
    goto corral_source_split_1498;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    out_$i116 := $sext.i32.i64(out_$i110);
    goto corral_source_split_1497;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    out_$i115 := $mul.i32(in_$i38, out_$i110);
    goto corral_source_split_1496;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p114, in_$i38);
    goto corral_source_split_1495;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref($add.ref($add.ref(in_$p64, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i111, 16)), $mul.ref(4, 1));
    goto corral_source_split_1494;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i111 := $sext.i32.i64(out_$i110);
    goto corral_source_split_1493;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb41_dummy:
    call {:si_unique_call 1} out_$i111, out_$p114, out_$i115, out_$i116, out_$p119, out_$i120, out_$i121, out_$i110 := create_urbs_loop_$bb39(in_$i38, in_$i39, in_$p64, out_$i111, out_$p114, out_$i115, out_$i116, out_$p119, out_$i120, out_$i121, out_$i110);
    return;

  exit:
    return;
}



procedure create_urbs_loop_$bb39(in_$i38: i32, in_$i39: i32, in_$p64: ref, in_$i111: i64, in_$p114: ref, in_$i115: i32, in_$i116: i64, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$i110: i32) returns (out_$i111: i64, out_$p114: ref, out_$i115: i32, out_$i116: i64, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$i110: i32);
  modifies $M.1;



implementation create_urbs_loop_$bb25(in_$p0: ref, in_$p1: ref, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$i69: i64, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p87: ref, in_$p88: ref, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$p93: ref, in_$i94: i8, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$p98: ref, in_$p99: ref, in_$p101: ref, in_$i102: i8, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i1, in_$i111: i64, in_$p114: ref, in_$i115: i32, in_$i116: i64, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$i110: i32, in_$p122: ref, in_$p123: ref, in_$p125: ref, in_$i126: i8, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i1, in_$i63: i32) returns (out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$i69: i64, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p87: ref, out_$p88: ref, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$p93: ref, out_$i94: i8, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$p98: ref, out_$p99: ref, out_$p101: ref, out_$i102: i8, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i1, out_$i111: i64, out_$p114: ref, out_$i115: i32, out_$i116: i64, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$i110: i32, out_$p122: ref, out_$p123: ref, out_$p125: ref, out_$i126: i8, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i1, out_$i63: i32)
{

  entry:
    out_$p64, out_$i65, out_$i66, out_$i69, out_$p71, out_$p72, out_$p73, out_$i74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p83, out_$p84, out_$p85, out_$p87, out_$p88, out_$i89, out_$p90, out_$p91, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i111, out_$p114, out_$i115, out_$i116, out_$p119, out_$i120, out_$i121, out_$i110, out_$p122, out_$p123, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i63 := in_$p64, in_$i65, in_$i66, in_$i69, in_$p71, in_$p72, in_$p73, in_$i74, in_$p75, in_$p76, in_$p77, in_$p78, in_$p79, in_$i80, in_$i81, in_$p83, in_$p84, in_$p85, in_$p87, in_$p88, in_$i89, in_$p90, in_$p91, in_$p93, in_$i94, in_$i95, in_$i96, in_$i97, in_$p98, in_$p99, in_$p101, in_$i102, in_$i103, in_$i104, in_$i105, in_$p106, in_$p107, in_$p108, in_$i109, in_$i111, in_$p114, in_$i115, in_$i116, in_$p119, in_$i120, in_$i121, in_$i110, in_$p122, in_$p123, in_$p125, in_$i126, in_$i127, in_$i128, in_$i129, in_$p130, in_$p131, in_$p132, in_$i133, in_$i134, in_$i63;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_1410;

  $bb45:
    assume out_$i134 == 1;
    assume {:verifier.code 0} true;
    out_$i63 := out_$i133;
    goto $bb45_dummy;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    out_$i134 := $slt.i32(out_$i133, in_$i37);
    goto corral_source_split_1506;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i133 := $add.i32(out_$i63, 1);
    call {:si_unique_call 291} {:cexpr "n"} boogie_si_record_i32(out_$i133);
    goto corral_source_split_1505;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p132, bulk_irq);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i109 == 1);
    goto $bb38;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb42:
    assume !(out_$i121 == 1);
    goto corral_source_split_1503;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    out_$i121 := $slt.i32(out_$i120, in_$i39);
    goto corral_source_split_1501;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    out_$i120 := $add.i32(out_$i110, 1);
    call {:si_unique_call 290} {:cexpr "i"} boogie_si_record_i32(out_$i120);
    goto corral_source_split_1500;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p119, out_$i115);
    goto corral_source_split_1499;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref($add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i116, 16)), $mul.ref(0, 1));
    goto corral_source_split_1498;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    out_$i116 := $sext.i32.i64(out_$i110);
    goto corral_source_split_1497;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    out_$i115 := $mul.i32(in_$i38, out_$i110);
    goto corral_source_split_1496;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p114, in_$i38);
    goto corral_source_split_1495;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref($add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i111, 16)), $mul.ref(4, 1));
    goto corral_source_split_1494;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i111 := $sext.i32.i64(out_$i110);
    goto corral_source_split_1493;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb39:
    call out_$i111, out_$p114, out_$i115, out_$i116, out_$p119, out_$i120, out_$i121, out_$i110 := create_urbs_loop_$bb39(in_$i38, in_$i39, out_$p64, out_$i111, out_$p114, out_$i115, out_$i116, out_$p119, out_$i120, out_$i121, out_$i110);
    goto $bb39_last;

  $bb39_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1491;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    out_$i110 := 0;
    goto $bb39;

  $bb41:
    assume out_$i121 == 1;
    assume {:verifier.code 0} true;
    out_$i110 := out_$i120;
    assume false;
    return;

  $bb36:
    assume out_$i109 == 1;
    goto corral_source_split_1489;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    out_$i109 := $slt.i32(0, in_$i39);
    goto corral_source_split_1473;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p108, in_$i39);
    goto corral_source_split_1472;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1471;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p107, isoc_irq);
    goto corral_source_split_1470;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1469;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p106, out_$i105);
    goto corral_source_split_1468;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_1467;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    out_$i105 := $shl.i32(1, out_$i104);
    goto corral_source_split_1466;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    out_$i104 := $add.i32(out_$i103, $sub.i32(0, 1));
    goto corral_source_split_1465;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i8.i32(out_$i102);
    goto corral_source_split_1464;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i8($M.1, out_$p101);
    goto corral_source_split_1463;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_1462;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p99, 6);
    goto corral_source_split_1461;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1460;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p98, out_$i97);
    goto corral_source_split_1459;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1458;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    out_$i97 := $or.i32(out_$i96, 128);
    goto corral_source_split_1457;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} out_$i96 := __create_pipe(out_$p91, out_$i95);
    call {:si_unique_call 287} {:cexpr "tmp"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_1456;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i8.i32(out_$i94);
    goto corral_source_split_1455;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i8($M.1, out_$p93);
    goto corral_source_split_1454;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1453;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.1, out_$p90);
    goto corral_source_split_1452;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_1451;

  $bb34:
    assume out_$i89 == 1;
    goto corral_source_split_1450;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i32(in_$i39, 0);
    goto corral_source_split_1448;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p88, in_$i40);
    goto corral_source_split_1447;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1446;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p87, in_$p0);
    goto corral_source_split_1445;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1444;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    goto corral_source_split_1443;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p85, out_$p84);
    goto corral_source_split_1442;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1441;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.1, out_$p83);
    goto corral_source_split_1440;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_1439;

  $bb32:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i64(out_$i80, 0);
    goto corral_source_split_1434;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    out_$i80 := $p2i.ref.i64(out_$p79);
    goto corral_source_split_1433;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.1, out_$p78);
    goto corral_source_split_1432;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1431;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p77, out_$p76);
    goto corral_source_split_1430;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1429;

  SeqInstr_192:
    goto corral_source_split_1428;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} out_$p76 := ldv_usb_alloc_coherent_111(out_$p73, out_$i74, 208, out_$p75);
    goto SeqInstr_191;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_1427;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i32.i64(in_$i40);
    goto corral_source_split_1426;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.1, out_$p72);
    goto corral_source_split_1425;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_1424;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p71, out_$p64);
    goto corral_source_split_1423;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2608, 1)), $mul.ref(out_$i69, 8));
    goto corral_source_split_1422;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i32.i64(out_$i63);
    goto corral_source_split_1421;

  $bb28:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i64(out_$i65, 0);
    goto corral_source_split_1414;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    out_$i65 := $p2i.ref.i64(out_$p64);
    goto corral_source_split_1413;

  SeqInstr_189:
    goto corral_source_split_1412;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} out_$p64 := ldv_usb_alloc_urb_110(in_$i39, 208);
    goto SeqInstr_188;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1487;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p131, 4);
    goto corral_source_split_1486;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1485;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p130, out_$i129);
    goto corral_source_split_1484;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1483;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    out_$i129 := $or.i32(out_$i128, $sub.i32(0, 1073741696));
    goto corral_source_split_1482;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} out_$i128 := __create_pipe(out_$p123, out_$i127);
    call {:si_unique_call 289} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i128);
    goto corral_source_split_1481;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    out_$i127 := $zext.i8.i32(out_$i126);
    goto corral_source_split_1480;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i8($M.1, out_$p125);
    goto corral_source_split_1479;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1478;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.1, out_$p122);
    goto corral_source_split_1477;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2200, 1));
    goto corral_source_split_1476;

  $bb35:
    assume !(out_$i89 == 1);
    goto corral_source_split_1475;

  $bb45_dummy:
    call {:si_unique_call 1} out_$p64, out_$i65, out_$i66, out_$i69, out_$p71, out_$p72, out_$p73, out_$i74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p83, out_$p84, out_$p85, out_$p87, out_$p88, out_$i89, out_$p90, out_$p91, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i111, out_$p114, out_$i115, out_$i116, out_$p119, out_$i120, out_$i121, out_$i110, out_$p122, out_$p123, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i63 := create_urbs_loop_$bb25(in_$p0, in_$p1, in_$i37, in_$i38, in_$i39, in_$i40, out_$p64, out_$i65, out_$i66, out_$i69, out_$p71, out_$p72, out_$p73, out_$i74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p83, out_$p84, out_$p85, out_$p87, out_$p88, out_$i89, out_$p90, out_$p91, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i111, out_$p114, out_$i115, out_$i116, out_$p119, out_$i120, out_$i121, out_$i110, out_$p122, out_$p123, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i63);
    return;

  exit:
    return;
}



procedure create_urbs_loop_$bb25(in_$p0: ref, in_$p1: ref, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$i69: i64, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p87: ref, in_$p88: ref, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$p93: ref, in_$i94: i8, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$p98: ref, in_$p99: ref, in_$p101: ref, in_$i102: i8, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i1, in_$i111: i64, in_$p114: ref, in_$i115: i32, in_$i116: i64, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$i110: i32, in_$p122: ref, in_$p123: ref, in_$p125: ref, in_$i126: i8, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i1, in_$i63: i32) returns (out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$i69: i64, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p87: ref, out_$p88: ref, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$p93: ref, out_$i94: i8, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$p98: ref, out_$p99: ref, out_$p101: ref, out_$i102: i8, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i1, out_$i111: i64, out_$p114: ref, out_$i115: i32, out_$i116: i64, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$i110: i32, out_$p122: ref, out_$p123: ref, out_$p125: ref, out_$i126: i8, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i1, out_$i63: i32);
  modifies $M.1, $M.5, assertsPassed, $M.4;



implementation fill_frame_loop_$bb15(in_$p0: ref, in_$p1: ref, in_$p22: ref, in_$p23: ref, in_$i27: i64, in_$p30: ref, in_$i31: i32, in_$i32: i64, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p39: ref, in_$i41: i1, in_$p42: ref, in_$i43: i8, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$p55: ref, in_$i56: i32, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p63: ref, in_$i64: i32, in_$i65: i64, in_$p66: ref, in_$i40: i32, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i26: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32) returns (out_$i27: i64, out_$p30: ref, out_$i31: i32, out_$i32: i64, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p39: ref, out_$i41: i1, out_$p42: ref, out_$i43: i8, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$p55: ref, out_$i56: i32, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p63: ref, out_$i64: i32, out_$i65: i64, out_$p66: ref, out_$i40: i32, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i26: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32)
{

  entry:
    out_$i27, out_$p30, out_$i31, out_$i32, out_$p35, out_$i36, out_$i37, out_$p39, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p50, out_$p51, out_$i52, out_$p55, out_$i56, out_$p58, out_$p59, out_$i60, out_$p63, out_$i64, out_$i65, out_$p66, out_$i40, out_$i67, out_$i68, out_$i69, out_$i26, out_vslice_dummy_var_73, out_vslice_dummy_var_74 := in_$i27, in_$p30, in_$i31, in_$i32, in_$p35, in_$i36, in_$i37, in_$p39, in_$i41, in_$p42, in_$i43, in_$i44, in_$i45, in_$p46, in_$i47, in_$i48, in_$p50, in_$p51, in_$i52, in_$p55, in_$i56, in_$p58, in_$p59, in_$i60, in_$p63, in_$i64, in_$i65, in_$p66, in_$i40, in_$i67, in_$i68, in_$i69, in_$i26, in_vslice_dummy_var_73, in_vslice_dummy_var_74;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1727;

  $bb30:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i26 := out_$i67;
    goto $bb30_dummy;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i67, out_$i68);
    goto corral_source_split_1745;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.1, in_$p23);
    goto corral_source_split_1744;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i40, 1);
    call {:si_unique_call 340} {:cexpr "i"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_1743;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1742;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i26;
    goto $bb19;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i26;
    goto $bb19;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i26;
    goto $bb19;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p39, 0);
    goto corral_source_split_1740;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(4362, 1));
    goto corral_source_split_1739;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} out_vslice_dummy_var_73 := printk.ref.i32.i32.i32(.str.43, out_$i26, out_$i31, out_$i36);
    goto corral_source_split_1738;

  $bb17:
    assume out_$i37 == 1;
    goto corral_source_split_1737;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_1735;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.1, out_$p35);
    call {:si_unique_call 338} {:cexpr "st"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_1734;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i32, 16)), $mul.ref(12, 1));
    goto corral_source_split_1733;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i26);
    goto corral_source_split_1732;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.1, out_$p30);
    call {:si_unique_call 337} {:cexpr "len"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_1731;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i27, 16)), $mul.ref(8, 1));
    goto corral_source_split_1730;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i26);
    goto corral_source_split_1729;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb24:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p46, 1);
    goto corral_source_split_1757;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(4363, 1));
    goto corral_source_split_1756;

  $bb23:
    assume out_$i45 == 1;
    goto corral_source_split_1755;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 0);
    goto corral_source_split_1753;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i8.i32(out_$i43);
    goto corral_source_split_1752;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i8($M.1, out_$p42);
    goto corral_source_split_1751;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(4363, 1));
    goto corral_source_split_1750;

  $bb21:
    assume out_$i41 == 1;
    goto corral_source_split_1749;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i31, 0);
    goto corral_source_split_1747;

  $bb18:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(out_$p59, $mul.ref(out_$i65, 1));
    call {:si_unique_call 342} devirtbounce.5(in_$p22, in_$p0, out_$p66, out_$i31);
    goto corral_source_split_1776;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i32.i64(out_$i64);
    goto corral_source_split_1775;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.1, out_$p63);
    goto corral_source_split_1774;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i60, 16)), $mul.ref(0, 1));
    goto corral_source_split_1773;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i26);
    goto corral_source_split_1772;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.1, out_$p58);
    goto corral_source_split_1771;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1770;

  $bb28:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} out_vslice_dummy_var_74 := printk.ref.ref.i32.i32.i32(.str.44, out_$p51, out_$i26, out_$i56, out_$i31);
    goto corral_source_split_1768;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.1, out_$p55);
    goto corral_source_split_1767;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i52, 16)), $mul.ref(0, 1));
    goto corral_source_split_1766;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i32.i64(out_$i26);
    goto corral_source_split_1765;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_1764;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(1848, 1)), $mul.ref(104, 1));
    goto corral_source_split_1763;

  $bb27:
    assume out_$i48 == 1;
    goto corral_source_split_1762;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    out_$i48 := $sgt.i32(out_$i47, 4);
    goto corral_source_split_1760;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i47 := $M.0;
    goto corral_source_split_1759;

  $bb22:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb30_dummy:
    call {:si_unique_call 1} out_$i27, out_$p30, out_$i31, out_$i32, out_$p35, out_$i36, out_$i37, out_$p39, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p50, out_$p51, out_$i52, out_$p55, out_$i56, out_$p58, out_$p59, out_$i60, out_$p63, out_$i64, out_$i65, out_$p66, out_$i40, out_$i67, out_$i68, out_$i69, out_$i26, out_vslice_dummy_var_73, out_vslice_dummy_var_74 := fill_frame_loop_$bb15(in_$p0, in_$p1, in_$p22, in_$p23, out_$i27, out_$p30, out_$i31, out_$i32, out_$p35, out_$i36, out_$i37, out_$p39, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p50, out_$p51, out_$i52, out_$p55, out_$i56, out_$p58, out_$p59, out_$i60, out_$p63, out_$i64, out_$i65, out_$p66, out_$i40, out_$i67, out_$i68, out_$i69, out_$i26, out_vslice_dummy_var_73, out_vslice_dummy_var_74);
    return;

  exit:
    return;
}



procedure fill_frame_loop_$bb15(in_$p0: ref, in_$p1: ref, in_$p22: ref, in_$p23: ref, in_$i27: i64, in_$p30: ref, in_$i31: i32, in_$i32: i64, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p39: ref, in_$i41: i1, in_$p42: ref, in_$i43: i8, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$p55: ref, in_$i56: i32, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p63: ref, in_$i64: i32, in_$i65: i64, in_$p66: ref, in_$i40: i32, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i26: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32) returns (out_$i27: i64, out_$p30: ref, out_$i31: i32, out_$i32: i64, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p39: ref, out_$i41: i1, out_$p42: ref, out_$i43: i8, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$p55: ref, out_$i56: i32, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p63: ref, out_$i64: i32, out_$i65: i64, out_$p66: ref, out_$i40: i32, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i26: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32);
  modifies $M.1;



implementation dev_read_loop_$bb14(in_$p0: ref, in_$p4: ref, in_$p5: ref, in_$p10: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i51: i32, in_$i50: i32, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i64, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$p71: ref, in_$i72: i64, in_$p73: ref, in_$i74: i64, in_$i75: i1, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i88: i32, in_$i89: i1, in_cmdloc_dummy_var_14: [ref]i8, in_cmdloc_dummy_var_15: [ref]i8) returns (out_$i51: i32, out_$i50: i32, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i64, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$p71: ref, out_$i72: i64, out_$p73: ref, out_$i74: i64, out_$i75: i1, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i88: i32, out_$i89: i1, out_cmdloc_dummy_var_14: [ref]i8, out_cmdloc_dummy_var_15: [ref]i8)
{

  entry:
    out_$i51, out_$i50, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i88, out_$i89, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15 := in_$i51, in_$i50, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$p67, in_$p71, in_$i72, in_$p73, in_$i74, in_$i75, in_$p76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i88, in_$i89, in_cmdloc_dummy_var_14, in_cmdloc_dummy_var_15;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb33:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    out_$i50 := out_$i65;
    goto $bb33_dummy;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i88;
    assume true;
    goto $bb33;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i32(out_$i88, 0);
    goto corral_source_split_1977;

  SeqInstr_249:
    call {:si_unique_call 380} {:cexpr "ret"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_1976;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} out_$i88 := vidioc_dqbuf(in_$p0, in_$p46, in_$p4);
    goto SeqInstr_248;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, in_$p45, 7);
    goto corral_source_split_1975;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, in_$p44, 1);
    goto corral_source_split_1974;

  $bb32:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_14 := $M.1;
    call {:si_unique_call 378} out_cmdloc_dummy_var_15 := $memset.i8(out_cmdloc_dummy_var_14, in_$p43, 0, 88, $zext.i32.i64(8), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_15;
    goto corral_source_split_1973;

  $bb28:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    out_$i80 := out_$i78;
    assume true;
    goto $bb28;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_1960;

  SeqInstr_246:
    call {:si_unique_call 376} {:cexpr "ret"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_1959;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} out_$i78 := vidioc_qbuf(in_$p0, out_$p77, in_$p4);
    goto SeqInstr_245;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(in_$p10);
    goto corral_source_split_1958;

  $bb25:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    out_$p76 := out_$p64;
    assume true;
    goto $bb25;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    out_$i75 := $sge.i64(out_$i72, out_$i74);
    goto corral_source_split_1954;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i64($M.27, out_$p73);
    goto corral_source_split_1953;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1952;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i64($M.1, out_$p71);
    goto corral_source_split_1951;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($add.ref($add.ref(out_$p60, $mul.ref(out_$i63, 104)), $mul.ref(16, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1950;

  $bb21:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    out_$p67 := out_$p64;
    assume true;
    goto $bb21;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i65, 0);
    goto corral_source_split_1940;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    out_$i65 := $sub.i32(out_$i50, 1);
    call {:si_unique_call 374} {:cexpr "n"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_1939;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(out_$p60, $mul.ref(out_$i63, 104));
    goto corral_source_split_1938;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i32.i64(out_$i62);
    goto corral_source_split_1937;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.1, out_$p61);
    goto corral_source_split_1936;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p4, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_1935;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_1934;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p10, $mul.ref(0, 4848)), $mul.ref(2656, 1));
    goto corral_source_split_1933;

  $bb33_dummy:
    call {:si_unique_call 1} out_$i51, out_$i50, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i88, out_$i89, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15 := dev_read_loop_$bb14(in_$p0, in_$p4, in_$p5, in_$p10, in_$p43, in_$p44, in_$p45, in_$p46, out_$i51, out_$i50, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i88, out_$i89, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15);
    return;

  exit:
    return;
}



procedure dev_read_loop_$bb14(in_$p0: ref, in_$p4: ref, in_$p5: ref, in_$p10: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i51: i32, in_$i50: i32, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i64, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$p71: ref, in_$i72: i64, in_$p73: ref, in_$i74: i64, in_$i75: i1, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i88: i32, in_$i89: i1, in_cmdloc_dummy_var_14: [ref]i8, in_cmdloc_dummy_var_15: [ref]i8) returns (out_$i51: i32, out_$i50: i32, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i64, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$p71: ref, out_$i72: i64, out_$p73: ref, out_$i74: i64, out_$i75: i1, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i88: i32, out_$i89: i1, out_cmdloc_dummy_var_14: [ref]i8, out_cmdloc_dummy_var_15: [ref]i8);
  modifies $M.1, $M.33, $M.31, $M.34, $M.35, $M.8, $CurrAddr, assertsPassed, $M.10, $M.11, $M.5, $M.4, $M.32;



implementation dev_mmap_loop_$bb45(in_$p1: ref, in_$p99: ref, in_$p100: ref, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i64, in_$i105: i64, in_$i106: i64, in_$i107: i1, in_$i96: i64, in_$i97: i64, in_$i98: i64) returns (out_$p99: ref, out_$p100: ref, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i64, out_$i105: i64, out_$i106: i64, out_$i107: i1, out_$i96: i64, out_$i97: i64, out_$i98: i64)
{

  entry:
    out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i96, out_$i97, out_$i98 := in_$p99, in_$p100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i96, in_$i97, in_$i98;
    goto $bb45, exit;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2208;

  $bb50:
    assume out_$i107 == 1;
    assume {:verifier.code 0} true;
    out_$i96, out_$i97, out_$i98 := out_$i106, out_$i104, out_$i105;
    goto $bb50_dummy;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i64(out_$i106, 0);
    goto corral_source_split_2220;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    out_$i106 := $sub.i64(out_$i96, 4096);
    call {:si_unique_call 429} {:cexpr "size"} boogie_si_record_i64(out_$i106);
    goto corral_source_split_2219;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    out_$i105 := $add.i64(out_$i98, 4096);
    call {:si_unique_call 428} {:cexpr "addr"} boogie_si_record_i64(out_$i105);
    goto corral_source_split_2218;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i104 := $add.i64(out_$i97, 4096);
    call {:si_unique_call 427} {:cexpr "start"} boogie_si_record_i64(out_$i104);
    goto corral_source_split_2217;

  $bb48:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    out_$i103 := out_$i101;
    assume true;
    goto $bb48;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i101, 0);
    goto corral_source_split_2213;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} out_$i101 := vm_insert_page(in_$p1, out_$i97, out_$p100);
    call {:si_unique_call 426} {:cexpr "ret"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_2212;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} out_$p100 := vmalloc_to_page(out_$p99);
    goto corral_source_split_2211;

  $bb46:
    assume {:verifier.code 0} true;
    out_$p99 := $i2p.i64.ref(out_$i98);
    goto corral_source_split_2210;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb50_dummy:
    call {:si_unique_call 1} out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i96, out_$i97, out_$i98 := dev_mmap_loop_$bb45(in_$p1, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i96, out_$i97, out_$i98);
    return;

  exit:
    return;
}



procedure dev_mmap_loop_$bb45(in_$p1: ref, in_$p99: ref, in_$p100: ref, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i64, in_$i105: i64, in_$i106: i64, in_$i107: i1, in_$i96: i64, in_$i97: i64, in_$i98: i64) returns (out_$p99: ref, out_$p100: ref, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i64, out_$i105: i64, out_$i106: i64, out_$i107: i1, out_$i96: i64, out_$i97: i64, out_$i98: i64);



implementation dev_mmap_loop_$bb15(in_$p1: ref, in_$p3: ref, in_$p29: ref, in_$i34: i64, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i48: i64, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$i56: i64, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$i60: i32, in_$i65: i32, in_$i66: i8, in_$i67: i32, in_$i68: i1, in_$i33: i32) returns (out_$i34: i64, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i48: i64, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$i56: i64, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$i60: i32, out_$i65: i32, out_$i66: i8, out_$i67: i32, out_$i68: i1, out_$i33: i32)
{

  entry:
    out_$i34, out_$p38, out_$i39, out_$i40, out_$i48, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i65, out_$i66, out_$i67, out_$i68, out_$i33 := in_$i34, in_$p38, in_$i39, in_$i40, in_$i48, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$i60, in_$i65, in_$i66, in_$i67, in_$i68, in_$i33;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2130;

  $bb27:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := out_$i65;
    goto $bb27_dummy;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i65, out_$i67);
    goto corral_source_split_2169;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i8.i32(out_$i66);
    goto corral_source_split_2168;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i8($M.1, in_$p29);
    goto corral_source_split_2167;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i33, 1);
    call {:si_unique_call 420} {:cexpr "i"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_2166;

  $bb25:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i33;
    assume true;
    goto $bb25;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i64(out_$i56, out_$i58);
    goto corral_source_split_2158;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i64($M.1, out_$p57);
    goto corral_source_split_2157;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_2156;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i32.i64(out_$i55);
    goto corral_source_split_2155;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    out_$i55 := $lshr.i32(out_$i54, 12);
    goto corral_source_split_2154;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.1, out_$p53);
    goto corral_source_split_2153;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_2152;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 4848)), $mul.ref(2656, 1)), $mul.ref(out_$i48, 104)), $mul.ref(16, 1)), $mul.ref(64, 1));
    goto corral_source_split_2151;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i33);
    goto corral_source_split_2150;

  $bb18:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 1);
    goto corral_source_split_2135;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.1, out_$p38);
    goto corral_source_split_2134;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 4848)), $mul.ref(2656, 1)), $mul.ref(out_$i34, 104)), $mul.ref(16, 1)), $mul.ref(60, 1));
    goto corral_source_split_2133;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i33);
    goto corral_source_split_2132;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i34, out_$p38, out_$i39, out_$i40, out_$i48, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i65, out_$i66, out_$i67, out_$i68, out_$i33 := dev_mmap_loop_$bb15(in_$p1, in_$p3, in_$p29, out_$i34, out_$p38, out_$i39, out_$i40, out_$i48, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i65, out_$i66, out_$i67, out_$i68, out_$i33);
    return;

  exit:
    return;
}



procedure dev_mmap_loop_$bb15(in_$p1: ref, in_$p3: ref, in_$p29: ref, in_$i34: i64, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i48: i64, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$i56: i64, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$i60: i32, in_$i65: i32, in_$i66: i8, in_$i67: i32, in_$i68: i1, in_$i33: i32) returns (out_$i34: i64, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i48: i64, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$i56: i64, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$i60: i32, out_$i65: i32, out_$i66: i8, out_$i67: i32, out_$i68: i1, out_$i33: i32);



implementation frame_free_loop_$bb9(in_$p0: ref, in_$p14: ref, in_$i19: i64, in_$p22: ref, in_$i23: i32, in_$i24: i8, in_$i25: i32, in_$i26: i1, in_$i18: i32) returns (out_$i19: i64, out_$p22: ref, out_$i23: i32, out_$i24: i8, out_$i25: i32, out_$i26: i1, out_$i18: i32)
{

  entry:
    out_$i19, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i18 := in_$i19, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i18;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2387;

  $bb11:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := out_$i23;
    goto $bb11_dummy;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i23, out_$i25);
    goto corral_source_split_2395;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i8.i32(out_$i24);
    goto corral_source_split_2394;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i8($M.1, in_$p14);
    goto corral_source_split_2393;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i18, 1);
    call {:si_unique_call 469} {:cexpr "i"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_2392;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p22, $0.ref);
    goto corral_source_split_2391;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2656, 1)), $mul.ref(out_$i19, 104)), $mul.ref(0, 1));
    goto corral_source_split_2390;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i18);
    goto corral_source_split_2389;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i19, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i18 := frame_free_loop_$bb9(in_$p0, in_$p14, out_$i19, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i18);
    return;

  exit:
    return;
}



procedure frame_free_loop_$bb9(in_$p0: ref, in_$p14: ref, in_$i19: i64, in_$p22: ref, in_$i23: i32, in_$i24: i8, in_$i25: i32, in_$i26: i1, in_$i18: i32) returns (out_$i19: i64, out_$p22: ref, out_$i23: i32, out_$i24: i8, out_$i25: i32, out_$i26: i1, out_$i18: i32);
  modifies $M.1;



implementation read_alloc_loop_$bb20(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p38: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i54: i32, in_$i55: i8, in_$i56: i32, in_$i57: i1, in_$i42: i32) returns (out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i54: i32, out_$i55: i8, out_$i56: i32, out_$i57: i1, out_$i42: i32)
{

  entry:
    out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i54, out_$i55, out_$i56, out_$i57, out_$i42 := in_$p43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i54, in_$i55, in_$i56, in_$i57, in_$i42;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_2622;

  $bb28:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := out_$i54;
    goto $bb28_dummy;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    out_$i57 := $slt.i32(out_$i54, out_$i56);
    goto corral_source_split_2642;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i8.i32(out_$i55);
    goto corral_source_split_2641;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i8($M.1, in_$p38);
    goto corral_source_split_2640;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i42, 1);
    call {:si_unique_call 522} {:cexpr "i"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_2639;

  $bb23:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i45;
    assume true;
    goto $bb23;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_2628;

  SeqInstr_345:
    call {:si_unique_call 520} {:cexpr "ret"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_2627;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} out_$i45 := vidioc_qbuf(in_$p1, out_$p44, in_$p2);
    goto SeqInstr_344;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    out_$p44 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_2626;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p43, out_$i42);
    goto corral_source_split_2625;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2624;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i54, out_$i55, out_$i56, out_$i57, out_$i42 := read_alloc_loop_$bb20(in_$p0, in_$p1, in_$p2, in_$p38, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i54, out_$i55, out_$i56, out_$i57, out_$i42);
    return;

  exit:
    return;
}



procedure read_alloc_loop_$bb20(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p38: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i54: i32, in_$i55: i8, in_$i56: i32, in_$i57: i1, in_$i42: i32) returns (out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i54: i32, out_$i55: i8, out_$i56: i32, out_$i57: i1, out_$i42: i32);
  modifies $M.1, $M.31, assertsPassed;



implementation vidioc_reqbufs_loop_$bb38(in_$p4: ref, in_$p38: ref, in_$i43: i64, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i8, in_$i51: i32, in_$i52: i1, in_$i42: i32) returns (out_$i43: i64, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i8, out_$i51: i32, out_$i52: i1, out_$i42: i32)
{

  entry:
    out_$i43, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i42 := in_$i43, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i42;
    goto $bb38, exit;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_2759;

  $bb43:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := out_$i49;
    goto $bb43_dummy;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    out_$i52 := $slt.i32(out_$i49, out_$i51);
    goto corral_source_split_2771;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i8.i32(out_$i50);
    goto corral_source_split_2770;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i8($M.1, in_$p38);
    goto corral_source_split_2769;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i42, 1);
    call {:si_unique_call 537} {:cexpr "i"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_2768;

  $bb41:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_2764;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.1, out_$p46);
    goto corral_source_split_2763;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 4848)), $mul.ref(2656, 1)), $mul.ref(out_$i43, 104)), $mul.ref(8, 1));
    goto corral_source_split_2762;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i42);
    goto corral_source_split_2761;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb43_dummy:
    call {:si_unique_call 1} out_$i43, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i42 := vidioc_reqbufs_loop_$bb38(in_$p4, in_$p38, out_$i43, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i42);
    return;

  exit:
    return;
}



procedure vidioc_reqbufs_loop_$bb38(in_$p4: ref, in_$p38: ref, in_$i43: i64, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i8, in_$i51: i32, in_$i52: i1, in_$i42: i32) returns (out_$i43: i64, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i8, out_$i51: i32, out_$i52: i1, out_$i42: i32);



implementation frame_alloc_loop_$bb14(in_$p0: ref, in_$i2: i32, in_$i14: i32, in_$i16: i32, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p40: ref, in_$p42: ref, in_$p44: ref, in_$p46: ref, in_$p48: ref, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i34: i32) returns (out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p40: ref, out_$p42: ref, out_$p44: ref, out_$p46: ref, out_$p48: ref, out_$p50: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$i56: i64, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i34: i32)
{

  entry:
    out_$p35, out_$p36, out_$i37, out_$p40, out_$p42, out_$p44, out_$p46, out_$p48, out_$p50, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$p61, out_$p62, out_$i63, out_$i64, out_$i34 := in_$p35, in_$p36, in_$i37, in_$p40, in_$p42, in_$p44, in_$p46, in_$p48, in_$p50, in_$p52, in_$p53, in_$p54, in_$i55, in_$i56, in_$p57, in_$p58, in_$i59, in_$p61, in_$p62, in_$i63, in_$i64, in_$i34;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3106;

  $bb16:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := out_$i63;
    goto $bb16_dummy;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    out_$i64 := $ult.i32(out_$i63, in_$i16);
    goto corral_source_split_3138;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i34, 1);
    call {:si_unique_call 588} {:cexpr "i"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_3137;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p62, out_$i59);
    goto corral_source_split_3136;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(out_$p61);
    goto corral_source_split_3135;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($add.ref(out_$p36, $mul.ref(out_$i37, 104)), $mul.ref(16, 1)), $mul.ref(64, 1));
    goto corral_source_split_3134;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    out_$i59 := $mul.i32(out_$i34, in_$i14);
    goto corral_source_split_3133;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p58, out_$p57);
    goto corral_source_split_3132;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p36, $mul.ref(out_$i37, 104)), $mul.ref(0, 1));
    goto corral_source_split_3131;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref(out_$p54, $mul.ref(out_$i56, 1));
    goto corral_source_split_3130;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i32.i64(out_$i55);
    goto corral_source_split_3129;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    out_$i55 := $mul.i32(out_$i34, in_$i14);
    goto corral_source_split_3128;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.1, out_$p53);
    goto corral_source_split_3127;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2648, 1));
    goto corral_source_split_3126;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p52, 0);
    goto corral_source_split_3125;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref(out_$p36, $mul.ref(out_$i37, 104)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_3124;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p50, in_$i2);
    goto corral_source_split_3123;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref(out_$p36, $mul.ref(out_$i37, 104)), $mul.ref(16, 1)), $mul.ref(60, 1));
    goto corral_source_split_3122;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p48, in_$i14);
    goto corral_source_split_3121;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref($add.ref(out_$p36, $mul.ref(out_$i37, 104)), $mul.ref(16, 1)), $mul.ref(72, 1));
    goto corral_source_split_3120;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p46, 1);
    goto corral_source_split_3119;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref($add.ref(out_$p36, $mul.ref(out_$i37, 104)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_3118;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p44, 0);
    goto corral_source_split_3117;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref(out_$p36, $mul.ref(out_$i37, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_3116;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p42, 1);
    goto corral_source_split_3115;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(out_$p36, $mul.ref(out_$i37, 104)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_3114;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p40, out_$i34);
    goto corral_source_split_3113;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(out_$p36, $mul.ref(out_$i37, 104)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3112;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    goto corral_source_split_3111;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i34);
    goto corral_source_split_3110;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p35);
    goto corral_source_split_3109;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2656, 1));
    goto corral_source_split_3108;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p35, out_$p36, out_$i37, out_$p40, out_$p42, out_$p44, out_$p46, out_$p48, out_$p50, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$p61, out_$p62, out_$i63, out_$i64, out_$i34 := frame_alloc_loop_$bb14(in_$p0, in_$i2, in_$i14, in_$i16, out_$p35, out_$p36, out_$i37, out_$p40, out_$p42, out_$p44, out_$p46, out_$p48, out_$p50, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$p61, out_$p62, out_$i63, out_$i64, out_$i34);
    return;

  exit:
    return;
}



procedure frame_alloc_loop_$bb14(in_$p0: ref, in_$i2: i32, in_$i14: i32, in_$i16: i32, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p40: ref, in_$p42: ref, in_$p44: ref, in_$p46: ref, in_$p48: ref, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i34: i32) returns (out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p40: ref, out_$p42: ref, out_$p44: ref, out_$p46: ref, out_$p48: ref, out_$p50: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$i56: i64, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i34: i32);
  modifies $M.1;



implementation vidioc_dqbuf_loop_$bb33(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$i47: i64, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i8, in_$i55: i1, in_$i56: i1, in_$i57: i64, in_$i58: i1, in_$i60: i1, in_$i59: i1, in_$i61: i32, in_$i62: i1, in_$i63: i64, in_$i65: i1, in_$i66: i64, in_$i67: i64) returns (out_$i47: i64, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i8, out_$i55: i1, out_$i56: i1, out_$i57: i64, out_$i58: i1, out_$i60: i1, out_$i59: i1, out_$i61: i32, out_$i62: i1, out_$i63: i64, out_$i65: i1, out_$i66: i64, out_$i67: i64)
{

  entry:
    out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i60, out_$i59, out_$i61, out_$i62, out_$i63, out_$i65, out_$i66, out_$i67 := in_$i47, in_$p48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i60, in_$i59, in_$i61, in_$i62, in_$i63, in_$i65, in_$i66, in_$i67;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_3293;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i67;
    goto corral_source_split_3328_dummy;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} out_$i67 := schedule_timeout(out_$i57);
    call {:si_unique_call 633} {:cexpr "__ret___0"} boogie_si_record_i64(out_$i67);
    goto corral_source_split_3328;

  $bb48:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i49;
    assume true;
    goto $bb48;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i64(out_$i49, 0);
    goto corral_source_split_3324;

  $bb44:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i57;
    assume true;
    goto $bb44;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i32(out_$i61, 0);
    goto corral_source_split_3313;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i1.i32(out_$i59);
    goto corral_source_split_3312;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_3311;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i60;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    assume out_$i58 == 1;
    goto $bb41;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    out_$i59 := 1;
    assume true;
    goto $bb40, $bb42;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    out_$i58 := $trunc.i8.i1(out_$i54);
    goto corral_source_split_3309;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_3308;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i47;
    goto $bb39;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    out_$i57 := 1;
    goto $bb39;

  $bb37:
    assume out_$i56 == 1;
    goto corral_source_split_3306;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i64(out_$i47, 0);
    goto corral_source_split_3304;

  $bb34:
    assume out_$i55 == 1;
    goto corral_source_split_3303;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    out_$i55 := $trunc.i8.i1(out_$i54);
    goto corral_source_split_3301;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i1.i8(out_$i53);
    call {:si_unique_call 630} {:cexpr "__cond"} boogie_si_record_i8(out_$i54);
    goto corral_source_split_3300;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i52, 0);
    goto corral_source_split_3299;

  SeqInstr_447:
    call {:si_unique_call 629} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_3298;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} out_$i52 := frame_ready(in_$p5, in_$p0, out_$i51);
    goto SeqInstr_446;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.1, out_$p50);
    goto corral_source_split_3297;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p2, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_3296;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} out_$i49 := prepare_to_wait_event(out_$p48, in_$p3, 1);
    call {:si_unique_call 627} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_3295;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p5, $mul.ref(0, 4848)), $mul.ref(4416, 1));
    goto corral_source_split_3294;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb36;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb36;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i64(out_$i57, 0);
    goto corral_source_split_3316;

  $bb42:
    assume !(out_$i58 == 1);
    goto corral_source_split_3315;

  corral_source_split_3328_dummy:
    call {:si_unique_call 1} out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i60, out_$i59, out_$i61, out_$i62, out_$i63, out_$i65, out_$i66, out_$i67 := vidioc_dqbuf_loop_$bb33(in_$p0, in_$p2, in_$p3, in_$p5, out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i60, out_$i59, out_$i61, out_$i62, out_$i63, out_$i65, out_$i66, out_$i67);
    return;

  exit:
    return;
}



procedure vidioc_dqbuf_loop_$bb33(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$i47: i64, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i8, in_$i55: i1, in_$i56: i1, in_$i57: i64, in_$i58: i1, in_$i60: i1, in_$i59: i1, in_$i61: i32, in_$i62: i1, in_$i63: i64, in_$i65: i1, in_$i66: i64, in_$i67: i64) returns (out_$i47: i64, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i8, out_$i55: i1, out_$i56: i1, out_$i57: i64, out_$i58: i1, out_$i60: i1, out_$i59: i1, out_$i61: i32, out_$i62: i1, out_$i63: i64, out_$i65: i1, out_$i66: i64, out_$i67: i64);
  modifies $M.31, assertsPassed;



implementation vidioc_dqbuf_loop_$bb11(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p16: ref, in_$i22: i32, in_$i21: i32, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i30: i64, in_$p31: ref, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i35: i8, in_$i36: i1, in_$i37: i1, in_$i38: i64, in_$i39: i1, in_$i41: i1, in_$i40: i1, in_$i42: i32, in_$i43: i1, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i8, in_$i55: i1, in_$i56: i1, in_$i57: i64, in_$i58: i1, in_$i60: i1, in_$i59: i1, in_$i61: i32, in_$i62: i1, in_$i63: i64, in_$i65: i1, in_$i66: i64, in_$i67: i64, in_$i64: i64, in_$p68: ref, in_$i69: i64, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$i78: i32, in_$i79: i1) returns (out_$i22: i32, out_$i21: i32, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i30: i64, out_$p31: ref, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i35: i8, out_$i36: i1, out_$i37: i1, out_$i38: i64, out_$i39: i1, out_$i41: i1, out_$i40: i1, out_$i42: i32, out_$i43: i1, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i8, out_$i55: i1, out_$i56: i1, out_$i57: i64, out_$i58: i1, out_$i60: i1, out_$i59: i1, out_$i61: i32, out_$i62: i1, out_$i63: i64, out_$i65: i1, out_$i66: i64, out_$i67: i64, out_$i64: i64, out_$p68: ref, out_$i69: i64, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$i78: i32, out_$i79: i1)
{

  entry:
    out_$i22, out_$i21, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i41, out_$i40, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i60, out_$i59, out_$i61, out_$i62, out_$i63, out_$i65, out_$i66, out_$i67, out_$i64, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79 := in_$i22, in_$i21, in_$i24, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i41, in_$i40, in_$i42, in_$i43, in_$i44, in_$p45, in_$p46, in_$i47, in_$p48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i60, in_$i59, in_$i61, in_$i62, in_$i63, in_$i65, in_$i66, in_$i67, in_$i64, in_$p68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$p74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb60:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    out_$i21 := out_$i78;
    goto $bb60_dummy;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i78;
    assume true;
    goto $bb60;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i78, 0);
    goto corral_source_split_3348;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} out_$i78 := frame_ready_nolock(in_$p5, in_$p0, out_$i77);
    call {:si_unique_call 638} {:cexpr "ret"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_3347;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i32($M.1, in_$p16);
    goto corral_source_split_3346;

  $bb58:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i32(out_$i75, 0);
    goto corral_source_split_3342;

  SeqInstr_450:
    call {:si_unique_call 636} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_3341;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} out_$i75 := ldv_mutex_lock_interruptible_135(out_$p74);
    goto SeqInstr_449;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p5, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_3340;

  $bb55:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i70, 0);
    goto corral_source_split_3336;

  $bb52:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i70;
    assume true;
    goto $bb52;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i70, 0);
    goto corral_source_split_3332;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    out_$i70 := $trunc.i64.i32(out_$i69);
    call {:si_unique_call 634} {:cexpr "ret"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_3331;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_3330;

  $bb32:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i69 := out_$i38;
    goto $bb50;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    out_$i69 := out_$i64;
    goto $bb50;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} finish_wait(out_$p68, in_$p3);
    goto corral_source_split_3322;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p5, $mul.ref(0, 4848)), $mul.ref(4416, 1));
    goto corral_source_split_3321;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_3320;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i66;
    goto $bb45;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i63;
    goto $bb45;

  $bb43:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3318;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i57;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i32(out_$i61, 0);
    goto corral_source_split_3313;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i1.i32(out_$i59);
    goto corral_source_split_3312;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_3311;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i60;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    assume out_$i58 == 1;
    goto $bb41;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    out_$i59 := 1;
    assume true;
    goto $bb40, $bb42;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    out_$i58 := $trunc.i8.i1(out_$i54);
    goto corral_source_split_3309;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_3308;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i47;
    goto $bb39;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    out_$i57 := 1;
    goto $bb39;

  $bb37:
    assume out_$i56 == 1;
    goto corral_source_split_3306;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i64(out_$i47, 0);
    goto corral_source_split_3304;

  $bb34:
    assume out_$i55 == 1;
    goto corral_source_split_3303;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    out_$i55 := $trunc.i8.i1(out_$i54);
    goto corral_source_split_3301;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i1.i8(out_$i53);
    call {:si_unique_call 630} {:cexpr "__cond"} boogie_si_record_i8(out_$i54);
    goto corral_source_split_3300;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i52, 0);
    goto corral_source_split_3299;

  SeqInstr_447:
    call {:si_unique_call 629} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_3298;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} out_$i52 := frame_ready(in_$p5, in_$p0, out_$i51);
    goto SeqInstr_446;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.1, out_$p50);
    goto corral_source_split_3297;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p2, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_3296;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} out_$i49 := prepare_to_wait_event(out_$p48, in_$p3, 1);
    call {:si_unique_call 627} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_3295;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p5, $mul.ref(0, 4848)), $mul.ref(4416, 1));
    goto corral_source_split_3294;

  $bb33:
    call out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i60, out_$i59, out_$i61, out_$i62, out_$i63, out_$i65, out_$i66, out_$i67 := vidioc_dqbuf_loop_$bb33(in_$p0, in_$p2, in_$p3, in_$p5, out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i60, out_$i59, out_$i61, out_$i62, out_$i63, out_$i65, out_$i66, out_$i67);
    goto $bb33_last;

  $bb33_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3293;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i44;
    goto $bb33;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i67;
    assume false;
    return;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} out_$i67 := schedule_timeout(out_$i57);
    call {:si_unique_call 633} {:cexpr "__ret___0"} boogie_si_record_i64(out_$i67);
    goto corral_source_split_3328;

  $bb48:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i49;
    assume true;
    goto $bb47, $bb48;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i64(out_$i49, 0);
    goto corral_source_split_3324;

  $bb44:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, out_$p46, 0);
    goto corral_source_split_3291;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3290;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} INIT_LIST_HEAD(out_$p45);
    goto corral_source_split_3289;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3288;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} out_$i44 := msecs_to_jiffies(3000);
    call {:si_unique_call 624} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i44);
    goto corral_source_split_3287;

  $bb31:
    assume out_$i43 == 1;
    goto corral_source_split_3286;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 0);
    goto corral_source_split_3281;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i1.i32(out_$i40);
    goto corral_source_split_3280;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_3279;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i41;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    assume out_$i39 == 1;
    goto $bb29;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    out_$i40 := 1;
    assume true;
    goto $bb28, $bb30;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i8.i1(out_$i35);
    goto corral_source_split_3277;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_3276;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i30;
    goto $bb27;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    out_$i38 := 1;
    goto $bb27;

  $bb25:
    assume out_$i37 == 1;
    goto corral_source_split_3274;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i64(out_$i30, 0);
    goto corral_source_split_3272;

  $bb22:
    assume out_$i36 == 1;
    goto corral_source_split_3271;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i8.i1(out_$i35);
    goto corral_source_split_3269;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i1.i8(out_$i34);
    call {:si_unique_call 622} {:cexpr "__cond___0"} boogie_si_record_i8(out_$i35);
    goto corral_source_split_3268;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_3267;

  SeqInstr_444:
    call {:si_unique_call 621} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_3266;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} out_$i33 := frame_ready(in_$p5, in_$p0, out_$i32);
    goto SeqInstr_443;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.1, out_$p31);
    goto corral_source_split_3265;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p2, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_3264;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} __might_sleep(.str.64, 1707, 0);
    goto corral_source_split_3263;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} out_$i30 := msecs_to_jiffies(3000);
    call {:si_unique_call 618} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_3262;

  $bb20:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_3258;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    out_$i28 := $and.i32(out_$i27, 2048);
    goto corral_source_split_3257;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.1, out_$p26);
    goto corral_source_split_3256;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(128, 1));
    goto corral_source_split_3255;

  SeqInstr_441:
    goto corral_source_split_3254;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} ldv_mutex_unlock_134(out_$p25);
    goto SeqInstr_440;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p5, $mul.ref(0, 4848)), $mul.ref(4664, 1));
    goto corral_source_split_3253;

  $bb16:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i24 := $sgt.i32(out_$i21, 0);
    goto corral_source_split_3221;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb24;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb24;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i64(out_$i38, 0);
    goto corral_source_split_3284;

  $bb30:
    assume !(out_$i39 == 1);
    goto corral_source_split_3283;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb36;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb36;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i64(out_$i57, 0);
    goto corral_source_split_3316;

  $bb42:
    assume !(out_$i58 == 1);
    goto corral_source_split_3315;

  $bb47:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3326;

  $bb60_dummy:
    call {:si_unique_call 1} out_$i22, out_$i21, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i41, out_$i40, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i60, out_$i59, out_$i61, out_$i62, out_$i63, out_$i65, out_$i66, out_$i67, out_$i64, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79 := vidioc_dqbuf_loop_$bb11(in_$p0, in_$p2, in_$p3, in_$p5, in_$p16, out_$i22, out_$i21, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i41, out_$i40, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i60, out_$i59, out_$i61, out_$i62, out_$i63, out_$i65, out_$i66, out_$i67, out_$i64, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79);
    return;

  exit:
    return;
}



procedure vidioc_dqbuf_loop_$bb11(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p16: ref, in_$i22: i32, in_$i21: i32, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i30: i64, in_$p31: ref, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i35: i8, in_$i36: i1, in_$i37: i1, in_$i38: i64, in_$i39: i1, in_$i41: i1, in_$i40: i1, in_$i42: i32, in_$i43: i1, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i8, in_$i55: i1, in_$i56: i1, in_$i57: i64, in_$i58: i1, in_$i60: i1, in_$i59: i1, in_$i61: i32, in_$i62: i1, in_$i63: i64, in_$i65: i1, in_$i66: i64, in_$i67: i64, in_$i64: i64, in_$p68: ref, in_$i69: i64, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$i78: i32, in_$i79: i1) returns (out_$i22: i32, out_$i21: i32, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i30: i64, out_$p31: ref, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i35: i8, out_$i36: i1, out_$i37: i1, out_$i38: i64, out_$i39: i1, out_$i41: i1, out_$i40: i1, out_$i42: i32, out_$i43: i1, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i8, out_$i55: i1, out_$i56: i1, out_$i57: i64, out_$i58: i1, out_$i60: i1, out_$i59: i1, out_$i61: i32, out_$i62: i1, out_$i63: i64, out_$i65: i1, out_$i66: i64, out_$i67: i64, out_$i64: i64, out_$p68: ref, out_$i69: i64, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$i78: i32, out_$i79: i1);
  modifies $M.31, assertsPassed, $M.33, $M.34, $M.35;



implementation vidioc_enum_fmt_vid_cap_loop_$bb9(in_$p3: ref, in_$p28: ref, in_$i33: i32, in_$i32: i32, in_$i34: i32, in_$i35: i64, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1) returns (out_$i33: i32, out_$i32: i32, out_$i34: i32, out_$i35: i64, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1)
{

  entry:
    out_$i33, out_$i32, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39 := in_$i33, in_$i32, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i39;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := out_$i34;
    goto $bb13_dummy;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i34;
    assume true;
    goto $bb13;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i37, out_$i38);
    goto corral_source_split_3633;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.36, in_$p28);
    goto corral_source_split_3632;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.36, out_$p36);
    goto corral_source_split_3631;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p3, $mul.ref(0, 32)), $mul.ref(out_$i35, 4));
    goto corral_source_split_3630;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i34);
    goto corral_source_split_3629;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i32, 1);
    call {:si_unique_call 702} {:cexpr "j"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_3628;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i33, out_$i32, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39 := vidioc_enum_fmt_vid_cap_loop_$bb9(in_$p3, in_$p28, out_$i33, out_$i32, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39);
    return;

  exit:
    return;
}



procedure vidioc_enum_fmt_vid_cap_loop_$bb9(in_$p3: ref, in_$p28: ref, in_$i33: i32, in_$i32: i32, in_$i34: i32, in_$i35: i64, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1) returns (out_$i33: i32, out_$i32: i32, out_$i34: i32, out_$i35: i64, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1);



implementation vidioc_enum_fmt_vid_cap_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$i22: i32, in_$i23: i64, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i33: i32, in_$i31: i32, in_$i32: i32, in_$i34: i32, in_$i35: i64, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i40: i1, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i32, in_$i48: i32, in_$i49: i1, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i14: i32, in_$i15: i32, in_$i54: i32, in_$i55: i32) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$i22: i32, out_$i23: i64, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i33: i32, out_$i31: i32, out_$i32: i32, out_$i34: i32, out_$i35: i64, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i40: i1, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i32, out_$i48: i32, out_$i49: i1, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i14: i32, out_$i15: i32, out_$i54: i32, out_$i55: i32)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i33, out_$i31, out_$i32, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i48, out_$i49, out_$i51, out_$i52, out_$i53, out_$i14, out_$i15, out_$i54, out_$i55 := in_$p17, in_$p18, in_$i19, in_$p21, in_$i22, in_$i23, in_$p24, in_$p25, in_$i26, in_$i27, in_$p28, in_$i29, in_$i30, in_$i33, in_$i31, in_$i32, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i48, in_$i49, in_$i51, in_$i52, in_$i53, in_$i14, in_$i15, in_$i54, in_$i55;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3602;

  $bb25:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i14, out_$i15 := out_$i52, out_$i51;
    goto $bb25_dummy;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    out_$i54, out_$i55 := out_$i51, out_$i52;
    assume true;
    goto $bb25;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    out_$i53 := $sge.i32(out_$i52, 0);
    goto corral_source_split_3654;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    out_$i52 := $sub.i32(out_$i14, 1);
    call {:si_unique_call 704} {:cexpr "i"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_3653;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3652;

  $bb15:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i51 := out_$i15;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i48;
    goto $bb24;

  $bb21:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    out_$i49 := $ugt.i32(out_$i48, 7);
    goto corral_source_split_3646;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i15, 1);
    call {:si_unique_call 703} {:cexpr "index"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_3645;

  $bb17:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    out_$i44, out_$i45 := out_$i15, out_$i14;
    assume true;
    goto $bb17;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, out_$i15);
    goto corral_source_split_3638;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.1, out_$p41);
    goto corral_source_split_3637;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3636;

  $bb14:
    assume out_$i40 == 1;
    goto corral_source_split_3635;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i31, out_$i15);
    goto corral_source_split_3626;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3620;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i33;
    goto $bb7;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i30 == 1;
    goto $bb7;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    out_$i31 := 0;
    assume true;
    goto $bb6, $bb8;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i26, out_$i29);
    goto corral_source_split_3618;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.36, out_$p28);
    goto corral_source_split_3617;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p3, $mul.ref(0, 32)), $mul.ref(out_$i27, 4));
    goto corral_source_split_3616;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i15);
    goto corral_source_split_3615;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.36, out_$p25);
    goto corral_source_split_3614;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p3, $mul.ref(0, 32)), $mul.ref(0, 4));
    goto corral_source_split_3613;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $M.36 := $store.i32($M.36, out_$p24, out_$i22);
    goto corral_source_split_3612;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p3, $mul.ref(0, 32)), $mul.ref(out_$i23, 4));
    goto corral_source_split_3611;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i15);
    goto corral_source_split_3610;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.1, out_$p21);
    goto corral_source_split_3609;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 44)), $mul.ref(8, 1));
    goto corral_source_split_3608;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    goto corral_source_split_3607;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i14);
    goto corral_source_split_3606;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.1, out_$p17);
    goto corral_source_split_3605;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_3604;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3624;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i34;
    assume true;
    goto $bb10, $bb13;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i37, out_$i38);
    goto corral_source_split_3633;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.36, out_$p28);
    goto corral_source_split_3632;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.36, out_$p36);
    goto corral_source_split_3631;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p3, $mul.ref(0, 32)), $mul.ref(out_$i35, 4));
    goto corral_source_split_3630;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i34);
    goto corral_source_split_3629;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i32, 1);
    call {:si_unique_call 702} {:cexpr "j"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_3628;

  $bb9:
    call out_$i33, out_$i32, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39 := vidioc_enum_fmt_vid_cap_loop_$bb9(in_$p3, out_$p28, out_$i33, out_$i32, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    out_$i32 := 0;
    goto $bb9;

  $bb13:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := out_$i34;
    assume false;
    return;

  $bb8:
    assume !(out_$i30 == 1);
    goto corral_source_split_3622;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i33, out_$i31, out_$i32, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i48, out_$i49, out_$i51, out_$i52, out_$i53, out_$i14, out_$i15, out_$i54, out_$i55 := vidioc_enum_fmt_vid_cap_loop_$bb4(in_$p2, in_$p3, in_$p5, out_$p17, out_$p18, out_$i19, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i33, out_$i31, out_$i32, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i48, out_$i49, out_$i51, out_$i52, out_$i53, out_$i14, out_$i15, out_$i54, out_$i55);
    return;

  exit:
    return;
}



procedure vidioc_enum_fmt_vid_cap_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$i22: i32, in_$i23: i64, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i33: i32, in_$i31: i32, in_$i32: i32, in_$i34: i32, in_$i35: i64, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i40: i1, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i32, in_$i48: i32, in_$i49: i1, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i14: i32, in_$i15: i32, in_$i54: i32, in_$i55: i32) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$i22: i32, out_$i23: i64, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i33: i32, out_$i31: i32, out_$i32: i32, out_$i34: i32, out_$i35: i64, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i40: i1, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i32, out_$i48: i32, out_$i49: i1, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i14: i32, out_$i15: i32, out_$i54: i32, out_$i55: i32);
  modifies $M.36;



implementation vidioc_streamoff_loop_$bb18(in_$p4: ref, in_$p21: ref, in_$i26: i64, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i64, in_$p37: ref, in_$i38: i32, in_$i39: i8, in_$i40: i32, in_$i41: i1, in_$i25: i32) returns (out_$i26: i64, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i64, out_$p37: ref, out_$i38: i32, out_$i39: i8, out_$i40: i32, out_$i41: i1, out_$i25: i32)
{

  entry:
    out_$i26, out_$p30, out_$i31, out_$i32, out_$i33, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i25 := in_$i26, in_$p30, in_$i31, in_$i32, in_$i33, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i25;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3879;

  $bb20:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$i25 := out_$i38;
    goto $bb20_dummy;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i38, out_$i40);
    goto corral_source_split_3891;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i8.i32(out_$i39);
    goto corral_source_split_3890;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.1, in_$p21);
    goto corral_source_split_3889;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i25, 1);
    call {:si_unique_call 727} {:cexpr "i"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_3888;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p37, out_$i32);
    goto corral_source_split_3887;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 4848)), $mul.ref(2656, 1)), $mul.ref(out_$i33, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_3886;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i25);
    goto corral_source_split_3885;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    out_$i32 := $and.i32(out_$i31, $sub.i32(0, 7));
    goto corral_source_split_3884;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.1, out_$p30);
    goto corral_source_split_3883;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 4848)), $mul.ref(2656, 1)), $mul.ref(out_$i26, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_3882;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i25);
    goto corral_source_split_3881;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i26, out_$p30, out_$i31, out_$i32, out_$i33, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i25 := vidioc_streamoff_loop_$bb18(in_$p4, in_$p21, out_$i26, out_$p30, out_$i31, out_$i32, out_$i33, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i25);
    return;

  exit:
    return;
}



procedure vidioc_streamoff_loop_$bb18(in_$p4: ref, in_$p21: ref, in_$i26: i64, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i64, in_$p37: ref, in_$i38: i32, in_$i39: i8, in_$i40: i32, in_$i41: i1, in_$i25: i32) returns (out_$i26: i64, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i64, out_$p37: ref, out_$i38: i32, out_$i39: i8, out_$i40: i32, out_$i41: i1, out_$i25: i32);
  modifies $M.1;



implementation vidioc_enum_framesizes_loop_$bb8(in_$p2: ref, in_$p4: ref, in_$p18: ref, in_$p24: ref, in_$i25: i32, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i60: i32, in_$i34: i32, in_$i61: i32, in_$i62: i8, in_$i63: i32, in_$i64: i1, in_$i22: i32, in_$i23: i32) returns (out_$p24: ref, out_$i25: i32, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i60: i32, out_$i34: i32, out_$i61: i32, out_$i62: i8, out_$i63: i32, out_$i64: i1, out_$i22: i32, out_$i23: i32)
{

  entry:
    out_$p24, out_$i25, out_$p27, out_$p28, out_$i29, out_$p31, out_$i32, out_$i33, out_$p35, out_$i36, out_$i37, out_$i38, out_$i60, out_$i34, out_$i61, out_$i62, out_$i63, out_$i64, out_$i22, out_$i23 := in_$p24, in_$i25, in_$p27, in_$p28, in_$i29, in_$p31, in_$i32, in_$i33, in_$p35, in_$i36, in_$i37, in_$i38, in_$i60, in_$i34, in_$i61, in_$i62, in_$i63, in_$i64, in_$i22, in_$i23;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4099;

  $bb17:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i22, out_$i23 := out_$i34, out_$i61;
    goto $bb17_dummy;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    out_$i64 := $slt.i32(out_$i61, out_$i63);
    goto corral_source_split_4117;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i8.i32(out_$i62);
    goto corral_source_split_4116;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i8($M.1, in_$p18);
    goto corral_source_split_4115;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i23, 1);
    call {:si_unique_call 756} {:cexpr "i"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_4114;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4113;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i60;
    goto $bb12;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i22;
    goto $bb12;

  $bb10:
    assume out_$i33 == 1;
    goto corral_source_split_4111;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i25, out_$i32);
    goto corral_source_split_4109;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.1, out_$p31);
    goto corral_source_split_4108;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p28, $mul.ref(out_$i29, 44)), $mul.ref(8, 1));
    goto corral_source_split_4107;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    goto corral_source_split_4106;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i23);
    goto corral_source_split_4105;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.1, out_$p27);
    goto corral_source_split_4104;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_4103;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.1, out_$p24);
    goto corral_source_split_4102;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p2, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_4101;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i32(out_$i22, 1);
    call {:si_unique_call 757} {:cexpr "index"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_4147;

  $bb15:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i23;
    assume true;
    goto $bb15;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, out_$i22);
    goto corral_source_split_4121;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.1, out_$p35);
    goto corral_source_split_4120;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_4119;

  $bb11:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p24, out_$i25, out_$p27, out_$p28, out_$i29, out_$p31, out_$i32, out_$i33, out_$p35, out_$i36, out_$i37, out_$i38, out_$i60, out_$i34, out_$i61, out_$i62, out_$i63, out_$i64, out_$i22, out_$i23 := vidioc_enum_framesizes_loop_$bb8(in_$p2, in_$p4, in_$p18, out_$p24, out_$i25, out_$p27, out_$p28, out_$i29, out_$p31, out_$i32, out_$i33, out_$p35, out_$i36, out_$i37, out_$i38, out_$i60, out_$i34, out_$i61, out_$i62, out_$i63, out_$i64, out_$i22, out_$i23);
    return;

  exit:
    return;
}



procedure vidioc_enum_framesizes_loop_$bb8(in_$p2: ref, in_$p4: ref, in_$p18: ref, in_$p24: ref, in_$i25: i32, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i60: i32, in_$i34: i32, in_$i61: i32, in_$i62: i8, in_$i63: i32, in_$i64: i1, in_$i22: i32, in_$i23: i32) returns (out_$p24: ref, out_$i25: i32, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i60: i32, out_$i34: i32, out_$i61: i32, out_$i62: i8, out_$i63: i32, out_$i64: i1, out_$i22: i32, out_$i23: i32);



implementation vidioc_enum_frameintervals_loop_$bb14(in_$p2: ref, in_$p35: ref, in_$i37: i64, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i65: i32, in_$p66: ref, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$i42: i32) returns (out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i65: i32, out_$p66: ref, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$i42: i32)
{

  entry:
    out_$p43, out_$i44, out_$i45, out_$i46, out_$i65, out_$p66, out_$p68, out_$i69, out_$i70, out_$i42 := in_$p43, in_$i44, in_$i45, in_$i46, in_$i65, in_$p66, in_$p68, in_$i69, in_$i70, in_$i42;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4197;

  $bb19:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := out_$i65;
    goto $bb19_dummy;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    out_$i70 := $ult.i32(out_$i65, out_$i69);
    goto corral_source_split_4230;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i32($M.1, out_$p68);
    goto corral_source_split_4229;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p66, $mul.ref(in_$i37, 16)), $mul.ref(8, 1));
    goto corral_source_split_4228;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    goto corral_source_split_4227;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.1, in_$p35);
    goto corral_source_split_4226;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i42, 1);
    call {:si_unique_call 761} {:cexpr "i"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_4225;

  $bb17:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i42;
    assume true;
    goto $bb17;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, out_$i42);
    goto corral_source_split_4201;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.1, out_$p43);
    goto corral_source_split_4200;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_4199;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p43, out_$i44, out_$i45, out_$i46, out_$i65, out_$p66, out_$p68, out_$i69, out_$i70, out_$i42 := vidioc_enum_frameintervals_loop_$bb14(in_$p2, in_$p35, in_$i37, out_$p43, out_$i44, out_$i45, out_$i46, out_$i65, out_$p66, out_$p68, out_$i69, out_$i70, out_$i42);
    return;

  exit:
    return;
}



procedure vidioc_enum_frameintervals_loop_$bb14(in_$p2: ref, in_$p35: ref, in_$i37: i64, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i65: i32, in_$p66: ref, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$i42: i32) returns (out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i65: i32, out_$p66: ref, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$i42: i32);



implementation wxh_to_mode_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i29: i32, in_$i30: i1, in_$i10: i32, in_$i31: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i29: i32, out_$i30: i1, out_$i10: i32, out_$i31: i32)
{

  entry:
    out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p20, out_$p21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$i29, out_$i30, out_$i10, out_$i31 := in_$p12, in_$p13, in_$i14, in_$p16, in_$i17, in_$i18, in_$p20, in_$p21, in_$i22, in_$p24, in_$i25, in_$i26, in_$i27, in_$i29, in_$i30, in_$i10, in_$i31;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4249;

  $bb13:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i29;
    goto $bb13_dummy;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i29;
    assume true;
    goto $bb13;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    out_$i30 := $sgt.i32(out_$i29, 0);
    goto corral_source_split_4273;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i29 := $sub.i32(out_$i10, 1);
    call {:si_unique_call 770} {:cexpr "i"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_4272;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i26 == 1);
    goto $bb8;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i10;
    assume true;
    goto $bb10;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    out_$i26 := $uge.i32(in_$i2, out_$i25);
    goto corral_source_split_4266;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.1, out_$p24);
    goto corral_source_split_4265;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p21, $mul.ref(out_$i22, 44)), $mul.ref(4, 1));
    goto corral_source_split_4264;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    goto corral_source_split_4263;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i10);
    goto corral_source_split_4262;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.1, out_$p20);
    goto corral_source_split_4261;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_4260;

  $bb6:
    assume out_$i18 == 1;
    goto corral_source_split_4259;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    out_$i18 := $uge.i32(in_$i1, out_$i17);
    goto corral_source_split_4257;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.1, out_$p16);
    goto corral_source_split_4256;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p13, $mul.ref(out_$i14, 44)), $mul.ref(0, 1));
    goto corral_source_split_4255;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    goto corral_source_split_4254;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i10);
    goto corral_source_split_4253;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.1, out_$p12);
    goto corral_source_split_4252;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_4251;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p20, out_$p21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$i29, out_$i30, out_$i10, out_$i31 := wxh_to_mode_loop_$bb4(in_$p0, in_$i1, in_$i2, out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p20, out_$p21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$i29, out_$i30, out_$i10, out_$i31);
    return;

  exit:
    return;
}



procedure wxh_to_mode_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i29: i32, in_$i30: i1, in_$i10: i32, in_$i31: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i29: i32, out_$i30: i1, out_$i10: i32, out_$i31: i32);



implementation gspca_get_mode_loop_$bb1(in_$p0: ref, in_$i2: i32, in_$i5: i32, in_$i6: i1, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i17: i32, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i1, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i3: i32, in_$i4: i32, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$i37: i1) returns (out_$i5: i32, out_$i6: i1, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i17: i32, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i1, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i3: i32, out_$i4: i32, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$i37: i1)
{

  entry:
    out_$i5, out_$i6, out_$p8, out_$p9, out_$i10, out_$p12, out_$i13, out_$i14, out_$i15, out_$i17, out_$p19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$i3, out_$i4, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37 := in_$i5, in_$i6, in_$p8, in_$p9, in_$i10, in_$p12, in_$i13, in_$i14, in_$i15, in_$i17, in_$p19, in_$i20, in_$i21, in_$i22, in_$p24, in_$p25, in_$i26, in_$p28, in_$i29, in_$i30, in_$i31, in_$i3, in_$i4, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4363;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i3, out_$i4 := out_$i17, out_$i5;
    goto $bb15_dummy;

  $bb11:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i17;
    assume true;
    goto $bb13;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, in_$i2);
    goto corral_source_split_4398;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.1, out_$p28);
    goto corral_source_split_4397;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 44)), $mul.ref(8, 1));
    goto corral_source_split_4396;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    goto corral_source_split_4395;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i17);
    goto corral_source_split_4394;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.1, out_$p24);
    goto corral_source_split_4393;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_4392;

  $bb10:
    assume out_$i22 == 1;
    goto corral_source_split_4391;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(out_$i17, out_$i21);
    goto corral_source_split_4389;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i20);
    goto corral_source_split_4388;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i8($M.1, out_$p19);
    goto corral_source_split_4387;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(24, 1));
    goto corral_source_split_4386;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i3, 1);
    call {:si_unique_call 791} {:cexpr "modeU"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_4385;

  $bb4:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i5;
    assume true;
    goto $bb6;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, in_$i2);
    goto corral_source_split_4379;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.1, out_$p12);
    goto corral_source_split_4378;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 44)), $mul.ref(8, 1));
    goto corral_source_split_4377;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    goto corral_source_split_4376;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i5);
    goto corral_source_split_4375;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.1, out_$p8);
    goto corral_source_split_4374;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_4373;

  $bb3:
    assume out_$i6 == 1;
    goto corral_source_split_4372;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    out_$i6 := $sge.i32(out_$i5, 0);
    goto corral_source_split_4370;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i5 := $sub.i32(out_$i4, 1);
    call {:si_unique_call 790} {:cexpr "modeD"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_4369;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb19:
    assume {:verifier.code 0} true;
    assume out_$i37 == 1;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i36 == 1;
    goto $bb17;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    out_$i36 := $slt.i32(out_$i3, out_$i35);
    goto corral_source_split_4367;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    goto corral_source_split_4366;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.1, out_$p33);
    goto corral_source_split_4365;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4848)), $mul.ref(2288, 1)), $mul.ref(24, 1));
    goto corral_source_split_4364;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    out_$i37 := $sge.i32(out_$i4, 0);
    goto corral_source_split_4403;

  $bb18:
    assume !(out_$i36 == 1);
    goto corral_source_split_4402;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i5, out_$i6, out_$p8, out_$p9, out_$i10, out_$p12, out_$i13, out_$i14, out_$i15, out_$i17, out_$p19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$i3, out_$i4, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37 := gspca_get_mode_loop_$bb1(in_$p0, in_$i2, out_$i5, out_$i6, out_$p8, out_$p9, out_$i10, out_$p12, out_$i13, out_$i14, out_$i15, out_$i17, out_$p19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$i3, out_$i4, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37);
    return;

  exit:
    return;
}



procedure gspca_get_mode_loop_$bb1(in_$p0: ref, in_$i2: i32, in_$i5: i32, in_$i6: i1, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i17: i32, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i1, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i3: i32, in_$i4: i32, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$i37: i1) returns (out_$i5: i32, out_$i6: i1, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i17: i32, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i1, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i3: i32, out_$i4: i32, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$i37: i1);



implementation ldv_struct_vm_operations_struct_dummy_resourceless_instance_0_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i32) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i32)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4 := in_$i1, in_$i2, in_$i3, in_$i4;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} out_$i1 := ldv_undef_int();
    call {:si_unique_call 808} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_4465;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} ldv_dummy_resourceless_instance_callback_0_7($u2, $u3);
    goto corral_source_split_4470;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_4468;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_4466;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} ldv_dummy_resourceless_instance_callback_0_3($u2, $u3);
    goto corral_source_split_4476;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_4474;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    out_$i4 := out_$i1;
    assume true;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_4472;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4 := ldv_struct_vm_operations_struct_dummy_resourceless_instance_0_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4);
    return;

  exit:
    return;
}



procedure ldv_struct_vm_operations_struct_dummy_resourceless_instance_0_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i32) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i32);
  modifies $M.1;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation ldv_v4l2_file_operations_io_instance_1_loop_$bb7(in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$p36: ref, in_$i69: i32, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i32, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref) returns (out_$i69: i32, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i32, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref)
{

  entry:
    out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131 := in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$p102, in_$p103, in_$p104, in_$p105, in_$p106, in_$p107, in_$p108, in_$p109, in_$p110, in_$p111, in_$p112, in_$p113, in_$p114, in_$p115, in_$p116, in_$p117, in_$p118, in_$p119, in_$p120, in_$p121, in_$p122, in_$p123, in_$p124, in_$p125, in_$p126, in_$p127, in_$p128, in_$p129, in_$p130, in_$p131;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} out_$i69 := ldv_undef_int();
    call {:si_unique_call 864} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_4594;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb137_dummy;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} ldv_io_instance_callback_1_53($u5, in_$p16, in_$p14);
    goto corral_source_split_4604;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume out_$i70 == 1;
    goto corral_source_split_4602;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i69, 1);
    goto corral_source_split_4595;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} ldv_io_instance_callback_1_52($u6, in_$p2, out_$p102, in_$p20);
    goto corral_source_split_4611;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p102 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4610;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i71 == 1;
    goto corral_source_split_4608;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i69, 2);
    goto corral_source_split_4606;

  $bb13:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} ldv_io_instance_callback_1_51($u5, in_$p16, in_$p14);
    goto corral_source_split_4617;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i72 == 1;
    goto corral_source_split_4615;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i69, 3);
    goto corral_source_split_4613;

  $bb17:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_543:
    goto corral_source_split_4624;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} ldv_io_instance_callback_1_50($u7, in_$p2, out_$p103, $u8);
    goto SeqInstr_542;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p103 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4623;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i73 == 1;
    goto corral_source_split_4621;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i69, 4);
    goto corral_source_split_4619;

  $bb21:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_546:
    goto corral_source_split_4631;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} ldv_io_instance_callback_1_49($u7, in_$p2, out_$p104, $u8);
    goto SeqInstr_545;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p104 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4630;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i74 == 1;
    goto corral_source_split_4628;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i69, 5);
    goto corral_source_split_4626;

  $bb25:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_549:
    goto corral_source_split_4638;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} ldv_io_instance_callback_1_48($u9, in_$p2, out_$p105, in_$p12);
    goto SeqInstr_548;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p105 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4637;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i75 == 1;
    goto corral_source_split_4635;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i69, 6);
    goto corral_source_split_4633;

  $bb29:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} ldv_io_instance_callback_1_47($u10, in_$p2, out_$p106, in_$p32);
    goto corral_source_split_4645;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p106 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4644;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i76 == 1;
    goto corral_source_split_4642;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i69, 7);
    goto corral_source_split_4640;

  $bb33:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_552:
    goto corral_source_split_4652;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} ldv_io_instance_callback_1_46($u11, in_$p2, out_$p107, in_$p28);
    goto SeqInstr_551;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p107 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4651;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i77 == 1;
    goto corral_source_split_4649;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i69, 8);
    goto corral_source_split_4647;

  $bb37:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} ldv_io_instance_callback_1_43($u7, in_$p2, out_$p108, $u8);
    goto corral_source_split_4659;

  $bb46:
    assume {:verifier.code 0} true;
    out_$p108 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4658;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume out_$i78 == 1;
    goto corral_source_split_4656;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i69, 9);
    goto corral_source_split_4654;

  $bb41:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_555:
    goto corral_source_split_4666;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} ldv_io_instance_callback_1_42($u6, in_$p2, out_$p109, in_$p20);
    goto SeqInstr_554;

  $bb50:
    assume {:verifier.code 0} true;
    out_$p109 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4665;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume out_$i79 == 1;
    goto corral_source_split_4663;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i69, 10);
    goto corral_source_split_4661;

  $bb45:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_558:
    goto corral_source_split_4673;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} ldv_io_instance_callback_1_41($u12, in_$p2, out_$p110, in_$p30);
    goto SeqInstr_557;

  $bb54:
    assume {:verifier.code 0} true;
    out_$p110 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4672;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume out_$i80 == 1;
    goto corral_source_split_4670;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i32(out_$i69, 11);
    goto corral_source_split_4668;

  $bb49:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} ldv_io_instance_callback_1_40($u13, in_$p2, out_$p111, in_$p8);
    goto corral_source_split_4680;

  $bb58:
    assume {:verifier.code 0} true;
    out_$p111 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4679;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb56:
    assume out_$i81 == 1;
    goto corral_source_split_4677;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i69, 12);
    goto corral_source_split_4675;

  $bb53:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} ldv_io_instance_callback_1_39($u14, in_$p2, out_$p112, in_$p6);
    goto corral_source_split_4687;

  $bb62:
    assume {:verifier.code 0} true;
    out_$p112 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4686;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb60:
    assume out_$i82 == 1;
    goto corral_source_split_4684;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i69, 13);
    goto corral_source_split_4682;

  $bb57:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_561:
    goto corral_source_split_4694;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} ldv_io_instance_callback_1_38($u14, in_$p2, out_$p113, in_$p6);
    goto SeqInstr_560;

  $bb66:
    assume {:verifier.code 0} true;
    out_$p113 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4693;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb64:
    assume out_$i83 == 1;
    goto corral_source_split_4691;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i69, 14);
    goto corral_source_split_4689;

  $bb61:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  SeqInstr_564:
    goto corral_source_split_4701;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} ldv_io_instance_callback_1_37($u9, in_$p2, out_$p114, in_$p12);
    goto SeqInstr_563;

  $bb70:
    assume {:verifier.code 0} true;
    out_$p114 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4700;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb68:
    assume out_$i84 == 1;
    goto corral_source_split_4698;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb67:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i69, 15);
    goto corral_source_split_4696;

  $bb65:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} ldv_io_instance_callback_1_36($u10, in_$p2, out_$p115, in_$p32);
    goto corral_source_split_4708;

  $bb74:
    assume {:verifier.code 0} true;
    out_$p115 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4707;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb72:
    assume out_$i85 == 1;
    goto corral_source_split_4705;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb71:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i69, 16);
    goto corral_source_split_4703;

  $bb69:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  SeqInstr_567:
    goto corral_source_split_4715;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} ldv_io_instance_callback_1_35($u11, in_$p2, out_$p116, in_$p28);
    goto SeqInstr_566;

  $bb78:
    assume {:verifier.code 0} true;
    out_$p116 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4714;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb76:
    assume out_$i86 == 1;
    goto corral_source_split_4712;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb75:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i69, 17);
    goto corral_source_split_4710;

  $bb73:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} ldv_free(out_$p120);
    goto corral_source_split_4726;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    out_$p120 := $bitcast.ref.ref(out_$p118);
    goto corral_source_split_4725;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} ldv_io_instance_callback_1_32($u15, in_$p2, out_$p119, out_$p118);
    goto corral_source_split_4724;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    out_$p119 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4723;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    out_$p118 := $bitcast.ref.ref(out_$p117);
    goto corral_source_split_4722;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} out_$p117 := ldv_xmalloc(4);
    goto corral_source_split_4721;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb80:
    assume out_$i87 == 1;
    goto corral_source_split_4719;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb79:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i69, 18);
    goto corral_source_split_4717;

  $bb77:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} ldv_io_instance_callback_1_31($u6, in_$p2, out_$p121, in_$p20);
    goto corral_source_split_4733;

  $bb86:
    assume {:verifier.code 0} true;
    out_$p121 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4732;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb84:
    assume out_$i88 == 1;
    goto corral_source_split_4730;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb83:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i69, 19);
    goto corral_source_split_4728;

  $bb81:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  SeqInstr_570:
    goto corral_source_split_4740;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} ldv_io_instance_callback_1_30($u16, in_$p2, out_$p122, in_$p10);
    goto SeqInstr_569;

  $bb90:
    assume {:verifier.code 0} true;
    out_$p122 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4739;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb88:
    assume out_$i89 == 1;
    goto corral_source_split_4737;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb87:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i69, 20);
    goto corral_source_split_4735;

  $bb85:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} ldv_io_instance_callback_1_29($u17, in_$p2, out_$p123, in_$p26);
    goto corral_source_split_4747;

  $bb94:
    assume {:verifier.code 0} true;
    out_$p123 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4746;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb92:
    assume out_$i90 == 1;
    goto corral_source_split_4744;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb91:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i69, 21);
    goto corral_source_split_4742;

  $bb89:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  SeqInstr_573:
    goto corral_source_split_4754;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} ldv_io_instance_callback_1_28($u18, in_$p2, out_$p124, in_$p24);
    goto SeqInstr_572;

  $bb98:
    assume {:verifier.code 0} true;
    out_$p124 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4753;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb96:
    assume out_$i91 == 1;
    goto corral_source_split_4751;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb95:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i69, 22);
    goto corral_source_split_4749;

  $bb93:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} ldv_io_instance_callback_1_27($u19, in_$p2, out_$p125, in_$p22);
    goto corral_source_split_4761;

  $bb102:
    assume {:verifier.code 0} true;
    out_$p125 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4760;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb100:
    assume out_$i92 == 1;
    goto corral_source_split_4758;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb99:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i69, 23);
    goto corral_source_split_4756;

  $bb97:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} ldv_io_instance_callback_1_26($u20, in_$p2, out_$p126, in_$p18);
    goto corral_source_split_4768;

  $bb106:
    assume {:verifier.code 0} true;
    out_$p126 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4767;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb104:
    assume out_$i93 == 1;
    goto corral_source_split_4765;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb103:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i69, 24);
    goto corral_source_split_4763;

  $bb101:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  SeqInstr_576:
    goto corral_source_split_4775;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} ldv_io_instance_callback_1_25($u14, in_$p2, out_$p127, in_$p6);
    goto SeqInstr_575;

  $bb110:
    assume {:verifier.code 0} true;
    out_$p127 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4774;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb108:
    assume out_$i94 == 1;
    goto corral_source_split_4772;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb107:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i69, 25);
    goto corral_source_split_4770;

  $bb105:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} ldv_io_instance_callback_1_22($u21, in_$p2, $u8, $u22);
    goto corral_source_split_4781;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb112:
    assume out_$i95 == 1;
    goto corral_source_split_4779;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb111:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i69, 26);
    goto corral_source_split_4777;

  $bb109:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} ldv_free(out_$p131);
    goto corral_source_split_4793;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    out_$p131 := $bitcast.ref.ref(out_$p130);
    goto corral_source_split_4792;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} ldv_free(out_$p128);
    goto corral_source_split_4791;

  SeqInstr_579:
    goto corral_source_split_4790;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} ldv_io_instance_callback_1_19($u23, in_$p2, out_$p128, $u22, out_$p130);
    goto SeqInstr_578;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    out_$p130 := $bitcast.ref.ref(out_$p129);
    goto corral_source_split_4789;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} out_$p129 := ldv_xmalloc(8);
    goto corral_source_split_4788;

  $bb118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} out_$p128 := ldv_xmalloc(1);
    goto corral_source_split_4787;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb116:
    assume out_$i96 == 1;
    goto corral_source_split_4785;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb115:
    assume {:verifier.code 0} true;
    out_$i96 := $eq.i32(out_$i69, 27);
    goto corral_source_split_4783;

  $bb113:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  SeqInstr_582:
    goto corral_source_split_4799;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} ldv_io_instance_callback_1_18($u24, in_$p2, in_$p4);
    goto SeqInstr_581;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb120:
    assume out_$i97 == 1;
    goto corral_source_split_4797;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb119:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i69, 28);
    goto corral_source_split_4795;

  $bb117:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  SeqInstr_585:
    goto corral_source_split_4805;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} ldv_io_instance_callback_1_17($u25, in_$p2, in_$p36);
    goto SeqInstr_584;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb124:
    assume out_$i98 == 1;
    goto corral_source_split_4803;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb123:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i69, 29);
    goto corral_source_split_4801;

  $bb121:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} ldv_io_instance_callback_1_4($u26, in_$p34);
    goto corral_source_split_4811;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb128:
    assume out_$i99 == 1;
    goto corral_source_split_4809;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i69;
    assume true;
    goto $bb128;

  $bb127:
    assume {:verifier.code 0} true;
    out_$i99 := $eq.i32(out_$i69, 30);
    goto corral_source_split_4807;

  $bb125:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb137_dummy:
    call {:si_unique_call 1} out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131 := ldv_v4l2_file_operations_io_instance_1_loop_$bb7(in_$p2, in_$p4, in_$p6, in_$p8, in_$p10, in_$p12, in_$p14, in_$p16, in_$p18, in_$p20, in_$p22, in_$p24, in_$p26, in_$p28, in_$p30, in_$p32, in_$p34, in_$p36, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131);
    return;

  exit:
    return;
}



procedure ldv_v4l2_file_operations_io_instance_1_loop_$bb7(in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$p36: ref, in_$i69: i32, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i32, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref) returns (out_$i69: i32, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i32, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref);
  modifies $M.1, $M.10, $M.31, $M.11, $M.5, $M.4, assertsPassed, $CurrAddr, $M.8, $M.32, $M.36, $M.33, $M.34, $M.35, $M.26, $M.27;



implementation ldv_v4l2_file_operations_io_instance_1_loop_$bb4(in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$p36: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i69: i32, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref) returns (out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i69: i32, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref)
{

  entry:
    out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$p133 := in_$p39, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$p102, in_$p103, in_$p104, in_$p105, in_$p106, in_$p107, in_$p108, in_$p109, in_$p110, in_$p111, in_$p112, in_$p113, in_$p114, in_$p115, in_$p116, in_$p117, in_$p118, in_$p119, in_$p120, in_$p121, in_$p122, in_$p123, in_$p124, in_$p125, in_$p126, in_$p127, in_$p128, in_$p129, in_$p130, in_$p131, in_$p132, in_$p133;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($u4, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_4577;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i50 == 1;
    goto $bb9_dummy;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_4598;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} out_$i49 := ldv_undef_int();
    call {:si_unique_call 866} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_4597;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_588:
    goto corral_source_split_4819;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} ldv_io_instance_release_1_2(out_$p133, in_$p2);
    goto SeqInstr_587;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    out_$p133 := $load.ref($M.38, out_$p132);
    goto corral_source_split_4818;

  $bb134:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref($u4, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_4817;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb132:
    assume out_$i101 == 1;
    goto corral_source_split_4815;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132;

  $bb131:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i100, 31);
    goto corral_source_split_4813;

  $bb129:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i69;
    assume true;
    goto $bb128, $bb129;

  $bb127:
    assume {:verifier.code 0} true;
    out_$i99 := $eq.i32(out_$i69, 30);
    goto corral_source_split_4807;

  $bb125:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb123:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i69, 29);
    goto corral_source_split_4801;

  $bb121:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb119:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i69, 28);
    goto corral_source_split_4795;

  $bb117:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb115:
    assume {:verifier.code 0} true;
    out_$i96 := $eq.i32(out_$i69, 27);
    goto corral_source_split_4783;

  $bb113:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb111:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i69, 26);
    goto corral_source_split_4777;

  $bb109:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb107:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i69, 25);
    goto corral_source_split_4770;

  $bb105:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb103:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i69, 24);
    goto corral_source_split_4763;

  $bb101:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb99:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i69, 23);
    goto corral_source_split_4756;

  $bb97:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb95:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i69, 22);
    goto corral_source_split_4749;

  $bb93:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb91:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i69, 21);
    goto corral_source_split_4742;

  $bb89:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb87:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i69, 20);
    goto corral_source_split_4735;

  $bb85:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb83:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i69, 19);
    goto corral_source_split_4728;

  $bb81:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb79:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i69, 18);
    goto corral_source_split_4717;

  $bb77:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb75:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i69, 17);
    goto corral_source_split_4710;

  $bb73:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb71:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i69, 16);
    goto corral_source_split_4703;

  $bb69:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb67:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i69, 15);
    goto corral_source_split_4696;

  $bb65:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i69, 14);
    goto corral_source_split_4689;

  $bb61:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i69, 13);
    goto corral_source_split_4682;

  $bb57:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i69, 12);
    goto corral_source_split_4675;

  $bb53:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i32(out_$i69, 11);
    goto corral_source_split_4668;

  $bb49:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i69, 10);
    goto corral_source_split_4661;

  $bb45:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i69, 9);
    goto corral_source_split_4654;

  $bb41:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i69, 8);
    goto corral_source_split_4647;

  $bb37:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i69, 7);
    goto corral_source_split_4640;

  $bb33:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i69, 6);
    goto corral_source_split_4633;

  $bb29:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i69, 5);
    goto corral_source_split_4626;

  $bb25:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i69, 4);
    goto corral_source_split_4619;

  $bb21:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i69, 3);
    goto corral_source_split_4613;

  $bb17:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i69, 2);
    goto corral_source_split_4606;

  $bb13:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i69, 1);
    goto corral_source_split_4595;

  $bb7:
    call out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131 := ldv_v4l2_file_operations_io_instance_1_loop_$bb7(in_$p2, in_$p4, in_$p6, in_$p8, in_$p10, in_$p12, in_$p14, in_$p16, in_$p18, in_$p20, in_$p22, in_$p24, in_$p26, in_$p28, in_$p30, in_$p32, in_$p34, in_$p36, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131);
    goto $bb7_last;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} out_$i69 := ldv_undef_int();
    call {:si_unique_call 864} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_4594;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb137:
    assume {:verifier.code 0} true;
    assume false;
    return;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} ldv_io_instance_callback_1_53($u5, in_$p16, in_$p14);
    goto corral_source_split_4604;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume out_$i70 == 1;
    goto corral_source_split_4602;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} ldv_io_instance_callback_1_52($u6, in_$p2, out_$p102, in_$p20);
    goto corral_source_split_4611;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p102 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4610;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i71 == 1;
    goto corral_source_split_4608;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} ldv_io_instance_callback_1_51($u5, in_$p16, in_$p14);
    goto corral_source_split_4617;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i72 == 1;
    goto corral_source_split_4615;

  SeqInstr_543:
    goto corral_source_split_4624;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} ldv_io_instance_callback_1_50($u7, in_$p2, out_$p103, $u8);
    goto SeqInstr_542;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p103 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4623;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i73 == 1;
    goto corral_source_split_4621;

  SeqInstr_546:
    goto corral_source_split_4631;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} ldv_io_instance_callback_1_49($u7, in_$p2, out_$p104, $u8);
    goto SeqInstr_545;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p104 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4630;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i74 == 1;
    goto corral_source_split_4628;

  SeqInstr_549:
    goto corral_source_split_4638;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} ldv_io_instance_callback_1_48($u9, in_$p2, out_$p105, in_$p12);
    goto SeqInstr_548;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p105 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4637;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i75 == 1;
    goto corral_source_split_4635;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} ldv_io_instance_callback_1_47($u10, in_$p2, out_$p106, in_$p32);
    goto corral_source_split_4645;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p106 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4644;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i76 == 1;
    goto corral_source_split_4642;

  SeqInstr_552:
    goto corral_source_split_4652;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} ldv_io_instance_callback_1_46($u11, in_$p2, out_$p107, in_$p28);
    goto SeqInstr_551;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p107 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4651;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i77 == 1;
    goto corral_source_split_4649;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} ldv_io_instance_callback_1_43($u7, in_$p2, out_$p108, $u8);
    goto corral_source_split_4659;

  $bb46:
    assume {:verifier.code 0} true;
    out_$p108 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4658;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume out_$i78 == 1;
    goto corral_source_split_4656;

  SeqInstr_555:
    goto corral_source_split_4666;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} ldv_io_instance_callback_1_42($u6, in_$p2, out_$p109, in_$p20);
    goto SeqInstr_554;

  $bb50:
    assume {:verifier.code 0} true;
    out_$p109 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4665;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume out_$i79 == 1;
    goto corral_source_split_4663;

  SeqInstr_558:
    goto corral_source_split_4673;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} ldv_io_instance_callback_1_41($u12, in_$p2, out_$p110, in_$p30);
    goto SeqInstr_557;

  $bb54:
    assume {:verifier.code 0} true;
    out_$p110 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4672;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume out_$i80 == 1;
    goto corral_source_split_4670;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} ldv_io_instance_callback_1_40($u13, in_$p2, out_$p111, in_$p8);
    goto corral_source_split_4680;

  $bb58:
    assume {:verifier.code 0} true;
    out_$p111 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4679;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb56:
    assume out_$i81 == 1;
    goto corral_source_split_4677;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} ldv_io_instance_callback_1_39($u14, in_$p2, out_$p112, in_$p6);
    goto corral_source_split_4687;

  $bb62:
    assume {:verifier.code 0} true;
    out_$p112 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4686;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb60:
    assume out_$i82 == 1;
    goto corral_source_split_4684;

  SeqInstr_561:
    goto corral_source_split_4694;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} ldv_io_instance_callback_1_38($u14, in_$p2, out_$p113, in_$p6);
    goto SeqInstr_560;

  $bb66:
    assume {:verifier.code 0} true;
    out_$p113 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4693;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb64:
    assume out_$i83 == 1;
    goto corral_source_split_4691;

  SeqInstr_564:
    goto corral_source_split_4701;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} ldv_io_instance_callback_1_37($u9, in_$p2, out_$p114, in_$p12);
    goto SeqInstr_563;

  $bb70:
    assume {:verifier.code 0} true;
    out_$p114 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4700;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb68:
    assume out_$i84 == 1;
    goto corral_source_split_4698;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} ldv_io_instance_callback_1_36($u10, in_$p2, out_$p115, in_$p32);
    goto corral_source_split_4708;

  $bb74:
    assume {:verifier.code 0} true;
    out_$p115 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4707;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb72:
    assume out_$i85 == 1;
    goto corral_source_split_4705;

  SeqInstr_567:
    goto corral_source_split_4715;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} ldv_io_instance_callback_1_35($u11, in_$p2, out_$p116, in_$p28);
    goto SeqInstr_566;

  $bb78:
    assume {:verifier.code 0} true;
    out_$p116 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4714;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb76:
    assume out_$i86 == 1;
    goto corral_source_split_4712;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} ldv_free(out_$p120);
    goto corral_source_split_4726;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    out_$p120 := $bitcast.ref.ref(out_$p118);
    goto corral_source_split_4725;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} ldv_io_instance_callback_1_32($u15, in_$p2, out_$p119, out_$p118);
    goto corral_source_split_4724;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    out_$p119 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4723;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    out_$p118 := $bitcast.ref.ref(out_$p117);
    goto corral_source_split_4722;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} out_$p117 := ldv_xmalloc(4);
    goto corral_source_split_4721;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb80:
    assume out_$i87 == 1;
    goto corral_source_split_4719;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} ldv_io_instance_callback_1_31($u6, in_$p2, out_$p121, in_$p20);
    goto corral_source_split_4733;

  $bb86:
    assume {:verifier.code 0} true;
    out_$p121 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4732;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb84:
    assume out_$i88 == 1;
    goto corral_source_split_4730;

  SeqInstr_570:
    goto corral_source_split_4740;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} ldv_io_instance_callback_1_30($u16, in_$p2, out_$p122, in_$p10);
    goto SeqInstr_569;

  $bb90:
    assume {:verifier.code 0} true;
    out_$p122 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4739;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb88:
    assume out_$i89 == 1;
    goto corral_source_split_4737;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} ldv_io_instance_callback_1_29($u17, in_$p2, out_$p123, in_$p26);
    goto corral_source_split_4747;

  $bb94:
    assume {:verifier.code 0} true;
    out_$p123 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4746;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb92:
    assume out_$i90 == 1;
    goto corral_source_split_4744;

  SeqInstr_573:
    goto corral_source_split_4754;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} ldv_io_instance_callback_1_28($u18, in_$p2, out_$p124, in_$p24);
    goto SeqInstr_572;

  $bb98:
    assume {:verifier.code 0} true;
    out_$p124 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4753;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb96:
    assume out_$i91 == 1;
    goto corral_source_split_4751;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} ldv_io_instance_callback_1_27($u19, in_$p2, out_$p125, in_$p22);
    goto corral_source_split_4761;

  $bb102:
    assume {:verifier.code 0} true;
    out_$p125 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4760;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb100:
    assume out_$i92 == 1;
    goto corral_source_split_4758;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} ldv_io_instance_callback_1_26($u20, in_$p2, out_$p126, in_$p18);
    goto corral_source_split_4768;

  $bb106:
    assume {:verifier.code 0} true;
    out_$p126 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4767;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb104:
    assume out_$i93 == 1;
    goto corral_source_split_4765;

  SeqInstr_576:
    goto corral_source_split_4775;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} ldv_io_instance_callback_1_25($u14, in_$p2, out_$p127, in_$p6);
    goto SeqInstr_575;

  $bb110:
    assume {:verifier.code 0} true;
    out_$p127 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4774;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb108:
    assume out_$i94 == 1;
    goto corral_source_split_4772;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} ldv_io_instance_callback_1_22($u21, in_$p2, $u8, $u22);
    goto corral_source_split_4781;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb112:
    assume out_$i95 == 1;
    goto corral_source_split_4779;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} ldv_free(out_$p131);
    goto corral_source_split_4793;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    out_$p131 := $bitcast.ref.ref(out_$p130);
    goto corral_source_split_4792;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} ldv_free(out_$p128);
    goto corral_source_split_4791;

  SeqInstr_579:
    goto corral_source_split_4790;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} ldv_io_instance_callback_1_19($u23, in_$p2, out_$p128, $u22, out_$p130);
    goto SeqInstr_578;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    out_$p130 := $bitcast.ref.ref(out_$p129);
    goto corral_source_split_4789;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} out_$p129 := ldv_xmalloc(8);
    goto corral_source_split_4788;

  $bb118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} out_$p128 := ldv_xmalloc(1);
    goto corral_source_split_4787;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb116:
    assume out_$i96 == 1;
    goto corral_source_split_4785;

  SeqInstr_582:
    goto corral_source_split_4799;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} ldv_io_instance_callback_1_18($u24, in_$p2, in_$p4);
    goto SeqInstr_581;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb120:
    assume out_$i97 == 1;
    goto corral_source_split_4797;

  SeqInstr_585:
    goto corral_source_split_4805;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} ldv_io_instance_callback_1_17($u25, in_$p2, in_$p36);
    goto SeqInstr_584;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb124:
    assume out_$i98 == 1;
    goto corral_source_split_4803;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} ldv_io_instance_callback_1_4($u26, in_$p34);
    goto corral_source_split_4811;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb128:
    assume out_$i99 == 1;
    goto corral_source_split_4809;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} ldv_assume(out_$i46);
    goto corral_source_split_4587;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i1.i32(out_$i45);
    goto corral_source_split_4586;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i42, 0);
    goto corral_source_split_4585;

  $bb5:
    assume out_$i44 == 1;
    goto corral_source_split_4584;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_4582;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} out_$i43 := ldv_undef_int();
    call {:si_unique_call 860} {:cexpr "tmp___17"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_4581;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} out_$i42 := ldv_filter_err_code(out_$i41);
    call {:si_unique_call 858} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_4580;

  SeqInstr_540:
    call {:si_unique_call 856} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_4579;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} out_$i41 := ldv_io_instance_probe_1_11(out_$p40, in_$p2);
    goto SeqInstr_539;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.37, out_$p39);
    goto corral_source_split_4578;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} ldv_assume(out_$i48);
    goto corral_source_split_4592;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i1.i32(out_$i47);
    goto corral_source_split_4591;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i32(out_$i42, 0);
    goto corral_source_split_4590;

  $bb6:
    assume !(out_$i44 == 1);
    goto corral_source_split_4589;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$p133 := ldv_v4l2_file_operations_io_instance_1_loop_$bb4(in_$p2, in_$p4, in_$p6, in_$p8, in_$p10, in_$p12, in_$p14, in_$p16, in_$p18, in_$p20, in_$p22, in_$p24, in_$p26, in_$p28, in_$p30, in_$p32, in_$p34, in_$p36, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$p133);
    return;

  exit:
    return;
}



procedure ldv_v4l2_file_operations_io_instance_1_loop_$bb4(in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$p36: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i69: i32, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref) returns (out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i69: i32, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref);
  modifies $M.1, $M.8, $M.5, $M.4, $M.31, $M.10, $M.32, assertsPassed, $M.11, $CurrAddr, $M.36, $M.33, $M.34, $M.35, $M.26, $M.27;


