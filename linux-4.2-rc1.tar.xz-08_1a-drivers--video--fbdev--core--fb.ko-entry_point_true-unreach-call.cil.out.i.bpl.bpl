var $M.0: [ref]i8;

var $M.10: [ref]i8;

var $M.11: [ref]i8;

var $M.12: [ref]i8;

var $M.13: [ref]i8;

var $M.14: [ref]ref;

var $M.15: [ref]ref;

var $M.16: [ref]i8;

var $M.17: [ref]i8;

var $M.18: [ref]i32;

var $M.19: [ref]ref;

var $M.20: ref;

var $M.21: i32;

var $M.22: [ref]i8;

var $M.23: [ref]ref;

var $M.24: [ref]ref;

var $M.25: [ref]ref;

var $M.26: [ref]ref;

var $M.27: [ref]i24;

var $M.28: [ref]i8;

var $M.29: [ref]i8;

var $M.46: [ref]i8;

var $M.47: [ref]i8;

var $M.48: [ref]ref;

var $M.49: [ref]i32;

var $M.50: [ref]i16;

var $M.51: [ref]i32;

var $M.52: [ref]i32;

var $M.53: [ref]i16;

var $M.54: [ref]i32;

var $M.55: [ref]i32;

var $M.56: [ref]i8;

var $M.57: [ref]i8;

var $M.58: [ref]i8;

var $M.60: [ref]i8;

var $M.61: i32;

var $M.62: ref;

var $M.63: i32;

var $M.64: ref;

var $M.65: i32;

var $M.66: ref;

var $M.67: i32;

var $M.68: ref;

var $M.69: [ref]i8;

var $M.70: i32;

var $M.71: ref;

var $M.72: i32;

var $M.76: [ref]i8;

var $M.77: ref;

var $M.78: ref;

var $M.79: i32;

var $M.81: i32;

var $M.82: i32;

var $M.83: i32;

var $M.84: i32;

var $M.85: i32;

var $M.86: ref;

var $M.87: ref;

var $M.88: ref;

var $M.89: ref;

var $M.90: i32;

var $M.91: i32;

var $M.92: ref;

var $M.93: ref;

var $M.94: i32;

var $M.95: ref;

var $M.96: ref;

var $M.100: [ref]i8;

var $M.103: [ref]i8;

var $M.106: [ref]i8;

var $M.107: [ref]i8;

var $M.108: [ref]i8;

var $M.109: [ref]i8;

var $M.110: [ref]i8;

var $M.111: [ref]i8;

var $M.112: [ref]i8;

var $M.113: [ref]i8;

var $M.114: [ref]i8;

var $M.115: [ref]i8;

var $M.116: [ref]i8;

var $M.117: [ref]i8;

var $M.118: [ref]i8;

var $M.119: [ref]i8;

var $M.120: [ref]i8;

var $M.121: [ref]i8;

var $M.122: [ref]i8;

var $M.123: [ref]i8;

var $M.124: [ref]i8;

var $M.125: [ref]i8;

var $M.126: [ref]i8;

var $M.127: [ref]i8;

var $M.128: [ref]i8;

var $M.129: [ref]i8;

var $M.130: [ref]i8;

var $M.131: [ref]i8;

var $M.132: [ref]i8;

var $M.133: [ref]i8;

var $M.134: [ref]i8;

var $M.135: [ref]i8;

var $M.136: [ref]i8;

var $M.137: [ref]i8;

var $M.138: [ref]i8;

var $M.139: [ref]i8;

var $M.140: [ref]i8;

var $M.141: [ref]i8;

var $M.142: [ref]i8;

var $M.143: [ref]i8;

var $M.204: [ref]i8;

var $M.205: [ref]i8;

var $M.206: [ref]i8;

var $M.207: [ref]i8;

var $M.208: [ref]i8;

var $M.209: [ref]i8;

var $M.210: [ref]i8;

var $M.211: [ref]i8;

var $M.212: [ref]i8;

var $M.213: [ref]i8;

var $M.214: [ref]i8;

var $M.215: [ref]i8;

var $M.216: [ref]i8;

var $M.217: [ref]i8;

var $M.218: [ref]i8;

var $M.253: [ref]i32;

var $M.254: [ref]i32;

var $M.255: [ref]i32;

var $M.324: [ref]i8;

var $M.325: [ref]i8;

var $M.326: [ref]i8;

var $M.327: [ref]i8;

var $M.328: [ref]i8;

var $M.329: [ref]i8;

var $M.330: [ref]i8;

var $M.331: [ref]i8;

var $M.332: [ref]i8;

var $M.333: [ref]i8;

var $M.334: [ref]i8;

var $M.335: [ref]i8;

var $M.336: [ref]i8;

var $M.337: [ref]i8;

var $M.338: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 691017);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const {:count 32} registered_fb: ref;

axiom registered_fb == $sub.ref(0, 2308);

const __ksymtab_registered_fb: ref;

axiom __ksymtab_registered_fb == $sub.ref(0, 3348);

const {:count 14} __kstrtab_registered_fb: ref;

axiom __kstrtab_registered_fb == $sub.ref(0, 4386);

const num_registered_fb: ref;

axiom num_registered_fb == $sub.ref(0, 5414);

const __ksymtab_num_registered_fb: ref;

axiom __ksymtab_num_registered_fb == $sub.ref(0, 6454);

const {:count 18} __kstrtab_num_registered_fb: ref;

axiom __kstrtab_num_registered_fb == $sub.ref(0, 7496);

const __ksymtab_lock_fb_info: ref;

axiom __ksymtab_lock_fb_info == $sub.ref(0, 8536);

const {:count 13} __kstrtab_lock_fb_info: ref;

axiom __kstrtab_lock_fb_info == $sub.ref(0, 9573);

const {:count 23} __kstrtab_fb_deferred_io_cleanup: ref;

axiom __kstrtab_fb_deferred_io_cleanup == $sub.ref(0, 10620);

const {:count 20} __kstrtab_fb_deferred_io_open: ref;

axiom __kstrtab_fb_deferred_io_open == $sub.ref(0, 11664);

const fb_deferred_io_aops: ref;

axiom fb_deferred_io_aops == $sub.ref(0, 12840);

const {:count 20} __kstrtab_fb_deferred_io_init: ref;

axiom __kstrtab_fb_deferred_io_init == $sub.ref(0, 13884);

const fb_deferred_io_vm_ops: ref;

axiom fb_deferred_io_vm_ops == $sub.ref(0, 14996);

const {:count 21} __kstrtab_fb_deferred_io_fsync: ref;

axiom __kstrtab_fb_deferred_io_fsync == $sub.ref(0, 16041);

const {:count 8} fb_cvt_vbi_tab: ref;

axiom fb_cvt_vbi_tab == $sub.ref(0, 17073);

const {:count 17} __kstrtab_fb_find_mode_cvt: ref;

axiom __kstrtab_fb_find_mode_cvt == $sub.ref(0, 18114);

const {:count 13} __kstrtab_fb_find_mode: ref;

axiom __kstrtab_fb_find_mode == $sub.ref(0, 19151);

const {:count 25} __kstrtab_fb_videomode_to_modelist: ref;

axiom __kstrtab_fb_videomode_to_modelist == $sub.ref(0, 20200);

const {:count 21} __kstrtab_fb_find_nearest_mode: ref;

axiom __kstrtab_fb_find_nearest_mode == $sub.ref(0, 21245);

const {:count 18} __kstrtab_fb_find_best_mode: ref;

axiom __kstrtab_fb_find_best_mode == $sub.ref(0, 22287);

const {:count 14} __kstrtab_fb_match_mode: ref;

axiom __kstrtab_fb_match_mode == $sub.ref(0, 23325);

const {:count 17} __kstrtab_fb_add_videomode: ref;

axiom __kstrtab_fb_add_videomode == $sub.ref(0, 24366);

const {:count 17} __kstrtab_fb_mode_is_equal: ref;

axiom __kstrtab_fb_mode_is_equal == $sub.ref(0, 25407);

const {:count 20} __kstrtab_fb_var_to_videomode: ref;

axiom __kstrtab_fb_var_to_videomode == $sub.ref(0, 26451);

const {:count 20} __kstrtab_fb_videomode_to_var: ref;

axiom __kstrtab_fb_videomode_to_var == $sub.ref(0, 27495);

const {:count 21} __kstrtab_fb_find_best_display: ref;

axiom __kstrtab_fb_find_best_display == $sub.ref(0, 28540);

const {:count 20} __kstrtab_fb_destroy_modelist: ref;

axiom __kstrtab_fb_destroy_modelist == $sub.ref(0, 29584);

const {:count 60} modedb: ref;

axiom modedb == $sub.ref(0, 34448);

const {:count 10} __kstrtab_dmt_modes: ref;

axiom __kstrtab_dmt_modes == $sub.ref(0, 35482);

const {:count 11} __kstrtab_vesa_modes: ref;

axiom __kstrtab_vesa_modes == $sub.ref(0, 36517);

const {:count 20} __kstrtab_fb_bl_default_curve: ref;

axiom __kstrtab_fb_bl_default_curve == $sub.ref(0, 37561);

const {:count 13} device_attrs: ref;

axiom device_attrs == $sub.ref(0, 39209);

const {:count 20} __kstrtab_framebuffer_release: ref;

axiom __kstrtab_framebuffer_release == $sub.ref(0, 40253);

const {:count 18} __kstrtab_framebuffer_alloc: ref;

axiom __kstrtab_framebuffer_alloc == $sub.ref(0, 41295);

const {:count 16} __kstrtab_fb_invert_cmaps: ref;

axiom __kstrtab_fb_invert_cmaps == $sub.ref(0, 42335);

const {:count 16} __kstrtab_fb_default_cmap: ref;

axiom __kstrtab_fb_default_cmap == $sub.ref(0, 43375);

const {:count 12} __kstrtab_fb_set_cmap: ref;

axiom __kstrtab_fb_set_cmap == $sub.ref(0, 44411);

const {:count 13} __kstrtab_fb_copy_cmap: ref;

axiom __kstrtab_fb_copy_cmap == $sub.ref(0, 45448);

const {:count 16} __kstrtab_fb_dealloc_cmap: ref;

axiom __kstrtab_fb_dealloc_cmap == $sub.ref(0, 46488);

const {:count 14} __kstrtab_fb_alloc_cmap: ref;

axiom __kstrtab_fb_alloc_cmap == $sub.ref(0, 47526);

const {:count 16} blue16: ref;

axiom blue16 == $sub.ref(0, 48582);

const {:count 16} green16: ref;

axiom green16 == $sub.ref(0, 49638);

const {:count 16} red16: ref;

axiom red16 == $sub.ref(0, 50694);

const {:count 8} blue8: ref;

axiom blue8 == $sub.ref(0, 51734);

const {:count 8} green8: ref;

axiom green8 == $sub.ref(0, 52774);

const {:count 8} red8: ref;

axiom red8 == $sub.ref(0, 53814);

const {:count 4} blue4: ref;

axiom blue4 == $sub.ref(0, 54846);

const {:count 4} green4: ref;

axiom green4 == $sub.ref(0, 55878);

const {:count 4} red4: ref;

axiom red4 == $sub.ref(0, 56910);

const {:count 2} blue2: ref;

axiom blue2 == $sub.ref(0, 57938);

const {:count 2} green2: ref;

axiom green2 == $sub.ref(0, 58966);

const {:count 2} red2: ref;

axiom red2 == $sub.ref(0, 59994);

const default_16_colors: ref;

axiom default_16_colors == $sub.ref(0, 61058);

const default_8_colors: ref;

axiom default_8_colors == $sub.ref(0, 62122);

const default_4_colors: ref;

axiom default_4_colors == $sub.ref(0, 63186);

const default_2_colors: ref;

axiom default_2_colors == $sub.ref(0, 64250);

const {:count 18} __kstrtab_fb_destroy_modedb: ref;

axiom __kstrtab_fb_destroy_modedb == $sub.ref(0, 65292);

const {:count 17} __kstrtab_fb_validate_mode: ref;

axiom __kstrtab_fb_validate_mode == $sub.ref(0, 66333);

const {:count 12} __kstrtab_fb_get_mode: ref;

axiom __kstrtab_fb_get_mode == $sub.ref(0, 67369);

const {:count 21} __kstrtab_fb_edid_add_monspecs: ref;

axiom __kstrtab_fb_edid_add_monspecs == $sub.ref(0, 68414);

const {:count 20} __kstrtab_fb_edid_to_monspecs: ref;

axiom __kstrtab_fb_edid_to_monspecs == $sub.ref(0, 69458);

const {:count 14} __kstrtab_fb_parse_edid: ref;

axiom __kstrtab_fb_parse_edid == $sub.ref(0, 70496);

const {:count 17} __kstrtab_fb_firmware_edid: ref;

axiom __kstrtab_fb_firmware_edid == $sub.ref(0, 71537);

const {:count 20} __kstrtab_of_get_fb_videomode: ref;

axiom __kstrtab_of_get_fb_videomode == $sub.ref(0, 72581);

const {:count 28} __kstrtab_fb_videomode_from_videomode: ref;

axiom __kstrtab_fb_videomode_from_videomode == $sub.ref(0, 73633);

const {:count 8} edid_v1_header: ref;

axiom edid_v1_header == $sub.ref(0, 74665);

const {:count 3} brokendb: ref;

axiom brokendb == $sub.ref(0, 75725);

const proc_fb_seq_ops: ref;

axiom proc_fb_seq_ops == $sub.ref(0, 76781);

const fb_fops: ref;

axiom fb_fops == $sub.ref(0, 78029);

const fb_proc_fops: ref;

axiom fb_proc_fops == $sub.ref(0, 79277);

const {:count 15} __kstrtab_fb_set_suspend: ref;

axiom __kstrtab_fb_set_suspend == $sub.ref(0, 80316);

const {:count 23} __kstrtab_unregister_framebuffer: ref;

axiom __kstrtab_unregister_framebuffer == $sub.ref(0, 81363);

const {:count 21} __kstrtab_register_framebuffer: ref;

axiom __kstrtab_register_framebuffer == $sub.ref(0, 82408);

const {:count 32} __kstrtab_remove_conflicting_framebuffers: ref;

axiom __kstrtab_remove_conflicting_framebuffers == $sub.ref(0, 83464);

const registration_lock: ref;

axiom registration_lock == $sub.ref(0, 84648);

const {:count 19} __kstrtab_unlink_framebuffer: ref;

axiom __kstrtab_unlink_framebuffer == $sub.ref(0, 85691);

const {:count 9} __kstrtab_fb_class: ref;

axiom __kstrtab_fb_class == $sub.ref(0, 86724);

const {:count 9} __kstrtab_fb_blank: ref;

axiom __kstrtab_fb_blank == $sub.ref(0, 87757);

const {:count 11} __kstrtab_fb_set_var: ref;

axiom __kstrtab_fb_set_var == $sub.ref(0, 88792);

const {:count 15} __kstrtab_fb_pan_display: ref;

axiom __kstrtab_fb_pan_display == $sub.ref(0, 89831);

const {:count 13} __kstrtab_fb_show_logo: ref;

axiom __kstrtab_fb_show_logo == $sub.ref(0, 90868);

const {:count 16} __kstrtab_fb_prepare_logo: ref;

axiom __kstrtab_fb_prepare_logo == $sub.ref(0, 91908);

const {:count 21} __kstrtab_fb_get_buffer_offset: ref;

axiom __kstrtab_fb_get_buffer_offset == $sub.ref(0, 92953);

const {:count 24} __kstrtab_fb_pad_unaligned_buffer: ref;

axiom __kstrtab_fb_pad_unaligned_buffer == $sub.ref(0, 94001);

const {:count 22} __kstrtab_fb_pad_aligned_buffer: ref;

axiom __kstrtab_fb_pad_aligned_buffer == $sub.ref(0, 95047);

const {:count 19} __kstrtab_fb_get_color_depth: ref;

axiom __kstrtab_fb_get_color_depth == $sub.ref(0, 96090);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 97118);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 98146);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 99178);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 100206);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 101238);

const fb_logo: ref;

axiom fb_logo == $sub.ref(0, 102286);

const fb_class: ref;

axiom fb_class == $sub.ref(0, 103318);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 104346);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 105374);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 106402);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 107430);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 108458);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 109490);

const fb_deferred_io_vm_ops_group0: ref;

axiom fb_deferred_io_vm_ops_group0 == $sub.ref(0, 110522);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 111550);

const proc_fb_seq_ops_group1: ref;

axiom proc_fb_seq_ops_group1 == $sub.ref(0, 112582);

const fb_proc_fops_group1: ref;

axiom fb_proc_fops_group1 == $sub.ref(0, 113614);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 114642);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 115670);

const proc_fb_seq_ops_group3: ref;

axiom proc_fb_seq_ops_group3 == $sub.ref(0, 116702);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 117730);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 118758);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 119786);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 120814);

const fb_fops_group2: ref;

axiom fb_fops_group2 == $sub.ref(0, 121846);

const fb_proc_fops_group2: ref;

axiom fb_proc_fops_group2 == $sub.ref(0, 122878);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 123910);

const fb_deferred_io_vm_ops_group1: ref;

axiom fb_deferred_io_vm_ops_group1 == $sub.ref(0, 124942);

const fb_fops_group1: ref;

axiom fb_fops_group1 == $sub.ref(0, 125974);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 127006);

const proc_fb_seq_ops_group2: ref;

axiom proc_fb_seq_ops_group2 == $sub.ref(0, 128038);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 129070);

const ldv_module_refcounter: ref;

axiom ldv_module_refcounter == $sub.ref(0, 130098);

const __ksymtab_fb_deferred_io_cleanup: ref;

axiom __ksymtab_fb_deferred_io_cleanup == $sub.ref(0, 131138);

const __ksymtab_fb_deferred_io_open: ref;

axiom __ksymtab_fb_deferred_io_open == $sub.ref(0, 132178);

const __ksymtab_fb_deferred_io_init: ref;

axiom __ksymtab_fb_deferred_io_init == $sub.ref(0, 133218);

const __ksymtab_fb_deferred_io_fsync: ref;

axiom __ksymtab_fb_deferred_io_fsync == $sub.ref(0, 134258);

const __ksymtab_fb_find_mode_cvt: ref;

axiom __ksymtab_fb_find_mode_cvt == $sub.ref(0, 135298);

const __ksymtab_fb_find_mode: ref;

axiom __ksymtab_fb_find_mode == $sub.ref(0, 136338);

const __ksymtab_fb_videomode_to_modelist: ref;

axiom __ksymtab_fb_videomode_to_modelist == $sub.ref(0, 137378);

const __ksymtab_fb_find_nearest_mode: ref;

axiom __ksymtab_fb_find_nearest_mode == $sub.ref(0, 138418);

const __ksymtab_fb_find_best_mode: ref;

axiom __ksymtab_fb_find_best_mode == $sub.ref(0, 139458);

const __ksymtab_fb_match_mode: ref;

axiom __ksymtab_fb_match_mode == $sub.ref(0, 140498);

const __ksymtab_fb_add_videomode: ref;

axiom __ksymtab_fb_add_videomode == $sub.ref(0, 141538);

const __ksymtab_fb_mode_is_equal: ref;

axiom __ksymtab_fb_mode_is_equal == $sub.ref(0, 142578);

const __ksymtab_fb_var_to_videomode: ref;

axiom __ksymtab_fb_var_to_videomode == $sub.ref(0, 143618);

const __ksymtab_fb_videomode_to_var: ref;

axiom __ksymtab_fb_videomode_to_var == $sub.ref(0, 144658);

const __ksymtab_fb_find_best_display: ref;

axiom __ksymtab_fb_find_best_display == $sub.ref(0, 145698);

const __ksymtab_fb_destroy_modelist: ref;

axiom __ksymtab_fb_destroy_modelist == $sub.ref(0, 146738);

const __ksymtab_dmt_modes: ref;

axiom __ksymtab_dmt_modes == $sub.ref(0, 147778);

const {:count 80} dmt_modes: ref;

axiom dmt_modes == $sub.ref(0, 150722);

const __ksymtab_vesa_modes: ref;

axiom __ksymtab_vesa_modes == $sub.ref(0, 151762);

const {:count 43} vesa_modes: ref;

axiom vesa_modes == $sub.ref(0, 155538);

const {:count 64} cea_modes: ref;

axiom cea_modes == $sub.ref(0, 160658);

const __ksymtab_fb_bl_default_curve: ref;

axiom __ksymtab_fb_bl_default_curve == $sub.ref(0, 161698);

const __ksymtab_framebuffer_release: ref;

axiom __ksymtab_framebuffer_release == $sub.ref(0, 162738);

const __ksymtab_framebuffer_alloc: ref;

axiom __ksymtab_framebuffer_alloc == $sub.ref(0, 163778);

const __ksymtab_fb_invert_cmaps: ref;

axiom __ksymtab_fb_invert_cmaps == $sub.ref(0, 164818);

const __ksymtab_fb_default_cmap: ref;

axiom __ksymtab_fb_default_cmap == $sub.ref(0, 165858);

const __ksymtab_fb_set_cmap: ref;

axiom __ksymtab_fb_set_cmap == $sub.ref(0, 166898);

const __ksymtab_fb_copy_cmap: ref;

axiom __ksymtab_fb_copy_cmap == $sub.ref(0, 167938);

const __ksymtab_fb_dealloc_cmap: ref;

axiom __ksymtab_fb_dealloc_cmap == $sub.ref(0, 168978);

const __ksymtab_fb_alloc_cmap: ref;

axiom __ksymtab_fb_alloc_cmap == $sub.ref(0, 170018);

const __ksymtab_fb_destroy_modedb: ref;

axiom __ksymtab_fb_destroy_modedb == $sub.ref(0, 171058);

const __ksymtab_fb_validate_mode: ref;

axiom __ksymtab_fb_validate_mode == $sub.ref(0, 172098);

const __ksymtab_fb_get_mode: ref;

axiom __ksymtab_fb_get_mode == $sub.ref(0, 173138);

const __ksymtab_fb_edid_add_monspecs: ref;

axiom __ksymtab_fb_edid_add_monspecs == $sub.ref(0, 174178);

const __ksymtab_fb_edid_to_monspecs: ref;

axiom __ksymtab_fb_edid_to_monspecs == $sub.ref(0, 175218);

const __ksymtab_fb_parse_edid: ref;

axiom __ksymtab_fb_parse_edid == $sub.ref(0, 176258);

const __ksymtab_fb_firmware_edid: ref;

axiom __ksymtab_fb_firmware_edid == $sub.ref(0, 177298);

const __ksymtab_of_get_fb_videomode: ref;

axiom __ksymtab_of_get_fb_videomode == $sub.ref(0, 178338);

const __ksymtab_fb_videomode_from_videomode: ref;

axiom __ksymtab_fb_videomode_from_videomode == $sub.ref(0, 179378);

const __ksymtab_fb_set_suspend: ref;

axiom __ksymtab_fb_set_suspend == $sub.ref(0, 180418);

const __ksymtab_unregister_framebuffer: ref;

axiom __ksymtab_unregister_framebuffer == $sub.ref(0, 181458);

const __ksymtab_register_framebuffer: ref;

axiom __ksymtab_register_framebuffer == $sub.ref(0, 182498);

const __ksymtab_remove_conflicting_framebuffers: ref;

axiom __ksymtab_remove_conflicting_framebuffers == $sub.ref(0, 183538);

const __ksymtab_unlink_framebuffer: ref;

axiom __ksymtab_unlink_framebuffer == $sub.ref(0, 184578);

const __ksymtab_fb_class: ref;

axiom __ksymtab_fb_class == $sub.ref(0, 185618);

const __ksymtab_fb_blank: ref;

axiom __ksymtab_fb_blank == $sub.ref(0, 186658);

const __ksymtab_fb_set_var: ref;

axiom __ksymtab_fb_set_var == $sub.ref(0, 187698);

const __ksymtab_fb_pan_display: ref;

axiom __ksymtab_fb_pan_display == $sub.ref(0, 188738);

const __ksymtab_fb_show_logo: ref;

axiom __ksymtab_fb_show_logo == $sub.ref(0, 189778);

const __ksymtab_fb_prepare_logo: ref;

axiom __ksymtab_fb_prepare_logo == $sub.ref(0, 190818);

const __ksymtab_fb_get_buffer_offset: ref;

axiom __ksymtab_fb_get_buffer_offset == $sub.ref(0, 191858);

const __ksymtab_fb_pad_unaligned_buffer: ref;

axiom __ksymtab_fb_pad_unaligned_buffer == $sub.ref(0, 192898);

const __ksymtab_fb_pad_aligned_buffer: ref;

axiom __ksymtab_fb_pad_aligned_buffer == $sub.ref(0, 193938);

const __ksymtab_fb_get_color_depth: ref;

axiom __ksymtab_fb_get_color_depth == $sub.ref(0, 194978);

const cpu_online_mask: ref;

axiom cpu_online_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const .str: ref;

axiom .str == $sub.ref(0, 196046);

const {:count 30} .str.24: ref;

axiom .str.24 == $sub.ref(0, 197100);

const {:count 49} .str.25: ref;

axiom .str.25 == $sub.ref(0, 198173);

const {:count 15} .str.26: ref;

axiom .str.26 == $sub.ref(0, 199212);

const {:count 18} .str.27: ref;

axiom .str.27 == $sub.ref(0, 200254);

const {:count 5} .str.28: ref;

axiom .str.28 == $sub.ref(0, 201283);

const {:count 58} .str.29: ref;

axiom .str.29 == $sub.ref(0, 202365);

const {:count 62} .str.30: ref;

axiom .str.30 == $sub.ref(0, 203451);

const {:count 65} .str.31: ref;

axiom .str.31 == $sub.ref(0, 204540);

const {:count 3} .str.1: ref;

axiom .str.1 == $sub.ref(0, 205567);

const {:count 20} .str.12: ref;

axiom .str.12 == $sub.ref(0, 206611);

const {:count 211} .str.3: ref;

axiom .str.3 == $sub.ref(0, 207846);

const {:count 36} .str.13: ref;

axiom .str.13 == $sub.ref(0, 208906);

const {:count 18} .str.43: ref;

axiom .str.43 == $sub.ref(0, 209948);

const {:count 62} .str.44: ref;

axiom .str.44 == $sub.ref(0, 211034);

const {:count 10} .str.42: ref;

axiom .str.42 == $sub.ref(0, 212068);

const edid_info: ref;

axiom edid_info == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 36} .str.38: ref;

axiom .str.38 == $sub.ref(0, 213128);

const {:count 33} .str.39: ref;

axiom .str.39 == $sub.ref(0, 214185);

const {:count 38} .str.40: ref;

axiom .str.40 == $sub.ref(0, 215247);

const {:count 78} .str.37: ref;

axiom .str.37 == $sub.ref(0, 216349);

const {:count 30} .str.41: ref;

axiom .str.41 == $sub.ref(0, 217403);

const {:count 21} .str.2: ref;

axiom .str.2 == $sub.ref(0, 218448);

const {:count 27} .str.4: ref;

axiom .str.4 == $sub.ref(0, 219499);

const {:count 19} .str.5: ref;

axiom .str.5 == $sub.ref(0, 220542);

const .str.6: ref;

axiom .str.6 == $sub.ref(0, 221567);

const {:count 5} .str.7: ref;

axiom .str.7 == $sub.ref(0, 222596);

const {:count 17} .str.8: ref;

axiom .str.8 == $sub.ref(0, 223637);

const {:count 23} .str.9: ref;

axiom .str.9 == $sub.ref(0, 224684);

const {:count 28} .str.10: ref;

axiom .str.10 == $sub.ref(0, 225736);

const {:count 26} .str.11: ref;

axiom .str.11 == $sub.ref(0, 226786);

const {:count 22} .str.14: ref;

axiom .str.14 == $sub.ref(0, 227832);

const fb_mode_option: ref;

axiom fb_mode_option == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 34} .str.15: ref;

axiom .str.15 == $sub.ref(0, 228890);

const {:count 39} .str.16: ref;

axiom .str.16 == $sub.ref(0, 229953);

const {:count 56} .str.17: ref;

axiom .str.17 == $sub.ref(0, 231033);

const {:count 29} .str.66: ref;

axiom .str.66 == $sub.ref(0, 232086);

const {:count 47} .str.67: ref;

axiom .str.67 == $sub.ref(0, 233157);

const {:count 3} .str.68: ref;

axiom .str.68 == $sub.ref(0, 234184);

const {:count 7} .str.69: ref;

axiom .str.69 == $sub.ref(0, 235215);

const {:count 2} .str.70: ref;

axiom .str.70 == $sub.ref(0, 236241);

const {:count 2} .str.71: ref;

axiom .str.71 == $sub.ref(0, 237267);

const {:count 2} .str.72: ref;

axiom .str.72 == $sub.ref(0, 238293);

const {:count 2} .str.73: ref;

axiom .str.73 == $sub.ref(0, 239319);

const {:count 3} .str.74: ref;

axiom .str.74 == $sub.ref(0, 240346);

const {:count 5} .str.75: ref;

axiom .str.75 == $sub.ref(0, 241375);

const {:count 39} .str.65: ref;

axiom .str.65 == $sub.ref(0, 242438);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 214} .str.18: ref;

axiom .str.18 == $sub.ref(0, 243676);

const {:count 15} .str.19: ref;

axiom .str.19 == $sub.ref(0, 244715);

const {:count 32} .str.20: ref;

axiom .str.20 == $sub.ref(0, 245771);

const {:count 33} .str.21: ref;

axiom .str.21 == $sub.ref(0, 246828);

const {:count 24} .str.76: ref;

axiom .str.76 == $sub.ref(0, 247876);

const {:count 28} .str.22: ref;

axiom .str.22 == $sub.ref(0, 248928);

const {:count 18} .str.23: ref;

axiom .str.23 == $sub.ref(0, 249970);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const boot_cpu_data: ref;

axiom boot_cpu_data == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const __cachemode2pte_tbl: ref;

axiom __cachemode2pte_tbl == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const {:count 211} .str.33: ref;

axiom .str.33 == $sub.ref(0, 251205);

const {:count 33} .str.45: ref;

axiom .str.45 == $sub.ref(0, 252262);

const cpu_tss: ref;

axiom cpu_tss == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

const {:count 7} .str.32: ref;

axiom .str.32 == $sub.ref(0, 253293);

const {:count 15} .str.46: ref;

axiom .str.46 == $sub.ref(0, 254332);

const {:count 6} .str.47: ref;

axiom .str.47 == $sub.ref(0, 255362);

const {:count 8} .str.48: ref;

axiom .str.48 == $sub.ref(0, 256394);

const {:count 7} .str.49: ref;

axiom .str.49 == $sub.ref(0, 257425);

const {:count 5} .str.50: ref;

axiom .str.50 == $sub.ref(0, 258454);

const {:count 6} .str.51: ref;

axiom .str.51 == $sub.ref(0, 259484);

const {:count 4} .str.52: ref;

axiom .str.52 == $sub.ref(0, 260512);

const {:count 13} .str.53: ref;

axiom .str.53 == $sub.ref(0, 261549);

const {:count 5} .str.54: ref;

axiom .str.54 == $sub.ref(0, 262578);

const {:count 7} .str.55: ref;

axiom .str.55 == $sub.ref(0, 263609);

const {:count 7} .str.56: ref;

axiom .str.56 == $sub.ref(0, 264640);

const {:count 6} .str.57: ref;

axiom .str.57 == $sub.ref(0, 265670);

const {:count 9} .str.58: ref;

axiom .str.58 == $sub.ref(0, 266703);

const {:count 49} .str.64: ref;

axiom .str.64 == $sub.ref(0, 267776);

const {:count 6} .str.63: ref;

axiom .str.63 == $sub.ref(0, 268806);

const {:count 4} .str.59: ref;

axiom .str.59 == $sub.ref(0, 269834);

const {:count 4} .str.62: ref;

axiom .str.62 == $sub.ref(0, 270862);

const {:count 7} .str.61: ref;

axiom .str.61 == $sub.ref(0, 271893);

const {:count 15} .str.60: ref;

axiom .str.60 == $sub.ref(0, 272932);

const {:count 23} .str.77: ref;

axiom .str.77 == $sub.ref(0, 273979);

const {:count 48} .str.78: ref;

axiom .str.78 == $sub.ref(0, 275051);

const {:count 19} .str.79: ref;

axiom .str.79 == $sub.ref(0, 276094);

const {:count 36} .str.34: ref;

axiom .str.34 == $sub.ref(0, 277154);

const {:count 9} .str.35: ref;

axiom .str.35 == $sub.ref(0, 278187);

const {:count 41} .str.36: ref;

axiom .str.36 == $sub.ref(0, 279252);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 280284);

const {:count 3} .str.1.172: ref;

axiom .str.1.172 == $sub.ref(0, 281311);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 282349);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 283377);

const lock_fb_info: ref;

axiom lock_fb_info == $sub.ref(0, 284409);

procedure lock_fb_info($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation lock_fb_info($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(16, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} mutex_lock_nested($p1, 0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(16, 1));
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} mutex_unlock($p6);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 285441);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 286473);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 287505);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    return;
}



const fb_get_color_depth: ref;

axiom fb_get_color_depth == $sub.ref(0, 288537);

procedure fb_get_color_depth($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fb_get_color_depth($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $i11: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $i32: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $i39: i32;
  var $p42: ref;
  var $i43: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i40: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(4, 1));
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i11, $i14);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(32, 1)), $mul.ref(4, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i43, $i46);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(4, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i47, $i50);
    call {:si_unique_call 3} {:cexpr "depth"} boogie_si_record_i32($i51);
    assume {:verifier.code 0} true;
    $i40 := $i51;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i8 := $i40;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(32, 1)), $mul.ref(4, 1));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i18, $i21);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb9;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i25, $i28);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb9;

  $bb12:
    assume $i29 == 1;
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i32, $i35);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb9;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    call {:si_unique_call 4} {:cexpr "depth"} boogie_si_record_i32($i39);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb16;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const fb_pad_aligned_buffer: ref;

axiom fb_pad_aligned_buffer == $sub.ref(0, 289569);

procedure fb_pad_aligned_buffer($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32);



const __fb_pad_aligned_buffer: ref;

axiom __fb_pad_aligned_buffer == $sub.ref(0, 290601);

procedure __fb_pad_aligned_buffer($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32);



const fb_pad_unaligned_buffer: ref;

axiom fb_pad_unaligned_buffer == $sub.ref(0, 291633);

procedure fb_pad_unaligned_buffer($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i32);



const fb_get_buffer_offset: ref;

axiom fb_get_buffer_offset == $sub.ref(0, 292665);

procedure fb_get_buffer_offset($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);



const fb_prepare_logo: ref;

axiom fb_prepare_logo == $sub.ref(0, 293697);

procedure fb_prepare_logo($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10;



implementation fb_prepare_logo($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p20: ref;
  var $i21: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i1;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $p56: ref;
  var $i57: i32;
  var $p60: ref;
  var $i61: i32;
  var $i58: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $i76: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $i13: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} {:cexpr "fb_prepare_logo:arg:rotate"} boogie_si_record_i32($i1);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i4 := fb_get_color_depth($p2, $p3);
    call {:si_unique_call 7} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.10;
    call {:si_unique_call 8} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, fb_logo, 0, 24, $zext.i32.i64(8), 0 == 1);
    $M.10 := cmdloc_dummy_var_1;
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 131072);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(36, 1));
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 4);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i42 := $i4;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(36, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 5);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i48 := $i42;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $p49 := fb_find_logo($i48);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $add.ref($add.ref(fb_logo, $mul.ref(0, 24)), $mul.ref(16, 1)), $p49);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.10, $add.ref($add.ref(fb_logo, $mul.ref(0, 24)), $mul.ref(16, 1)));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i1, 0);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i53 == 1);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i1, 2);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i54 == 1);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(0, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    call {:si_unique_call 14} {:cexpr "yres"} boogie_si_record_i32($i61);
    assume {:verifier.code 0} true;
    $i58 := $i61;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.10, $add.ref($add.ref(fb_logo, $mul.ref(0, 24)), $mul.ref(16, 1)));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i65 := $ugt.i32($i64, $i58);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.10, $add.ref($add.ref(fb_logo, $mul.ref(0, 24)), $mul.ref(16, 1)));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 3);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i69 == 1);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.10, $add.ref($add.ref(fb_logo, $mul.ref(0, 24)), $mul.ref(16, 1)));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 2);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i73 == 1);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, fb_logo, 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.10, fb_logo);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i75 := $sgt.i32($i74, 4);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.10, $add.ref($add.ref(fb_logo, $mul.ref(0, 24)), $mul.ref(16, 1)));
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $i87 := fb_prepare_extra_logos($p0, $i86, $i58);
    call {:si_unique_call 16} {:cexpr "tmp___0"} boogie_si_record_i32($i87);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i13 := $i87;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb41:
    assume $i75 == 1;
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i76 := $sgt.i32($i48, 4);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb43;

  $bb44:
    assume $i76 == 1;
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(36, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i79, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i79, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i79, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb51:
    assume $i82 == 1;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $add.ref($add.ref(fb_logo, $mul.ref(0, 24)), $mul.ref(4, 1)), 1);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $add.ref($add.ref(fb_logo, $mul.ref(0, 24)), $mul.ref(12, 1)), 1);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb49:
    assume $i81 == 1;
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $add.ref($add.ref(fb_logo, $mul.ref(0, 24)), $mul.ref(12, 1)), 1);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb47:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i79, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb53;

  $bb54:
    assume $i83 == 1;
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $add.ref($add.ref(fb_logo, $mul.ref(0, 24)), $mul.ref(8, 1)), 1);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb38:
    assume $i73 == 1;
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, fb_logo, 4);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume $i69 == 1;
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, fb_logo, 8);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i65 == 1;
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $add.ref($add.ref(fb_logo, $mul.ref(0, 24)), $mul.ref(16, 1)), $0.ref);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(4, 1));
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    call {:si_unique_call 13} {:cexpr "yres"} boogie_si_record_i32($i57);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb27;

  $bb23:
    assume $i52 == 1;
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb17:
    assume $i46 == 1;
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i47 := $sgt.i32($i42, 4);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb19;

  $bb20:
    assume $i47 == 1;
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i48 := 4;
    goto $bb22;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(56, 1)), $mul.ref(4, 1));
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    call {:si_unique_call 9} {:cexpr "depth"} boogie_si_record_i32($i21);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(4, 1));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i26 := $ult.i32($i25, $i21);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i31 := $i21;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i36 := $ult.i32($i35, $i31);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i41 := $i31;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb16;

  $bb13:
    assume $i36 == 1;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    call {:si_unique_call 11} {:cexpr "depth"} boogie_si_record_i32($i40);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb15;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(4, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    call {:si_unique_call 10} {:cexpr "depth"} boogie_si_record_i32($i30);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 294729);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const fb_find_logo: ref;

axiom fb_find_logo == $sub.ref(0, 295761);

procedure fb_find_logo($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation fb_find_logo($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} {:cexpr "fb_find_logo:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $p1 := external_alloc();
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fb_prepare_extra_logos: ref;

axiom fb_prepare_extra_logos == $sub.ref(0, 296793);

procedure fb_prepare_extra_logos($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fb_prepare_extra_logos($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} {:cexpr "fb_prepare_extra_logos:arg:height"} boogie_si_record_i32($i1);
    call {:si_unique_call 20} {:cexpr "fb_prepare_extra_logos:arg:yres"} boogie_si_record_i32($i2);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 297825);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 1} true;
    call {:si_unique_call 21} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 22} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const fb_show_logo: ref;

axiom fb_show_logo == $sub.ref(0, 298857);

procedure fb_show_logo($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.0, $M.13, $CurrAddr, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.14, $M.15, $M.46, $M.16, $M.17, $M.19, $M.21, $M.70, $M.10, $M.18, $M.72, $M.11, $M.71, $M.61, $M.63, $M.65, $M.67, assertsPassed, $M.62, $M.64, $M.66, $M.68;



implementation fb_show_logo($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} {:cexpr "fb_show_logo:arg:rotate"} boogie_si_record_i32($i1);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.11, cpu_online_mask);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i3 := cpumask_weight($p2);
    call {:si_unique_call 25} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.10, $add.ref($add.ref(fb_logo, $mul.ref(0, 24)), $mul.ref(16, 1)));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $i5 := fb_show_logo_line($p0, $i1, $p4, 0, $i3);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 27} {:cexpr "y"} boogie_si_record_i32($i5);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $i6 := fb_show_extra_logos($p0, $i5, $i1);
    call {:si_unique_call 29} {:cexpr "y"} boogie_si_record_i32($i6);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const cpumask_weight: ref;

axiom cpumask_weight == $sub.ref(0, 299889);

procedure cpumask_weight($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_weight($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.11, nr_cpu_ids);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i4 := bitmap_weight($p2, $i3);
    call {:si_unique_call 31} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const fb_show_logo_line: ref;

axiom fb_show_logo_line == $sub.ref(0, 300921);

procedure fb_show_logo_line($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.0, $M.13, $CurrAddr, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.14, $M.15, $M.46, $M.16, $M.17, $M.19, $M.21, $M.70, $M.10, $M.18, $M.72, $M.11, $M.71, $M.61, $M.63, $M.65, $M.67, assertsPassed, $M.62, $M.64, $M.66, $M.68;



implementation fb_show_logo_line($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i64;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $p5 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    call {:si_unique_call 33} {:cexpr "fb_show_logo_line:arg:rotate"} boogie_si_record_i32($i1);
    call {:si_unique_call 34} {:cexpr "fb_show_logo_line:arg:y"} boogie_si_record_i32($i3);
    call {:si_unique_call 35} {:cexpr "fb_show_logo_line:arg:n"} boogie_si_record_i32($i4);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p2);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1568, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 1);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p16, 8);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p19, $p18);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.10, $add.ref($add.ref(fb_logo, $mul.ref(0, 24)), $mul.ref(12, 1)));
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.10, $add.ref($add.ref(fb_logo, $mul.ref(0, 24)), $mul.ref(8, 1)));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i23 == 1);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.10, $add.ref($add.ref(fb_logo, $mul.ref(0, 24)), $mul.ref(4, 1)));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $p37, $p38 := $0.ref, $0.ref;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.10, fb_logo);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i40 := $sle.i32($i39, 4);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $p57 := $0.ref;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p58, 0);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p59, $i3);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p62, $i61);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p65, $i64);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i1, 0);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $p76 := $0.ref;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} fb_do_show_logo($p0, $p5, $i1, $i4);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p37);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} kfree($p77);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p38);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} kfree($p57);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} kfree($p76);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i15 := $i83;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb40:
    assume $i79 == 1;
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1560, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p81, $p38);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb34:
    assume $i66 == 1;
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i71 := $mul.i32($i68, $i70);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i72 := $zext.i32.i64($i71);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $p73 := kmalloc($i72, 208);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p76 := $p73;
    goto $bb39;

  $bb36:
    assume $i75 == 1;
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} fb_rotate_logo($p0, $p73, $p5, $i1);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb25:
    assume $i40 == 1;
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i45 := $mul.i32($i42, $i44);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i46 := $zext.i32.i64($i45);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p47 := kmalloc($i46, 208);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i48, 0);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p55, $p47);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.10, fb_logo);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} fb_set_logo($p0, $p2, $p47, $i56);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p57 := $p47;
    goto $bb33;

  $bb27:
    assume $i49 == 1;
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p37);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} kfree($p50);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p38);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  $bb29:
    assume $i52 == 1;
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1560, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p54, $p38);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $p26 := kmalloc(1024, 208);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.10, $add.ref($add.ref(fb_logo, $mul.ref(0, 24)), $mul.ref(8, 1)));
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i31 == 1);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} fb_set_logo_directpalette($p0, $p2, $p27);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1560, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1560, 1));
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p26);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p37, $p38 := $p26, $p33;
    goto $bb24;

  $bb21:
    assume $i31 == 1;
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} fb_set_logo_truepalette($p0, $p2, $p27);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i29 == 1;
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb14;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} fb_set_logocmap($p0, $p2);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const fb_show_extra_logos: ref;

axiom fb_show_extra_logos == $sub.ref(0, 301953);

procedure fb_show_extra_logos($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fb_show_extra_logos($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} {:cexpr "fb_show_extra_logos:arg:y"} boogie_si_record_i32($i1);
    call {:si_unique_call 50} {:cexpr "fb_show_extra_logos:arg:rotate"} boogie_si_record_i32($i2);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fb_set_logocmap: ref;

axiom fb_set_logocmap == $sub.ref(0, 302985);

procedure fb_set_logocmap($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.14, $M.15, $M.16, $M.17, $M.19, $M.21, $M.70, $M.10, $M.18, $M.72, $M.11, $M.46, $M.71, $M.12, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.13, assertsPassed, $M.62, $M.64, $M.66, $M.68;



implementation fb_set_logocmap($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i1;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $i37: i16;
  var $i38: i32;
  var $i39: i8;
  var $i40: i16;
  var $i41: i32;
  var $i42: i32;
  var $i43: i16;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i16;
  var $i53: i32;
  var $p54: ref;
  var $i55: i8;
  var $i56: i16;
  var $i57: i32;
  var $i58: i32;
  var $i59: i16;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i32;
  var $i68: i16;
  var $i69: i32;
  var $p70: ref;
  var $i71: i8;
  var $i72: i16;
  var $i73: i32;
  var $i74: i32;
  var $i75: i16;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p32: ref;
  var $i33: i32;
  var $p83: ref;
  var $p31: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $p20: ref;
  var $i21: i32;
  var vslice_dummy_var_127: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p4 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $p5 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 16);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p5);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p3);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p4);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $0.ref);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i19 := $ult.i32(0, $i18);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p20, $i21 := $p7, 0;
    goto $bb4;

  $bb4:
    call $p22, $i23, $i24, $i25, $i26, $i27, $p28, $p29, $i30, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $p44, $p45, $i46, $p47, $p48, $i49, $i50, $i51, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $i59, $p60, $p61, $i62, $p63, $p64, $i65, $i66, $i67, $i68, $i69, $p70, $i71, $i72, $i73, $i74, $i75, $p76, $p77, $i78, $p79, $p80, $i81, $i82, $p32, $i33, $p83, $p31, $i85, $i86, $i87, $p20, $i21, vslice_dummy_var_127 := fb_set_logocmap_loop_$bb4($p0, $p1, $p2, $p17, $p22, $i23, $i24, $i25, $i26, $i27, $p28, $p29, $i30, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $p44, $p45, $i46, $p47, $p48, $i49, $i50, $i51, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $i59, $p60, $p61, $i62, $p63, $p64, $i65, $i66, $i67, $i68, $i69, $p70, $i71, $i72, $i73, $i74, $i75, $p76, $p77, $i78, $p79, $p80, $i81, $i82, $p32, $i33, $p83, $p31, $i85, $i86, $i87, $p20, $i21, vslice_dummy_var_127);
    goto $bb4_last;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i23, $i21);
    call {:si_unique_call 55} {:cexpr "n"} boogie_si_record_i32($i24);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, 16);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i24;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i21, 32);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i26);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32(0, $i26);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p31 := $p20;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} vslice_dummy_var_127 := fb_set_cmap($p2, $p0);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i21, $i26);
    call {:si_unique_call 58} {:cexpr "i"} boogie_si_record_i32($i85);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p17);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i87 := $ult.i32($i85, $i86);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i87 == 1);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $p20, $i21 := $p31, $i85;
    goto $bb17_dummy;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i30 == 1;
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p32, $i33 := $p20, 0;
    goto $bb12;

  $bb12:
    call $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $p44, $p45, $i46, $p47, $p48, $i49, $i50, $i51, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $i59, $p60, $p61, $i62, $p63, $p64, $i65, $i66, $i67, $i68, $i69, $p70, $i71, $i72, $i73, $i74, $i75, $p76, $p77, $i78, $p79, $p80, $i81, $i82, $p32, $i33, $p83 := fb_set_logocmap_loop_$bb12($p2, $i26, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $p44, $p45, $i46, $p47, $p48, $i49, $i50, $i51, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $i59, $p60, $p61, $i62, $p63, $p64, $i65, $i66, $i67, $i68, $i69, $p70, $i71, $i72, $i73, $i74, $i75, $p76, $p77, $i78, $p79, $p80, $i81, $i82, $p32, $i33, $p83);
    goto $bb12_last;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.11, $p32);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i36 := $shl.i32($i35, 8);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i38 := $sext.i16.i32($i37);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.11, $p32);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i16($i39);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i41 := $sext.i16.i32($i40);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i38, $i41);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i16($i42);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i33);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p45, $mul.ref($i46, 2));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p47, $i43);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p32, $mul.ref(1, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.11, $p48);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i51 := $shl.i32($i50, 8);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i53 := $sext.i16.i32($i52);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p32, $mul.ref(1, 1));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.11, $p54);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i16($i55);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i57 := $sext.i16.i32($i56);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i58 := $or.i32($i53, $i57);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i33);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p61, $mul.ref($i62, 2));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p63, $i59);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p32, $mul.ref(2, 1));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.11, $p64);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i67 := $shl.i32($i66, 8);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i16($i67);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i69 := $sext.i16.i32($i68);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p32, $mul.ref(2, 1));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.11, $p70);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i16($i71);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i73 := $sext.i16.i32($i72);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i69, $i73);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i16($i74);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i33);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p77, $mul.ref($i78, 2));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p79, $i75);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p32, $mul.ref(3, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i33, 1);
    call {:si_unique_call 56} {:cexpr "j"} boogie_si_record_i32($i81);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i81, $i26);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p83 := $p80;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p31 := $p83;
    goto $bb11;

  $bb14:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $p32, $i33 := $p80, $i81;
    goto $bb14_dummy;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i26 := 16;
    goto $bb8;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_399;

  $bb17_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_380;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 304017);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 60} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fb_set_logo_truepalette: ref;

axiom fb_set_logo_truepalette == $sub.ref(0, 305049);

procedure fb_set_logo_truepalette($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.13, $M.0, $CurrAddr;



implementation fb_set_logo_truepalette($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p23: ref;
  var $i24: i32;
  var $i20: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i8;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p36: ref;
  var $i37: i32;
  var $i33: i32;
  var $i38: i64;
  var $p39: ref;
  var $i40: i8;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p49: ref;
  var $i50: i32;
  var $i46: i32;
  var $i51: i64;
  var $p52: ref;
  var $i53: i8;
  var $p56: ref;
  var $i57: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $p66: ref;
  var $i67: i32;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $p76: ref;
  var $i77: i32;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $i89: i8;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i64;
  var $i109: i64;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $i113: i32;
  var $i114: i1;
  var $p87: ref;
  var $i88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $p3 := $alloc($mul.ref(9, $zext.i32.i64(1)));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(0, 1));
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p4, 0);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(1, 1));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p5, $sub.i8(0, 128));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(2, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p6, $sub.i8(0, 64));
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(3, 1));
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p7, $sub.i8(0, 32));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(4, 1));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p8, $sub.i8(0, 16));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(5, 1));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p9, $sub.i8(0, 8));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(6, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p10, $sub.i8(0, 4));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(7, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p11, $sub.i8(0, 2));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(8, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p12, $sub.i8(0, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(4, 1));
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i19 := $ult.i32(8, $i18);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(4, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i20 := $i24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i20);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref($i25, 1));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.13, $p26);
    call {:si_unique_call 63} {:cexpr "redmask"} boogie_si_record_i8($i27);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i32 := $ult.i32(8, $i31);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i33 := $i37;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i33);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref($i38, 1));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.13, $p39);
    call {:si_unique_call 64} {:cexpr "greenmask"} boogie_si_record_i8($i40);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(56, 1)), $mul.ref(4, 1));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i45 := $ult.i32(8, $i44);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i45 == 1);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(56, 1)), $mul.ref(4, 1));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i46 := $i50;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i51 := $zext.i32.i64($i46);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref($i51, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.13, $p52);
    call {:si_unique_call 65} {:cexpr "bluemask"} boogie_si_record_i8($i53);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(4, 1));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i57, $i61);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i63 := $sub.i32($i62, 8);
    call {:si_unique_call 66} {:cexpr "redshift"} boogie_si_record_i32($i63);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i67, $i71);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32($i72, 8);
    call {:si_unique_call 67} {:cexpr "greenshift"} boogie_si_record_i32($i73);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(56, 1)), $mul.ref(4, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i82 := $add.i32($i77, $i81);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i83 := $sub.i32($i82, 8);
    call {:si_unique_call 68} {:cexpr "blueshift"} boogie_si_record_i32($i83);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i86 := $ult.i32(0, $i85);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i86 == 1;
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p87, $i88 := $p14, 0;
    goto $bb13;

  $bb13:
    call $i89, $i90, $i91, $i92, $i93, $p94, $i95, $i96, $i97, $i98, $i99, $p100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $p110, $p111, $i112, $i113, $i114, $p87, $i88 := fb_set_logo_truepalette_loop_$bb13($p2, $i27, $i40, $i53, $i63, $i73, $i83, $p84, $i89, $i90, $i91, $i92, $i93, $p94, $i95, $i96, $i97, $i98, $i99, $p100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $p110, $p111, $i112, $i113, $i114, $p87, $i88);
    goto $bb13_last;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.11, $p87);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i89);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i27);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i92 := $and.i32($i90, $i91);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $i93 := safe_shift($i92, $i63);
    call {:si_unique_call 70} {:cexpr "tmp"} boogie_si_record_i32($i93);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p87, $mul.ref(1, 1));
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.11, $p94);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i40);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i98 := $and.i32($i96, $i97);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $i99 := safe_shift($i98, $i73);
    call {:si_unique_call 72} {:cexpr "tmp___0"} boogie_si_record_i32($i99);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p87, $mul.ref(2, 1));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.11, $p100);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i53);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i102, $i103);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $i105 := safe_shift($i104, $i83);
    call {:si_unique_call 74} {:cexpr "tmp___1"} boogie_si_record_i32($i105);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i106 := $or.i32($i93, $i99);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i107 := $or.i32($i106, $i105);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i108 := $sext.i32.i64($i88);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i109 := $add.i64($i108, 32);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p2, $mul.ref($i109, 4));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p110, $i107);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p87, $mul.ref(3, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i112 := $add.i32($i88, 1);
    call {:si_unique_call 75} {:cexpr "i"} boogie_si_record_i32($i112);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p84);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i114 := $ult.i32($i112, $i113);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i114 == 1);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15:
    assume $i114 == 1;
    assume {:verifier.code 0} true;
    $p87, $i88 := $p111, $i112;
    goto $bb15_dummy;

  $bb7:
    assume $i45 == 1;
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i46 := 8;
    goto $bb9;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i33 := 8;
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i20 := 8;
    goto $bb3;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_553;
}



const fb_set_logo_directpalette: ref;

axiom fb_set_logo_directpalette == $sub.ref(0, 306081);

procedure fb_set_logo_directpalette($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fb_set_logo_directpalette($p0: ref, $p1: ref, $p2: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $p9: ref;
  var $i10: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 76} {:cexpr "redshift"} boogie_si_record_i32($i6);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    call {:si_unique_call 77} {:cexpr "greenshift"} boogie_si_record_i32($i10);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    call {:si_unique_call 78} {:cexpr "blueshift"} boogie_si_record_i32($i14);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 32);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i18 := $ult.i32(32, $i17);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i19 := 32;
    goto $bb4;

  $bb4:
    call $i20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $i28, $i29, $i30, $i19 := fb_set_logo_directpalette_loop_$bb4($p2, $i6, $i10, $i14, $p15, $i20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $i28, $i29, $i30, $i19);
    goto $bb4_last;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i20 := $shl.i32($i19, $i6);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i21 := $shl.i32($i19, $i10);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i20, $i21);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i23 := $shl.i32($i19, $i14);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i22, $i23);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i19);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p2, $mul.ref($i25, 4));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i24);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i19, 1);
    call {:si_unique_call 79} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p15);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, 32);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i30 := $ult.i32($i27, $i29);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i30 == 1);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i19 := $i27;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_599;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 307113);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} free_($p0);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    return;
}



const fb_set_logo: ref;

axiom fb_set_logo == $sub.ref(0, 308145);

procedure fb_set_logo($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fb_set_logo($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i8;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $i36: i8;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i32;
  var $i58: i8;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $i63: i64;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i32;
  var $i68: i8;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p75: ref;
  var $p76: ref;
  var $p49: ref;
  var $p50: ref;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i8;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i105: i32;
  var $i106: i8;
  var $i107: i32;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $p112: ref;
  var $p114: ref;
  var $p89: ref;
  var $p90: ref;
  var $i115: i32;
  var $i116: i32;
  var $i117: i1;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i118: i64;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $i125: i32;
  var $i124: i32;
  var $i126: i8;
  var $i127: i32;
  var $i128: i64;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $i135: i32;
  var $i134: i32;
  var $i136: i8;
  var $i137: i32;
  var $i138: i64;
  var $p139: ref;
  var $i140: i32;
  var $i141: i32;
  var $i142: i32;
  var $i143: i1;
  var $i145: i32;
  var $i144: i32;
  var $i146: i8;
  var $i147: i32;
  var $i148: i64;
  var $p149: ref;
  var $i150: i32;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $i155: i32;
  var $i154: i32;
  var $i156: i8;
  var $i157: i32;
  var $i158: i64;
  var $p159: ref;
  var $i160: i32;
  var $i161: i32;
  var $i162: i32;
  var $i163: i1;
  var $i165: i32;
  var $i164: i32;
  var $i166: i8;
  var $i167: i32;
  var $i168: i64;
  var $p169: ref;
  var $i170: i32;
  var $i171: i32;
  var $i172: i32;
  var $i173: i1;
  var $i175: i32;
  var $i174: i32;
  var $i176: i8;
  var $i177: i32;
  var $i178: i64;
  var $p113: ref;
  var $i179: i32;
  var $i180: i32;
  var $i181: i1;
  var $i183: i32;
  var $i182: i32;
  var $i184: i8;
  var $i111: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} {:cexpr "fb_set_logo:arg:depth"} boogie_si_record_i32($i3);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(36, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i10 := (if $i9 == 1 then 255 else 0);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    call {:si_unique_call 82} {:cexpr "xor"} boogie_si_record_i8($i11);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1));
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $i14 := fb_get_color_depth($p12, $p13);
    call {:si_unique_call 84} {:cexpr "tmp"} boogie_si_record_i32($i14);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i14, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i18 := 7;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(36, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i22 == 1);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(36, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i36 := $i18;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i38 == 1;
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i42 := $ult.i32(0, $i41);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb25:
    assume $i42 == 1;
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p43, $p44, $i45 := $p5, $p2, 0;
    goto $bb28;

  $bb28:
    call $p46, $i47, $i48, $p54, $i55, $i56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $i69, $i70, $p71, $p72, $i73, $i74, $p51, $p52, $i53, $p75, $p76, $p49, $p50, $i77, $i78, $i79, $p43, $p44, $i45 := fb_set_logo_loop_$bb28($p1, $p40, $p46, $i47, $i48, $p54, $i55, $i56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $i69, $i70, $p71, $p72, $i73, $i74, $p51, $p52, $i53, $p75, $p76, $p49, $p50, $i77, $i78, $i79, $p43, $p44, $i45);
    goto $bb28_last;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i48 := $ult.i32(0, $i47);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p49, $p50 := $p44, $p43;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i45, 1);
    call {:si_unique_call 88} {:cexpr "i"} boogie_si_record_i32($i77);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p40);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i79 := $ult.i32($i77, $i78);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i79 == 1);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb41:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $p43, $p44, $i45 := $p50, $p49, $i77;
    goto $bb41_dummy;

  $bb30:
    assume $i48 == 1;
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p51, $p52, $i53 := $p43, $p44, 0;
    goto $bb33;

  $bb33:
    call $p54, $i55, $i56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $i69, $i70, $p71, $p72, $i73, $i74, $p51, $p52, $i53, $p75, $p76 := fb_set_logo_loop_$bb33($p1, $p46, $p54, $i55, $i56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $i69, $i70, $p71, $p72, $i73, $i74, $p51, $p52, $i53, $p75, $p76);
    goto $bb33_last;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p52, $mul.ref(1, 1));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p51);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i57 := $ashr.i32($i56, 4);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, $i58);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i53, 1);
    call {:si_unique_call 86} {:cexpr "j"} boogie_si_record_i32($i59);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i62 := $ult.i32($i59, $i61);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i70, $p71 := $i59, $p54;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p51, $mul.ref(1, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p46);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i74 := $ult.i32($i70, $i73);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p75, $p76 := $p71, $p72;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p49, $p50 := $p75, $p76;
    goto $bb32;

  $bb38:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $p51, $p52, $i53 := $p72, $p71, $i70;
    goto $bb38_dummy;

  $bb35:
    assume $i62 == 1;
    $i63 := $add.i64(1, 1);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p52, $mul.ref($i63, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p51);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 15);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, $i68);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i59, 1);
    call {:si_unique_call 87} {:cexpr "j"} boogie_si_record_i32($i69);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i70, $p71 := $i69, $p64;
    goto $bb37;

  $bb18:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb22;

  $bb23:
    assume $i39 == 1;
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i82 := $ult.i32(0, $i81);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb45:
    assume $i82 == 1;
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p83, $p84, $i85 := $p5, $p2, 0;
    goto $bb48;

  $bb48:
    call $p86, $i87, $i88, $i94, $i95, $i96, $i97, $i98, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $p108, $i109, $i110, $p91, $p92, $i93, $p112, $p114, $p89, $p90, $i115, $i116, $i117, $p83, $p84, $i85, $i118, $p119, $i120, $i121, $i122, $i123, $i125, $i124, $i126, $i127, $i128, $p129, $i130, $i131, $i132, $i133, $i135, $i134, $i136, $i137, $i138, $p139, $i140, $i141, $i142, $i143, $i145, $i144, $i146, $i147, $i148, $p149, $i150, $i151, $i152, $i153, $i155, $i154, $i156, $i157, $i158, $p159, $i160, $i161, $i162, $i163, $i165, $i164, $i166, $i167, $i168, $p169, $i170, $i171, $i172, $i173, $i175, $i174, $i176, $i177, $i178, $p113, $i179, $i180, $i181, $i183, $i182, $i184, $i111 := fb_set_logo_loop_$bb48($p1, $i11, $i36, $p80, $p86, $i87, $i88, $i94, $i95, $i96, $i97, $i98, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $p108, $i109, $i110, $p91, $p92, $i93, $p112, $p114, $p89, $p90, $i115, $i116, $i117, $p83, $p84, $i85, $i118, $p119, $i120, $i121, $i122, $i123, $i125, $i124, $i126, $i127, $i128, $p129, $i130, $i131, $i132, $i133, $i135, $i134, $i136, $i137, $i138, $p139, $i140, $i141, $i142, $i143, $i145, $i144, $i146, $i147, $i148, $p149, $i150, $i151, $i152, $i153, $i155, $i154, $i156, $i157, $i158, $p159, $i160, $i161, $i162, $i163, $i165, $i164, $i166, $i167, $i168, $p169, $i170, $i171, $i172, $i173, $i175, $i174, $i176, $i177, $i178, $p113, $i179, $i180, $i181, $i183, $i182, $i184, $i111);
    goto $bb48_last;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i88 := $ult.i32(0, $i87);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p89, $p90 := $p84, $p83;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i115 := $add.i32($i85, 1);
    call {:si_unique_call 91} {:cexpr "i"} boogie_si_record_i32($i115);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p80);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i117 := $ult.i32($i115, $i116);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i117 == 1);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb65:
    assume $i117 == 1;
    assume {:verifier.code 0} true;
    $p83, $p84, $i85 := $p90, $p89, $i115;
    goto $bb65_dummy;

  $bb50:
    assume $i88 == 1;
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p91, $p92, $i93 := $p83, $p84, 0;
    goto $bb53;

  $bb53:
    call $i94, $i95, $i96, $i97, $i98, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $p108, $i109, $i110, $p91, $p92, $i93, $p112, $p114, $i118, $p119, $i120, $i121, $i122, $i123, $i125, $i124, $i126, $i127, $i128, $p129, $i130, $i131, $i132, $i133, $i135, $i134, $i136, $i137, $i138, $p139, $i140, $i141, $i142, $i143, $i145, $i144, $i146, $i147, $i148, $p149, $i150, $i151, $i152, $i153, $i155, $i154, $i156, $i157, $i158, $p159, $i160, $i161, $i162, $i163, $i165, $i164, $i166, $i167, $i168, $p169, $i170, $i171, $i172, $i173, $i175, $i174, $i176, $i177, $i178, $p113, $i179, $i180, $i181, $i183, $i182, $i184, $i111 := fb_set_logo_loop_$bb53($i11, $i36, $p86, $i94, $i95, $i96, $i97, $i98, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $p108, $i109, $i110, $p91, $p92, $i93, $p112, $p114, $i118, $p119, $i120, $i121, $i122, $i123, $i125, $i124, $i126, $i127, $i128, $p129, $i130, $i131, $i132, $i133, $i135, $i134, $i136, $i137, $i138, $p139, $i140, $i141, $i142, $i143, $i145, $i144, $i146, $i147, $i148, $p149, $i150, $i151, $i152, $i153, $i155, $i154, $i156, $i157, $i158, $p159, $i160, $i161, $i162, $i163, $i165, $i164, $i166, $i167, $i168, $p169, $i170, $i171, $i172, $i173, $i175, $i174, $i176, $i177, $i178, $p113, $i179, $i180, $i181, $i183, $i182, $i184, $i111);
    goto $bb53_last;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p91);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i11);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i97 := $xor.i32($i95, $i96);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i8($i97);
    call {:si_unique_call 89} {:cexpr "d"} boogie_si_record_i8($i98);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p92, $mul.ref(1, 1));
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i98);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i101 := $ashr.i32($i100, 7);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 1);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i103 == 1);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i105 := 0;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i8($i105);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p92, $i106);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i107 := $add.i32($i93, 1);
    call {:si_unique_call 90} {:cexpr "j"} boogie_si_record_i32($i107);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    $i118 := $add.i64(1, 1);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p92, $mul.ref($i118, 1));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i120 := $zext.i8.i32($i98);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i121 := $ashr.i32($i120, 6);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i122 := $and.i32($i121, 1);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i123 == 1);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i124 := 0;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i32.i8($i124);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, $i126);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i127 := $add.i32($i107, 1);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    $i128 := $add.i64($i118, 1);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p92, $mul.ref($i128, 1));
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i98);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i131 := $ashr.i32($i130, 5);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i132 := $and.i32($i131, 1);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i133 == 1);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i134 := 0;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i32.i8($i134);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p119, $i136);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i137 := $add.i32($i127, 1);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    $i138 := $add.i64($i128, 1);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p92, $mul.ref($i138, 1));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i140 := $zext.i8.i32($i98);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i141 := $ashr.i32($i140, 4);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i142 := $and.i32($i141, 1);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i143 := $ne.i32($i142, 0);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i143 == 1);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i144 := 0;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i146 := $trunc.i32.i8($i144);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p129, $i146);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i147 := $add.i32($i137, 1);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    $i148 := $add.i64($i138, 1);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($p92, $mul.ref($i148, 1));
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i150 := $zext.i8.i32($i98);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i151 := $ashr.i32($i150, 3);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i152 := $and.i32($i151, 1);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i153 := $ne.i32($i152, 0);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i153 == 1);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i154 := 0;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i156 := $trunc.i32.i8($i154);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p139, $i156);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i157 := $add.i32($i147, 1);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    $i158 := $add.i64($i148, 1);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($p92, $mul.ref($i158, 1));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i160 := $zext.i8.i32($i98);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i161 := $ashr.i32($i160, 2);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i162 := $and.i32($i161, 1);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i163 := $ne.i32($i162, 0);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i163 == 1);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i164 := 0;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i166 := $trunc.i32.i8($i164);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p149, $i166);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i167 := $add.i32($i157, 1);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    $i168 := $add.i64($i158, 1);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p92, $mul.ref($i168, 1));
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i170 := $zext.i8.i32($i98);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i171 := $ashr.i32($i170, 1);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i172 := $and.i32($i171, 1);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i172, 0);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i173 == 1);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i174 := 0;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i176 := $trunc.i32.i8($i174);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p159, $i176);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i177 := $add.i32($i167, 1);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    $i178 := $add.i64($i168, 1);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p92, $mul.ref($i178, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i179 := $zext.i8.i32($i98);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i180 := $and.i32($i179, 1);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i181 := $ne.i32($i180, 0);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i181 == 1);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i182 := 0;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i184 := $trunc.i32.i8($i182);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p169, $i184);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i177, 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p91, $mul.ref(1, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p86);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i110 := $ult.i32($i111, $i109);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p112, $p114 := $p113, $p108;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p89, $p90 := $p112, $p114;
    goto $bb52;

  $bb62:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $p91, $p92, $i93 := $p108, $p113, $i111;
    goto $bb62_dummy;

  $bb93:
    assume $i181 == 1;
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i32($i36);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i182 := $i183;
    goto $bb95;

  $bb89:
    assume $i173 == 1;
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i175 := $zext.i8.i32($i36);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i174 := $i175;
    goto $bb91;

  $bb85:
    assume $i163 == 1;
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i165 := $zext.i8.i32($i36);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i164 := $i165;
    goto $bb87;

  $bb81:
    assume $i153 == 1;
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i32($i36);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i154 := $i155;
    goto $bb83;

  $bb77:
    assume $i143 == 1;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i32($i36);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i144 := $i145;
    goto $bb79;

  $bb73:
    assume $i133 == 1;
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i135 := $zext.i8.i32($i36);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i134 := $i135;
    goto $bb75;

  $bb69:
    assume $i123 == 1;
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i32($i36);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i124 := $i125;
    goto $bb71;

  $bb57:
    assume $i103 == 1;
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i36);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i105 := $i104;
    goto $bb59;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i31 := $shl.i32(4095, $i30);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i34 := $xor.i32($i33, $sub.i32(0, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    call {:si_unique_call 85} {:cexpr "fg"} boogie_si_record_i8($i35);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb16;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb12;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i18 := 3;
    goto $bb9;

  $bb2:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i14, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb6;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb9;

  $bb38_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_672;

  $bb41_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_664;

  $bb62_dummy:
    assume false;
    return;

  $bb53_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_717;

  $bb65_dummy:
    assume false;
    return;

  $bb48_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_709;
}



const fb_rotate_logo: ref;

axiom fb_rotate_logo == $sub.ref(0, 309177);

procedure fb_rotate_logo($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.12, $M.0;



implementation fb_rotate_logo($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} {:cexpr "fb_rotate_logo:arg:rotate"} boogie_si_record_i32($i3);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i3, 1);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i3, 3);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p83, $p1);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i57 == 1;
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.12, $p58);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.12, $p60);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.12, $p62);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} fb_rotate_logo_ccw($p59, $p1, $i61, $i63);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.12, $p64);
    call {:si_unique_call 98} {:cexpr "tmp"} boogie_si_record_i32($i65);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.12, $p66);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p68, $i67);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p69, $i65);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.12, $p70);
    call {:si_unique_call 99} {:cexpr "tmp"} boogie_si_record_i32($i71);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.12, $p72);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p74, $i73);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(4, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.12, $p78);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i80 := $sub.i32($i77, $i79);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i81 := $sub.i32($i80, $i71);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p82, $i81);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.12, $p32);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.12, $p34);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.12, $p36);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} fb_rotate_logo_cw($p33, $p1, $i35, $i37);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.12, $p38);
    call {:si_unique_call 95} {:cexpr "tmp"} boogie_si_record_i32($i39);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.12, $p40);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p42, $i41);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p43, $i39);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.12, $p44);
    call {:si_unique_call 96} {:cexpr "tmp"} boogie_si_record_i32($i45);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.12, $p46);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p48, $i47);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(0, 1));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.12, $p52);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32($i51, $i53);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32($i54, $i45);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p56, $i55);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.12, $p5);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.12, $p7);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.12, $p9);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} fb_rotate_logo_ud($p6, $p1, $i8, $i10);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(0, 1));
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.12, $p14);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i13, $i15);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.12, $p17);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i16, $i18);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p20, $i19);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(4, 1));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.12, $p24);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i23, $i25);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.12, $p27);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i26, $i28);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p30, $i29);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fb_do_show_logo: ref;

axiom fb_do_show_logo == $sub.ref(0, 310209);

procedure fb_do_show_logo($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.12, $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.46, $CurrAddr;



implementation fb_do_show_logo($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $i4: i1;
  var $p5: ref;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i7: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i31: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i48: i32;
  var $i62: i32;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $i72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} {:cexpr "fb_do_show_logo:arg:rotate"} boogie_si_record_i32($i2);
    call {:si_unique_call 101} {:cexpr "fb_do_show_logo:arg:num"} boogie_si_record_i32($i3);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i2, 0);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i2, 2);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i2, 1);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i45 == 1);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i2, 3);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb38:
    assume $i70 == 1;
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i71 := $ult.i32(0, $i3);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb40:
    assume $i71 == 1;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i72 := 0;
    goto $bb43;

  $bb43:
    call $p73, $p74, $p75, $p76, $p77, $i78, $p79, $i80, $i81, $i82, $p83, $i84, $i85, $i72 := fb_do_show_logo_loop_$bb43($p0, $p1, $i3, $p73, $p74, $p75, $p76, $p77, $i78, $p79, $i80, $i81, $i82, $p83, $i84, $i85, $i72);
    goto $bb43_last;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    call {:si_unique_call 108} devirtbounce.1($p76, $p0, $p1);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.12, $p77);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.12, $p79);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i81 := $sub.i32($i78, $i80);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32($i81, 8);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p83, $i82);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i72, 1);
    call {:si_unique_call 109} {:cexpr "x"} boogie_si_record_i32($i84);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i85 := $ult.i32($i84, $i3);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i85 == 1);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb45:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $i72 := $i84;
    goto $bb45_dummy;

  $bb25:
    assume $i45 == 1;
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i47 := $ult.i32(0, $i3);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb27:
    assume $i47 == 1;
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb30;

  $bb30:
    call $p49, $p50, $p51, $p52, $p53, $i54, $p55, $i56, $i57, $i58, $p59, $i60, $i61, $i48, $i62, $p63, $i64, $i65, $p67, $i68, $i69 := fb_do_show_logo_loop_$bb30($p0, $p1, $i3, $p46, $p49, $p50, $p51, $p52, $p53, $i54, $p55, $i56, $i57, $i58, $p59, $i60, $i61, $i48, $i62, $p63, $i64, $i65, $p67, $i68, $i69);
    goto $bb30_last;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.12, $p46);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.12, $p63);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i62, $i64);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(4, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i69 := $ule.i32($i65, $i68);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i69 == 1);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb34:
    assume $i69 == 1;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    call {:si_unique_call 106} devirtbounce.1($p52, $p0, $p1);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.12, $p53);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.12, $p55);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i54, $i56);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i57, 8);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p59, $i58);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i48, 1);
    call {:si_unique_call 107} {:cexpr "x"} boogie_si_record_i32($i60);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i61 := $ult.i32($i60, $i3);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i61 == 1);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb32:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i48 := $i60;
    goto $bb32_dummy;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i30 := $ult.i32(0, $i3);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb19;

  $bb19:
    call $p32, $p33, $p34, $p35, $p36, $i37, $p38, $i39, $i40, $i41, $p42, $i43, $i44, $i31 := fb_do_show_logo_loop_$bb19($p0, $p1, $i3, $p32, $p33, $p34, $p35, $p36, $i37, $p38, $i39, $i40, $i41, $p42, $i43, $i44, $i31);
    goto $bb19_last;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    call {:si_unique_call 104} devirtbounce.1($p35, $p0, $p1);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.12, $p36);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.12, $p38);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i37, $i39);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i40, 8);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p42, $i41);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i31, 1);
    call {:si_unique_call 105} {:cexpr "x"} boogie_si_record_i32($i43);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i44 := $ult.i32($i43, $i3);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i44 == 1);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i31 := $i43;
    goto $bb21_dummy;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i6 := $ult.i32(0, $i3);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb6:
    call $p8, $p9, $p10, $p11, $p12, $i13, $p14, $i15, $i16, $i17, $p18, $i19, $i20, $i7, $i21, $p22, $i23, $i24, $p26, $i27, $i28 := fb_do_show_logo_loop_$bb6($p0, $p1, $i3, $p5, $p8, $p9, $p10, $p11, $p12, $i13, $p14, $i15, $i16, $i17, $p18, $i19, $i20, $i7, $i21, $p22, $i23, $i24, $p26, $i27, $i28);
    goto $bb6_last;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.12, $p5);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.12, $p22);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i21, $i23);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(0, 1));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i28 := $ule.i32($i24, $i27);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10:
    assume $i28 == 1;
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 102} devirtbounce.1($p11, $p0, $p1);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.12, $p12);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.12, $p14);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i13, $i15);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 8);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p18, $i17);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i7, 1);
    call {:si_unique_call 103} {:cexpr "x"} boogie_si_record_i32($i19);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i20 := $ult.i32($i19, $i3);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i19;
    goto $bb8_dummy;

  $bb45_dummy:
    assume false;
    return;

  $bb43_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1086;

  $bb32_dummy:
    assume false;
    return;

  $bb30_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1051;

  $bb21_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1023;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_985;
}



const fb_rotate_logo_ud: ref;

axiom fb_rotate_logo_ud == $sub.ref(0, 311241);

procedure fb_rotate_logo_ud($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fb_rotate_logo_ud($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} {:cexpr "fb_rotate_logo_ud:arg:width"} boogie_si_record_i32($i2);
    call {:si_unique_call 111} {:cexpr "fb_rotate_logo_ud:arg:height"} boogie_si_record_i32($i3);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i2, $i3);
    call {:si_unique_call 112} {:cexpr "size"} boogie_si_record_i32($i4);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i4, 1);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p1, $mul.ref($i6, 1));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i4, 1);
    call {:si_unique_call 113} {:cexpr "i"} boogie_si_record_i32($i8);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i4, 0);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i10, $p11, $p12 := $i8, $p0, $p7;
    goto $bb4;

  $bb4:
    call $p13, $p14, $i15, $i16, $i17, $i10, $p11, $p12 := fb_rotate_logo_ud_loop_$bb4($p13, $p14, $i15, $i16, $i17, $i10, $p11, $p12);
    goto $bb4_last;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref($sub.ref(0, 1), 1));
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p11, $mul.ref(1, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p11);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i15);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i10, 1);
    call {:si_unique_call 114} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i10, 0);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i10, $p11, $p12 := $i16, $p14, $p13;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1115;
}



const fb_rotate_logo_cw: ref;

axiom fb_rotate_logo_cw == $sub.ref(0, 312273);

procedure fb_rotate_logo_cw($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fb_rotate_logo_cw($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i8: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p10: ref;
  var $i11: i32;
  var $p21: ref;
  var $p9: ref;
  var $i22: i32;
  var $i23: i1;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} {:cexpr "fb_rotate_logo_cw:arg:width"} boogie_si_record_i32($i2);
    call {:si_unique_call 116} {:cexpr "fb_rotate_logo_cw:arg:height"} boogie_si_record_i32($i3);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    call {:si_unique_call 117} {:cexpr "h"} boogie_si_record_i32($i4);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i5 := $ult.i32(0, $i3);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p6, $i7 := $p0, 0;
    goto $bb4;

  $bb4:
    call $i8, $p12, $i13, $i14, $i15, $i16, $i17, $p18, $i19, $i20, $p10, $i11, $p21, $p9, $i22, $i23, $p6, $i7 := fb_rotate_logo_cw_loop_$bb4($p1, $i2, $i3, $i4, $i8, $p12, $i13, $i14, $i15, $i16, $i17, $p18, $i19, $i20, $p10, $i11, $p21, $p9, $i22, $i23, $p6, $i7);
    goto $bb4_last;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $ult.i32(0, $i2);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p9 := $p6;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i7, 1);
    call {:si_unique_call 119} {:cexpr "i"} boogie_si_record_i32($i22);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i23 := $ult.i32($i22, $i3);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i23 == 1);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $p6, $i7 := $p9, $i22;
    goto $bb14_dummy;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p10, $i11 := $p6, 0;
    goto $bb9;

  $bb9:
    call $p12, $i13, $i14, $i15, $i16, $i17, $p18, $i19, $i20, $p10, $i11, $p21 := fb_rotate_logo_cw_loop_$bb9($p1, $i2, $i3, $i4, $p12, $i13, $i14, $i15, $i16, $i17, $p18, $i19, $i20, $p10, $i11, $p21, $i7);
    goto $bb9_last;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref(1, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p10);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i14 := $mul.i32($i3, $i11);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, $i4);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i15, $i7);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p1, $mul.ref($i17, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i13);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i11, 1);
    call {:si_unique_call 118} {:cexpr "j"} boogie_si_record_i32($i19);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i20 := $ult.i32($i19, $i2);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p21 := $p12;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p9 := $p21;
    goto $bb8;

  $bb11:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $p10, $i11 := $p12, $i19;
    goto $bb11_dummy;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1138;

  $bb14_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1132;
}



const fb_rotate_logo_ccw: ref;

axiom fb_rotate_logo_ccw == $sub.ref(0, 313305);

procedure fb_rotate_logo_ccw($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fb_rotate_logo_ccw($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i8: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p10: ref;
  var $i11: i32;
  var $p21: ref;
  var $p9: ref;
  var $i22: i32;
  var $i23: i1;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} {:cexpr "fb_rotate_logo_ccw:arg:width"} boogie_si_record_i32($i2);
    call {:si_unique_call 121} {:cexpr "fb_rotate_logo_ccw:arg:height"} boogie_si_record_i32($i3);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i2, 1);
    call {:si_unique_call 122} {:cexpr "w"} boogie_si_record_i32($i4);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i5 := $ult.i32(0, $i3);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p6, $i7 := $p0, 0;
    goto $bb4;

  $bb4:
    call $i8, $p12, $i13, $i14, $i15, $i16, $i17, $p18, $i19, $i20, $p10, $i11, $p21, $p9, $i22, $i23, $p6, $i7 := fb_rotate_logo_ccw_loop_$bb4($p1, $i2, $i3, $i4, $i8, $p12, $i13, $i14, $i15, $i16, $i17, $p18, $i19, $i20, $p10, $i11, $p21, $p9, $i22, $i23, $p6, $i7);
    goto $bb4_last;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $ult.i32(0, $i2);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p9 := $p6;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i7, 1);
    call {:si_unique_call 124} {:cexpr "i"} boogie_si_record_i32($i22);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i23 := $ult.i32($i22, $i3);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i23 == 1);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $p6, $i7 := $p9, $i22;
    goto $bb14_dummy;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p10, $i11 := $p6, 0;
    goto $bb9;

  $bb9:
    call $p12, $i13, $i14, $i15, $i16, $i17, $p18, $i19, $i20, $p10, $i11, $p21 := fb_rotate_logo_ccw_loop_$bb9($p1, $i2, $i3, $i4, $p12, $i13, $i14, $i15, $i16, $i17, $p18, $i19, $i20, $p10, $i11, $p21, $i7);
    goto $bb9_last;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref(1, 1));
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p10);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32($i4, $i11);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i14, $i3);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, $i7);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p1, $mul.ref($i17, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i13);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i11, 1);
    call {:si_unique_call 123} {:cexpr "j"} boogie_si_record_i32($i19);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i20 := $ult.i32($i19, $i2);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p21 := $p12;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p9 := $p21;
    goto $bb8;

  $bb11:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $p10, $i11 := $p12, $i19;
    goto $bb11_dummy;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1170;

  $bb14_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1164;
}



const free_: ref;

axiom free_ == $sub.ref(0, 314337);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 125} $free($p0);
    return;
}



const safe_shift: ref;

axiom safe_shift == $sub.ref(0, 315369);

procedure safe_shift($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation safe_shift($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;
  var $i6: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} {:cexpr "safe_shift:arg:d"} boogie_si_record_i32($i0);
    call {:si_unique_call 127} {:cexpr "safe_shift:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 0);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i0, $i1);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, $i1);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i32($i0, $i3);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 316401);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 129} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $p2 := ldv_malloc($i0);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 317433);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 131} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 1} true;
    call {:si_unique_call 132} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 133} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 134} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $p4 := malloc($i0);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 1} true;
    call {:si_unique_call 136} __VERIFIER_assume($i7);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 318465);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 137} $r := $malloc($i0);
    return;
}



const fb_set_cmap: ref;

axiom fb_set_cmap == $sub.ref(0, 319497);

procedure fb_set_cmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.16, $M.17, $M.19, $M.21, $M.70, $M.10, $M.18, $M.72, $M.11, $CurrAddr, $M.46, $M.71, $M.12, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.13, assertsPassed, $M.62, $M.64, $M.66, $M.68;



implementation fb_set_cmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p48: ref;
  var $i49: i16;
  var $i50: i32;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i37: i32;
  var $i74: i1;
  var $p75: ref;
  var $i25: i32;
  var vslice_dummy_var_128: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    call {:si_unique_call 138} {:cexpr "start"} boogie_si_record_i32($i11);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i12 == 1);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 192)), $mul.ref(56, 1));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 192)), $mul.ref(64, 1));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i40 := $ult.i32(0, $i39);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i37, 0);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i25 := $i37;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb29:
    assume $i74 == 1;
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(912, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} vslice_dummy_var_128 := fb_copy_cmap($p0, $p75);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i41, $p42, $i43, $i44, $p45, $p46, $p47 := 65535, $p9, 0, $i11, $p3, $p5, $p7;
    goto $bb17;

  $bb17:
    call $p48, $i49, $i50, $p51, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $p59, $i60, $i61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $i71, $i72, $i73, $i41, $p42, $i43, $i44, $p45, $p46, $p47 := fb_set_cmap_loop_$bb17($p1, $p38, $p48, $i49, $i50, $p51, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $p59, $i60, $i61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $i71, $i72, $i73, $i41, $p42, $i43, $i44, $p45, $p46, $p47);
    goto $bb17_last;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p45, $mul.ref(1, 2));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.0, $p45);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    call {:si_unique_call 141} {:cexpr "hred"} boogie_si_record_i32($i50);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p46, $mul.ref(1, 2));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p46);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    call {:si_unique_call 142} {:cexpr "hgreen"} boogie_si_record_i32($i53);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p47, $mul.ref(1, 2));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.0, $p47);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    call {:si_unique_call 143} {:cexpr "hblue"} boogie_si_record_i32($i56);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p42);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $p62, $i63 := $p42, $i41;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i44, 1);
    call {:si_unique_call 145} {:cexpr "start"} boogie_si_record_i32($i64);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 192)), $mul.ref(56, 1));
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    call {:si_unique_call 146} $i69 := devirtbounce.3($p68, $i44, $i50, $i53, $i56, $i63, $p1);
    call {:si_unique_call 147} {:cexpr "tmp___4"} boogie_si_record_i32($i69);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i43, 1);
    call {:si_unique_call 148} {:cexpr "i"} boogie_si_record_i32($i71);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p38);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i73 := $ult.i32($i71, $i72);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i73 == 1);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb26:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i41, $p42, $i43, $i44, $p45, $p46, $p47 := $i63, $p62, $i71, $i64, $p48, $p51, $p54;
    goto $bb26_dummy;

  $bb22:
    assume $i70 == 1;
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i58 == 1;
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p42, $mul.ref(1, 2));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.0, $p42);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    call {:si_unique_call 144} {:cexpr "htransp"} boogie_si_record_i32($i61);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p62, $i63 := $p59, $i61;
    goto $bb21;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 192)), $mul.ref(64, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    call {:si_unique_call 139} $i36 := devirtbounce.2($p35, $p0, $p1);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 140} {:cexpr "rc"} boogie_si_record_i32($i36);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb13;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 192)), $mul.ref(64, 1));
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb6;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 22);
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb26_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1274;
}



const fb_copy_cmap: ref;

axiom fb_copy_cmap == $sub.ref(0, 320529);

procedure fb_copy_cmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fb_copy_cmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i12: i32;
  var $i13: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $p83: ref;
  var $i84: i64;
  var $i31: i32;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i3, $i5);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i15, $i17);
    call {:si_unique_call 151} {:cexpr "tooff"} boogie_si_record_i32($i18);
    assume {:verifier.code 0} true;
    $i12, $i13 := $i18, 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i20, $i12);
    call {:si_unique_call 152} {:cexpr "size"} boogie_si_record_i32($i21);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i23, $i13);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, $i21);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i21;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i30 := $sle.i32($i29, 0);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i32 := $mul.i32($i29, 2);
    call {:si_unique_call 154} {:cexpr "size"} boogie_si_record_i32($i32);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i12);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p35, $mul.ref($i36, 1));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i13);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p40, $mul.ref($i41, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i32);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    cmdloc_dummy_var_3 := $M.0;
    call {:si_unique_call 155} cmdloc_dummy_var_4 := $memcpy.i8(cmdloc_dummy_var_2, cmdloc_dummy_var_3, $p37, $p42, $i43, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_4;
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i12);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p46, $mul.ref($i47, 1));
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i13);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p51, $mul.ref($i52, 1));
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i32);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.0;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 156} cmdloc_dummy_var_7 := $memcpy.i8(cmdloc_dummy_var_5, cmdloc_dummy_var_6, $p48, $p53, $i54, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i12);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p57, $mul.ref($i58, 1));
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i13);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p62, $mul.ref($i63, 1));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i32);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 157} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p59, $p64, $i65, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb11:
    assume $i69 == 1;
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb13;

  $bb14:
    assume $i73 == 1;
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i12);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p76, $mul.ref($i77, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i13);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p81, $mul.ref($i82, 1));
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i32);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 158} cmdloc_dummy_var_13 := $memcpy.i8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p78, $p83, $i84, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb9;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32($i27, $i13);
    call {:si_unique_call 153} {:cexpr "size"} boogie_si_record_i32($i28);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i8, $i10);
    call {:si_unique_call 150} {:cexpr "fromoff"} boogie_si_record_i32($i11);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i12, $i13 := 0, $i11;
    goto $bb3;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 321561);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const bitmap_weight: ref;

axiom bitmap_weight == $sub.ref(0, 322593);

procedure bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation bitmap_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} {:cexpr "bitmap_weight:arg:nbits"} boogie_si_record_i32($i1);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i2 := __bitmap_weight($p0, $i1);
    call {:si_unique_call 161} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __bitmap_weight: ref;

axiom __bitmap_weight == $sub.ref(0, 323625);

procedure __bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __bitmap_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 162} {:cexpr "__bitmap_weight:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 1} true;
    call {:si_unique_call 163} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 164} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fb_pan_display: ref;

axiom fb_pan_display == $sub.ref(0, 324657);

procedure fb_pan_display($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.16, $M.17, $M.19, $M.21, $M.70, $M.10, $M.18, $M.72, $M.11, $CurrAddr, $M.46, $M.71, $M.12, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.13, assertsPassed, $M.62, $M.64, $M.66, $M.68;



implementation fb_pan_display($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i26: i32;
  var $i27: i32;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $p74: ref;
  var $i75: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $p105: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $p111: ref;
  var $i81: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(4, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 165} {:cexpr "yres"} boogie_si_record_i32($i5);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(20, 1));
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i40, $i41 := $i5, 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i56 := $i41;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i57 == 1);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i62, 0);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i63 == 1);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(20, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(12, 1));
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i69 := $sub.i32($i68, $i40);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i70 := $ugt.i32($i65, $i69);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i70 == 1);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(8, 1));
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(0, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i79 := $sub.i32($i75, $i78);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i80 := $ugt.i32($i72, $i79);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    call {:si_unique_call 166} $i86 := devirtbounce.4($p85, $p1, $p0);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 167} {:cexpr "err"} boogie_si_record_i32($i86);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(16, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, $i89);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(20, 1));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(20, 1));
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p95, $i93);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(132, 1));
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i98 := $and.i32($i97, 256);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i99 == 1);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(132, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i109 := $and.i32($i108, $sub.i32(0, 257));
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(132, 1));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $i109);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i81 := 0;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $r := $i81;
    return;

  $bb42:
    assume $i99 == 1;
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(132, 1));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i103 := $or.i32($i102, 256);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(132, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p105, $i103);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i87 == 1;
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i81 := $i86;
    goto $bb37;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i81 := $sub.i32(0, 22);
    goto $bb37;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb29;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb29;

  $bb19:
    assume $i44 == 1;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(40, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.0, $p45);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i48 == 1);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(40, 1));
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i54 := $urem.i32($i50, $i53);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb21;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32(0, 22);
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb23;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(132, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 256);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(42, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i31 == 1);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(20, 1));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(42, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i37 := $urem.i32($i33, $i36);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i26, $i27 := $i5, $i39;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i40, $i41 := $i26, $i27;
    goto $bb18;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 22);
    goto $bb17;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb13;

  $bb3:
    assume $i12 == 1;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(44, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i16 == 1);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(20, 1));
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(44, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i22 := $urem.i32($i18, $i21);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24, $i25 := 0, 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i26, $i27 := $i24, $i25;
    goto $bb11;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i24, $i25 := $i5, $sub.i32(0, 22);
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb6;
}



const fb_set_var: ref;

axiom fb_set_var == $sub.ref(0, 325689);

procedure fb_set_var($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.15, $M.0, $M.16, $M.17, $M.19, $M.21, $CurrAddr, $M.70, $M.10, $M.18, $M.72, $M.11, $M.46, $M.71, $M.12, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.13, assertsPassed, $M.62, $M.64, $M.66, $M.68;



implementation fb_set_var($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i1;
  var $i26: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p89: ref;
  var $i90: i32;
  var $i91: i1;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i64;
  var $i121: i1;
  var $i122: i32;
  var $i123: i1;
  var $i124: i32;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i64;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i147: i32;
  var $p148: ref;
  var $p150: ref;
  var $p152: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $i157: i1;
  var $p159: ref;
  var $p160: ref;
  var $i161: i64;
  var $i162: i1;
  var $p163: ref;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $i167: i32;
  var $i168: i32;
  var $i169: i32;
  var $i170: i1;
  var $i171: i32;
  var $i172: i1;
  var $i173: i32;
  var $i174: i1;
  var $i175: i32;
  var $p176: ref;
  var $i177: i32;
  var $i178: i32;
  var $p179: ref;
  var $p180: ref;
  var $p182: ref;
  var $i183: i64;
  var $p184: ref;
  var $i186: i32;
  var $i187: i32;
  var $i27: i32;
  var $i96: i32;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p2 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $p3 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p5 := $alloc($mul.ref(160, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $p6 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $p7 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 174} {:cexpr "flags"} boogie_si_record_i32($i9);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(84, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 256);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(84, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 128);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p1);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $i35 := memcmp($p33, $p34, 160);
    call {:si_unique_call 184} {:cexpr "tmp___0"} boogie_si_record_i32($i35);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i187 := 0;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i27 := $i187;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i96 := $i27;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $r := $i96;
    return;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(84, 1));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    call {:si_unique_call 185} {:cexpr "activate___0"} boogie_si_record_i32($i38);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(72, 1));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 1);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p98, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p100);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i102 := $eq.i64($i101, 0);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    call {:si_unique_call 187} $i110 := devirtbounce.4($p109, $p1, $p0);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 188} {:cexpr "ret"} boogie_si_record_i32($i110);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(84, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i114 := $and.i32($i113, 15);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 0);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    $i186 := $i110;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i187 := $i186;
    goto $bb85;

  $bb55:
    assume $i115 == 1;
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p117, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p119);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i121 := $ne.i64($i120, 0);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    $i124 := $i110;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1));
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p5);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p125);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.0;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 191} cmdloc_dummy_var_19 := $memcpy.i8(cmdloc_dummy_var_17, cmdloc_dummy_var_18, $p126, $p127, 160, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p1);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 192} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p129, $p130, 160, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p132, $mul.ref(0, 192)), $mul.ref(48, 1));
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p134);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i136 := $ne.i64($i135, 0);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    $i147 := $i124;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} vslice_dummy_var_130 := fb_pan_display($p0, $p148);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(912, 1));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} vslice_dummy_var_131 := fb_set_cmap($p150, $p0);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} fb_var_to_videomode($p6, $p152);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(952, 1)), $mul.ref(8, 1));
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i156 := $p2i.ref.i64($p155);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i157 := $ne.i64($i156, 0);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i157 == 1);
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i169 := $i147;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, 0);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i170 == 1);
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i186 := $i169;
    goto $bb84;

  $bb78:
    assume $i170 == 1;
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i171 := $and.i32($i9, 65536);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i171, 0);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i172 == 1);
    goto $bb80;

  $bb81:
    assume $i172 == 1;
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i173 := $and.i32($i38, 64);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i174 := $ne.i32($i173, 0);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i175 := (if $i174 == 1 then 11 else 1);
    call {:si_unique_call 204} {:cexpr "evnt"} boogie_si_record_i32($i175);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.0, $p176);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i178 := $and.i32($i177, $sub.i32(0, 65537));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p179, $i178);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p180, $p0);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p182, $p6);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i183 := $sext.i32.i64($i175);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p7);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} vslice_dummy_var_132 := fb_notifier_call_chain($i183, $p184);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb69:
    assume $i157 == 1;
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(952, 1)), $mul.ref(0, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i161 := $p2i.ref.i64($p160);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i162 := $ne.i64($i161, 0);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i162 == 1);
    goto $bb71;

  $bb72:
    assume $i162 == 1;
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(952, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $i164 := list_empty($p163);
    call {:si_unique_call 201} {:cexpr "tmp"} boogie_si_record_i32($i164);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 0);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    $i168 := $i147;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i169 := $i168;
    goto $bb77;

  $bb74:
    assume $i165 == 1;
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(952, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $i167 := fb_add_videomode($p6, $p166);
    call {:si_unique_call 203} {:cexpr "ret"} boogie_si_record_i32($i167);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i168 := $i167;
    goto $bb76;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i136 == 1;
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p138, $mul.ref(0, 192)), $mul.ref(48, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.0, $p139);
    call {:si_unique_call 193} $i141 := devirtbounce($p140, $p0);
    call {:si_unique_call 194} {:cexpr "ret"} boogie_si_record_i32($i141);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i142 := $ne.i32($i141, 0);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i147 := $i141;
    goto $bb68;

  $bb65:
    assume $i142 == 1;
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1));
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p5);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.0;
    cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 195} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p144, $p145, 160, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_25;
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} vslice_dummy_var_129 := printk.ref.i32(.str, $i141);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i27 := $i141;
    goto $bb9;

  $bb57:
    assume $i121 == 1;
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $i122 := fb_check_caps($p0, $p1, $i38);
    call {:si_unique_call 190} {:cexpr "ret"} boogie_si_record_i32($i122);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i124 := $i122;
    goto $bb62;

  $bb59:
    assume $i123 == 1;
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i27 := $i122;
    goto $bb9;

  $bb52:
    assume $i111 == 1;
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i27 := $i110;
    goto $bb9;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb49:
    assume $i102 == 1;
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1));
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p1);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p103);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 186} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p104, $p105, 160, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_16;
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb9;

  $bb16:
    assume $i44 == 1;
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(28, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i47 := $ugt.i32($i46, 1);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb18;

  $bb19:
    assume $i47 == 1;
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i51 == 1);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i55 == 1);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i59 == 1);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(68, 1)), $mul.ref(0, 1));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i63 == 1);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(32, 1)), $mul.ref(4, 1));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i67 == 1);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i71 == 1);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(4, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i75 == 1);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(68, 1)), $mul.ref(4, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i79 == 1);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i83 == 1);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(44, 1)), $mul.ref(8, 1));
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i87 == 1);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i91 == 1);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(68, 1)), $mul.ref(8, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i96 := $sub.i32(0, 22);
    goto $bb46;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb22;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb22;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb22;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb22;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb22;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i71 == 1;
    goto $bb22;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb22;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb22;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb22;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb22;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} fb_var_to_videomode($p2, $p1);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} fb_var_to_videomode($p3, $p14);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $i15 := fb_mode_is_equal($p2, $p3);
    call {:si_unique_call 178} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i15;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i22, 0);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i26 := (if $i25 == 1 then $sub.i32(0, 22) else 0);
    call {:si_unique_call 182} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb9;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(952, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} fb_delete_videomode($p2, $p24);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p17, $p0);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p19, $p2);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p4);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i21 := fb_notifier_call_chain(4, $p20);
    call {:si_unique_call 180} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb5;
}



const fb_var_to_videomode: ref;

axiom fb_var_to_videomode == $sub.ref(0, 326721);

procedure fb_var_to_videomode($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fb_var_to_videomode($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $0.ref);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(100, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(104, 1));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(108, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(116, 1));
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(132, 1));
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 255);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 32);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 0);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(100, 1));
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(100, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i44 := $udiv.i32(1000000000, $i43);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i45 := $mul.i32($i44, 1000);
    call {:si_unique_call 206} {:cexpr "pixclock"} boogie_si_record_i32($i45);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(108, 1));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i47, $i49);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i50, $i52);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(104, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i53, $i55);
    call {:si_unique_call 207} {:cexpr "htotal"} boogie_si_record_i32($i56);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(116, 1));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i58, $i60);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i61, $i63);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i64, $i66);
    call {:si_unique_call 208} {:cexpr "vtotal"} boogie_si_record_i32($i67);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(132, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 1);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i73 := $i67;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(132, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i75, 2);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i79 := $i73;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i80 := $udiv.i32($i45, $i56);
    call {:si_unique_call 211} {:cexpr "hfreq"} boogie_si_record_i32($i80);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i81 := $udiv.i32($i80, $i79);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, $i81);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i77 == 1;
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i78 := $mul.i32($i73, 2);
    call {:si_unique_call 210} {:cexpr "vtotal"} boogie_si_record_i32($i78);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i79 := $i78;
    goto $bb10;

  $bb5:
    assume $i71 == 1;
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i72 := $udiv.i32($i67, 2);
    call {:si_unique_call 209} {:cexpr "vtotal"} boogie_si_record_i32($i72);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i73 := $i72;
    goto $bb7;

  $bb1:
    assume $i41 == 1;
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fb_mode_is_equal: ref;

axiom fb_mode_is_equal == $sub.ref(0, 327753);

procedure fb_mode_is_equal($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fb_mode_is_equal($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i7: i1;
  var $i58: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i3, $i5);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i32($i7);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $r := $i58;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i9, $i11);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i14, $i16);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i19, $i21);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb3;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i24, $i26);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond $i27} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb3;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i29, $i31);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb3;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i34, $i36);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb3;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i39, $i41);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond $i42} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb3;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i44, $i46);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond $i47} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb3;

  $bb18:
    assume $i47 == 1;
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i49, $i51);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond $i52} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb3;

  $bb20:
    assume $i52 == 1;
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i54, $i56);
    assume {:verifier.code 0} true;
    $i7 := $i57;
    goto $bb3;
}



const fb_notifier_call_chain: ref;

axiom fb_notifier_call_chain == $sub.ref(0, 328785);

procedure fb_notifier_call_chain($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fb_notifier_call_chain($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 212} {:cexpr "fb_notifier_call_chain:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 1} true;
    call {:si_unique_call 213} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 214} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fb_delete_videomode: ref;

axiom fb_delete_videomode == $sub.ref(0, 329817);

procedure fb_delete_videomode($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation fb_delete_videomode($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p3);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p1);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i6, $i7);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p9, $p10 := $p5, $p3;
    goto $bb4;

  $bb4:
    call $p11, $p12, $i13, $i14, $p15, $p16, $p17, $i18, $i19, $p9, $p10 := fb_delete_videomode_loop_$bb4($p0, $i7, $p11, $p12, $i13, $i14, $p15, $p16, $p17, $i18, $i19, $p9, $p10);
    goto $bb4_last;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i13 := fb_mode_is_equal($p12, $p0);
    call {:si_unique_call 216} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p9);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, $i7);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $p9, $p10 := $p17, $p9;
    goto $bb9_dummy;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} list_del($p10);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p10);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} kfree($p15);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2002;
}



const memcmp: ref;

axiom memcmp == $sub.ref(0, 330849);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const fb_check_caps: ref;

axiom fb_check_caps == $sub.ref(0, 331881);

procedure fb_check_caps($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.17, $M.14, $M.15, $M.0, $CurrAddr;



implementation fb_check_caps($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var vslice_dummy_var_133: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 222} {:cexpr "fb_check_caps:arg:activate___0"} boogie_si_record_i32($i2);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.16;
    call {:si_unique_call 223} cmdloc_dummy_var_27 := $memset.i8(cmdloc_dummy_var_26, $p6, 0, 16, $zext.i32.i64(4), 0 == 1);
    $M.16 := cmdloc_dummy_var_27;
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p5);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_28 := $M.17;
    call {:si_unique_call 224} cmdloc_dummy_var_29 := $memset.i8(cmdloc_dummy_var_28, $p7, 0, 16, $zext.i32.i64(4), 0 == 1);
    $M.17 := cmdloc_dummy_var_29;
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i2, 64);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p11, $i10);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p12, $p0);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p14, $p4);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p3);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} vslice_dummy_var_133 := fb_notifier_call_chain(13, $p15);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    call {:si_unique_call 226} devirtbounce.5($p20, $p0, $p5, $p1);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.17, $p21);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i23 := $xor.i32($i22, $sub.i32(0, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.16, $p24);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i23, $i25);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i27 == 1);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.17, $p28);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i30 := $xor.i32($i29, $sub.i32(0, 1));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.16, $p31);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i30, $i32);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i34 == 1);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.17, $p35);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.16, $p37);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i39 := $ult.i32($i36, $i38);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb2;
}



const printk: ref;

axiom printk == $sub.ref(0, 332913);

procedure printk.ref.i64($p0: ref, p.1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64($p0: ref, p.1: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 1} true;
    call {:si_unique_call 227} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 228} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 1} true;
    call {:si_unique_call 229} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 230} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 1} true;
    call {:si_unique_call 231} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 232} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 1} true;
    call {:si_unique_call 233} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 234} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 1} true;
    call {:si_unique_call 235} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 236} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i64($p0: ref, p.1: i32, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i64($p0: ref, p.1: i32, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 1} true;
    call {:si_unique_call 237} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 238} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64.i64.i64.i64($p0: ref, p.1: i64, p.2: i64, p.3: i64, p.4: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64.i64.i64.i64($p0: ref, p.1: i64, p.2: i64, p.3: i64, p.4: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 1} true;
    call {:si_unique_call 239} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 240} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 1} true;
    call {:si_unique_call 241} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 242} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 333945);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const fb_add_videomode: ref;

axiom fb_add_videomode == $sub.ref(0, 334977);

procedure fb_add_videomode($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fb_add_videomode($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p7: ref;
  var $i12: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i22: i32;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i4, $i5);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $p18 := kmalloc(80, 208);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p19, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p0);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.0;
    cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 246} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p24, $p25, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_32;
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p19, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} list_add($p26, $p1);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb15:
    assume $i21 == 1;
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 12);
    goto $bb17;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p7 := $p3;
    goto $bb4;

  $bb4:
    call $p8, $p9, $i10, $i11, $p13, $p14, $i15, $i16, $p7 := fb_add_videomode_loop_$bb4($p0, $i5, $p8, $p9, $i10, $i11, $p13, $p14, $i15, $i16, $p7);
    goto $bb4_last;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} $i10 := fb_mode_is_equal($p9, $p0);
    call {:si_unique_call 244} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, $i5);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $p7 := $p14;
    goto $bb10_dummy;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2109;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 336009);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} __list_add($p0, $p1, $p3);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 337041);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 338073);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    return;
}



const fb_blank: ref;

axiom fb_blank == $sub.ref(0, 339105);

procedure fb_blank($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.14, $M.15, $CurrAddr;



implementation fb_blank($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i27: i1;
  var $p28: ref;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p2, $i1);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.18, $p2);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 4);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p6, $p0);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p8, $p2);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p3);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $i10 := fb_notifier_call_chain(16, $p9);
    call {:si_unique_call 252} {:cexpr "early_ret"} boogie_si_record_i32($i10);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i10, 0);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p3);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} vslice_dummy_var_135 := fb_notifier_call_chain(17, $p28);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p3);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} vslice_dummy_var_134 := fb_notifier_call_chain(9, $p25);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.18, $p2);
    call {:si_unique_call 253} $i22 := devirtbounce.6($p20, $i21, $p0);
    call {:si_unique_call 254} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p2, 4);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const unlink_framebuffer: ref;

axiom unlink_framebuffer == $sub.ref(0, 340137);

procedure unlink_framebuffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation unlink_framebuffer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 257} {:cexpr "i"} boogie_si_record_i32($i2);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i2, 31);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i2);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref($i5, 8));
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.19, $p6);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i8, $i9);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p16 := $M.20;
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i2, 30408704);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} device_destroy($p16, $i17);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $0.ref);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const device_destroy: ref;

axiom device_destroy == $sub.ref(0, 341169);

procedure device_destroy($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation device_destroy($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} {:cexpr "device_destroy:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    return;
}



const remove_conflicting_framebuffers: ref;

axiom remove_conflicting_framebuffers == $sub.ref(0, 342201);

procedure remove_conflicting_framebuffers($p0: ref, $p1: ref, $i2: i1) returns ($r: i32);



const do_remove_conflicting_framebuffers: ref;

axiom do_remove_conflicting_framebuffers == $sub.ref(0, 343233);

procedure do_remove_conflicting_framebuffers($p0: ref, $p1: ref, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.0, $M.19, $M.21, $CurrAddr, $M.11, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.46;



implementation do_remove_conflicting_framebuffers($p0: ref, $p1: ref, $i2: i1) returns ($r: i32)
{
  var $i3: i8;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $i26: i1;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i51: i32;
  var $i10: i32;
  var $i52: i32;
  var $i53: i1;
  var $i4: i32;
  var $i50: i32;
  var vslice_dummy_var_136: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 260} {:cexpr "do_remove_conflicting_framebuffers:arg:primary"} boogie_si_record_i1($i2);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb1;

  $bb1:
    call $i5, $p6, $p7, $i8, $i9, $i11, $p12, $p13, $p14, $i15, $i16, $i17, $i18, $p19, $p20, $p21, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $p34, $i35, $i36, $i37, $p38, $p39, $p41, $p42, $i44, $p45, $p46, $i47, $i48, $i49, $i51, $i10, $i52, $i53, $i4, vslice_dummy_var_136 := do_remove_conflicting_framebuffers_loop_$bb1($p0, $p1, $i3, $i5, $p6, $p7, $i8, $i9, $i11, $p12, $p13, $p14, $i15, $i16, $i17, $i18, $p19, $p20, $p21, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $p34, $i35, $i36, $i37, $p38, $p39, $p41, $p42, $i44, $p45, $p46, $i47, $i48, $i49, $i51, $i10, $i52, $i53, $i4, vslice_dummy_var_136);
    goto $bb1_last;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref($i5, 8));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.19, $p6);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i4);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref($i11, 8));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.19, $p12);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 524288);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i4);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref($i18, 8));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.19, $p19);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 1608)), $mul.ref(1592, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $i23 := fb_do_apertures_overlap($p22, $p0);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 263} {:cexpr "tmp"} boogie_si_record_i8($i24);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i25 == 1);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i3);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i51 := $i4;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i10 := $i51;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i10, 1);
    call {:si_unique_call 261} {:cexpr "i"} boogie_si_record_i32($i52);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i53 := $sle.i32($i52, 31);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $r := $i50;
    return;

  $bb27:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i52;
    goto $bb27_dummy;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p22);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb15;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p22, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb15;

  $bb18:
    assume $i31 == 1;
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p22, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 655360);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb15;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i4);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref($i37, 8));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.19, $p38);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} vslice_dummy_var_136 := printk.ref.ref.ref(.str.24, $p1, $p42);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i4);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref($i44, 8));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.19, $p45);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i47 := do_unregister_framebuffer($p46);
    call {:si_unique_call 266} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i49 := $i47;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i51 := $i4;
    goto $bb26;

  $bb22:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb24;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb11;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i10 := $i4;
    goto $bb5;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i10 := $i4;
    goto $bb5;

  $bb27_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2230;
}



const fb_do_apertures_overlap: ref;

axiom fb_do_apertures_overlap == $sub.ref(0, 344265);

procedure fb_do_apertures_overlap($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation fb_do_apertures_overlap($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i32: i1;
  var $i33: i8;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i18: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i10: i32;
  var $i6: i1;
  var vslice_dummy_var_137: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i9 := $ult.i32(0, $i8);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb11;

  $bb11:
    call $p11, $p12, $i13, $p14, $p15, $i16, $i17, $p19, $p20, $i21, $p22, $p23, $i24, $p25, $i26, $p27, $i28, $p29, $i30, $i32, $i33, $i34, $i35, $i36, $i37, $i18, $i38, $i39, $i40, $i10, vslice_dummy_var_137 := fb_do_apertures_overlap_loop_$bb11($p0, $p1, $p7, $p11, $p12, $i13, $p14, $p15, $i16, $i17, $p19, $p20, $i21, $p22, $p23, $i24, $p25, $i26, $p27, $i28, $p29, $i30, $i32, $i33, $i34, $i35, $i36, $i37, $i18, $i38, $i39, $i40, $i10, vslice_dummy_var_137);
    goto $bb11_last;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(8, 1));
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i10);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p12, $mul.ref($i13, 16));
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i17 := $ult.i32(0, $i16);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i10, 1);
    call {:si_unique_call 271} {:cexpr "i"} boogie_si_record_i32($i38);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p7);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i40 := $ult.i32($i38, $i39);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i40 == 1);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb24:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i38;
    goto $bb24_dummy;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb16;

  $bb16:
    call $p19, $p20, $i21, $p22, $p23, $i24, $p25, $i26, $p27, $i28, $p29, $i30, $i32, $i33, $i34, $i35, $i36, $i37, $i18, vslice_dummy_var_137 := fb_do_apertures_overlap_loop_$bb16($p0, $p12, $i13, $p14, $p15, $p19, $p20, $i21, $p22, $p23, $i24, $p25, $i26, $p27, $i28, $p29, $i30, $i32, $i33, $i34, $i35, $i36, $i37, $i18, vslice_dummy_var_137);
    goto $bb16_last;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(8, 1));
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i18);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p20, $mul.ref($i21, 16));
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref($i21, 16)), $mul.ref(0, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p20, $mul.ref($i21, 16)), $mul.ref(8, 1));
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(0, 1));
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(8, 1));
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} vslice_dummy_var_137 := printk.ref.i64.i64.i64.i64(.str.25, $i24, $i26, $i28, $i30);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $i32 := apertures_overlap($p22, $p14);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i8($i32);
    call {:si_unique_call 269} {:cexpr "tmp"} boogie_si_record_i8($i33);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1($i33);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i18, 1);
    call {:si_unique_call 270} {:cexpr "j"} boogie_si_record_i32($i35);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p15);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i37 := $ult.i32($i35, $i36);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i37 == 1);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb21:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i18 := $i35;
    goto $bb21_dummy;

  $bb18:
    assume $i34 == 1;
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb21_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2326;

  $bb24_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2314;
}



const do_unregister_framebuffer: ref;

axiom do_unregister_framebuffer == $sub.ref(0, 345297);

procedure do_unregister_framebuffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.0, $M.19, $M.21, $CurrAddr, $M.11, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.46;



implementation do_unregister_framebuffer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i12: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    call {:si_unique_call 273} {:cexpr "i"} boogie_si_record_i32($i3);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i3, 31);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i3);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref($i6, 8));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.19, $p7);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i9, $i10);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} console_lock();
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i13 := lock_fb_info($p0);
    call {:si_unique_call 276} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p15, $p0);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i17 := fb_notifier_call_chain(14, $p16);
    call {:si_unique_call 279} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} unlock_fb_info($p0);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} console_unlock();
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} pm_vt_switch_unregister($p20);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} vslice_dummy_var_138 := unlink_framebuffer($p0);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(800, 1)), $mul.ref(0, 1));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(952, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} fb_destroy_modelist($p35);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i3);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref($i36, 8));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p37, $0.ref);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i38 := $M.21;
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i38, 1);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $M.21 := $i39;
    call {:si_unique_call 286} {:cexpr "num_registered_fb"} boogie_si_record_i32($i39);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} fb_cleanup_device($p0);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p40, $p0);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} console_lock();
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p1);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} vslice_dummy_var_139 := fb_notifier_call_chain(6, $p41);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} console_unlock();
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} put_fb_info($p0);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb16:
    assume $i26 == 1;
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(800, 1)), $mul.ref(28, 1));
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 1);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb18;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(800, 1)), $mul.ref(0, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} kfree($p34);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb13:
    assume $i18 == 1;
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb8;

  $bb10:
    assume $i14 == 1;
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} console_unlock();
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb8;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const console_lock: ref;

axiom console_lock == $sub.ref(0, 346329);

procedure console_lock();
  free requires assertsPassed;



implementation console_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    return;
}



const console_unlock: ref;

axiom console_unlock == $sub.ref(0, 347361);

procedure console_unlock();
  free requires assertsPassed;



implementation console_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    return;
}



const unlock_fb_info: ref;

axiom unlock_fb_info == $sub.ref(0, 348393);

procedure unlock_fb_info($p0: ref);
  free requires assertsPassed;



implementation unlock_fb_info($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(16, 1));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} mutex_unlock($p1);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    return;
}



const pm_vt_switch_unregister: ref;

axiom pm_vt_switch_unregister == $sub.ref(0, 349425);

procedure pm_vt_switch_unregister($p0: ref);
  free requires assertsPassed;



implementation pm_vt_switch_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    return;
}



const fb_destroy_modelist: ref;

axiom fb_destroy_modelist == $sub.ref(0, 350457);

procedure fb_destroy_modelist($p0: ref);
  free requires assertsPassed;



implementation fb_destroy_modelist($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p2);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i5, $i6);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p8, $p9 := $p4, $p2;
    goto $bb4;

  $bb4:
    call $p10, $p11, $p12, $i13, $i14, $p8, $p9 := fb_destroy_modelist_loop_$bb4($i6, $p10, $p11, $p12, $i13, $i14, $p8, $p9);
    goto $bb4_last;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} list_del($p9);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} kfree($p10);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p8);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, $i6);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $p8, $p9 := $p12, $p8;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2452;
}



const fb_cleanup_device: ref;

axiom fb_cleanup_device == $sub.ref(0, 351489);

procedure fb_cleanup_device($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fb_cleanup_device($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1528, 1));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} device_remove_file($p6, device_attrs);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} device_remove_file($p12, $add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(1, 48)));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} device_remove_file($p14, $add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(2, 48)));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} device_remove_file($p16, $add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(3, 48)));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} device_remove_file($p18, $add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(4, 48)));
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} device_remove_file($p20, $add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(5, 48)));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} device_remove_file($p22, $add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(6, 48)));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} device_remove_file($p24, $add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(7, 48)));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} device_remove_file($p26, $add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(8, 48)));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} device_remove_file($p28, $add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(9, 48)));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} device_remove_file($p30, $add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(10, 48)));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} device_remove_file($p32, $add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(11, 48)));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} device_remove_file($p34, $add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(12, 48)));
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1528, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, $sub.i32(0, 2));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1528, 1));
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const put_fb_info: ref;

axiom put_fb_info == $sub.ref(0, 352521);

procedure put_fb_info($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $CurrAddr, $M.46;



implementation put_fb_info($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(0, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i2 := atomic_dec_and_test($p1);
    call {:si_unique_call 309} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 310} devirtbounce.7($p13, $p0);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 353553);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 312} devirtbounce.8(0, $p2, $p1, $p2);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.22, $p1);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const device_remove_file: ref;

axiom device_remove_file == $sub.ref(0, 354585);

procedure device_remove_file($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation device_remove_file($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    return;
}



const apertures_overlap: ref;

axiom apertures_overlap == $sub.ref(0, 355617);

procedure apertures_overlap($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation apertures_overlap($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i64($i9, $i11);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i16, $i18);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i20 := $ult.i64($i14, $i19);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb7;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;
}



const register_framebuffer: ref;

axiom register_framebuffer == $sub.ref(0, 356649);

procedure register_framebuffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.21, $M.0, $M.19, $M.14, $CurrAddr, $M.11, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.46;



implementation register_framebuffer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} mutex_lock_nested(registration_lock, 0);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $i1 := do_register_framebuffer($p0);
    call {:si_unique_call 315} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} mutex_unlock(registration_lock);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const do_register_framebuffer: ref;

axiom do_register_framebuffer == $sub.ref(0, 357681);

procedure do_register_framebuffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.21, $M.0, $M.19, $M.14, $CurrAddr, $M.11, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.46;



implementation do_register_framebuffer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i1;
  var $i40: i8;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p47: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $p79: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p85: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i107: i64;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i7: i32;
  var $p114: ref;
  var $i115: i64;
  var $i116: i1;
  var $p117: ref;
  var $i118: i64;
  var $i119: i1;
  var $p120: ref;
  var $i121: i64;
  var $i122: i1;
  var $p123: ref;
  var $i124: i64;
  var $i125: i1;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;
  var $p129: ref;
  var $i130: i64;
  var $i131: i1;
  var $p132: ref;
  var $i133: i64;
  var $i134: i1;
  var $p135: ref;
  var $i136: i64;
  var $i137: i1;
  var $p138: ref;
  var $i139: i64;
  var $i140: i1;
  var $p141: ref;
  var $i142: i64;
  var $i143: i1;
  var $p144: ref;
  var $i145: i64;
  var $i146: i1;
  var $p147: ref;
  var $i148: i64;
  var $i149: i1;
  var $p150: ref;
  var $i151: i64;
  var $i152: i1;
  var $p153: ref;
  var $i154: i64;
  var $i155: i1;
  var $p156: ref;
  var $i157: i64;
  var $i158: i1;
  var $p159: ref;
  var $i160: i64;
  var $i161: i1;
  var $p162: ref;
  var $i163: i64;
  var $i164: i1;
  var $p165: ref;
  var $i166: i64;
  var $i167: i1;
  var $p168: ref;
  var $i169: i64;
  var $i170: i1;
  var $p171: ref;
  var $i172: i64;
  var $i173: i1;
  var $p174: ref;
  var $i175: i64;
  var $i176: i1;
  var $p177: ref;
  var $i178: i64;
  var $i179: i1;
  var $p180: ref;
  var $i181: i64;
  var $i182: i1;
  var $p183: ref;
  var $i184: i64;
  var $i185: i1;
  var $p186: ref;
  var $i187: i64;
  var $i188: i1;
  var $p189: ref;
  var $i190: i64;
  var $i191: i1;
  var $p192: ref;
  var $i193: i64;
  var $i194: i1;
  var $p195: ref;
  var $i196: i64;
  var $i197: i1;
  var $p198: ref;
  var $i199: i64;
  var $i200: i1;
  var $p201: ref;
  var $i202: i64;
  var $i203: i1;
  var $p204: ref;
  var $i205: i64;
  var $i206: i1;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $p2 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $i5 := fb_check_foreignness($p0);
    call {:si_unique_call 322} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $i8 := fb_is_primary_device($p0);
    call {:si_unique_call 324} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1592, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $i15 := do_remove_conflicting_framebuffers($p10, $p13, $i14);
    call {:si_unique_call 326} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := $M.21;
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 32);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i19 := $M.21;
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $M.21 := $i20;
    call {:si_unique_call 327} {:cexpr "num_registered_fb"} boogie_si_record_i32($i20);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.19, registered_fb);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i24 := 0;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(1, 8)));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p114);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i116 := $eq.i64($i115, 0);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i24 := 1;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(2, 8)));
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p117);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i119 := $eq.i64($i118, 0);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i24 := 2;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(3, 8)));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p120);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i122 := $eq.i64($i121, 0);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i24 := 3;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(4, 8)));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($p123);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i125 := $eq.i64($i124, 0);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i24 := 4;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(5, 8)));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i128 := $eq.i64($i127, 0);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i24 := 5;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(6, 8)));
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i130 := $p2i.ref.i64($p129);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i131 := $eq.i64($i130, 0);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i24 := 6;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(7, 8)));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i133 := $p2i.ref.i64($p132);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i134 := $eq.i64($i133, 0);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i24 := 7;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(8, 8)));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i136 := $p2i.ref.i64($p135);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i137 := $eq.i64($i136, 0);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i24 := 8;
    assume {:branchcond $i137} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(9, 8)));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i139 := $p2i.ref.i64($p138);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i140 := $eq.i64($i139, 0);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i24 := 9;
    assume {:branchcond $i140} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(10, 8)));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i142 := $p2i.ref.i64($p141);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i143 := $eq.i64($i142, 0);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i24 := 10;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(11, 8)));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p144);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i146 := $eq.i64($i145, 0);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i24 := 11;
    assume {:branchcond $i146} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(12, 8)));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i148 := $p2i.ref.i64($p147);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i149 := $eq.i64($i148, 0);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i24 := 12;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(13, 8)));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i151 := $p2i.ref.i64($p150);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i152 := $eq.i64($i151, 0);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i24 := 13;
    assume {:branchcond $i152} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(14, 8)));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i154 := $p2i.ref.i64($p153);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i155 := $eq.i64($i154, 0);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i24 := 14;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(15, 8)));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i157 := $p2i.ref.i64($p156);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i158 := $eq.i64($i157, 0);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i24 := 15;
    assume {:branchcond $i158} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(16, 8)));
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p159);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i161 := $eq.i64($i160, 0);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i24 := 16;
    assume {:branchcond $i161} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(17, 8)));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i163 := $p2i.ref.i64($p162);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i164 := $eq.i64($i163, 0);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i24 := 17;
    assume {:branchcond $i164} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(18, 8)));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i166 := $p2i.ref.i64($p165);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i167 := $eq.i64($i166, 0);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i24 := 18;
    assume {:branchcond $i167} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(19, 8)));
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i169 := $p2i.ref.i64($p168);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i170 := $eq.i64($i169, 0);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i24 := 19;
    assume {:branchcond $i170} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(20, 8)));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i172 := $p2i.ref.i64($p171);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i173 := $eq.i64($i172, 0);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i24 := 20;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(21, 8)));
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i175 := $p2i.ref.i64($p174);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i176 := $eq.i64($i175, 0);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i24 := 21;
    assume {:branchcond $i176} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(22, 8)));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i178 := $p2i.ref.i64($p177);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i179 := $eq.i64($i178, 0);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i24 := 22;
    assume {:branchcond $i179} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(23, 8)));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i181 := $p2i.ref.i64($p180);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i182 := $eq.i64($i181, 0);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i24 := 23;
    assume {:branchcond $i182} true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(24, 8)));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i184 := $p2i.ref.i64($p183);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i185 := $eq.i64($i184, 0);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i24 := 24;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(25, 8)));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i187 := $p2i.ref.i64($p186);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i188 := $eq.i64($i187, 0);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i24 := 25;
    assume {:branchcond $i188} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $p189 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(26, 8)));
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i190 := $p2i.ref.i64($p189);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i191 := $eq.i64($i190, 0);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i24 := 26;
    assume {:branchcond $i191} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(27, 8)));
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i193 := $p2i.ref.i64($p192);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i194 := $eq.i64($i193, 0);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i24 := 27;
    assume {:branchcond $i194} true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(28, 8)));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i196 := $p2i.ref.i64($p195);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i197 := $eq.i64($i196, 0);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i24 := 28;
    assume {:branchcond $i197} true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(29, 8)));
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i199 := $p2i.ref.i64($p198);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i200 := $eq.i64($i199, 0);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i24 := 29;
    assume {:branchcond $i200} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $p201 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(30, 8)));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i202 := $p2i.ref.i64($p201);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i203 := $eq.i64($i202, 0);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i24 := 30;
    assume {:branchcond $i203} true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(31, 8)));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i205 := $p2i.ref.i64($p204);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i206 := $eq.i64($i205, 0);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i24 := 31;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i25 := 32;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(0, 1));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} atomic_set($p27, 1);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(16, 1));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} __mutex_init($p28, .str.26, $p3);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(176, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} __mutex_init($p29, .str.27, $p4);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p30 := $M.20;
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1512, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i25, 30408704);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $p34 := device_create.ref.ref.i32.ref.ref.i32($p30, $p32, $i33, $0.ref, .str.28, $i25);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p34);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $i39 := IS_ERR($p38);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i8($i39);
    call {:si_unique_call 333} {:cexpr "tmp___2"} boogie_si_record_i8($i40);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i40);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i41 == 1);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} vslice_dummy_var_141 := fb_init_device($p0);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(800, 1)), $mul.ref(0, 1));
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(800, 1)), $mul.ref(12, 1));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, 0);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(800, 1)), $mul.ref(32, 1));
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 0);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(800, 1)), $mul.ref(36, 1));
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 0);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(952, 1)), $mul.ref(8, 1));
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i90 := $eq.i64($i89, 0);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb35, $bb37;

  $bb37:
    assume !($i90 == 1);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(952, 1)), $mul.ref(0, 1));
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p93);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i95 := $eq.i64($i94, 0);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1600, 1));
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i8.i1($i98);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i99 == 1);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} pm_vt_switch_required($p103, 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} fb_var_to_videomode($p2, $p104);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(952, 1));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} vslice_dummy_var_142 := fb_add_videomode($p2, $p105);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i107 := $sext.i32.i64($i25);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref($i107, 8));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p108, $p0);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p109, $p0);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} console_lock();
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i110 := lock_fb_info($p0);
    call {:si_unique_call 346} {:cexpr "tmp___4"} boogie_si_record_i32($i110);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 0);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p1);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} vslice_dummy_var_143 := fb_notifier_call_chain(5, $p112);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} unlock_fb_info($p0);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} console_unlock();
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb44:
    assume $i111 == 1;
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} console_unlock();
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;

  $bb41:
    assume $i99 == 1;
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} pm_vt_switch_required($p101, 0);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(952, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} INIT_LIST_HEAD($p96);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb36;

  $bb32:
    assume $i83 == 1;
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(800, 1)), $mul.ref(36, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, $sub.i32(0, 1));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i77 == 1;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(800, 1)), $mul.ref(32, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, $sub.i32(0, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume $i53 == 1;
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $p54 := kmalloc(8192, 208);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(800, 1)), $mul.ref(0, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $p54);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(800, 1)), $mul.ref(0, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i61 == 1;
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(800, 1)), $mul.ref(8, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, 8192);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(800, 1)), $mul.ref(16, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, 1);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(800, 1)), $mul.ref(20, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 1);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(800, 1)), $mul.ref(24, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, 32);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(800, 1)), $mul.ref(28, 1));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, 1);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb20:
    assume $i41 == 1;
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $i45 := PTR_ERR($p44);
    call {:si_unique_call 335} {:cexpr "tmp___1"} boogie_si_record_i64($i45);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} vslice_dummy_var_140 := printk.ref.i32.i64(.str.29, $i25, $i45);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, $0.ref);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb167:
    assume {:verifier.code 0} true;
    assume $i206 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb16;

  $bb163:
    assume {:verifier.code 0} true;
    assume $i203 == 1;
    goto $bb14;

  $bb159:
    assume {:verifier.code 0} true;
    assume $i200 == 1;
    goto $bb14;

  $bb155:
    assume {:verifier.code 0} true;
    assume $i197 == 1;
    goto $bb14;

  $bb151:
    assume {:verifier.code 0} true;
    assume $i194 == 1;
    goto $bb14;

  $bb147:
    assume {:verifier.code 0} true;
    assume $i191 == 1;
    goto $bb14;

  $bb143:
    assume {:verifier.code 0} true;
    assume $i188 == 1;
    goto $bb14;

  $bb139:
    assume {:verifier.code 0} true;
    assume $i185 == 1;
    goto $bb14;

  $bb135:
    assume {:verifier.code 0} true;
    assume $i182 == 1;
    goto $bb14;

  $bb131:
    assume {:verifier.code 0} true;
    assume $i179 == 1;
    goto $bb14;

  $bb127:
    assume {:verifier.code 0} true;
    assume $i176 == 1;
    goto $bb14;

  $bb123:
    assume {:verifier.code 0} true;
    assume $i173 == 1;
    goto $bb14;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i170 == 1;
    goto $bb14;

  $bb115:
    assume {:verifier.code 0} true;
    assume $i167 == 1;
    goto $bb14;

  $bb111:
    assume {:verifier.code 0} true;
    assume $i164 == 1;
    goto $bb14;

  $bb107:
    assume {:verifier.code 0} true;
    assume $i161 == 1;
    goto $bb14;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i158 == 1;
    goto $bb14;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i155 == 1;
    goto $bb14;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i152 == 1;
    goto $bb14;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i149 == 1;
    goto $bb14;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i146 == 1;
    goto $bb14;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i143 == 1;
    goto $bb14;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i140 == 1;
    goto $bb14;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i137 == 1;
    goto $bb14;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i134 == 1;
    goto $bb14;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i131 == 1;
    goto $bb14;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i128 == 1;
    goto $bb14;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i125 == 1;
    goto $bb14;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i122 == 1;
    goto $bb14;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i119 == 1;
    goto $bb14;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb14;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 6);
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i7 := $i15;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 38);
    goto $bb3;
}



const fb_check_foreignness: ref;

axiom fb_check_foreignness == $sub.ref(0, 358713);

procedure fb_check_foreignness($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fb_check_foreignness($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i8;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i8;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i8;
  var $i36: i1;
  var $p38: ref;
  var $p39: ref;
  var $i29: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1048576);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 351} {:cexpr "foreign_endian"} boogie_si_record_i8($i5);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, $sub.i32(0, 1048577));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i5);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i13 := (if $i12 == 1 then 1048576 else 0);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i11, $i13);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 1048576);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 1048576);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb10:
    assume $i33 == 1;
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $i34 := fb_be_math($p0);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i8($i34);
    call {:si_unique_call 356} {:cexpr "tmp"} boogie_si_record_i8($i35);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i36 == 1;
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} vslice_dummy_var_145 := printk.ref.ref(.str.31, $p39);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 38);
    goto $bb8;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $i20 := fb_be_math($p0);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i8($i20);
    call {:si_unique_call 353} {:cexpr "tmp___0"} boogie_si_record_i8($i21);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i21);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i24 == 1;
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} vslice_dummy_var_144 := printk.ref.ref(.str.30, $p27);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 38);
    goto $bb8;

  $bb3:
    assume $i22 == 1;
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb5;
}



const fb_is_primary_device: ref;

axiom fb_is_primary_device == $sub.ref(0, 359745);

procedure fb_is_primary_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fb_is_primary_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 1} true;
    call {:si_unique_call 358} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 359} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 360777);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 361809);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    return;
}



const device_create: ref;

axiom device_create == $sub.ref(0, 362841);

procedure device_create.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, p.5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation device_create.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, p.5: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} {:cexpr "device_create:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $p5 := external_alloc();
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 363873);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $i1 := ldv_is_err($p0);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 364} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 364905);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 366} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fb_init_device: ref;

axiom fb_init_device == $sub.ref(0, 365937);

procedure fb_init_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fb_init_device($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i19: i32;
  var $i20: i1;
  var $i8: i32;
  var $i21: i32;
  var $i22: i32;
  var $i17: i32;
  var $i18: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i26: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} dev_set_drvdata($p2, $p3);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1528, 1));
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 1);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1528, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb1;

  $bb1:
    call $p9, $p10, $i11, $p12, $i13, $i14, $i15, $i16, $i19, $i20, $i8, $i21, $i22 := fb_init_device_loop_$bb1($p0, $p9, $p10, $i11, $p12, $i13, $i14, $i15, $i16, $i19, $i20, $i8, $i21, $i22);
    goto $bb1_last;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i8);
    $p12 := $add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref($i11, 48));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $i13 := device_create_file($p10, $p12);
    call {:si_unique_call 369} {:cexpr "error"} boogie_si_record_i32($i13);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i15, $i16 := $i8, $i13;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i8, 1);
    call {:si_unique_call 370} {:cexpr "i"} boogie_si_record_i32($i19);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i20 := $ule.i32($i19, 12);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i21, $i22 := $i19, $i13;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i17, $i18 := $i21, $i22;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i18, 0);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i17, 1);
    call {:si_unique_call 371} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i25 := $sge.i32($i24, 0);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1528, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, $sub.i32(0, 2));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1528, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    goto $bb15;

  $bb15:
    call $p27, $p28, $i29, $p30, $i31, $i32, $i26 := fb_init_device_loop_$bb15($p0, $p27, $p28, $i29, $p30, $i31, $i32, $i26);
    goto $bb15_last;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i26);
    $p30 := $add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref($i29, 48));
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} device_remove_file($p28, $p30);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i26, 1);
    call {:si_unique_call 373} {:cexpr "i"} boogie_si_record_i32($i31);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i32 := $sge.i32($i31, 0);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb17:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i26 := $i31;
    goto $bb17_dummy;

  $bb7:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i19;
    goto $bb7_dummy;

  $bb3:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i17, $i18 := $i15, $i16;
    goto $bb5;

  $bb17_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2989;

  $bb7_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2967;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 366969);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    return;
}



const pm_vt_switch_required: ref;

axiom pm_vt_switch_required == $sub.ref(0, 368001);

procedure pm_vt_switch_required($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation pm_vt_switch_required($p0: ref, $i1: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} {:cexpr "pm_vt_switch_required:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 369033);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    return;
}



const device_create_file: ref;

axiom device_create_file == $sub.ref(0, 370065);

procedure device_create_file($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_create_file($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 1} true;
    call {:si_unique_call 375} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 376} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 371097);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 372129);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fb_be_math: ref;

axiom fb_be_math == $sub.ref(0, 373161);

procedure fb_be_math($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation fb_be_math($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1048576);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const unregister_framebuffer: ref;

axiom unregister_framebuffer == $sub.ref(0, 374193);

procedure unregister_framebuffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.0, $M.19, $M.21, $CurrAddr, $M.11, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.46;



implementation unregister_framebuffer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} mutex_lock_nested(registration_lock, 0);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $i1 := do_unregister_framebuffer($p0);
    call {:si_unique_call 379} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} mutex_unlock(registration_lock);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fb_set_suspend: ref;

axiom fb_set_suspend == $sub.ref(0, 375225);

procedure fb_set_suspend($p0: ref, $i1: i32);



const fb_videomode_from_videomode: ref;

axiom fb_videomode_from_videomode == $sub.ref(0, 376257);

procedure fb_videomode_from_videomode($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fb_videomode_from_videomode($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $i94: i1;
  var $p95: ref;
  var $i96: i64;
  var $i97: i32;
  var $i98: i64;
  var $i99: i64;
  var $i100: i32;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(20, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(28, 1));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 0);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 0);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 2);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 8);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i55, 256);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 512);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, 0);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i72, $i74);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i75, $i77);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(20, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i78, $i80);
    call {:si_unique_call 381} {:cexpr "htotal"} boogie_si_record_i32($i81);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(28, 1));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i83, $i85);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i86, $i88);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i89, $i91);
    call {:si_unique_call 382} {:cexpr "vtotal"} boogie_si_record_i32($i92);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i81, 0);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, 0);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i103 := $sub.i32(0, 22);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $r := $i103;
    return;

  $bb16:
    assume $i93 == 1;
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i92, 0);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb18;

  $bb19:
    assume $i94 == 1;
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i96 := $load.i64($M.0, $p95);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i97 := $mul.i32($i81, $i92);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i98 := $zext.i32.i64($i97);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i99 := $udiv.i64($i96, $i98);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i64.i32($i99);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p101, $i100);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i103 := 0;
    goto $bb22;

  $bb13:
    assume $i65 == 1;
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i68 := $or.i32($i67, 2);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i68);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i57 == 1;
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i60 := $or.i32($i59, 1);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i60);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i49 == 1;
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i51, 2);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i41 == 1;
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i43, 1);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i31 := $udiv.i64($i30, 1000);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i32 := $udiv.i64(1000000000, $i31);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i32($i32);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb3;
}



const of_get_fb_videomode: ref;

axiom of_get_fb_videomode == $sub.ref(0, 377289);

procedure of_get_fb_videomode($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const of_get_videomode: ref;

axiom of_get_videomode == $sub.ref(0, 378321);

procedure of_get_videomode($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 379353);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 384} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const of_node_full_name: ref;

axiom of_node_full_name == $sub.ref(0, 380385);

procedure of_node_full_name($p0: ref) returns ($r: ref);



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 381417);

procedure __dynamic_pr_debug.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32, p.13: i32, p.14: i32);



procedure __dynamic_pr_debug.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: ref);



const dump_fb_videomode: ref;

axiom dump_fb_videomode == $sub.ref(0, 382449);

procedure dump_fb_videomode($p0: ref);



const fb_firmware_edid: ref;

axiom fb_firmware_edid == $sub.ref(0, 383481);

procedure fb_firmware_edid($p0: ref) returns ($r: ref);



const fb_parse_edid: ref;

axiom fb_parse_edid == $sub.ref(0, 384513);

procedure fb_parse_edid($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.46, $CurrAddr;



implementation fb_parse_edid($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i32;
  var $i104: i32;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i32;
  var $p109: ref;
  var $i110: i8;
  var $i111: i32;
  var $i112: i32;
  var $i113: i32;
  var $i114: i32;
  var $p115: ref;
  var $i116: i8;
  var $i117: i32;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $p121: ref;
  var $i122: i8;
  var $i123: i32;
  var $i124: i32;
  var $i125: i32;
  var $p126: ref;
  var $i127: i8;
  var $i128: i32;
  var $i129: i32;
  var $i130: i32;
  var $i131: i32;
  var $p132: ref;
  var $p133: ref;
  var $i134: i8;
  var $i135: i32;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $p139: ref;
  var $i140: i8;
  var $i141: i32;
  var $i142: i32;
  var $i143: i32;
  var $p144: ref;
  var $p145: ref;
  var $i146: i8;
  var $i147: i32;
  var $i148: i32;
  var $i149: i32;
  var $i150: i32;
  var $p151: ref;
  var $i152: i8;
  var $i153: i32;
  var $i154: i32;
  var $p155: ref;
  var $p156: ref;
  var $i157: i8;
  var $i158: i32;
  var $i159: i32;
  var $i160: i32;
  var $p161: ref;
  var $i162: i8;
  var $i163: i32;
  var $i164: i32;
  var $i165: i32;
  var $p166: ref;
  var $p167: ref;
  var $i168: i8;
  var $i169: i32;
  var $i170: i32;
  var $i171: i8;
  var $i172: i32;
  var $i173: i32;
  var $i174: i32;
  var $p175: ref;
  var $p176: ref;
  var $i177: i32;
  var $i178: i32;
  var $p179: ref;
  var $p180: ref;
  var $i181: i32;
  var $i182: i32;
  var $p183: ref;
  var $p184: ref;
  var $i185: i8;
  var $i186: i32;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $i190: i32;
  var $i191: i32;
  var $p192: ref;
  var $p193: ref;
  var $i194: i8;
  var $i195: i32;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $i199: i32;
  var $i200: i32;
  var $p201: ref;
  var $i202: i64;
  var $p203: ref;
  var $i6: i32;
  var $i204: i32;
  var $i205: i1;
  var $i206: i64;
  var $p207: ref;
  var $i208: i32;
  var $i209: i1;
  var $i210: i64;
  var $p211: ref;
  var $i212: i32;
  var $i213: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $i7 := edid_checksum($p0);
    call {:si_unique_call 386} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $i9 := edid_check_header($p0);
    call {:si_unique_call 388} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p0, $mul.ref(54, 1));
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i12 := edid_is_timing_block($p11);
    call {:si_unique_call 390} {:cexpr "tmp___4"} boogie_si_record_i32($i12);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p14 := $p11;
    assume {:branchcond $i13} true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    $i202 := $add.i64(54, 18);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($p0, $mul.ref($i202, 1));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $i204 := edid_is_timing_block($p203);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i205 := $ne.i32($i204, 0);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p14 := $p203;
    assume {:branchcond $i205} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    $i206 := $add.i64($i202, 18);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($p0, $mul.ref($i206, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $i208 := edid_is_timing_block($p207);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i209 := $ne.i32($i208, 0);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $p14 := $p207;
    assume {:branchcond $i209} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    $i210 := $add.i64($i206, 18);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($p0, $mul.ref($i210, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $i212 := edid_is_timing_block($p211);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i213 := $ne.i32($i212, 0);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $p14 := $p211;
    assume {:branchcond $i213} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i213 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(4, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i18 := $ashr.i32($i17, 4);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i19 := $shl.i32($i18, 8);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p14, $mul.ref(2, 1));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i19, $i22);
    call {:si_unique_call 391} {:cexpr "tmp___1"} boogie_si_record_i32($i23);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i23);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p14, $mul.ref(7, 1));
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i29 := $ashr.i32($i28, 4);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i30 := $shl.i32($i29, 8);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p14, $mul.ref(5, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i30, $i33);
    call {:si_unique_call 392} {:cexpr "tmp___2"} boogie_si_record_i32($i34);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(12, 1));
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i34);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(92, 1));
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 0);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 0);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p14, $mul.ref(11, 1));
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i42 := $ashr.i32($i41, 6);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i43 := $shl.i32($i42, 8);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p14, $mul.ref(8, 1));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i43, $i46);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(108, 1));
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p14, $mul.ref(4, 1));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i52 := $ashr.i32($i51, 4);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i53 := $shl.i32($i52, 8);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p14, $mul.ref(2, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i53, $i56);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p14, $mul.ref(4, 1));
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 15);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i62 := $shl.i32($i61, 8);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p14, $mul.ref(3, 1));
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i62, $i65);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i57, $i66);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p14, $mul.ref(4, 1));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i71 := $ashr.i32($i70, 4);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i72 := $shl.i32($i71, 8);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p14, $mul.ref(2, 1));
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i76 := $or.i32($i72, $i75);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p14, $mul.ref(11, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i80 := $ashr.i32($i79, 6);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i81 := $shl.i32($i80, 8);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p14, $mul.ref(8, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.0, $p82);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i85 := $or.i32($i81, $i84);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i76, $i85);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p14, $mul.ref(11, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 48);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i91 := $lshr.i32($i90, 4);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i92 := $shl.i32($i91, 8);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p14, $mul.ref(9, 1));
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p93);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i96 := $or.i32($i92, $i95);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i97 := $add.i32($i86, $i96);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i98 := $sub.i32($i67, $i97);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(104, 1));
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, $i98);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p14, $mul.ref(7, 1));
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.0, $p100);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, 15);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i104 := $shl.i32($i103, 8);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p14, $mul.ref(6, 1));
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i108 := $or.i32($i104, $i107);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p14, $mul.ref(11, 1));
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.0, $p109);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i32($i110);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i112 := $and.i32($i111, 12);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i113 := $lshr.i32($i112, 2);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i114 := $shl.i32($i113, 4);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p14, $mul.ref(10, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i118 := $ashr.i32($i117, 4);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i119 := $or.i32($i114, $i118);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i120 := $sub.i32($i108, $i119);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p14, $mul.ref(11, 1));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.0, $p121);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i122);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i123, 3);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i125 := $shl.i32($i124, 4);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($p14, $mul.ref(10, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.0, $p126);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i128, 15);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i130 := $or.i32($i125, $i129);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i131 := $sub.i32($i120, $i130);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p132, $i131);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p14, $mul.ref(11, 1));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i134 := $load.i8($M.0, $p133);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i135 := $zext.i8.i32($i134);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i136 := $and.i32($i135, 12);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i137 := $lshr.i32($i136, 2);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i138 := $shl.i32($i137, 4);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p14, $mul.ref(10, 1));
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.0, $p139);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i32($i140);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i142 := $ashr.i32($i141, 4);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i143 := $or.i32($i138, $i142);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(116, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, $i143);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p14, $mul.ref(11, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i146 := $load.i8($M.0, $p145);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i147 := $zext.i8.i32($i146);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i148 := $and.i32($i147, 48);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i149 := $lshr.i32($i148, 4);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i150 := $shl.i32($i149, 8);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p14, $mul.ref(9, 1));
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i152 := $load.i8($M.0, $p151);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i32($i152);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i154 := $or.i32($i150, $i153);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p155, $i154);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p14, $mul.ref(11, 1));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.0, $p156);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i157);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i159 := $and.i32($i158, 3);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i160 := $shl.i32($i159, 4);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($p14, $mul.ref(10, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i162 := $load.i8($M.0, $p161);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i163 := $zext.i8.i32($i162);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i164 := $and.i32($i163, 15);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i165 := $or.i32($i160, $i164);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p166, $i165);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($p14, $mul.ref(1, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i168 := $load.i8($M.0, $p167);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i169 := $zext.i8.i32($i168);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i170 := $shl.i32($i169, 8);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i171 := $load.i8($M.0, $p14);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i172 := $zext.i8.i32($i171);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i173 := $or.i32($i170, $i172);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i174 := $mul.i32($i173, 10000);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(100, 1));
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p175, $i174);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(100, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.0, $p176);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i178 := $udiv.i32($i177, 1000);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(100, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p179, $i178);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(100, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.0, $p180);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i182 := $udiv.i32(1000000000, $i181);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(100, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p183, $i182);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($p14, $mul.ref(17, 1));
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.0, $p184);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i32($i185);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i187 := $and.i32($i186, 4);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i188 := $ne.i32($i187, 0);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($p14, $mul.ref(17, 1));
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i194 := $load.i8($M.0, $p193);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i195 := $zext.i8.i32($i194);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i196 := $and.i32($i195, 2);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i197 := $ne.i32($i196, 0);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb22:
    assume $i197 == 1;
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i199 := $load.i32($M.0, $p198);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i200 := $or.i32($i199, 2);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p201, $i200);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i188 == 1;
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i190 := $load.i32($M.0, $p189);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i191 := $or.i32($i190, 1);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p192, $i191);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i209 == 1;
    goto $bb17;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i205 == 1;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb17;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const edid_checksum: ref;

axiom edid_checksum == $sub.ref(0, 385545);

procedure edid_checksum($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.46, $M.0, $CurrAddr;



implementation edid_checksum($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i8;
  var $i4: i32;
  var $i5: i8;
  var $i6: i8;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i11: i1;
  var $i12: i32;
  var $i14: i1;
  var $i15: i32;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i8;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i8;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i8;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i8;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i8;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i8;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i8;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i8;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i8;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i8;
  var $p88: ref;
  var $i89: i8;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i8;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i8;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i32;
  var $i104: i32;
  var $i105: i8;
  var $p106: ref;
  var $i107: i8;
  var $i108: i32;
  var $i109: i32;
  var $i110: i32;
  var $i111: i8;
  var $p112: ref;
  var $i113: i8;
  var $i114: i32;
  var $i115: i32;
  var $i116: i32;
  var $i117: i8;
  var $p118: ref;
  var $i119: i8;
  var $i120: i32;
  var $i121: i32;
  var $i122: i32;
  var $i123: i8;
  var $p124: ref;
  var $i125: i8;
  var $i126: i32;
  var $i127: i32;
  var $i128: i32;
  var $i129: i8;
  var $p130: ref;
  var $i131: i8;
  var $i132: i32;
  var $i133: i32;
  var $i134: i32;
  var $i135: i8;
  var $p136: ref;
  var $i137: i8;
  var $i138: i32;
  var $i139: i32;
  var $i140: i32;
  var $i141: i8;
  var $p142: ref;
  var $i143: i8;
  var $i144: i32;
  var $i145: i32;
  var $i146: i32;
  var $i147: i8;
  var $p148: ref;
  var $i149: i8;
  var $i150: i32;
  var $i151: i32;
  var $i152: i32;
  var $i153: i8;
  var $p154: ref;
  var $i155: i8;
  var $i156: i32;
  var $i157: i32;
  var $i158: i32;
  var $i159: i8;
  var $p160: ref;
  var $i161: i8;
  var $i162: i32;
  var $i163: i32;
  var $i164: i32;
  var $i165: i8;
  var $p166: ref;
  var $i167: i8;
  var $i168: i32;
  var $i169: i32;
  var $i170: i32;
  var $i171: i8;
  var $p172: ref;
  var $i173: i8;
  var $i174: i32;
  var $i175: i32;
  var $i176: i32;
  var $i177: i8;
  var $p178: ref;
  var $i179: i8;
  var $i180: i32;
  var $i181: i32;
  var $i182: i32;
  var $i183: i8;
  var $p184: ref;
  var $i185: i8;
  var $i186: i32;
  var $i187: i32;
  var $i188: i32;
  var $i189: i8;
  var $p190: ref;
  var $i191: i8;
  var $i192: i32;
  var $i193: i32;
  var $i194: i32;
  var $i195: i8;
  var $p196: ref;
  var $i197: i8;
  var $i198: i32;
  var $i199: i32;
  var $i200: i32;
  var $i201: i8;
  var $p202: ref;
  var $i203: i8;
  var $i204: i32;
  var $i205: i32;
  var $i206: i32;
  var $i207: i8;
  var $p208: ref;
  var $i209: i8;
  var $i210: i32;
  var $i211: i32;
  var $i212: i32;
  var $i213: i8;
  var $p214: ref;
  var $i215: i8;
  var $i216: i32;
  var $i217: i32;
  var $i218: i32;
  var $i219: i8;
  var $p220: ref;
  var $i221: i8;
  var $i222: i32;
  var $i223: i32;
  var $i224: i32;
  var $i225: i8;
  var $p226: ref;
  var $i227: i8;
  var $i228: i32;
  var $i229: i32;
  var $i230: i32;
  var $i231: i8;
  var $p232: ref;
  var $i233: i8;
  var $i234: i32;
  var $i235: i32;
  var $i236: i32;
  var $i237: i8;
  var $p238: ref;
  var $i239: i8;
  var $i240: i32;
  var $i241: i32;
  var $i242: i32;
  var $i243: i8;
  var $p244: ref;
  var $i245: i8;
  var $i246: i32;
  var $i247: i32;
  var $i248: i32;
  var $i249: i8;
  var $p250: ref;
  var $i251: i8;
  var $i252: i32;
  var $i253: i32;
  var $i254: i32;
  var $i255: i8;
  var $p256: ref;
  var $i257: i8;
  var $i258: i32;
  var $i259: i32;
  var $i260: i32;
  var $i261: i8;
  var $p262: ref;
  var $i263: i8;
  var $i264: i32;
  var $i265: i32;
  var $i266: i32;
  var $i267: i8;
  var $p268: ref;
  var $i269: i8;
  var $i270: i32;
  var $i271: i32;
  var $i272: i32;
  var $i273: i8;
  var $p274: ref;
  var $i275: i8;
  var $i276: i32;
  var $i277: i32;
  var $i278: i32;
  var $i279: i8;
  var $p280: ref;
  var $i281: i8;
  var $i282: i32;
  var $i283: i32;
  var $i284: i32;
  var $i285: i8;
  var $p286: ref;
  var $i287: i8;
  var $i288: i32;
  var $i289: i32;
  var $i290: i32;
  var $i291: i8;
  var $p292: ref;
  var $i293: i8;
  var $i294: i32;
  var $i295: i32;
  var $i296: i32;
  var $i297: i8;
  var $p298: ref;
  var $i299: i8;
  var $i300: i32;
  var $i301: i32;
  var $i302: i32;
  var $i303: i8;
  var $p304: ref;
  var $i305: i8;
  var $i306: i32;
  var $i307: i32;
  var $i308: i32;
  var $i309: i8;
  var $p310: ref;
  var $i311: i8;
  var $i312: i32;
  var $i313: i32;
  var $i314: i32;
  var $i315: i8;
  var $p316: ref;
  var $i317: i8;
  var $i318: i32;
  var $i319: i32;
  var $i320: i32;
  var $i321: i8;
  var $p322: ref;
  var $i323: i8;
  var $i324: i32;
  var $i325: i32;
  var $i326: i32;
  var $i327: i8;
  var $p328: ref;
  var $i329: i8;
  var $i330: i32;
  var $i331: i32;
  var $i332: i32;
  var $i333: i8;
  var $p334: ref;
  var $i335: i8;
  var $i336: i32;
  var $i337: i32;
  var $i338: i32;
  var $i339: i8;
  var $p340: ref;
  var $i341: i8;
  var $i342: i32;
  var $i343: i32;
  var $i344: i32;
  var $i345: i8;
  var $p346: ref;
  var $i347: i8;
  var $i348: i32;
  var $i349: i32;
  var $i350: i32;
  var $i351: i8;
  var $p352: ref;
  var $i353: i8;
  var $i354: i32;
  var $i355: i32;
  var $i356: i32;
  var $i357: i8;
  var $p358: ref;
  var $i359: i8;
  var $i360: i32;
  var $i361: i32;
  var $i362: i32;
  var $i363: i8;
  var $p364: ref;
  var $i365: i8;
  var $i366: i32;
  var $i367: i32;
  var $i368: i32;
  var $i369: i8;
  var $p370: ref;
  var $i371: i8;
  var $i372: i32;
  var $i373: i32;
  var $i374: i32;
  var $i375: i8;
  var $p376: ref;
  var $i377: i8;
  var $i378: i32;
  var $i379: i32;
  var $i380: i32;
  var $i381: i8;
  var $p382: ref;
  var $i383: i8;
  var $i384: i32;
  var $i385: i32;
  var $i386: i32;
  var $i387: i8;
  var $p388: ref;
  var $i389: i8;
  var $i390: i32;
  var $i391: i32;
  var $i392: i32;
  var $i393: i8;
  var $p394: ref;
  var $i395: i8;
  var $i396: i32;
  var $i397: i32;
  var $i398: i32;
  var $i399: i8;
  var $p400: ref;
  var $i401: i8;
  var $i402: i32;
  var $i403: i32;
  var $i404: i32;
  var $i405: i8;
  var $p406: ref;
  var $i407: i8;
  var $i408: i32;
  var $i409: i32;
  var $i410: i32;
  var $i411: i8;
  var $p412: ref;
  var $i413: i8;
  var $i414: i32;
  var $i415: i32;
  var $i416: i32;
  var $i417: i8;
  var $p418: ref;
  var $i419: i8;
  var $i420: i32;
  var $i421: i32;
  var $i422: i32;
  var $i423: i8;
  var $p424: ref;
  var $i425: i8;
  var $i426: i32;
  var $i427: i32;
  var $i428: i32;
  var $i429: i8;
  var $p430: ref;
  var $i431: i8;
  var $i432: i32;
  var $i433: i32;
  var $i434: i32;
  var $i435: i8;
  var $p436: ref;
  var $i437: i8;
  var $i438: i32;
  var $i439: i32;
  var $i440: i32;
  var $i441: i8;
  var $p442: ref;
  var $i443: i8;
  var $i444: i32;
  var $i445: i32;
  var $i446: i32;
  var $i447: i8;
  var $p448: ref;
  var $i449: i8;
  var $i450: i32;
  var $i451: i32;
  var $i452: i32;
  var $i453: i8;
  var $p454: ref;
  var $i455: i8;
  var $i456: i32;
  var $i457: i32;
  var $i458: i32;
  var $i459: i8;
  var $p460: ref;
  var $i461: i8;
  var $i462: i32;
  var $i463: i32;
  var $i464: i32;
  var $i465: i8;
  var $p466: ref;
  var $i467: i8;
  var $i468: i32;
  var $i469: i32;
  var $i470: i32;
  var $i471: i8;
  var $p472: ref;
  var $i473: i8;
  var $i474: i32;
  var $i475: i32;
  var $i476: i32;
  var $i477: i8;
  var $p478: ref;
  var $i479: i8;
  var $i480: i32;
  var $i481: i32;
  var $i482: i32;
  var $i483: i8;
  var $p484: ref;
  var $i485: i8;
  var $i486: i32;
  var $i487: i32;
  var $i488: i32;
  var $i489: i8;
  var $p490: ref;
  var $i491: i8;
  var $i492: i32;
  var $i493: i32;
  var $i494: i32;
  var $i495: i8;
  var $p496: ref;
  var $i497: i8;
  var $i498: i32;
  var $i499: i32;
  var $i500: i32;
  var $i501: i8;
  var $p502: ref;
  var $i503: i8;
  var $i504: i32;
  var $i505: i32;
  var $i506: i32;
  var $i507: i8;
  var $p508: ref;
  var $i509: i8;
  var $i510: i32;
  var $i511: i32;
  var $i512: i32;
  var $i513: i8;
  var $p514: ref;
  var $i515: i8;
  var $i516: i32;
  var $i517: i32;
  var $i518: i32;
  var $i519: i8;
  var $p520: ref;
  var $i521: i8;
  var $i522: i32;
  var $i523: i32;
  var $i524: i32;
  var $i525: i8;
  var $p526: ref;
  var $i527: i8;
  var $i528: i32;
  var $i529: i32;
  var $i530: i32;
  var $i531: i8;
  var $p532: ref;
  var $i533: i8;
  var $i534: i32;
  var $i535: i32;
  var $i536: i32;
  var $i537: i8;
  var $p538: ref;
  var $i539: i8;
  var $i540: i32;
  var $i541: i32;
  var $i542: i32;
  var $i543: i8;
  var $p544: ref;
  var $i545: i8;
  var $i546: i32;
  var $i547: i32;
  var $i548: i32;
  var $i549: i8;
  var $p550: ref;
  var $i551: i8;
  var $i552: i32;
  var $i553: i32;
  var $i554: i32;
  var $i555: i8;
  var $p556: ref;
  var $i557: i8;
  var $i558: i32;
  var $i559: i32;
  var $i560: i32;
  var $i561: i8;
  var $p562: ref;
  var $i563: i8;
  var $i564: i32;
  var $i565: i32;
  var $i566: i32;
  var $i567: i8;
  var $p568: ref;
  var $i569: i8;
  var $i570: i32;
  var $i571: i32;
  var $i572: i32;
  var $i573: i8;
  var $p574: ref;
  var $i575: i8;
  var $i576: i32;
  var $i577: i32;
  var $i578: i32;
  var $i579: i8;
  var $p580: ref;
  var $i581: i8;
  var $i582: i32;
  var $i583: i32;
  var $i584: i32;
  var $i585: i8;
  var $p586: ref;
  var $i587: i8;
  var $i588: i32;
  var $i589: i32;
  var $i590: i32;
  var $i591: i8;
  var $p592: ref;
  var $i593: i8;
  var $i594: i32;
  var $i595: i32;
  var $i596: i32;
  var $i597: i8;
  var $p598: ref;
  var $i599: i8;
  var $i600: i32;
  var $i601: i32;
  var $i602: i32;
  var $i603: i8;
  var $p604: ref;
  var $i605: i8;
  var $i606: i32;
  var $i607: i32;
  var $i608: i32;
  var $i609: i8;
  var $p610: ref;
  var $i611: i8;
  var $i612: i32;
  var $i613: i32;
  var $i614: i32;
  var $i615: i8;
  var $p616: ref;
  var $i617: i8;
  var $i618: i32;
  var $i619: i32;
  var $i620: i32;
  var $i621: i8;
  var $p622: ref;
  var $i623: i8;
  var $i624: i32;
  var $i625: i32;
  var $i626: i32;
  var $i627: i8;
  var $p628: ref;
  var $i629: i8;
  var $i630: i32;
  var $i631: i32;
  var $i632: i32;
  var $i633: i8;
  var $p634: ref;
  var $i635: i8;
  var $i636: i32;
  var $i637: i32;
  var $i638: i32;
  var $i639: i8;
  var $p640: ref;
  var $i641: i8;
  var $i642: i32;
  var $i643: i32;
  var $i644: i32;
  var $i645: i8;
  var $p646: ref;
  var $i647: i8;
  var $i648: i32;
  var $i649: i32;
  var $i650: i32;
  var $i651: i8;
  var $p652: ref;
  var $i653: i8;
  var $i654: i32;
  var $i655: i32;
  var $i656: i32;
  var $i657: i8;
  var $p658: ref;
  var $i659: i8;
  var $i660: i32;
  var $i661: i32;
  var $i662: i32;
  var $i663: i8;
  var $p664: ref;
  var $i665: i8;
  var $i666: i32;
  var $i667: i32;
  var $i668: i32;
  var $i669: i8;
  var $p670: ref;
  var $i671: i8;
  var $i672: i32;
  var $i673: i32;
  var $i674: i32;
  var $i675: i8;
  var $p676: ref;
  var $i677: i8;
  var $i678: i32;
  var $i679: i32;
  var $i680: i32;
  var $i681: i8;
  var $p682: ref;
  var $i683: i8;
  var $i684: i32;
  var $i685: i32;
  var $i686: i32;
  var $i687: i8;
  var $p688: ref;
  var $i689: i8;
  var $i690: i32;
  var $i691: i32;
  var $i692: i32;
  var $i693: i8;
  var $p694: ref;
  var $i695: i8;
  var $i696: i32;
  var $i697: i32;
  var $i698: i32;
  var $i699: i8;
  var $p700: ref;
  var $i701: i8;
  var $i702: i32;
  var $i703: i32;
  var $i704: i32;
  var $i705: i8;
  var $p706: ref;
  var $i707: i8;
  var $i708: i32;
  var $i709: i32;
  var $i710: i32;
  var $i711: i8;
  var $p712: ref;
  var $i713: i8;
  var $i714: i32;
  var $i715: i32;
  var $i716: i32;
  var $i717: i8;
  var $p718: ref;
  var $i719: i8;
  var $i720: i32;
  var $i721: i32;
  var $i722: i32;
  var $i723: i8;
  var $p724: ref;
  var $i725: i8;
  var $i726: i32;
  var $i727: i32;
  var $i728: i32;
  var $i729: i8;
  var $p730: ref;
  var $i731: i8;
  var $i732: i32;
  var $i733: i32;
  var $i734: i32;
  var $i735: i8;
  var $p736: ref;
  var $i737: i8;
  var $i738: i32;
  var $i739: i32;
  var $i740: i32;
  var $i741: i8;
  var $p742: ref;
  var $i743: i8;
  var $i744: i32;
  var $i745: i32;
  var $i746: i32;
  var $i747: i8;
  var $p748: ref;
  var $i749: i8;
  var $i750: i32;
  var $i751: i32;
  var $i752: i32;
  var $i753: i8;
  var $p754: ref;
  var $i755: i8;
  var $i756: i32;
  var $i757: i32;
  var $i758: i32;
  var $i759: i8;
  var $p760: ref;
  var $i761: i8;
  var $i762: i32;
  var $i763: i32;
  var $i764: i32;
  var $i765: i8;
  var $p766: ref;
  var $i767: i8;
  var $i768: i32;
  var $i769: i32;
  var $i770: i32;
  var $i771: i8;
  var $p772: ref;
  var $i773: i8;
  var $i774: i32;
  var $i775: i32;
  var $i776: i32;
  var $i777: i8;
  var $p778: ref;
  var $i779: i8;
  var $i780: i32;
  var $i781: i32;
  var $i782: i32;
  var $i783: i8;
  var $p784: ref;
  var $i785: i8;
  var $i786: i32;
  var $i787: i32;
  var $i788: i32;
  var $i789: i8;
  var $p790: ref;
  var $i791: i8;
  var $i792: i32;
  var $i793: i32;
  var $i794: i32;
  var $i795: i8;
  var $p796: ref;
  var $i797: i8;
  var $i798: i32;
  var $i799: i32;
  var $i800: i32;
  var $i801: i8;
  var $p802: ref;
  var $i803: i8;
  var $i804: i32;
  var $i805: i32;
  var $i806: i32;
  var $i807: i8;
  var $p808: ref;
  var $i809: i8;
  var $i810: i32;
  var $i811: i32;
  var $i812: i32;
  var $i813: i8;
  var $p814: ref;
  var $i815: i8;
  var $i816: i32;
  var $i817: i32;
  var $i818: i32;
  var $i819: i8;
  var $p820: ref;
  var $i821: i8;
  var $i822: i32;
  var $i823: i32;
  var $i824: i32;
  var $i825: i8;
  var $p826: ref;
  var $i827: i8;
  var $i828: i32;
  var $i829: i32;
  var $i830: i32;
  var $i831: i8;
  var $p832: ref;
  var $i833: i8;
  var $i834: i32;
  var $i835: i32;
  var $i836: i32;
  var $i837: i8;
  var $p838: ref;
  var $i839: i8;
  var $i840: i32;
  var $i841: i32;
  var $i842: i32;
  var $i843: i8;
  var $p844: ref;
  var $i845: i8;
  var $i846: i32;
  var $i847: i32;
  var $i848: i32;
  var $i849: i8;
  var $p850: ref;
  var $i851: i8;
  var $i852: i32;
  var $i853: i32;
  var $i854: i32;
  var $i855: i8;
  var $p856: ref;
  var $i857: i8;
  var $i858: i32;
  var $i859: i32;
  var $i860: i32;
  var $i861: i8;
  var $p862: ref;
  var $i863: i8;
  var $i864: i32;
  var $i865: i32;
  var $i866: i32;
  var $i867: i8;
  var $p868: ref;
  var $i869: i8;
  var $i870: i32;
  var $i871: i32;
  var $i872: i32;
  var $i873: i8;
  var $p874: ref;
  var $i875: i8;
  var $i876: i32;
  var $i877: i32;
  var $i878: i32;
  var $i879: i8;
  var $p880: ref;
  var $i881: i8;
  var $i882: i32;
  var $i883: i32;
  var $i884: i32;
  var $i885: i8;
  var $p886: ref;
  var $i887: i8;
  var $i888: i32;
  var $i889: i32;
  var $i890: i32;
  var $i891: i8;
  var $p892: ref;
  var $i893: i8;
  var $i894: i32;
  var $i895: i32;
  var $i896: i32;
  var $i897: i8;
  var $p898: ref;
  var $i899: i8;
  var $i900: i32;
  var $i901: i32;
  var $i902: i32;
  var $i903: i8;
  var $p904: ref;
  var $i905: i8;
  var $i906: i32;
  var $i907: i32;
  var $i908: i32;
  var $i909: i8;
  var $p910: ref;
  var $i911: i8;
  var $i912: i32;
  var $i913: i32;
  var $i914: i32;
  var $i915: i8;
  var $p916: ref;
  var $i917: i8;
  var $i918: i32;
  var $i919: i32;
  var $i920: i32;
  var $i921: i8;
  var $p922: ref;
  var $i923: i8;
  var $i924: i32;
  var $i925: i32;
  var $i926: i32;
  var $i927: i8;
  var $p928: ref;
  var $i929: i8;
  var $i930: i32;
  var $i931: i32;
  var $i932: i32;
  var $i933: i8;
  var $p934: ref;
  var $i935: i8;
  var $i936: i32;
  var $i937: i32;
  var $i938: i32;
  var $i939: i8;
  var $p940: ref;
  var $i941: i8;
  var $i942: i32;
  var $i943: i32;
  var $i944: i32;
  var $i945: i8;
  var $p946: ref;
  var $i947: i8;
  var $i948: i32;
  var $i949: i32;
  var $i950: i32;
  var $i951: i8;
  var $p952: ref;
  var $i953: i8;
  var $i954: i32;
  var $i955: i32;
  var $i956: i32;
  var $i957: i8;
  var $p958: ref;
  var $i959: i8;
  var $i960: i32;
  var $i961: i32;
  var $i962: i32;
  var $i963: i8;
  var $p964: ref;
  var $i965: i8;
  var $i966: i32;
  var $i967: i32;
  var $i968: i32;
  var $i969: i8;
  var $p970: ref;
  var $i971: i8;
  var $i972: i32;
  var $i973: i32;
  var $i974: i32;
  var $i975: i8;
  var $p976: ref;
  var $i977: i8;
  var $i978: i32;
  var $i979: i32;
  var $i980: i32;
  var $i981: i8;
  var $p982: ref;
  var $i983: i8;
  var $i984: i32;
  var $i985: i32;
  var $i986: i32;
  var $i987: i8;
  var $p988: ref;
  var $i989: i8;
  var $i990: i32;
  var $i991: i32;
  var $i992: i32;
  var $i993: i8;
  var $p994: ref;
  var $i995: i8;
  var $i996: i32;
  var $i997: i32;
  var $i998: i32;
  var $i999: i8;
  var $p1000: ref;
  var $i1001: i8;
  var $i1002: i32;
  var $i1003: i32;
  var $i1004: i32;
  var $i1005: i8;
  var $p1006: ref;
  var $i1007: i8;
  var $i1008: i32;
  var $i1009: i32;
  var $i1010: i32;
  var $i1011: i8;
  var $p1012: ref;
  var $i1013: i8;
  var $i1014: i32;
  var $i1015: i32;
  var $i1016: i32;
  var $i1017: i8;
  var $p1018: ref;
  var $i1019: i8;
  var $i1020: i32;
  var $i1021: i32;
  var $i1022: i32;
  var $i1023: i8;
  var $p1024: ref;
  var $i1025: i8;
  var $i1026: i32;
  var $i1027: i32;
  var $i1028: i32;
  var $i1029: i8;
  var $p1030: ref;
  var $i1031: i8;
  var $i1032: i32;
  var $i1033: i32;
  var $i1034: i32;
  var $i1035: i8;
  var $p1036: ref;
  var $i1037: i8;
  var $i1038: i32;
  var $i1039: i32;
  var $i1040: i32;
  var $i1041: i8;
  var $p1042: ref;
  var $i1043: i8;
  var $i1044: i32;
  var $i1045: i32;
  var $i1046: i32;
  var $i1047: i8;
  var $p1048: ref;
  var $i1049: i8;
  var $i1050: i32;
  var $i1051: i32;
  var $i1052: i32;
  var $i1053: i8;
  var $p1054: ref;
  var $i1055: i8;
  var $i1056: i32;
  var $i1057: i32;
  var $i1058: i32;
  var $i1059: i8;
  var $p1060: ref;
  var $i1061: i8;
  var $i1062: i32;
  var $i1063: i32;
  var $i1064: i32;
  var $i1065: i8;
  var $p1066: ref;
  var $i1067: i8;
  var $i1068: i32;
  var $i1069: i32;
  var $i1070: i32;
  var $i1071: i8;
  var $p1072: ref;
  var $i1073: i8;
  var $i1074: i32;
  var $i1075: i32;
  var $i1076: i32;
  var $i1077: i8;
  var $p1078: ref;
  var $i1079: i8;
  var $i1080: i32;
  var $i1081: i32;
  var $i1082: i32;
  var $i1083: i8;
  var $p1084: ref;
  var $i1085: i8;
  var $i1086: i32;
  var $i1087: i32;
  var $i1088: i32;
  var $i1089: i8;
  var $p1090: ref;
  var $i1091: i8;
  var $i1092: i32;
  var $i1093: i32;
  var $i1094: i32;
  var $i1095: i8;
  var $p1096: ref;
  var $i1097: i8;
  var $i1098: i32;
  var $i1099: i32;
  var $i1100: i32;
  var $i1101: i8;
  var $p1102: ref;
  var $i1103: i8;
  var $i1104: i32;
  var $i1105: i32;
  var $i1106: i32;
  var $i1107: i8;
  var $p1108: ref;
  var $i1109: i8;
  var $i1110: i32;
  var $i1111: i32;
  var $i1112: i32;
  var $i1113: i8;
  var $p1114: ref;
  var $i1115: i8;
  var $i1116: i32;
  var $i1117: i32;
  var $i1118: i32;
  var $i1119: i8;
  var $p1120: ref;
  var $i1121: i8;
  var $i1122: i32;
  var $i1123: i32;
  var $i1124: i32;
  var $i1125: i8;
  var $p1126: ref;
  var $i1127: i8;
  var $i1128: i32;
  var $i1129: i32;
  var $i1130: i32;
  var $i1131: i8;
  var $p1132: ref;
  var $i1133: i8;
  var $i1134: i32;
  var $i1135: i32;
  var $i1136: i32;
  var $i1137: i8;
  var $p1138: ref;
  var $i1139: i8;
  var $i1140: i32;
  var $i1141: i32;
  var $i1142: i32;
  var $i1143: i8;
  var $p1144: ref;
  var $i1145: i8;
  var $i1146: i32;
  var $i1147: i32;
  var $i1148: i32;
  var $i1149: i8;
  var $p1150: ref;
  var $i1151: i8;
  var $i1152: i32;
  var $i1153: i32;
  var $i1154: i32;
  var $i1155: i8;
  var $p1156: ref;
  var $i1157: i8;
  var $i1158: i32;
  var $i1159: i32;
  var $i1160: i32;
  var $i1161: i8;
  var $p1162: ref;
  var $i1163: i8;
  var $i1164: i32;
  var $i1165: i32;
  var $i1166: i32;
  var $i1167: i8;
  var $p1168: ref;
  var $i1169: i8;
  var $i1170: i32;
  var $i1171: i32;
  var $i1172: i32;
  var $i1173: i8;
  var $p1174: ref;
  var $i1175: i8;
  var $i1176: i32;
  var $i1177: i32;
  var $i1178: i32;
  var $i1179: i8;
  var $p1180: ref;
  var $i1181: i8;
  var $i1182: i32;
  var $i1183: i32;
  var $i1184: i32;
  var $i1185: i8;
  var $p1186: ref;
  var $i1187: i8;
  var $i1188: i32;
  var $i1189: i32;
  var $i1190: i32;
  var $i1191: i8;
  var $p1192: ref;
  var $i1193: i8;
  var $i1194: i32;
  var $i1195: i32;
  var $i1196: i32;
  var $i1197: i8;
  var $p1198: ref;
  var $i1199: i8;
  var $i1200: i32;
  var $i1201: i32;
  var $i1202: i32;
  var $i1203: i8;
  var $p1204: ref;
  var $i1205: i8;
  var $i1206: i32;
  var $i1207: i32;
  var $i1208: i32;
  var $i1209: i8;
  var $p1210: ref;
  var $i1211: i8;
  var $i1212: i32;
  var $i1213: i32;
  var $i1214: i32;
  var $i1215: i8;
  var $p1216: ref;
  var $i1217: i8;
  var $i1218: i32;
  var $i1219: i32;
  var $i1220: i32;
  var $i1221: i8;
  var $p1222: ref;
  var $i1223: i8;
  var $i1224: i32;
  var $i1225: i32;
  var $i1226: i32;
  var $i1227: i8;
  var $p1228: ref;
  var $i1229: i8;
  var $i1230: i32;
  var $i1231: i32;
  var $i1232: i32;
  var $i1233: i8;
  var $p1234: ref;
  var $i1235: i8;
  var $i1236: i32;
  var $i1237: i32;
  var $i1238: i32;
  var $i1239: i8;
  var $p1240: ref;
  var $i1241: i8;
  var $i1242: i32;
  var $i1243: i32;
  var $i1244: i32;
  var $i1245: i8;
  var $p1246: ref;
  var $i1247: i8;
  var $i1248: i32;
  var $i1249: i32;
  var $i1250: i32;
  var $i1251: i8;
  var $p1252: ref;
  var $i1253: i8;
  var $i1254: i32;
  var $i1255: i32;
  var $i1256: i32;
  var $i1257: i8;
  var $p1258: ref;
  var $i1259: i8;
  var $i1260: i32;
  var $i1261: i32;
  var $i1262: i32;
  var $i1263: i8;
  var $p1264: ref;
  var $i1265: i8;
  var $i1266: i32;
  var $i1267: i32;
  var $i1268: i32;
  var $i1269: i8;
  var $p1270: ref;
  var $i1271: i8;
  var $i1272: i32;
  var $i1273: i32;
  var $i1274: i32;
  var $i1275: i8;
  var $p1276: ref;
  var $i1277: i8;
  var $i1278: i32;
  var $i1279: i32;
  var $i1280: i32;
  var $i1281: i8;
  var $p1282: ref;
  var $i1283: i8;
  var $i1284: i32;
  var $i1285: i32;
  var $i1286: i32;
  var $i1287: i8;
  var $p1288: ref;
  var $i1289: i8;
  var $i1290: i32;
  var $i1291: i32;
  var $i1292: i32;
  var $i1293: i8;
  var $p1294: ref;
  var $i1295: i8;
  var $i1296: i32;
  var $i1297: i32;
  var $i1298: i32;
  var $i1299: i8;
  var $p1300: ref;
  var $i1301: i8;
  var $i1302: i32;
  var $i1303: i32;
  var $i1304: i32;
  var $i1305: i8;
  var $p1306: ref;
  var $i1307: i8;
  var $i1308: i32;
  var $i1309: i32;
  var $i1310: i32;
  var $i1311: i8;
  var $p1312: ref;
  var $i1313: i8;
  var $i1314: i32;
  var $i1315: i32;
  var $i1316: i32;
  var $i1317: i8;
  var $p1318: ref;
  var $i1319: i8;
  var $i1320: i32;
  var $i1321: i32;
  var $i1322: i32;
  var $i1323: i8;
  var $p1324: ref;
  var $i1325: i8;
  var $i1326: i32;
  var $i1327: i32;
  var $i1328: i32;
  var $i1329: i8;
  var $p1330: ref;
  var $i1331: i8;
  var $i1332: i32;
  var $i1333: i32;
  var $i1334: i32;
  var $i1335: i8;
  var $p1336: ref;
  var $i1337: i8;
  var $i1338: i32;
  var $i1339: i32;
  var $i1340: i32;
  var $i1341: i8;
  var $p1342: ref;
  var $i1343: i8;
  var $i1344: i32;
  var $i1345: i32;
  var $i1346: i32;
  var $i1347: i8;
  var $p1348: ref;
  var $i1349: i8;
  var $i1350: i32;
  var $i1351: i32;
  var $i1352: i32;
  var $i1353: i8;
  var $p1354: ref;
  var $i1355: i8;
  var $i1356: i32;
  var $i1357: i32;
  var $i1358: i32;
  var $i1359: i8;
  var $p1360: ref;
  var $i1361: i8;
  var $i1362: i32;
  var $i1363: i32;
  var $i1364: i32;
  var $i1365: i8;
  var $p1366: ref;
  var $i1367: i8;
  var $i1368: i32;
  var $i1369: i32;
  var $i1370: i32;
  var $i1371: i8;
  var $p1372: ref;
  var $i1373: i8;
  var $i1374: i32;
  var $i1375: i32;
  var $i1376: i32;
  var $i1377: i8;
  var $p1378: ref;
  var $i1379: i8;
  var $i1380: i32;
  var $i1381: i32;
  var $i1382: i32;
  var $i1383: i8;
  var $p1384: ref;
  var $i1385: i8;
  var $i1386: i32;
  var $i1387: i32;
  var $i1388: i32;
  var $i1389: i8;
  var $p1390: ref;
  var $i1391: i8;
  var $i1392: i32;
  var $i1393: i32;
  var $i1394: i32;
  var $i1395: i8;
  var $p1396: ref;
  var $i1397: i8;
  var $i1398: i32;
  var $i1399: i32;
  var $i1400: i32;
  var $i1401: i8;
  var $p1402: ref;
  var $i1403: i8;
  var $i1404: i32;
  var $i1405: i32;
  var $i1406: i32;
  var $i1407: i8;
  var $p1408: ref;
  var $i1409: i8;
  var $i1410: i32;
  var $i1411: i32;
  var $i1412: i32;
  var $i1413: i8;
  var $p1414: ref;
  var $i1415: i8;
  var $i1416: i32;
  var $i1417: i32;
  var $i1418: i32;
  var $i1419: i8;
  var $p1420: ref;
  var $i1421: i8;
  var $i1422: i32;
  var $i1423: i32;
  var $i1424: i32;
  var $i1425: i8;
  var $p1426: ref;
  var $i1427: i8;
  var $i1428: i32;
  var $i1429: i32;
  var $i1430: i32;
  var $i1431: i8;
  var $p1432: ref;
  var $i1433: i8;
  var $i1434: i32;
  var $i1435: i32;
  var $i1436: i32;
  var $i1437: i8;
  var $p1438: ref;
  var $i1439: i8;
  var $i1440: i32;
  var $i1441: i32;
  var $i1442: i32;
  var $i1443: i8;
  var $p1444: ref;
  var $i1445: i8;
  var $i1446: i32;
  var $i1447: i32;
  var $i1448: i32;
  var $i1449: i8;
  var $p1450: ref;
  var $i1451: i8;
  var $i1452: i32;
  var $i1453: i32;
  var $i1454: i32;
  var $i1455: i8;
  var $p1456: ref;
  var $i1457: i8;
  var $i1458: i32;
  var $i1459: i32;
  var $i1460: i32;
  var $i1461: i8;
  var $p1462: ref;
  var $i1463: i8;
  var $i1464: i32;
  var $i1465: i32;
  var $i1466: i32;
  var $i1467: i8;
  var $p1468: ref;
  var $i1469: i8;
  var $i1470: i32;
  var $i1471: i32;
  var $i1472: i32;
  var $i1473: i8;
  var $p1474: ref;
  var $i1475: i8;
  var $i1476: i32;
  var $i1477: i32;
  var $i1478: i32;
  var $i1479: i8;
  var $p1480: ref;
  var $i1481: i8;
  var $i1482: i32;
  var $i1483: i32;
  var $i1484: i32;
  var $i1485: i8;
  var $p1486: ref;
  var $i1487: i8;
  var $i1488: i32;
  var $i1489: i32;
  var $i1490: i32;
  var $i1491: i8;
  var $p1492: ref;
  var $i1493: i8;
  var $i1494: i32;
  var $i1495: i32;
  var $i1496: i32;
  var $i1497: i8;
  var $p1498: ref;
  var $i1499: i8;
  var $i1500: i32;
  var $i1501: i32;
  var $i1502: i32;
  var $i1503: i8;
  var $p1504: ref;
  var $i1505: i8;
  var $i1506: i32;
  var $i1507: i32;
  var $i1508: i32;
  var $i1509: i8;
  var $p1510: ref;
  var $i1511: i8;
  var $i1512: i32;
  var $i1513: i32;
  var $i1514: i32;
  var $i1515: i8;
  var $p1516: ref;
  var $i1517: i8;
  var $i1518: i32;
  var $i1519: i32;
  var $i1520: i32;
  var $i1521: i8;
  var $p1522: ref;
  var $i1523: i8;
  var $i1524: i32;
  var $i1525: i32;
  var $i1526: i32;
  var $i1527: i8;
  var $p1528: ref;
  var $i1529: i8;
  var $i1530: i32;
  var $i1531: i32;
  var $i1532: i32;
  var $i10: i8;
  var $p1533: ref;
  var $i1534: i8;
  var $i1535: i32;
  var $i1536: i32;
  var $i1537: i32;
  var $i13: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $i1 := check_edid($p0);
    call {:si_unique_call 397} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p0);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    call {:si_unique_call 399} {:cexpr "csum"} boogie_si_record_i8($i5);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p0);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    call {:si_unique_call 400} {:cexpr "all_null"} boogie_si_record_i8($i8);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i5);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i18, $i19);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i8);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i24, $i25);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i21);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i30, $i31);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i27);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i36, $i37);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i33);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i42, $i43);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i39);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i48, $i49);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i45);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i54, $i55);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i56);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i51);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i62 := $or.i32($i60, $i61);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i8($i62);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p0, $mul.ref(5, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i57);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i66, $i67);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i8($i68);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p0, $mul.ref(5, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i63);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i72, $i73);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i8($i74);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p0, $mul.ref(6, 1));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p76);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i69);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i80 := $add.i32($i78, $i79);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i8($i80);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p0, $mul.ref(6, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.0, $p82);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i75);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i86 := $or.i32($i84, $i85);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i8($i86);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p0, $mul.ref(7, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.0, $p88);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i89);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i81);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i90, $i91);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i8($i92);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p0, $mul.ref(7, 1));
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.0, $p94);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i87);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i98 := $or.i32($i96, $i97);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i8($i98);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.0, $p100);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i93);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i102, $i103);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i32.i8($i104);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.0, $p106);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i99);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i110 := $or.i32($i108, $i109);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i8($i110);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p0, $mul.ref(9, 1));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.0, $p112);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i32($i113);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i105);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i114, $i115);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i32.i8($i116);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p0, $mul.ref(9, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.0, $p118);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i120 := $zext.i8.i32($i119);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i111);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i122 := $or.i32($i120, $i121);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i32.i8($i122);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($p0, $mul.ref(10, 1));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.0, $p124);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i32($i125);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i117);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i128 := $add.i32($i126, $i127);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i32.i8($i128);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p0, $mul.ref(10, 1));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.0, $p130);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i32($i123);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i134 := $or.i32($i132, $i133);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i8($i134);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p0, $mul.ref(11, 1));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.0, $p136);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i129);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i140 := $add.i32($i138, $i139);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i141 := $trunc.i32.i8($i140);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p0, $mul.ref(11, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.0, $p142);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i144 := $zext.i8.i32($i143);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i32($i135);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i146 := $or.i32($i144, $i145);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i32.i8($i146);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($p0, $mul.ref(12, 1));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i149 := $load.i8($M.0, $p148);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i150 := $zext.i8.i32($i149);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i141);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i152 := $add.i32($i150, $i151);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i32.i8($i152);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($p0, $mul.ref(12, 1));
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i155 := $load.i8($M.0, $p154);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i156 := $zext.i8.i32($i155);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i147);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i158 := $or.i32($i156, $i157);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i32.i8($i158);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($p0, $mul.ref(13, 1));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i161 := $load.i8($M.0, $p160);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i162 := $zext.i8.i32($i161);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i163 := $zext.i8.i32($i153);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i164 := $add.i32($i162, $i163);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i165 := $trunc.i32.i8($i164);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($p0, $mul.ref(13, 1));
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.0, $p166);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i168 := $zext.i8.i32($i167);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i169 := $zext.i8.i32($i159);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i170 := $or.i32($i168, $i169);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i171 := $trunc.i32.i8($i170);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($p0, $mul.ref(14, 1));
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i173 := $load.i8($M.0, $p172);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i174 := $zext.i8.i32($i173);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i175 := $zext.i8.i32($i165);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i176 := $add.i32($i174, $i175);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i177 := $trunc.i32.i8($i176);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($p0, $mul.ref(14, 1));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i179 := $load.i8($M.0, $p178);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i180 := $zext.i8.i32($i179);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i181 := $zext.i8.i32($i171);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i182 := $or.i32($i180, $i181);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i183 := $trunc.i32.i8($i182);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($p0, $mul.ref(15, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.0, $p184);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i32($i185);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i187 := $zext.i8.i32($i177);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i188 := $add.i32($i186, $i187);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i189 := $trunc.i32.i8($i188);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($p0, $mul.ref(15, 1));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i191 := $load.i8($M.0, $p190);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i192 := $zext.i8.i32($i191);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i193 := $zext.i8.i32($i183);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i194 := $or.i32($i192, $i193);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i195 := $trunc.i32.i8($i194);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($p0, $mul.ref(16, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i197 := $load.i8($M.0, $p196);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i198 := $zext.i8.i32($i197);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i199 := $zext.i8.i32($i189);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i200 := $add.i32($i198, $i199);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i201 := $trunc.i32.i8($i200);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($p0, $mul.ref(16, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i203 := $load.i8($M.0, $p202);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i204 := $zext.i8.i32($i203);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i205 := $zext.i8.i32($i195);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i206 := $or.i32($i204, $i205);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i207 := $trunc.i32.i8($i206);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($p0, $mul.ref(17, 1));
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i209 := $load.i8($M.0, $p208);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i210 := $zext.i8.i32($i209);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i211 := $zext.i8.i32($i201);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i212 := $add.i32($i210, $i211);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i213 := $trunc.i32.i8($i212);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($p0, $mul.ref(17, 1));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i215 := $load.i8($M.0, $p214);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i216 := $zext.i8.i32($i215);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i217 := $zext.i8.i32($i207);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i218 := $or.i32($i216, $i217);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i219 := $trunc.i32.i8($i218);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($p0, $mul.ref(18, 1));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i221 := $load.i8($M.0, $p220);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i32($i221);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i223 := $zext.i8.i32($i213);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i224 := $add.i32($i222, $i223);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i225 := $trunc.i32.i8($i224);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($p0, $mul.ref(18, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i227 := $load.i8($M.0, $p226);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i228 := $zext.i8.i32($i227);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i229 := $zext.i8.i32($i219);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i230 := $or.i32($i228, $i229);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i231 := $trunc.i32.i8($i230);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($p0, $mul.ref(19, 1));
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i233 := $load.i8($M.0, $p232);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i234 := $zext.i8.i32($i233);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i235 := $zext.i8.i32($i225);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i236 := $add.i32($i234, $i235);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i237 := $trunc.i32.i8($i236);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($p0, $mul.ref(19, 1));
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i239 := $load.i8($M.0, $p238);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i240 := $zext.i8.i32($i239);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i241 := $zext.i8.i32($i231);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i242 := $or.i32($i240, $i241);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i243 := $trunc.i32.i8($i242);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($p0, $mul.ref(20, 1));
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i245 := $load.i8($M.0, $p244);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i246 := $zext.i8.i32($i245);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i247 := $zext.i8.i32($i237);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i248 := $add.i32($i246, $i247);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i249 := $trunc.i32.i8($i248);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($p0, $mul.ref(20, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i251 := $load.i8($M.0, $p250);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i252 := $zext.i8.i32($i251);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i253 := $zext.i8.i32($i243);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i254 := $or.i32($i252, $i253);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i255 := $trunc.i32.i8($i254);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($p0, $mul.ref(21, 1));
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i257 := $load.i8($M.0, $p256);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i258 := $zext.i8.i32($i257);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i259 := $zext.i8.i32($i249);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i260 := $add.i32($i258, $i259);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i261 := $trunc.i32.i8($i260);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($p0, $mul.ref(21, 1));
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i263 := $load.i8($M.0, $p262);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i264 := $zext.i8.i32($i263);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i265 := $zext.i8.i32($i255);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i266 := $or.i32($i264, $i265);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i267 := $trunc.i32.i8($i266);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($p0, $mul.ref(22, 1));
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i269 := $load.i8($M.0, $p268);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i270 := $zext.i8.i32($i269);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i271 := $zext.i8.i32($i261);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i272 := $add.i32($i270, $i271);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i273 := $trunc.i32.i8($i272);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($p0, $mul.ref(22, 1));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i275 := $load.i8($M.0, $p274);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i276 := $zext.i8.i32($i275);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i32($i267);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i278 := $or.i32($i276, $i277);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i279 := $trunc.i32.i8($i278);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($p0, $mul.ref(23, 1));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i281 := $load.i8($M.0, $p280);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i282 := $zext.i8.i32($i281);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i283 := $zext.i8.i32($i273);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i284 := $add.i32($i282, $i283);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i285 := $trunc.i32.i8($i284);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($p0, $mul.ref(23, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i287 := $load.i8($M.0, $p286);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i288 := $zext.i8.i32($i287);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i289 := $zext.i8.i32($i279);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i290 := $or.i32($i288, $i289);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i291 := $trunc.i32.i8($i290);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($p0, $mul.ref(24, 1));
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i293 := $load.i8($M.0, $p292);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i294 := $zext.i8.i32($i293);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i295 := $zext.i8.i32($i285);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i296 := $add.i32($i294, $i295);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i297 := $trunc.i32.i8($i296);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($p0, $mul.ref(24, 1));
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i299 := $load.i8($M.0, $p298);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i300 := $zext.i8.i32($i299);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i301 := $zext.i8.i32($i291);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i302 := $or.i32($i300, $i301);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i303 := $trunc.i32.i8($i302);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($p0, $mul.ref(25, 1));
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i305 := $load.i8($M.0, $p304);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i306 := $zext.i8.i32($i305);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i307 := $zext.i8.i32($i297);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i308 := $add.i32($i306, $i307);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i309 := $trunc.i32.i8($i308);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($p0, $mul.ref(25, 1));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i311 := $load.i8($M.0, $p310);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i312 := $zext.i8.i32($i311);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i313 := $zext.i8.i32($i303);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i314 := $or.i32($i312, $i313);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i315 := $trunc.i32.i8($i314);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($p0, $mul.ref(26, 1));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i317 := $load.i8($M.0, $p316);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i318 := $zext.i8.i32($i317);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i319 := $zext.i8.i32($i309);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i320 := $add.i32($i318, $i319);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i321 := $trunc.i32.i8($i320);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($p0, $mul.ref(26, 1));
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i323 := $load.i8($M.0, $p322);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i324 := $zext.i8.i32($i323);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i325 := $zext.i8.i32($i315);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i326 := $or.i32($i324, $i325);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i327 := $trunc.i32.i8($i326);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($p0, $mul.ref(27, 1));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i329 := $load.i8($M.0, $p328);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i330 := $zext.i8.i32($i329);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i331 := $zext.i8.i32($i321);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i332 := $add.i32($i330, $i331);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i333 := $trunc.i32.i8($i332);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($p0, $mul.ref(27, 1));
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i335 := $load.i8($M.0, $p334);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i336 := $zext.i8.i32($i335);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i337 := $zext.i8.i32($i327);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i338 := $or.i32($i336, $i337);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i339 := $trunc.i32.i8($i338);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($p0, $mul.ref(28, 1));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i341 := $load.i8($M.0, $p340);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i342 := $zext.i8.i32($i341);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i343 := $zext.i8.i32($i333);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i344 := $add.i32($i342, $i343);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i345 := $trunc.i32.i8($i344);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($p0, $mul.ref(28, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i347 := $load.i8($M.0, $p346);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i348 := $zext.i8.i32($i347);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i349 := $zext.i8.i32($i339);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i350 := $or.i32($i348, $i349);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i351 := $trunc.i32.i8($i350);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($p0, $mul.ref(29, 1));
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i353 := $load.i8($M.0, $p352);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i354 := $zext.i8.i32($i353);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i355 := $zext.i8.i32($i345);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i356 := $add.i32($i354, $i355);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i357 := $trunc.i32.i8($i356);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($p0, $mul.ref(29, 1));
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i359 := $load.i8($M.0, $p358);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i360 := $zext.i8.i32($i359);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i361 := $zext.i8.i32($i351);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i362 := $or.i32($i360, $i361);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i363 := $trunc.i32.i8($i362);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($p0, $mul.ref(30, 1));
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i365 := $load.i8($M.0, $p364);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i366 := $zext.i8.i32($i365);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i367 := $zext.i8.i32($i357);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i368 := $add.i32($i366, $i367);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i369 := $trunc.i32.i8($i368);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($p0, $mul.ref(30, 1));
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i371 := $load.i8($M.0, $p370);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i372 := $zext.i8.i32($i371);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i373 := $zext.i8.i32($i363);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i374 := $or.i32($i372, $i373);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i375 := $trunc.i32.i8($i374);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($p0, $mul.ref(31, 1));
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i377 := $load.i8($M.0, $p376);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i378 := $zext.i8.i32($i377);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i379 := $zext.i8.i32($i369);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i380 := $add.i32($i378, $i379);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i381 := $trunc.i32.i8($i380);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($p0, $mul.ref(31, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i383 := $load.i8($M.0, $p382);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i384 := $zext.i8.i32($i383);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i385 := $zext.i8.i32($i375);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i386 := $or.i32($i384, $i385);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i387 := $trunc.i32.i8($i386);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($p0, $mul.ref(32, 1));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i389 := $load.i8($M.0, $p388);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i390 := $zext.i8.i32($i389);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i391 := $zext.i8.i32($i381);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i392 := $add.i32($i390, $i391);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i393 := $trunc.i32.i8($i392);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($p0, $mul.ref(32, 1));
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i395 := $load.i8($M.0, $p394);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i396 := $zext.i8.i32($i395);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i397 := $zext.i8.i32($i387);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i398 := $or.i32($i396, $i397);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i399 := $trunc.i32.i8($i398);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($p0, $mul.ref(33, 1));
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i401 := $load.i8($M.0, $p400);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i402 := $zext.i8.i32($i401);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i403 := $zext.i8.i32($i393);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i404 := $add.i32($i402, $i403);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i405 := $trunc.i32.i8($i404);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($p0, $mul.ref(33, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i407 := $load.i8($M.0, $p406);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i408 := $zext.i8.i32($i407);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i409 := $zext.i8.i32($i399);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i410 := $or.i32($i408, $i409);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i411 := $trunc.i32.i8($i410);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($p0, $mul.ref(34, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i413 := $load.i8($M.0, $p412);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i414 := $zext.i8.i32($i413);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i415 := $zext.i8.i32($i405);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i416 := $add.i32($i414, $i415);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i417 := $trunc.i32.i8($i416);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($p0, $mul.ref(34, 1));
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i419 := $load.i8($M.0, $p418);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i420 := $zext.i8.i32($i419);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i421 := $zext.i8.i32($i411);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i422 := $or.i32($i420, $i421);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i423 := $trunc.i32.i8($i422);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($p0, $mul.ref(35, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i425 := $load.i8($M.0, $p424);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i426 := $zext.i8.i32($i425);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i427 := $zext.i8.i32($i417);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i428 := $add.i32($i426, $i427);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i429 := $trunc.i32.i8($i428);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($p0, $mul.ref(35, 1));
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i431 := $load.i8($M.0, $p430);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i432 := $zext.i8.i32($i431);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i433 := $zext.i8.i32($i423);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i434 := $or.i32($i432, $i433);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i435 := $trunc.i32.i8($i434);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($p0, $mul.ref(36, 1));
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i437 := $load.i8($M.0, $p436);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i438 := $zext.i8.i32($i437);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i439 := $zext.i8.i32($i429);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i440 := $add.i32($i438, $i439);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i441 := $trunc.i32.i8($i440);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($p0, $mul.ref(36, 1));
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i443 := $load.i8($M.0, $p442);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i444 := $zext.i8.i32($i443);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i445 := $zext.i8.i32($i435);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i446 := $or.i32($i444, $i445);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i447 := $trunc.i32.i8($i446);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($p0, $mul.ref(37, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i449 := $load.i8($M.0, $p448);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i450 := $zext.i8.i32($i449);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i451 := $zext.i8.i32($i441);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i452 := $add.i32($i450, $i451);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i453 := $trunc.i32.i8($i452);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($p0, $mul.ref(37, 1));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i455 := $load.i8($M.0, $p454);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i456 := $zext.i8.i32($i455);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i457 := $zext.i8.i32($i447);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i458 := $or.i32($i456, $i457);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i459 := $trunc.i32.i8($i458);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($p0, $mul.ref(38, 1));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i461 := $load.i8($M.0, $p460);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i462 := $zext.i8.i32($i461);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i463 := $zext.i8.i32($i453);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i464 := $add.i32($i462, $i463);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i465 := $trunc.i32.i8($i464);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($p0, $mul.ref(38, 1));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i467 := $load.i8($M.0, $p466);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i468 := $zext.i8.i32($i467);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i469 := $zext.i8.i32($i459);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i470 := $or.i32($i468, $i469);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i471 := $trunc.i32.i8($i470);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($p0, $mul.ref(39, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i473 := $load.i8($M.0, $p472);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i474 := $zext.i8.i32($i473);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i475 := $zext.i8.i32($i465);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i476 := $add.i32($i474, $i475);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i477 := $trunc.i32.i8($i476);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($p0, $mul.ref(39, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i479 := $load.i8($M.0, $p478);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i480 := $zext.i8.i32($i479);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i481 := $zext.i8.i32($i471);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i482 := $or.i32($i480, $i481);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i483 := $trunc.i32.i8($i482);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($p0, $mul.ref(40, 1));
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i485 := $load.i8($M.0, $p484);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i486 := $zext.i8.i32($i485);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i487 := $zext.i8.i32($i477);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i488 := $add.i32($i486, $i487);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i489 := $trunc.i32.i8($i488);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($p0, $mul.ref(40, 1));
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i491 := $load.i8($M.0, $p490);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i492 := $zext.i8.i32($i491);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i493 := $zext.i8.i32($i483);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i494 := $or.i32($i492, $i493);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i495 := $trunc.i32.i8($i494);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($p0, $mul.ref(41, 1));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i497 := $load.i8($M.0, $p496);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i498 := $zext.i8.i32($i497);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i499 := $zext.i8.i32($i489);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i500 := $add.i32($i498, $i499);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i501 := $trunc.i32.i8($i500);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p502 := $add.ref($p0, $mul.ref(41, 1));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i503 := $load.i8($M.0, $p502);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i504 := $zext.i8.i32($i503);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i505 := $zext.i8.i32($i495);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i506 := $or.i32($i504, $i505);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i507 := $trunc.i32.i8($i506);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($p0, $mul.ref(42, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i509 := $load.i8($M.0, $p508);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i510 := $zext.i8.i32($i509);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i511 := $zext.i8.i32($i501);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i512 := $add.i32($i510, $i511);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i513 := $trunc.i32.i8($i512);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($p0, $mul.ref(42, 1));
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i515 := $load.i8($M.0, $p514);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i516 := $zext.i8.i32($i515);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i517 := $zext.i8.i32($i507);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i518 := $or.i32($i516, $i517);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i519 := $trunc.i32.i8($i518);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p520 := $add.ref($p0, $mul.ref(43, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i521 := $load.i8($M.0, $p520);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i522 := $zext.i8.i32($i521);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i523 := $zext.i8.i32($i513);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i524 := $add.i32($i522, $i523);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i525 := $trunc.i32.i8($i524);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($p0, $mul.ref(43, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i527 := $load.i8($M.0, $p526);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i528 := $zext.i8.i32($i527);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i529 := $zext.i8.i32($i519);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i530 := $or.i32($i528, $i529);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i531 := $trunc.i32.i8($i530);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p532 := $add.ref($p0, $mul.ref(44, 1));
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i533 := $load.i8($M.0, $p532);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i534 := $zext.i8.i32($i533);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i535 := $zext.i8.i32($i525);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $i536 := $add.i32($i534, $i535);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i537 := $trunc.i32.i8($i536);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p538 := $add.ref($p0, $mul.ref(44, 1));
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i539 := $load.i8($M.0, $p538);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i540 := $zext.i8.i32($i539);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i541 := $zext.i8.i32($i531);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i542 := $or.i32($i540, $i541);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i543 := $trunc.i32.i8($i542);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p544 := $add.ref($p0, $mul.ref(45, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i545 := $load.i8($M.0, $p544);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i546 := $zext.i8.i32($i545);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i547 := $zext.i8.i32($i537);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i548 := $add.i32($i546, $i547);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i549 := $trunc.i32.i8($i548);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p550 := $add.ref($p0, $mul.ref(45, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i551 := $load.i8($M.0, $p550);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i552 := $zext.i8.i32($i551);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i553 := $zext.i8.i32($i543);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i554 := $or.i32($i552, $i553);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i555 := $trunc.i32.i8($i554);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($p0, $mul.ref(46, 1));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i557 := $load.i8($M.0, $p556);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i558 := $zext.i8.i32($i557);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i559 := $zext.i8.i32($i549);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i560 := $add.i32($i558, $i559);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i561 := $trunc.i32.i8($i560);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($p0, $mul.ref(46, 1));
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i563 := $load.i8($M.0, $p562);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i564 := $zext.i8.i32($i563);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $i565 := $zext.i8.i32($i555);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i566 := $or.i32($i564, $i565);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i567 := $trunc.i32.i8($i566);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p568 := $add.ref($p0, $mul.ref(47, 1));
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i569 := $load.i8($M.0, $p568);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i570 := $zext.i8.i32($i569);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i571 := $zext.i8.i32($i561);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i572 := $add.i32($i570, $i571);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i573 := $trunc.i32.i8($i572);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p574 := $add.ref($p0, $mul.ref(47, 1));
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i575 := $load.i8($M.0, $p574);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i576 := $zext.i8.i32($i575);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i577 := $zext.i8.i32($i567);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i578 := $or.i32($i576, $i577);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i579 := $trunc.i32.i8($i578);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p580 := $add.ref($p0, $mul.ref(48, 1));
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i581 := $load.i8($M.0, $p580);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i582 := $zext.i8.i32($i581);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i583 := $zext.i8.i32($i573);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i584 := $add.i32($i582, $i583);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i585 := $trunc.i32.i8($i584);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($p0, $mul.ref(48, 1));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i587 := $load.i8($M.0, $p586);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i588 := $zext.i8.i32($i587);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i589 := $zext.i8.i32($i579);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i590 := $or.i32($i588, $i589);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i591 := $trunc.i32.i8($i590);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p592 := $add.ref($p0, $mul.ref(49, 1));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i593 := $load.i8($M.0, $p592);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i594 := $zext.i8.i32($i593);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i595 := $zext.i8.i32($i585);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i596 := $add.i32($i594, $i595);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i597 := $trunc.i32.i8($i596);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($p0, $mul.ref(49, 1));
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i599 := $load.i8($M.0, $p598);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i600 := $zext.i8.i32($i599);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i601 := $zext.i8.i32($i591);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i602 := $or.i32($i600, $i601);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i603 := $trunc.i32.i8($i602);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p604 := $add.ref($p0, $mul.ref(50, 1));
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i605 := $load.i8($M.0, $p604);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i606 := $zext.i8.i32($i605);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i607 := $zext.i8.i32($i597);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i608 := $add.i32($i606, $i607);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i609 := $trunc.i32.i8($i608);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p610 := $add.ref($p0, $mul.ref(50, 1));
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i611 := $load.i8($M.0, $p610);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i612 := $zext.i8.i32($i611);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i613 := $zext.i8.i32($i603);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i614 := $or.i32($i612, $i613);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i615 := $trunc.i32.i8($i614);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p616 := $add.ref($p0, $mul.ref(51, 1));
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i617 := $load.i8($M.0, $p616);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i618 := $zext.i8.i32($i617);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i619 := $zext.i8.i32($i609);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i620 := $add.i32($i618, $i619);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i621 := $trunc.i32.i8($i620);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p622 := $add.ref($p0, $mul.ref(51, 1));
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i623 := $load.i8($M.0, $p622);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i624 := $zext.i8.i32($i623);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i625 := $zext.i8.i32($i615);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i626 := $or.i32($i624, $i625);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i627 := $trunc.i32.i8($i626);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p628 := $add.ref($p0, $mul.ref(52, 1));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i629 := $load.i8($M.0, $p628);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i630 := $zext.i8.i32($i629);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i631 := $zext.i8.i32($i621);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i632 := $add.i32($i630, $i631);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i633 := $trunc.i32.i8($i632);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $p634 := $add.ref($p0, $mul.ref(52, 1));
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i635 := $load.i8($M.0, $p634);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i636 := $zext.i8.i32($i635);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i637 := $zext.i8.i32($i627);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i638 := $or.i32($i636, $i637);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i639 := $trunc.i32.i8($i638);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p640 := $add.ref($p0, $mul.ref(53, 1));
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i641 := $load.i8($M.0, $p640);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i642 := $zext.i8.i32($i641);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i643 := $zext.i8.i32($i633);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i644 := $add.i32($i642, $i643);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i645 := $trunc.i32.i8($i644);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $p646 := $add.ref($p0, $mul.ref(53, 1));
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i647 := $load.i8($M.0, $p646);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i648 := $zext.i8.i32($i647);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i649 := $zext.i8.i32($i639);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i650 := $or.i32($i648, $i649);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i651 := $trunc.i32.i8($i650);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p652 := $add.ref($p0, $mul.ref(54, 1));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i653 := $load.i8($M.0, $p652);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i654 := $zext.i8.i32($i653);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i655 := $zext.i8.i32($i645);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i656 := $add.i32($i654, $i655);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i657 := $trunc.i32.i8($i656);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p658 := $add.ref($p0, $mul.ref(54, 1));
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i659 := $load.i8($M.0, $p658);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i660 := $zext.i8.i32($i659);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i661 := $zext.i8.i32($i651);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i662 := $or.i32($i660, $i661);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i663 := $trunc.i32.i8($i662);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p664 := $add.ref($p0, $mul.ref(55, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i665 := $load.i8($M.0, $p664);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i666 := $zext.i8.i32($i665);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i667 := $zext.i8.i32($i657);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i668 := $add.i32($i666, $i667);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i669 := $trunc.i32.i8($i668);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p670 := $add.ref($p0, $mul.ref(55, 1));
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i671 := $load.i8($M.0, $p670);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i672 := $zext.i8.i32($i671);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i673 := $zext.i8.i32($i663);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i674 := $or.i32($i672, $i673);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i675 := $trunc.i32.i8($i674);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($p0, $mul.ref(56, 1));
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i677 := $load.i8($M.0, $p676);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i678 := $zext.i8.i32($i677);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i679 := $zext.i8.i32($i669);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i680 := $add.i32($i678, $i679);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i681 := $trunc.i32.i8($i680);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $p682 := $add.ref($p0, $mul.ref(56, 1));
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i683 := $load.i8($M.0, $p682);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i684 := $zext.i8.i32($i683);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i685 := $zext.i8.i32($i675);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i686 := $or.i32($i684, $i685);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i687 := $trunc.i32.i8($i686);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p688 := $add.ref($p0, $mul.ref(57, 1));
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i689 := $load.i8($M.0, $p688);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i690 := $zext.i8.i32($i689);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i691 := $zext.i8.i32($i681);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i692 := $add.i32($i690, $i691);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i693 := $trunc.i32.i8($i692);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p694 := $add.ref($p0, $mul.ref(57, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i695 := $load.i8($M.0, $p694);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i696 := $zext.i8.i32($i695);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i697 := $zext.i8.i32($i687);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i698 := $or.i32($i696, $i697);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i699 := $trunc.i32.i8($i698);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p700 := $add.ref($p0, $mul.ref(58, 1));
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i701 := $load.i8($M.0, $p700);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i702 := $zext.i8.i32($i701);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i703 := $zext.i8.i32($i693);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i704 := $add.i32($i702, $i703);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i705 := $trunc.i32.i8($i704);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $p706 := $add.ref($p0, $mul.ref(58, 1));
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i707 := $load.i8($M.0, $p706);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i708 := $zext.i8.i32($i707);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i709 := $zext.i8.i32($i699);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i710 := $or.i32($i708, $i709);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i711 := $trunc.i32.i8($i710);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p712 := $add.ref($p0, $mul.ref(59, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i713 := $load.i8($M.0, $p712);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i714 := $zext.i8.i32($i713);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i715 := $zext.i8.i32($i705);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i716 := $add.i32($i714, $i715);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i717 := $trunc.i32.i8($i716);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p718 := $add.ref($p0, $mul.ref(59, 1));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i719 := $load.i8($M.0, $p718);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i720 := $zext.i8.i32($i719);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i721 := $zext.i8.i32($i711);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i722 := $or.i32($i720, $i721);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i723 := $trunc.i32.i8($i722);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($p0, $mul.ref(60, 1));
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i725 := $load.i8($M.0, $p724);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i726 := $zext.i8.i32($i725);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i727 := $zext.i8.i32($i717);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i728 := $add.i32($i726, $i727);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i729 := $trunc.i32.i8($i728);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $p730 := $add.ref($p0, $mul.ref(60, 1));
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i731 := $load.i8($M.0, $p730);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i732 := $zext.i8.i32($i731);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i733 := $zext.i8.i32($i723);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i734 := $or.i32($i732, $i733);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i735 := $trunc.i32.i8($i734);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p736 := $add.ref($p0, $mul.ref(61, 1));
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i737 := $load.i8($M.0, $p736);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i738 := $zext.i8.i32($i737);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i739 := $zext.i8.i32($i729);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i740 := $add.i32($i738, $i739);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i741 := $trunc.i32.i8($i740);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p742 := $add.ref($p0, $mul.ref(61, 1));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i743 := $load.i8($M.0, $p742);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i744 := $zext.i8.i32($i743);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i745 := $zext.i8.i32($i735);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i746 := $or.i32($i744, $i745);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i747 := $trunc.i32.i8($i746);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p748 := $add.ref($p0, $mul.ref(62, 1));
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i749 := $load.i8($M.0, $p748);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i750 := $zext.i8.i32($i749);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i751 := $zext.i8.i32($i741);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i752 := $add.i32($i750, $i751);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i753 := $trunc.i32.i8($i752);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $p754 := $add.ref($p0, $mul.ref(62, 1));
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i755 := $load.i8($M.0, $p754);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i756 := $zext.i8.i32($i755);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i757 := $zext.i8.i32($i747);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i758 := $or.i32($i756, $i757);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i759 := $trunc.i32.i8($i758);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p760 := $add.ref($p0, $mul.ref(63, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i761 := $load.i8($M.0, $p760);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i762 := $zext.i8.i32($i761);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i763 := $zext.i8.i32($i753);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i764 := $add.i32($i762, $i763);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i765 := $trunc.i32.i8($i764);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p766 := $add.ref($p0, $mul.ref(63, 1));
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i767 := $load.i8($M.0, $p766);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i768 := $zext.i8.i32($i767);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i769 := $zext.i8.i32($i759);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i770 := $or.i32($i768, $i769);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i771 := $trunc.i32.i8($i770);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p772 := $add.ref($p0, $mul.ref(64, 1));
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i773 := $load.i8($M.0, $p772);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i774 := $zext.i8.i32($i773);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i775 := $zext.i8.i32($i765);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i776 := $add.i32($i774, $i775);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i777 := $trunc.i32.i8($i776);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p778 := $add.ref($p0, $mul.ref(64, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i779 := $load.i8($M.0, $p778);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i780 := $zext.i8.i32($i779);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i781 := $zext.i8.i32($i771);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i782 := $or.i32($i780, $i781);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i783 := $trunc.i32.i8($i782);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p784 := $add.ref($p0, $mul.ref(65, 1));
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i785 := $load.i8($M.0, $p784);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i786 := $zext.i8.i32($i785);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i787 := $zext.i8.i32($i777);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i788 := $add.i32($i786, $i787);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i789 := $trunc.i32.i8($i788);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $p790 := $add.ref($p0, $mul.ref(65, 1));
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i791 := $load.i8($M.0, $p790);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i792 := $zext.i8.i32($i791);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i793 := $zext.i8.i32($i783);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i794 := $or.i32($i792, $i793);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i795 := $trunc.i32.i8($i794);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p796 := $add.ref($p0, $mul.ref(66, 1));
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i797 := $load.i8($M.0, $p796);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i798 := $zext.i8.i32($i797);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i799 := $zext.i8.i32($i789);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i800 := $add.i32($i798, $i799);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i801 := $trunc.i32.i8($i800);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p802 := $add.ref($p0, $mul.ref(66, 1));
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i803 := $load.i8($M.0, $p802);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i804 := $zext.i8.i32($i803);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i805 := $zext.i8.i32($i795);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i806 := $or.i32($i804, $i805);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i807 := $trunc.i32.i8($i806);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p808 := $add.ref($p0, $mul.ref(67, 1));
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i809 := $load.i8($M.0, $p808);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i810 := $zext.i8.i32($i809);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i811 := $zext.i8.i32($i801);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i812 := $add.i32($i810, $i811);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i813 := $trunc.i32.i8($i812);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $p814 := $add.ref($p0, $mul.ref(67, 1));
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i815 := $load.i8($M.0, $p814);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i816 := $zext.i8.i32($i815);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i817 := $zext.i8.i32($i807);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i818 := $or.i32($i816, $i817);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i819 := $trunc.i32.i8($i818);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p820 := $add.ref($p0, $mul.ref(68, 1));
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i821 := $load.i8($M.0, $p820);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i822 := $zext.i8.i32($i821);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i823 := $zext.i8.i32($i813);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i824 := $add.i32($i822, $i823);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i825 := $trunc.i32.i8($i824);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $p826 := $add.ref($p0, $mul.ref(68, 1));
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i827 := $load.i8($M.0, $p826);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i828 := $zext.i8.i32($i827);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i829 := $zext.i8.i32($i819);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i830 := $or.i32($i828, $i829);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i831 := $trunc.i32.i8($i830);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p832 := $add.ref($p0, $mul.ref(69, 1));
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i833 := $load.i8($M.0, $p832);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i834 := $zext.i8.i32($i833);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i835 := $zext.i8.i32($i825);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i836 := $add.i32($i834, $i835);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i837 := $trunc.i32.i8($i836);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p838 := $add.ref($p0, $mul.ref(69, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i839 := $load.i8($M.0, $p838);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i840 := $zext.i8.i32($i839);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i841 := $zext.i8.i32($i831);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i842 := $or.i32($i840, $i841);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i843 := $trunc.i32.i8($i842);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p844 := $add.ref($p0, $mul.ref(70, 1));
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i845 := $load.i8($M.0, $p844);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i846 := $zext.i8.i32($i845);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i847 := $zext.i8.i32($i837);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i848 := $add.i32($i846, $i847);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i849 := $trunc.i32.i8($i848);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p850 := $add.ref($p0, $mul.ref(70, 1));
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i851 := $load.i8($M.0, $p850);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i852 := $zext.i8.i32($i851);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i853 := $zext.i8.i32($i843);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i854 := $or.i32($i852, $i853);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i855 := $trunc.i32.i8($i854);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p856 := $add.ref($p0, $mul.ref(71, 1));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i857 := $load.i8($M.0, $p856);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i858 := $zext.i8.i32($i857);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i859 := $zext.i8.i32($i849);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i860 := $add.i32($i858, $i859);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i861 := $trunc.i32.i8($i860);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p862 := $add.ref($p0, $mul.ref(71, 1));
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i863 := $load.i8($M.0, $p862);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i864 := $zext.i8.i32($i863);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i865 := $zext.i8.i32($i855);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i866 := $or.i32($i864, $i865);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i867 := $trunc.i32.i8($i866);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p868 := $add.ref($p0, $mul.ref(72, 1));
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i869 := $load.i8($M.0, $p868);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i870 := $zext.i8.i32($i869);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i871 := $zext.i8.i32($i861);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i872 := $add.i32($i870, $i871);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i873 := $trunc.i32.i8($i872);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p874 := $add.ref($p0, $mul.ref(72, 1));
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i875 := $load.i8($M.0, $p874);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i876 := $zext.i8.i32($i875);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i877 := $zext.i8.i32($i867);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i878 := $or.i32($i876, $i877);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i879 := $trunc.i32.i8($i878);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p880 := $add.ref($p0, $mul.ref(73, 1));
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i881 := $load.i8($M.0, $p880);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i882 := $zext.i8.i32($i881);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i883 := $zext.i8.i32($i873);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i884 := $add.i32($i882, $i883);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i885 := $trunc.i32.i8($i884);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $p886 := $add.ref($p0, $mul.ref(73, 1));
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i887 := $load.i8($M.0, $p886);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i888 := $zext.i8.i32($i887);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i889 := $zext.i8.i32($i879);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i890 := $or.i32($i888, $i889);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i891 := $trunc.i32.i8($i890);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p892 := $add.ref($p0, $mul.ref(74, 1));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i893 := $load.i8($M.0, $p892);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i894 := $zext.i8.i32($i893);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i895 := $zext.i8.i32($i885);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i896 := $add.i32($i894, $i895);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i897 := $trunc.i32.i8($i896);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p898 := $add.ref($p0, $mul.ref(74, 1));
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i899 := $load.i8($M.0, $p898);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i900 := $zext.i8.i32($i899);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i901 := $zext.i8.i32($i891);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i902 := $or.i32($i900, $i901);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i903 := $trunc.i32.i8($i902);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p904 := $add.ref($p0, $mul.ref(75, 1));
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i905 := $load.i8($M.0, $p904);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i906 := $zext.i8.i32($i905);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i907 := $zext.i8.i32($i897);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i908 := $add.i32($i906, $i907);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i909 := $trunc.i32.i8($i908);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p910 := $add.ref($p0, $mul.ref(75, 1));
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i911 := $load.i8($M.0, $p910);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i912 := $zext.i8.i32($i911);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i913 := $zext.i8.i32($i903);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i914 := $or.i32($i912, $i913);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i915 := $trunc.i32.i8($i914);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p916 := $add.ref($p0, $mul.ref(76, 1));
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i917 := $load.i8($M.0, $p916);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i918 := $zext.i8.i32($i917);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i919 := $zext.i8.i32($i909);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i920 := $add.i32($i918, $i919);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i921 := $trunc.i32.i8($i920);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $p922 := $add.ref($p0, $mul.ref(76, 1));
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i923 := $load.i8($M.0, $p922);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i924 := $zext.i8.i32($i923);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i925 := $zext.i8.i32($i915);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i926 := $or.i32($i924, $i925);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i927 := $trunc.i32.i8($i926);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p928 := $add.ref($p0, $mul.ref(77, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i929 := $load.i8($M.0, $p928);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i930 := $zext.i8.i32($i929);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i931 := $zext.i8.i32($i921);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i932 := $add.i32($i930, $i931);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i933 := $trunc.i32.i8($i932);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p934 := $add.ref($p0, $mul.ref(77, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i935 := $load.i8($M.0, $p934);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i936 := $zext.i8.i32($i935);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i937 := $zext.i8.i32($i927);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i938 := $or.i32($i936, $i937);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i939 := $trunc.i32.i8($i938);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p940 := $add.ref($p0, $mul.ref(78, 1));
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i941 := $load.i8($M.0, $p940);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i942 := $zext.i8.i32($i941);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i943 := $zext.i8.i32($i933);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i944 := $add.i32($i942, $i943);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i945 := $trunc.i32.i8($i944);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $p946 := $add.ref($p0, $mul.ref(78, 1));
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i947 := $load.i8($M.0, $p946);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i948 := $zext.i8.i32($i947);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i949 := $zext.i8.i32($i939);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i950 := $or.i32($i948, $i949);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i951 := $trunc.i32.i8($i950);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p952 := $add.ref($p0, $mul.ref(79, 1));
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i953 := $load.i8($M.0, $p952);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i954 := $zext.i8.i32($i953);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i955 := $zext.i8.i32($i945);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i956 := $add.i32($i954, $i955);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i957 := $trunc.i32.i8($i956);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p958 := $add.ref($p0, $mul.ref(79, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i959 := $load.i8($M.0, $p958);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i960 := $zext.i8.i32($i959);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i961 := $zext.i8.i32($i951);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i962 := $or.i32($i960, $i961);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i963 := $trunc.i32.i8($i962);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p964 := $add.ref($p0, $mul.ref(80, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i965 := $load.i8($M.0, $p964);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i966 := $zext.i8.i32($i965);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i967 := $zext.i8.i32($i957);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i968 := $add.i32($i966, $i967);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i969 := $trunc.i32.i8($i968);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $p970 := $add.ref($p0, $mul.ref(80, 1));
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i971 := $load.i8($M.0, $p970);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i972 := $zext.i8.i32($i971);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i973 := $zext.i8.i32($i963);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i974 := $or.i32($i972, $i973);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i975 := $trunc.i32.i8($i974);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p976 := $add.ref($p0, $mul.ref(81, 1));
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i977 := $load.i8($M.0, $p976);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i978 := $zext.i8.i32($i977);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i979 := $zext.i8.i32($i969);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i980 := $add.i32($i978, $i979);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i981 := $trunc.i32.i8($i980);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p982 := $add.ref($p0, $mul.ref(81, 1));
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i983 := $load.i8($M.0, $p982);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i984 := $zext.i8.i32($i983);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i985 := $zext.i8.i32($i975);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i986 := $or.i32($i984, $i985);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i987 := $trunc.i32.i8($i986);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p988 := $add.ref($p0, $mul.ref(82, 1));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i989 := $load.i8($M.0, $p988);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i990 := $zext.i8.i32($i989);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i991 := $zext.i8.i32($i981);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i992 := $add.i32($i990, $i991);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i993 := $trunc.i32.i8($i992);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p994 := $add.ref($p0, $mul.ref(82, 1));
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i995 := $load.i8($M.0, $p994);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i996 := $zext.i8.i32($i995);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i997 := $zext.i8.i32($i987);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i998 := $or.i32($i996, $i997);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i999 := $trunc.i32.i8($i998);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p1000 := $add.ref($p0, $mul.ref(83, 1));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i1001 := $load.i8($M.0, $p1000);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i1002 := $zext.i8.i32($i1001);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i1003 := $zext.i8.i32($i993);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i1004 := $add.i32($i1002, $i1003);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i1005 := $trunc.i32.i8($i1004);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p1006 := $add.ref($p0, $mul.ref(83, 1));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i1007 := $load.i8($M.0, $p1006);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i1008 := $zext.i8.i32($i1007);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i1009 := $zext.i8.i32($i999);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i1010 := $or.i32($i1008, $i1009);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i1011 := $trunc.i32.i8($i1010);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p1012 := $add.ref($p0, $mul.ref(84, 1));
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i1013 := $load.i8($M.0, $p1012);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i1014 := $zext.i8.i32($i1013);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i1015 := $zext.i8.i32($i1005);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i1016 := $add.i32($i1014, $i1015);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i1017 := $trunc.i32.i8($i1016);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $p1018 := $add.ref($p0, $mul.ref(84, 1));
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i1019 := $load.i8($M.0, $p1018);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i1020 := $zext.i8.i32($i1019);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i1021 := $zext.i8.i32($i1011);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i1022 := $or.i32($i1020, $i1021);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i1023 := $trunc.i32.i8($i1022);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p1024 := $add.ref($p0, $mul.ref(85, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i1025 := $load.i8($M.0, $p1024);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i1026 := $zext.i8.i32($i1025);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i1027 := $zext.i8.i32($i1017);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i1028 := $add.i32($i1026, $i1027);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i1029 := $trunc.i32.i8($i1028);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p1030 := $add.ref($p0, $mul.ref(85, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i1031 := $load.i8($M.0, $p1030);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i1032 := $zext.i8.i32($i1031);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i1033 := $zext.i8.i32($i1023);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i1034 := $or.i32($i1032, $i1033);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i1035 := $trunc.i32.i8($i1034);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p1036 := $add.ref($p0, $mul.ref(86, 1));
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i1037 := $load.i8($M.0, $p1036);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i1038 := $zext.i8.i32($i1037);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i1039 := $zext.i8.i32($i1029);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i1040 := $add.i32($i1038, $i1039);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i1041 := $trunc.i32.i8($i1040);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p1042 := $add.ref($p0, $mul.ref(86, 1));
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i1043 := $load.i8($M.0, $p1042);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i1044 := $zext.i8.i32($i1043);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i1045 := $zext.i8.i32($i1035);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i1046 := $or.i32($i1044, $i1045);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i1047 := $trunc.i32.i8($i1046);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p1048 := $add.ref($p0, $mul.ref(87, 1));
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i1049 := $load.i8($M.0, $p1048);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i1050 := $zext.i8.i32($i1049);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i1051 := $zext.i8.i32($i1041);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i1052 := $add.i32($i1050, $i1051);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i1053 := $trunc.i32.i8($i1052);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p1054 := $add.ref($p0, $mul.ref(87, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i1055 := $load.i8($M.0, $p1054);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i1056 := $zext.i8.i32($i1055);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i1057 := $zext.i8.i32($i1047);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i1058 := $or.i32($i1056, $i1057);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i1059 := $trunc.i32.i8($i1058);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p1060 := $add.ref($p0, $mul.ref(88, 1));
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i1061 := $load.i8($M.0, $p1060);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i1062 := $zext.i8.i32($i1061);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i1063 := $zext.i8.i32($i1053);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i1064 := $add.i32($i1062, $i1063);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i1065 := $trunc.i32.i8($i1064);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $p1066 := $add.ref($p0, $mul.ref(88, 1));
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i1067 := $load.i8($M.0, $p1066);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i1068 := $zext.i8.i32($i1067);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i1069 := $zext.i8.i32($i1059);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i1070 := $or.i32($i1068, $i1069);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i1071 := $trunc.i32.i8($i1070);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p1072 := $add.ref($p0, $mul.ref(89, 1));
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i1073 := $load.i8($M.0, $p1072);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i1074 := $zext.i8.i32($i1073);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i1075 := $zext.i8.i32($i1065);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i1076 := $add.i32($i1074, $i1075);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i1077 := $trunc.i32.i8($i1076);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p1078 := $add.ref($p0, $mul.ref(89, 1));
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i1079 := $load.i8($M.0, $p1078);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i1080 := $zext.i8.i32($i1079);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i1081 := $zext.i8.i32($i1071);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i1082 := $or.i32($i1080, $i1081);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i1083 := $trunc.i32.i8($i1082);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p1084 := $add.ref($p0, $mul.ref(90, 1));
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i1085 := $load.i8($M.0, $p1084);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i1086 := $zext.i8.i32($i1085);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i1087 := $zext.i8.i32($i1077);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i1088 := $add.i32($i1086, $i1087);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i1089 := $trunc.i32.i8($i1088);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $p1090 := $add.ref($p0, $mul.ref(90, 1));
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i1091 := $load.i8($M.0, $p1090);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i1092 := $zext.i8.i32($i1091);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i1093 := $zext.i8.i32($i1083);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i1094 := $or.i32($i1092, $i1093);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i1095 := $trunc.i32.i8($i1094);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p1096 := $add.ref($p0, $mul.ref(91, 1));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i1097 := $load.i8($M.0, $p1096);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i1098 := $zext.i8.i32($i1097);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i1099 := $zext.i8.i32($i1089);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i1100 := $add.i32($i1098, $i1099);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i1101 := $trunc.i32.i8($i1100);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p1102 := $add.ref($p0, $mul.ref(91, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $i1103 := $load.i8($M.0, $p1102);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i1104 := $zext.i8.i32($i1103);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i1105 := $zext.i8.i32($i1095);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i1106 := $or.i32($i1104, $i1105);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i1107 := $trunc.i32.i8($i1106);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p1108 := $add.ref($p0, $mul.ref(92, 1));
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i1109 := $load.i8($M.0, $p1108);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i1110 := $zext.i8.i32($i1109);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i1111 := $zext.i8.i32($i1101);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i1112 := $add.i32($i1110, $i1111);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i1113 := $trunc.i32.i8($i1112);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p1114 := $add.ref($p0, $mul.ref(92, 1));
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i1115 := $load.i8($M.0, $p1114);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i1116 := $zext.i8.i32($i1115);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i1117 := $zext.i8.i32($i1107);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i1118 := $or.i32($i1116, $i1117);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i1119 := $trunc.i32.i8($i1118);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p1120 := $add.ref($p0, $mul.ref(93, 1));
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i1121 := $load.i8($M.0, $p1120);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i1122 := $zext.i8.i32($i1121);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i1123 := $zext.i8.i32($i1113);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i1124 := $add.i32($i1122, $i1123);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i1125 := $trunc.i32.i8($i1124);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p1126 := $add.ref($p0, $mul.ref(93, 1));
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i1127 := $load.i8($M.0, $p1126);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i1128 := $zext.i8.i32($i1127);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $i1129 := $zext.i8.i32($i1119);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i1130 := $or.i32($i1128, $i1129);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i1131 := $trunc.i32.i8($i1130);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p1132 := $add.ref($p0, $mul.ref(94, 1));
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i1133 := $load.i8($M.0, $p1132);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i1134 := $zext.i8.i32($i1133);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i1135 := $zext.i8.i32($i1125);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i1136 := $add.i32($i1134, $i1135);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i1137 := $trunc.i32.i8($i1136);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $p1138 := $add.ref($p0, $mul.ref(94, 1));
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i1139 := $load.i8($M.0, $p1138);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i1140 := $zext.i8.i32($i1139);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i1141 := $zext.i8.i32($i1131);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i1142 := $or.i32($i1140, $i1141);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i1143 := $trunc.i32.i8($i1142);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p1144 := $add.ref($p0, $mul.ref(95, 1));
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i1145 := $load.i8($M.0, $p1144);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i1146 := $zext.i8.i32($i1145);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i1147 := $zext.i8.i32($i1137);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i1148 := $add.i32($i1146, $i1147);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i1149 := $trunc.i32.i8($i1148);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $p1150 := $add.ref($p0, $mul.ref(95, 1));
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i1151 := $load.i8($M.0, $p1150);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i1152 := $zext.i8.i32($i1151);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i1153 := $zext.i8.i32($i1143);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i1154 := $or.i32($i1152, $i1153);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i1155 := $trunc.i32.i8($i1154);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p1156 := $add.ref($p0, $mul.ref(96, 1));
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i1157 := $load.i8($M.0, $p1156);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i1158 := $zext.i8.i32($i1157);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i1159 := $zext.i8.i32($i1149);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i1160 := $add.i32($i1158, $i1159);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i1161 := $trunc.i32.i8($i1160);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $p1162 := $add.ref($p0, $mul.ref(96, 1));
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i1163 := $load.i8($M.0, $p1162);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i1164 := $zext.i8.i32($i1163);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i1165 := $zext.i8.i32($i1155);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i1166 := $or.i32($i1164, $i1165);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i1167 := $trunc.i32.i8($i1166);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p1168 := $add.ref($p0, $mul.ref(97, 1));
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i1169 := $load.i8($M.0, $p1168);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i1170 := $zext.i8.i32($i1169);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $i1171 := $zext.i8.i32($i1161);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i1172 := $add.i32($i1170, $i1171);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i1173 := $trunc.i32.i8($i1172);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p1174 := $add.ref($p0, $mul.ref(97, 1));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i1175 := $load.i8($M.0, $p1174);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i1176 := $zext.i8.i32($i1175);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i1177 := $zext.i8.i32($i1167);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i1178 := $or.i32($i1176, $i1177);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $i1179 := $trunc.i32.i8($i1178);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p1180 := $add.ref($p0, $mul.ref(98, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i1181 := $load.i8($M.0, $p1180);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i1182 := $zext.i8.i32($i1181);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i1183 := $zext.i8.i32($i1173);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i1184 := $add.i32($i1182, $i1183);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i1185 := $trunc.i32.i8($i1184);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $p1186 := $add.ref($p0, $mul.ref(98, 1));
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i1187 := $load.i8($M.0, $p1186);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i1188 := $zext.i8.i32($i1187);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i1189 := $zext.i8.i32($i1179);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i1190 := $or.i32($i1188, $i1189);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i1191 := $trunc.i32.i8($i1190);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p1192 := $add.ref($p0, $mul.ref(99, 1));
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i1193 := $load.i8($M.0, $p1192);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i1194 := $zext.i8.i32($i1193);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i1195 := $zext.i8.i32($i1185);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i1196 := $add.i32($i1194, $i1195);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i1197 := $trunc.i32.i8($i1196);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p1198 := $add.ref($p0, $mul.ref(99, 1));
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i1199 := $load.i8($M.0, $p1198);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i1200 := $zext.i8.i32($i1199);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i1201 := $zext.i8.i32($i1191);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i1202 := $or.i32($i1200, $i1201);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i1203 := $trunc.i32.i8($i1202);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p1204 := $add.ref($p0, $mul.ref(100, 1));
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i1205 := $load.i8($M.0, $p1204);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i1206 := $zext.i8.i32($i1205);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i1207 := $zext.i8.i32($i1197);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i1208 := $add.i32($i1206, $i1207);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i1209 := $trunc.i32.i8($i1208);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p1210 := $add.ref($p0, $mul.ref(100, 1));
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i1211 := $load.i8($M.0, $p1210);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i1212 := $zext.i8.i32($i1211);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i1213 := $zext.i8.i32($i1203);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i1214 := $or.i32($i1212, $i1213);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i1215 := $trunc.i32.i8($i1214);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p1216 := $add.ref($p0, $mul.ref(101, 1));
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i1217 := $load.i8($M.0, $p1216);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i1218 := $zext.i8.i32($i1217);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i1219 := $zext.i8.i32($i1209);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i1220 := $add.i32($i1218, $i1219);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i1221 := $trunc.i32.i8($i1220);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p1222 := $add.ref($p0, $mul.ref(101, 1));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i1223 := $load.i8($M.0, $p1222);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i1224 := $zext.i8.i32($i1223);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i1225 := $zext.i8.i32($i1215);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i1226 := $or.i32($i1224, $i1225);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i1227 := $trunc.i32.i8($i1226);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p1228 := $add.ref($p0, $mul.ref(102, 1));
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i1229 := $load.i8($M.0, $p1228);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i1230 := $zext.i8.i32($i1229);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i1231 := $zext.i8.i32($i1221);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i1232 := $add.i32($i1230, $i1231);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i1233 := $trunc.i32.i8($i1232);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p1234 := $add.ref($p0, $mul.ref(102, 1));
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i1235 := $load.i8($M.0, $p1234);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i1236 := $zext.i8.i32($i1235);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i1237 := $zext.i8.i32($i1227);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i1238 := $or.i32($i1236, $i1237);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i1239 := $trunc.i32.i8($i1238);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p1240 := $add.ref($p0, $mul.ref(103, 1));
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i1241 := $load.i8($M.0, $p1240);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i1242 := $zext.i8.i32($i1241);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i1243 := $zext.i8.i32($i1233);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i1244 := $add.i32($i1242, $i1243);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i1245 := $trunc.i32.i8($i1244);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $p1246 := $add.ref($p0, $mul.ref(103, 1));
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i1247 := $load.i8($M.0, $p1246);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i1248 := $zext.i8.i32($i1247);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i1249 := $zext.i8.i32($i1239);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i1250 := $or.i32($i1248, $i1249);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i1251 := $trunc.i32.i8($i1250);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p1252 := $add.ref($p0, $mul.ref(104, 1));
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i1253 := $load.i8($M.0, $p1252);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i1254 := $zext.i8.i32($i1253);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i1255 := $zext.i8.i32($i1245);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i1256 := $add.i32($i1254, $i1255);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i1257 := $trunc.i32.i8($i1256);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p1258 := $add.ref($p0, $mul.ref(104, 1));
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i1259 := $load.i8($M.0, $p1258);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i1260 := $zext.i8.i32($i1259);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i1261 := $zext.i8.i32($i1251);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i1262 := $or.i32($i1260, $i1261);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i1263 := $trunc.i32.i8($i1262);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p1264 := $add.ref($p0, $mul.ref(105, 1));
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i1265 := $load.i8($M.0, $p1264);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i1266 := $zext.i8.i32($i1265);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i1267 := $zext.i8.i32($i1257);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i1268 := $add.i32($i1266, $i1267);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i1269 := $trunc.i32.i8($i1268);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p1270 := $add.ref($p0, $mul.ref(105, 1));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i1271 := $load.i8($M.0, $p1270);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i1272 := $zext.i8.i32($i1271);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i1273 := $zext.i8.i32($i1263);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i1274 := $or.i32($i1272, $i1273);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i1275 := $trunc.i32.i8($i1274);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p1276 := $add.ref($p0, $mul.ref(106, 1));
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i1277 := $load.i8($M.0, $p1276);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i1278 := $zext.i8.i32($i1277);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i1279 := $zext.i8.i32($i1269);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i1280 := $add.i32($i1278, $i1279);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i1281 := $trunc.i32.i8($i1280);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p1282 := $add.ref($p0, $mul.ref(106, 1));
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i1283 := $load.i8($M.0, $p1282);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i1284 := $zext.i8.i32($i1283);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i1285 := $zext.i8.i32($i1275);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i1286 := $or.i32($i1284, $i1285);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i1287 := $trunc.i32.i8($i1286);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p1288 := $add.ref($p0, $mul.ref(107, 1));
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i1289 := $load.i8($M.0, $p1288);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i1290 := $zext.i8.i32($i1289);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i1291 := $zext.i8.i32($i1281);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i1292 := $add.i32($i1290, $i1291);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i1293 := $trunc.i32.i8($i1292);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $p1294 := $add.ref($p0, $mul.ref(107, 1));
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i1295 := $load.i8($M.0, $p1294);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i1296 := $zext.i8.i32($i1295);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i1297 := $zext.i8.i32($i1287);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i1298 := $or.i32($i1296, $i1297);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i1299 := $trunc.i32.i8($i1298);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p1300 := $add.ref($p0, $mul.ref(108, 1));
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i1301 := $load.i8($M.0, $p1300);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i1302 := $zext.i8.i32($i1301);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i1303 := $zext.i8.i32($i1293);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i1304 := $add.i32($i1302, $i1303);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i1305 := $trunc.i32.i8($i1304);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p1306 := $add.ref($p0, $mul.ref(108, 1));
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i1307 := $load.i8($M.0, $p1306);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i1308 := $zext.i8.i32($i1307);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i1309 := $zext.i8.i32($i1299);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i1310 := $or.i32($i1308, $i1309);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i1311 := $trunc.i32.i8($i1310);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p1312 := $add.ref($p0, $mul.ref(109, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i1313 := $load.i8($M.0, $p1312);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i1314 := $zext.i8.i32($i1313);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i1315 := $zext.i8.i32($i1305);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i1316 := $add.i32($i1314, $i1315);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i1317 := $trunc.i32.i8($i1316);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p1318 := $add.ref($p0, $mul.ref(109, 1));
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i1319 := $load.i8($M.0, $p1318);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i1320 := $zext.i8.i32($i1319);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i1321 := $zext.i8.i32($i1311);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i1322 := $or.i32($i1320, $i1321);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i1323 := $trunc.i32.i8($i1322);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p1324 := $add.ref($p0, $mul.ref(110, 1));
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i1325 := $load.i8($M.0, $p1324);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i1326 := $zext.i8.i32($i1325);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i1327 := $zext.i8.i32($i1317);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i1328 := $add.i32($i1326, $i1327);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i1329 := $trunc.i32.i8($i1328);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p1330 := $add.ref($p0, $mul.ref(110, 1));
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i1331 := $load.i8($M.0, $p1330);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i1332 := $zext.i8.i32($i1331);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i1333 := $zext.i8.i32($i1323);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i1334 := $or.i32($i1332, $i1333);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i1335 := $trunc.i32.i8($i1334);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p1336 := $add.ref($p0, $mul.ref(111, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i1337 := $load.i8($M.0, $p1336);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i1338 := $zext.i8.i32($i1337);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i1339 := $zext.i8.i32($i1329);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i1340 := $add.i32($i1338, $i1339);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i1341 := $trunc.i32.i8($i1340);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p1342 := $add.ref($p0, $mul.ref(111, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i1343 := $load.i8($M.0, $p1342);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i1344 := $zext.i8.i32($i1343);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i1345 := $zext.i8.i32($i1335);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i1346 := $or.i32($i1344, $i1345);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i1347 := $trunc.i32.i8($i1346);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p1348 := $add.ref($p0, $mul.ref(112, 1));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i1349 := $load.i8($M.0, $p1348);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i1350 := $zext.i8.i32($i1349);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i1351 := $zext.i8.i32($i1341);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i1352 := $add.i32($i1350, $i1351);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i1353 := $trunc.i32.i8($i1352);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $p1354 := $add.ref($p0, $mul.ref(112, 1));
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i1355 := $load.i8($M.0, $p1354);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i1356 := $zext.i8.i32($i1355);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i1357 := $zext.i8.i32($i1347);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i1358 := $or.i32($i1356, $i1357);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i1359 := $trunc.i32.i8($i1358);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p1360 := $add.ref($p0, $mul.ref(113, 1));
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i1361 := $load.i8($M.0, $p1360);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i1362 := $zext.i8.i32($i1361);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i1363 := $zext.i8.i32($i1353);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i1364 := $add.i32($i1362, $i1363);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i1365 := $trunc.i32.i8($i1364);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p1366 := $add.ref($p0, $mul.ref(113, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i1367 := $load.i8($M.0, $p1366);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i1368 := $zext.i8.i32($i1367);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i1369 := $zext.i8.i32($i1359);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i1370 := $or.i32($i1368, $i1369);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i1371 := $trunc.i32.i8($i1370);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p1372 := $add.ref($p0, $mul.ref(114, 1));
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i1373 := $load.i8($M.0, $p1372);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i1374 := $zext.i8.i32($i1373);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i1375 := $zext.i8.i32($i1365);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i1376 := $add.i32($i1374, $i1375);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i1377 := $trunc.i32.i8($i1376);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $p1378 := $add.ref($p0, $mul.ref(114, 1));
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i1379 := $load.i8($M.0, $p1378);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i1380 := $zext.i8.i32($i1379);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i1381 := $zext.i8.i32($i1371);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i1382 := $or.i32($i1380, $i1381);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i1383 := $trunc.i32.i8($i1382);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p1384 := $add.ref($p0, $mul.ref(115, 1));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i1385 := $load.i8($M.0, $p1384);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i1386 := $zext.i8.i32($i1385);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i1387 := $zext.i8.i32($i1377);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i1388 := $add.i32($i1386, $i1387);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i1389 := $trunc.i32.i8($i1388);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p1390 := $add.ref($p0, $mul.ref(115, 1));
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i1391 := $load.i8($M.0, $p1390);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i1392 := $zext.i8.i32($i1391);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i1393 := $zext.i8.i32($i1383);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i1394 := $or.i32($i1392, $i1393);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i1395 := $trunc.i32.i8($i1394);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $p1396 := $add.ref($p0, $mul.ref(116, 1));
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i1397 := $load.i8($M.0, $p1396);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i1398 := $zext.i8.i32($i1397);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i1399 := $zext.i8.i32($i1389);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i1400 := $add.i32($i1398, $i1399);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i1401 := $trunc.i32.i8($i1400);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p1402 := $add.ref($p0, $mul.ref(116, 1));
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i1403 := $load.i8($M.0, $p1402);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i1404 := $zext.i8.i32($i1403);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i1405 := $zext.i8.i32($i1395);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i1406 := $or.i32($i1404, $i1405);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i1407 := $trunc.i32.i8($i1406);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p1408 := $add.ref($p0, $mul.ref(117, 1));
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i1409 := $load.i8($M.0, $p1408);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i1410 := $zext.i8.i32($i1409);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i1411 := $zext.i8.i32($i1401);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i1412 := $add.i32($i1410, $i1411);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i1413 := $trunc.i32.i8($i1412);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p1414 := $add.ref($p0, $mul.ref(117, 1));
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i1415 := $load.i8($M.0, $p1414);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i1416 := $zext.i8.i32($i1415);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i1417 := $zext.i8.i32($i1407);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i1418 := $or.i32($i1416, $i1417);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i1419 := $trunc.i32.i8($i1418);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p1420 := $add.ref($p0, $mul.ref(118, 1));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i1421 := $load.i8($M.0, $p1420);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i1422 := $zext.i8.i32($i1421);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i1423 := $zext.i8.i32($i1413);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i1424 := $add.i32($i1422, $i1423);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i1425 := $trunc.i32.i8($i1424);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p1426 := $add.ref($p0, $mul.ref(118, 1));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i1427 := $load.i8($M.0, $p1426);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i1428 := $zext.i8.i32($i1427);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i1429 := $zext.i8.i32($i1419);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i1430 := $or.i32($i1428, $i1429);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i1431 := $trunc.i32.i8($i1430);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $p1432 := $add.ref($p0, $mul.ref(119, 1));
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i1433 := $load.i8($M.0, $p1432);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i1434 := $zext.i8.i32($i1433);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i1435 := $zext.i8.i32($i1425);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i1436 := $add.i32($i1434, $i1435);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i1437 := $trunc.i32.i8($i1436);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p1438 := $add.ref($p0, $mul.ref(119, 1));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i1439 := $load.i8($M.0, $p1438);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i1440 := $zext.i8.i32($i1439);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i1441 := $zext.i8.i32($i1431);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i1442 := $or.i32($i1440, $i1441);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i1443 := $trunc.i32.i8($i1442);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p1444 := $add.ref($p0, $mul.ref(120, 1));
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i1445 := $load.i8($M.0, $p1444);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i1446 := $zext.i8.i32($i1445);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i1447 := $zext.i8.i32($i1437);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i1448 := $add.i32($i1446, $i1447);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i1449 := $trunc.i32.i8($i1448);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p1450 := $add.ref($p0, $mul.ref(120, 1));
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i1451 := $load.i8($M.0, $p1450);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i1452 := $zext.i8.i32($i1451);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i1453 := $zext.i8.i32($i1443);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i1454 := $or.i32($i1452, $i1453);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i1455 := $trunc.i32.i8($i1454);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $p1456 := $add.ref($p0, $mul.ref(121, 1));
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i1457 := $load.i8($M.0, $p1456);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i1458 := $zext.i8.i32($i1457);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i1459 := $zext.i8.i32($i1449);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i1460 := $add.i32($i1458, $i1459);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i1461 := $trunc.i32.i8($i1460);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $p1462 := $add.ref($p0, $mul.ref(121, 1));
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i1463 := $load.i8($M.0, $p1462);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i1464 := $zext.i8.i32($i1463);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i1465 := $zext.i8.i32($i1455);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $i1466 := $or.i32($i1464, $i1465);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i1467 := $trunc.i32.i8($i1466);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p1468 := $add.ref($p0, $mul.ref(122, 1));
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i1469 := $load.i8($M.0, $p1468);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i1470 := $zext.i8.i32($i1469);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i1471 := $zext.i8.i32($i1461);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i1472 := $add.i32($i1470, $i1471);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i1473 := $trunc.i32.i8($i1472);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p1474 := $add.ref($p0, $mul.ref(122, 1));
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i1475 := $load.i8($M.0, $p1474);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i1476 := $zext.i8.i32($i1475);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i1477 := $zext.i8.i32($i1467);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i1478 := $or.i32($i1476, $i1477);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i1479 := $trunc.i32.i8($i1478);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $p1480 := $add.ref($p0, $mul.ref(123, 1));
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i1481 := $load.i8($M.0, $p1480);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i1482 := $zext.i8.i32($i1481);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i1483 := $zext.i8.i32($i1473);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i1484 := $add.i32($i1482, $i1483);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i1485 := $trunc.i32.i8($i1484);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p1486 := $add.ref($p0, $mul.ref(123, 1));
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i1487 := $load.i8($M.0, $p1486);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i1488 := $zext.i8.i32($i1487);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i1489 := $zext.i8.i32($i1479);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i1490 := $or.i32($i1488, $i1489);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i1491 := $trunc.i32.i8($i1490);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p1492 := $add.ref($p0, $mul.ref(124, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i1493 := $load.i8($M.0, $p1492);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i1494 := $zext.i8.i32($i1493);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i1495 := $zext.i8.i32($i1485);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i1496 := $add.i32($i1494, $i1495);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i1497 := $trunc.i32.i8($i1496);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p1498 := $add.ref($p0, $mul.ref(124, 1));
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i1499 := $load.i8($M.0, $p1498);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i1500 := $zext.i8.i32($i1499);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i1501 := $zext.i8.i32($i1491);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i1502 := $or.i32($i1500, $i1501);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i1503 := $trunc.i32.i8($i1502);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p1504 := $add.ref($p0, $mul.ref(125, 1));
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i1505 := $load.i8($M.0, $p1504);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i1506 := $zext.i8.i32($i1505);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $i1507 := $zext.i8.i32($i1497);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i1508 := $add.i32($i1506, $i1507);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i1509 := $trunc.i32.i8($i1508);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p1510 := $add.ref($p0, $mul.ref(125, 1));
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i1511 := $load.i8($M.0, $p1510);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i1512 := $zext.i8.i32($i1511);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i1513 := $zext.i8.i32($i1503);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i1514 := $or.i32($i1512, $i1513);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i1515 := $trunc.i32.i8($i1514);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p1516 := $add.ref($p0, $mul.ref(126, 1));
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i1517 := $load.i8($M.0, $p1516);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i1518 := $zext.i8.i32($i1517);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i1519 := $zext.i8.i32($i1509);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i1520 := $add.i32($i1518, $i1519);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i1521 := $trunc.i32.i8($i1520);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $p1522 := $add.ref($p0, $mul.ref(126, 1));
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i1523 := $load.i8($M.0, $p1522);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i1524 := $zext.i8.i32($i1523);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i1525 := $zext.i8.i32($i1515);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i1526 := $or.i32($i1524, $i1525);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i1527 := $trunc.i32.i8($i1526);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $p1528 := $add.ref($p0, $mul.ref(127, 1));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i1529 := $load.i8($M.0, $p1528);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i1530 := $zext.i8.i32($i1529);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i1531 := $zext.i8.i32($i1521);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i1532 := $add.i32($i1530, $i1531);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i1532);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $p1533 := $add.ref($p0, $mul.ref(127, 1));
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i1534 := $load.i8($M.0, $p1533);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i1535 := $zext.i8.i32($i1534);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i1536 := $zext.i8.i32($i1527);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i1537 := $or.i32($i1535, $i1536);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i1537);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i10);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i9, 0);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i13);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i12, 0);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb13;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} fix_edid($p0, $i1);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const edid_check_header: ref;

axiom edid_check_header == $sub.ref(0, 386577);

procedure edid_check_header($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.46, $M.0, $CurrAddr;



implementation edid_check_header($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i1 := check_edid($p0);
    call {:si_unique_call 402} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p0);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 255);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $i6;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 255);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i12;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 255);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i17;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 255);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $i22;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p0, $mul.ref(5, 1));
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 255);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i27;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p0, $mul.ref(6, 1));
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 255);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $i32;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p0, $mul.ref(7, 1));
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i7 := $i37;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb35:
    assume $i41 == 1;
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb37;

  $bb31:
    assume $i36 == 1;
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb33;

  $bb27:
    assume $i31 == 1;
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb29;

  $bb23:
    assume $i26 == 1;
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb25;

  $bb19:
    assume $i21 == 1;
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb21;

  $bb15:
    assume $i16 == 1;
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb17;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb13;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} fix_edid($p0, $i1);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const edid_is_timing_block: ref;

axiom edid_is_timing_block == $sub.ref(0, 387609);

procedure edid_is_timing_block($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation edid_is_timing_block($p0: ref) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb10;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const check_edid: ref;

axiom check_edid == $sub.ref(0, 388641);

procedure check_edid($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.46, $CurrAddr;



implementation check_edid($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i8;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i1;
  var $i48: i32;
  var $i49: i64;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i8;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i8;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $i78: i64;
  var $p79: ref;
  var $i77: i32;
  var $i62: i32;
  var $i80: i1;
  var $p81: ref;
  var $p83: ref;
  var $i84: i8;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i8;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i100: i8;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i104: i8;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i108: i8;
  var $i109: i32;
  var $i110: i1;
  var $i111: i32;
  var $i112: i1;
  var $i113: i64;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $i117: i64;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i122: i32;
  var $i123: i1;
  var $i124: i1;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $i128: i1;
  var vslice_dummy_var_146: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 124);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 2);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 64);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p11, $i10);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p2);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 3);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i15 := $shl.i32($i14, 3);
    $i16 := $add.i64(8, 1);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p0, $mul.ref($i16, 1));
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i20 := $ashr.i32($i19, 5);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i15, $i20);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 64);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p24, $i23);
    $i25 := $add.i64(8, 1);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p0, $mul.ref($i25, 1));
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 31);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 64);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p32, $i31);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p33, 0);
    $i34 := $add.i64(8, 2);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p0, $mul.ref($i34, 1));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    $i38 := $add.i64(8, 3);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p0, $mul.ref($i38, 1));
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i42 := $shl.i32($i41, 8);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i37, $i42);
    call {:si_unique_call 405} {:cexpr "model"} boogie_si_record_i32($i43);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p1);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $i45 := strncmp($p44, brokendb, 4);
    call {:si_unique_call 407} {:cexpr "tmp"} boogie_si_record_i32($i45);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p1);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $i122 := strncmp($p121, $add.ref($add.ref($add.ref($add.ref(brokendb, $mul.ref(0, 36)), $mul.ref(1, 12)), $mul.ref(0, 1)), $mul.ref(0, 1)), 4);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 0);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p1);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $i126 := strncmp($p125, $add.ref($add.ref($add.ref($add.ref(brokendb, $mul.ref(0, 36)), $mul.ref(2, 12)), $mul.ref(0, 1)), $mul.ref(0, 1)), 4);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 0);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i53, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i53, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i62 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i62, 0);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $r := $i62;
    return;

  $bb49:
    assume $i80 == 1;
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p1);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} vslice_dummy_var_146 := printk.ref.ref.i32(.str.37, $p81, $i43);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb18:
    assume $i56 == 1;
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p0, $mul.ref(54, 1));
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $i75 := edid_is_limits_block($p74);
    call {:si_unique_call 411} {:cexpr "tmp___0"} boogie_si_record_i32($i75);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb43;

  $bb43:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    $i78 := $add.i64(54, 18);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p0, $mul.ref($i78, 1));
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $i111 := edid_is_limits_block($p79);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    $i113 := $add.i64($i78, 18);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p0, $mul.ref($i113, 1));
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i115 := edid_is_limits_block($p114);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    $i117 := $add.i64($i113, 18);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p0, $mul.ref($i117, 1));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i119 := edid_is_limits_block($p118);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i77 := $i53;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i62 := $i77;
    goto $bb32;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i120 == 1;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i77 := 0;
    goto $bb44;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb42;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i112 == 1;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb42;

  $bb16:
    assume $i55 == 1;
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p0, $mul.ref(20, 1));
    $i64 := $add.i64(20, 4);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p0, $mul.ref($i64, 1));
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 1);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i73 := 0;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i62 := $i73;
    goto $bb32;

  $bb33:
    assume $i69 == 1;
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p63);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i71 := $sext.i8.i32($i70);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i71, 0);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb35;

  $bb36:
    assume $i72 == 1;
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i73 := $i53;
    goto $bb38;

  $bb14:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i53, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb20;

  $bb21:
    assume $i57 == 1;
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p0);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.0, $p83);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 255);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 255);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.0, $p91);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i92);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 255);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.0, $p95);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 255);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p0, $mul.ref(5, 1));
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.0, $p99);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 255);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p0, $mul.ref(6, 1));
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.0, $p103);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i104);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 255);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p0, $mul.ref(7, 1));
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.0, $p107);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i61 := 0;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i62 := $i61;
    goto $bb32;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i110 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i61 := $i53;
    goto $bb28;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i106 == 1;
    goto $bb26;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb26;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb26;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb26;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb26;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb26;

  $bb97:
    assume $i127 == 1;
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32(5006, $i43);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i48 := 2;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    assume !($i128 == 1);
    goto $bb99;

  $bb100:
    assume {:verifier.code 0} true;
    assume $i128 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref(brokendb, $mul.ref(0, 36)), $mul.ref($i49, 12)), $mul.ref(8, 1));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.47, $p51);
    call {:si_unique_call 408} {:cexpr "fix"} boogie_si_record_i32($i52);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb9;

  $bb90:
    assume $i123 == 1;
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32(23108, $i43);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i48 := 1;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb92;

  $bb93:
    assume {:verifier.code 0} true;
    assume $i124 == 1;
    goto $bb7;

  $bb3:
    assume $i46 == 1;
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32(1850, $i43);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i48 := 0;
    assume {:branchcond $i47} true;
    goto $bb6, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb7;
}



const fix_edid: ref;

axiom fix_edid == $sub.ref(0, 389673);

procedure fix_edid($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fix_edid($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $p18: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i8;
  var $i45: i32;
  var $i47: i32;
  var $i48: i8;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i8;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i8;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i8;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i8;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;
  var $i79: i8;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i8;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i8;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i8;
  var $p98: ref;
  var $i99: i8;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i8;
  var $p104: ref;
  var $i105: i8;
  var $i106: i32;
  var $i107: i32;
  var $i108: i32;
  var $i109: i8;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i32;
  var $i114: i32;
  var $i115: i8;
  var $p116: ref;
  var $i117: i8;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $i121: i8;
  var $p122: ref;
  var $i123: i8;
  var $i124: i32;
  var $i125: i32;
  var $i126: i32;
  var $i127: i8;
  var $p128: ref;
  var $i129: i8;
  var $i130: i32;
  var $i131: i32;
  var $i132: i32;
  var $i133: i8;
  var $p134: ref;
  var $i135: i8;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $i139: i8;
  var $p140: ref;
  var $i141: i8;
  var $i142: i32;
  var $i143: i32;
  var $i144: i32;
  var $i145: i8;
  var $p146: ref;
  var $i147: i8;
  var $i148: i32;
  var $i149: i32;
  var $i150: i32;
  var $i151: i8;
  var $p152: ref;
  var $i153: i8;
  var $i154: i32;
  var $i155: i32;
  var $i156: i32;
  var $i157: i8;
  var $p158: ref;
  var $i159: i8;
  var $i160: i32;
  var $i161: i32;
  var $i162: i32;
  var $i163: i8;
  var $p164: ref;
  var $i165: i8;
  var $i166: i32;
  var $i167: i32;
  var $i168: i32;
  var $i169: i8;
  var $p170: ref;
  var $i171: i8;
  var $i172: i32;
  var $i173: i32;
  var $i174: i32;
  var $i175: i8;
  var $p176: ref;
  var $i177: i8;
  var $i178: i32;
  var $i179: i32;
  var $i180: i32;
  var $i181: i8;
  var $p182: ref;
  var $i183: i8;
  var $i184: i32;
  var $i185: i32;
  var $i186: i32;
  var $i187: i8;
  var $p188: ref;
  var $i189: i8;
  var $i190: i32;
  var $i191: i32;
  var $i192: i32;
  var $i193: i8;
  var $p194: ref;
  var $i195: i8;
  var $i196: i32;
  var $i197: i32;
  var $i198: i32;
  var $i199: i8;
  var $p200: ref;
  var $i201: i8;
  var $i202: i32;
  var $i203: i32;
  var $i204: i32;
  var $i205: i8;
  var $p206: ref;
  var $i207: i8;
  var $i208: i32;
  var $i209: i32;
  var $i210: i32;
  var $i211: i8;
  var $p212: ref;
  var $i213: i8;
  var $i214: i32;
  var $i215: i32;
  var $i216: i32;
  var $i217: i8;
  var $p218: ref;
  var $i219: i8;
  var $i220: i32;
  var $i221: i32;
  var $i222: i32;
  var $i223: i8;
  var $p224: ref;
  var $i225: i8;
  var $i226: i32;
  var $i227: i32;
  var $i228: i32;
  var $i229: i8;
  var $p230: ref;
  var $i231: i8;
  var $i232: i32;
  var $i233: i32;
  var $i234: i32;
  var $i235: i8;
  var $p236: ref;
  var $i237: i8;
  var $i238: i32;
  var $i239: i32;
  var $i240: i32;
  var $i241: i8;
  var $p242: ref;
  var $i243: i8;
  var $i244: i32;
  var $i245: i32;
  var $i246: i32;
  var $i247: i8;
  var $p248: ref;
  var $i249: i8;
  var $i250: i32;
  var $i251: i32;
  var $i252: i32;
  var $i253: i8;
  var $p254: ref;
  var $i255: i8;
  var $i256: i32;
  var $i257: i32;
  var $i258: i32;
  var $i259: i8;
  var $p260: ref;
  var $i261: i8;
  var $i262: i32;
  var $i263: i32;
  var $i264: i32;
  var $i265: i8;
  var $p266: ref;
  var $i267: i8;
  var $i268: i32;
  var $i269: i32;
  var $i270: i32;
  var $i271: i8;
  var $p272: ref;
  var $i273: i8;
  var $i274: i32;
  var $i275: i32;
  var $i276: i32;
  var $i277: i8;
  var $p278: ref;
  var $i279: i8;
  var $i280: i32;
  var $i281: i32;
  var $i282: i32;
  var $i283: i8;
  var $p284: ref;
  var $i285: i8;
  var $i286: i32;
  var $i287: i32;
  var $i288: i32;
  var $i289: i8;
  var $p290: ref;
  var $i291: i8;
  var $i292: i32;
  var $i293: i32;
  var $i294: i32;
  var $i295: i8;
  var $p296: ref;
  var $i297: i8;
  var $i298: i32;
  var $i299: i32;
  var $i300: i32;
  var $i301: i8;
  var $p302: ref;
  var $i303: i8;
  var $i304: i32;
  var $i305: i32;
  var $i306: i32;
  var $i307: i8;
  var $p308: ref;
  var $i309: i8;
  var $i310: i32;
  var $i311: i32;
  var $i312: i32;
  var $i313: i8;
  var $p314: ref;
  var $i315: i8;
  var $i316: i32;
  var $i317: i32;
  var $i318: i32;
  var $i319: i8;
  var $p320: ref;
  var $i321: i8;
  var $i322: i32;
  var $i323: i32;
  var $i324: i32;
  var $i325: i8;
  var $p326: ref;
  var $i327: i8;
  var $i328: i32;
  var $i329: i32;
  var $i330: i32;
  var $i331: i8;
  var $p332: ref;
  var $i333: i8;
  var $i334: i32;
  var $i335: i32;
  var $i336: i32;
  var $i337: i8;
  var $p338: ref;
  var $i339: i8;
  var $i340: i32;
  var $i341: i32;
  var $i342: i32;
  var $i343: i8;
  var $p344: ref;
  var $i345: i8;
  var $i346: i32;
  var $i347: i32;
  var $i348: i32;
  var $i349: i8;
  var $p350: ref;
  var $i351: i8;
  var $i352: i32;
  var $i353: i32;
  var $i354: i32;
  var $i355: i8;
  var $p356: ref;
  var $i357: i8;
  var $i358: i32;
  var $i359: i32;
  var $i360: i32;
  var $i361: i8;
  var $p362: ref;
  var $i363: i8;
  var $i364: i32;
  var $i365: i32;
  var $i366: i32;
  var $i367: i8;
  var $p368: ref;
  var $i369: i8;
  var $i370: i32;
  var $i371: i32;
  var $i372: i32;
  var $i373: i8;
  var $p374: ref;
  var $i375: i8;
  var $i376: i32;
  var $i377: i32;
  var $i378: i32;
  var $i379: i8;
  var $p380: ref;
  var $i381: i8;
  var $i382: i32;
  var $i383: i32;
  var $i384: i32;
  var $i385: i8;
  var $p386: ref;
  var $i387: i8;
  var $i388: i32;
  var $i389: i32;
  var $i390: i32;
  var $i391: i8;
  var $p392: ref;
  var $i393: i8;
  var $i394: i32;
  var $i395: i32;
  var $i396: i32;
  var $i397: i8;
  var $p398: ref;
  var $i399: i8;
  var $i400: i32;
  var $i401: i32;
  var $i402: i32;
  var $i403: i8;
  var $p404: ref;
  var $i405: i8;
  var $i406: i32;
  var $i407: i32;
  var $i408: i32;
  var $i409: i8;
  var $p410: ref;
  var $i411: i8;
  var $i412: i32;
  var $i413: i32;
  var $i414: i32;
  var $i415: i8;
  var $p416: ref;
  var $i417: i8;
  var $i418: i32;
  var $i419: i32;
  var $i420: i32;
  var $i421: i8;
  var $p422: ref;
  var $i423: i8;
  var $i424: i32;
  var $i425: i32;
  var $i426: i32;
  var $i427: i8;
  var $p428: ref;
  var $i429: i8;
  var $i430: i32;
  var $i431: i32;
  var $i432: i32;
  var $i433: i8;
  var $p434: ref;
  var $i435: i8;
  var $i436: i32;
  var $i437: i32;
  var $i438: i32;
  var $i439: i8;
  var $p440: ref;
  var $i441: i8;
  var $i442: i32;
  var $i443: i32;
  var $i444: i32;
  var $i445: i8;
  var $p446: ref;
  var $i447: i8;
  var $i448: i32;
  var $i449: i32;
  var $i450: i32;
  var $i451: i8;
  var $p452: ref;
  var $i453: i8;
  var $i454: i32;
  var $i455: i32;
  var $i456: i32;
  var $i457: i8;
  var $p458: ref;
  var $i459: i8;
  var $i460: i32;
  var $i461: i32;
  var $i462: i32;
  var $i463: i8;
  var $p464: ref;
  var $i465: i8;
  var $i466: i32;
  var $i467: i32;
  var $i468: i32;
  var $i469: i8;
  var $p470: ref;
  var $i471: i8;
  var $i472: i32;
  var $i473: i32;
  var $i474: i32;
  var $i475: i8;
  var $p476: ref;
  var $i477: i8;
  var $i478: i32;
  var $i479: i32;
  var $i480: i32;
  var $i481: i8;
  var $p482: ref;
  var $i483: i8;
  var $i484: i32;
  var $i485: i32;
  var $i486: i32;
  var $i487: i8;
  var $p488: ref;
  var $i489: i8;
  var $i490: i32;
  var $i491: i32;
  var $i492: i32;
  var $i493: i8;
  var $p494: ref;
  var $i495: i8;
  var $i496: i32;
  var $i497: i32;
  var $i498: i32;
  var $i499: i8;
  var $p500: ref;
  var $i501: i8;
  var $i502: i32;
  var $i503: i32;
  var $i504: i32;
  var $i505: i8;
  var $p506: ref;
  var $i507: i8;
  var $i508: i32;
  var $i509: i32;
  var $i510: i32;
  var $i511: i8;
  var $p512: ref;
  var $i513: i8;
  var $i514: i32;
  var $i515: i32;
  var $i516: i32;
  var $i517: i8;
  var $p518: ref;
  var $i519: i8;
  var $i520: i32;
  var $i521: i32;
  var $i522: i32;
  var $i523: i8;
  var $p524: ref;
  var $i525: i8;
  var $i526: i32;
  var $i527: i32;
  var $i528: i32;
  var $i529: i8;
  var $p530: ref;
  var $i531: i8;
  var $i532: i32;
  var $i533: i32;
  var $i534: i32;
  var $i535: i8;
  var $p536: ref;
  var $i537: i8;
  var $i538: i32;
  var $i539: i32;
  var $i540: i32;
  var $i541: i8;
  var $p542: ref;
  var $i543: i8;
  var $i544: i32;
  var $i545: i32;
  var $i546: i32;
  var $i547: i8;
  var $p548: ref;
  var $i549: i8;
  var $i550: i32;
  var $i551: i32;
  var $i552: i32;
  var $i553: i8;
  var $p554: ref;
  var $i555: i8;
  var $i556: i32;
  var $i557: i32;
  var $i558: i32;
  var $i559: i8;
  var $p560: ref;
  var $i561: i8;
  var $i562: i32;
  var $i563: i32;
  var $i564: i32;
  var $i565: i8;
  var $p566: ref;
  var $i567: i8;
  var $i568: i32;
  var $i569: i32;
  var $i570: i32;
  var $i571: i8;
  var $p572: ref;
  var $i573: i8;
  var $i574: i32;
  var $i575: i32;
  var $i576: i32;
  var $i577: i8;
  var $p578: ref;
  var $i579: i8;
  var $i580: i32;
  var $i581: i32;
  var $i582: i32;
  var $i583: i8;
  var $p584: ref;
  var $i585: i8;
  var $i586: i32;
  var $i587: i32;
  var $i588: i32;
  var $i589: i8;
  var $p590: ref;
  var $i591: i8;
  var $i592: i32;
  var $i593: i32;
  var $i594: i32;
  var $i595: i8;
  var $p596: ref;
  var $i597: i8;
  var $i598: i32;
  var $i599: i32;
  var $i600: i32;
  var $i601: i8;
  var $p602: ref;
  var $i603: i8;
  var $i604: i32;
  var $i605: i32;
  var $i606: i32;
  var $i607: i8;
  var $p608: ref;
  var $i609: i8;
  var $i610: i32;
  var $i611: i32;
  var $i612: i32;
  var $i613: i8;
  var $p614: ref;
  var $i615: i8;
  var $i616: i32;
  var $i617: i32;
  var $i618: i32;
  var $i619: i8;
  var $p620: ref;
  var $i621: i8;
  var $i622: i32;
  var $i623: i32;
  var $i624: i32;
  var $i625: i8;
  var $p626: ref;
  var $i627: i8;
  var $i628: i32;
  var $i629: i32;
  var $i630: i32;
  var $i631: i8;
  var $p632: ref;
  var $i633: i8;
  var $i634: i32;
  var $i635: i32;
  var $i636: i32;
  var $i637: i8;
  var $p638: ref;
  var $i639: i8;
  var $i640: i32;
  var $i641: i32;
  var $i642: i32;
  var $i643: i8;
  var $p644: ref;
  var $i645: i8;
  var $i646: i32;
  var $i647: i32;
  var $i648: i32;
  var $i649: i8;
  var $p650: ref;
  var $i651: i8;
  var $i652: i32;
  var $i653: i32;
  var $i654: i32;
  var $i655: i8;
  var $p656: ref;
  var $i657: i8;
  var $i658: i32;
  var $i659: i32;
  var $i660: i32;
  var $i661: i8;
  var $p662: ref;
  var $i663: i8;
  var $i664: i32;
  var $i665: i32;
  var $i666: i32;
  var $i667: i8;
  var $p668: ref;
  var $i669: i8;
  var $i670: i32;
  var $i671: i32;
  var $i672: i32;
  var $i673: i8;
  var $p674: ref;
  var $i675: i8;
  var $i676: i32;
  var $i677: i32;
  var $i678: i32;
  var $i679: i8;
  var $p680: ref;
  var $i681: i8;
  var $i682: i32;
  var $i683: i32;
  var $i684: i32;
  var $i685: i8;
  var $p686: ref;
  var $i687: i8;
  var $i688: i32;
  var $i689: i32;
  var $i690: i32;
  var $i691: i8;
  var $p692: ref;
  var $i693: i8;
  var $i694: i32;
  var $i695: i32;
  var $i696: i32;
  var $i697: i8;
  var $p698: ref;
  var $i699: i8;
  var $i700: i32;
  var $i701: i32;
  var $i702: i32;
  var $i703: i8;
  var $p704: ref;
  var $i705: i8;
  var $i706: i32;
  var $i707: i32;
  var $i708: i32;
  var $i709: i8;
  var $p710: ref;
  var $i711: i8;
  var $i712: i32;
  var $i713: i32;
  var $i714: i32;
  var $i715: i8;
  var $p716: ref;
  var $i717: i8;
  var $i718: i32;
  var $i719: i32;
  var $i720: i32;
  var $i721: i8;
  var $p722: ref;
  var $i723: i8;
  var $i724: i32;
  var $i725: i32;
  var $i726: i32;
  var $i727: i8;
  var $p728: ref;
  var $i729: i8;
  var $i730: i32;
  var $i731: i32;
  var $i732: i32;
  var $i733: i8;
  var $p734: ref;
  var $i735: i8;
  var $i736: i32;
  var $i737: i32;
  var $i738: i32;
  var $i739: i8;
  var $p740: ref;
  var $i741: i8;
  var $i742: i32;
  var $i743: i32;
  var $i744: i32;
  var $i745: i8;
  var $p746: ref;
  var $i747: i8;
  var $i748: i32;
  var $i749: i32;
  var $i750: i32;
  var $i751: i8;
  var $p752: ref;
  var $i753: i8;
  var $i754: i32;
  var $i755: i32;
  var $i756: i32;
  var $i757: i8;
  var $p758: ref;
  var $i759: i8;
  var $i760: i32;
  var $i761: i32;
  var $i762: i32;
  var $i763: i8;
  var $p764: ref;
  var $i765: i8;
  var $i766: i32;
  var $i767: i32;
  var $i768: i32;
  var $i769: i8;
  var $p770: ref;
  var $i771: i8;
  var $i772: i32;
  var $i773: i32;
  var $i774: i32;
  var $i775: i8;
  var $p776: ref;
  var $i777: i8;
  var $i778: i32;
  var $i779: i32;
  var $i780: i32;
  var $i781: i8;
  var $p782: ref;
  var $i783: i8;
  var $i784: i32;
  var $i785: i32;
  var $i786: i32;
  var $i787: i8;
  var $p788: ref;
  var $i789: i8;
  var $i790: i32;
  var $i791: i32;
  var $i792: i32;
  var $i793: i8;
  var $p794: ref;
  var $i795: i8;
  var $i796: i32;
  var $i797: i32;
  var $i798: i32;
  var $i799: i8;
  var $p800: ref;
  var $i801: i8;
  var $i802: i32;
  var $i803: i32;
  var $i804: i32;
  var $i46: i8;
  var $i805: i32;
  var $i806: i1;
  var $i807: i32;
  var $i808: i1;
  var $i809: i32;
  var $i810: i1;
  var $i811: i32;
  var $i812: i1;
  var $i813: i64;
  var $p814: ref;
  var $i815: i32;
  var $i816: i1;
  var $i817: i32;
  var $i818: i1;
  var $i819: i32;
  var $i820: i1;
  var $i821: i32;
  var $i822: i1;
  var $i823: i64;
  var $p824: ref;
  var $i825: i32;
  var $i826: i1;
  var $i827: i32;
  var $i828: i1;
  var $i829: i32;
  var $i830: i1;
  var $i831: i32;
  var $i832: i1;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;

  $bb0:
    call {:si_unique_call 417} {:cexpr "fix_edid:arg:fix"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i4 == 1;
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} vslice_dummy_var_148 := printk.ref(.str.40);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p0, $mul.ref(54, 1));
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $i21 := edid_is_serial_block($p20);
    call {:si_unique_call 423} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    $i40 := $add.i64(54, 18);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p0, $mul.ref($i40, 1));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i805 := edid_is_serial_block($p41);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i806 := $eq.i32($i805, 0);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i806} true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i806 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    $i813 := $add.i64($i40, 18);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $p814 := $add.ref($p0, $mul.ref($i813, 1));
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i815 := edid_is_serial_block($p814);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $i816 := $eq.i32($i815, 0);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i816} true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i816 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    $i823 := $add.i64($i813, 18);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $p824 := $add.ref($p0, $mul.ref($i823, 1));
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $i825 := edid_is_serial_block($p824);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $i826 := $eq.i32($i825, 0);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i826} true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i826 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p0);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    call {:si_unique_call 431} {:cexpr "csum"} boogie_si_record_i8($i44);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i44);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i52, $i53);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i55);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i58, $i59);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i8($i60);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i61);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i64, $i65);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i66);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i67);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i70, $i71);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i8($i72);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p0, $mul.ref(5, 1));
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i73);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i76, $i77);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i8($i78);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p0, $mul.ref(6, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i79);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i82, $i83);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i8($i84);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p0, $mul.ref(7, 1));
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.0, $p86);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i85);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i88, $i89);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i32.i8($i90);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.0, $p92);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i91);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i94, $i95);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p0, $mul.ref(9, 1));
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.0, $p98);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i97);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i102 := $add.i32($i100, $i101);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i8($i102);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p0, $mul.ref(10, 1));
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.0, $p104);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i103);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i108 := $add.i32($i106, $i107);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i8($i108);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p0, $mul.ref(11, 1));
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i109);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i112, $i113);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i8($i114);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p0, $mul.ref(12, 1));
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.0, $p116);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i115);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i120 := $add.i32($i118, $i119);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i32.i8($i120);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p0, $mul.ref(13, 1));
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.0, $p122);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i123);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i32($i121);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $i126 := $add.i32($i124, $i125);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i32.i8($i126);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p0, $mul.ref(14, 1));
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.0, $p128);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i131 := $zext.i8.i32($i127);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i132 := $add.i32($i130, $i131);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i32.i8($i132);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($p0, $mul.ref(15, 1));
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.0, $p134);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i32($i135);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i133);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i138 := $add.i32($i136, $i137);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i8($i138);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p0, $mul.ref(16, 1));
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.0, $p140);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i32($i141);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i143 := $zext.i8.i32($i139);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i144 := $add.i32($i142, $i143);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i32.i8($i144);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($p0, $mul.ref(17, 1));
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i147 := $load.i8($M.0, $p146);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i148 := $zext.i8.i32($i147);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i145);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i150 := $add.i32($i148, $i149);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i151 := $trunc.i32.i8($i150);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($p0, $mul.ref(18, 1));
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i153 := $load.i8($M.0, $p152);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i32($i153);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i32($i151);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i156 := $add.i32($i154, $i155);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i157 := $trunc.i32.i8($i156);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($p0, $mul.ref(19, 1));
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i159 := $load.i8($M.0, $p158);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i160 := $zext.i8.i32($i159);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i161 := $zext.i8.i32($i157);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i162 := $add.i32($i160, $i161);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i32.i8($i162);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($p0, $mul.ref(20, 1));
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i165 := $load.i8($M.0, $p164);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i166 := $zext.i8.i32($i165);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i167 := $zext.i8.i32($i163);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i168 := $add.i32($i166, $i167);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i32.i8($i168);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($p0, $mul.ref(21, 1));
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i171 := $load.i8($M.0, $p170);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i172 := $zext.i8.i32($i171);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i173 := $zext.i8.i32($i169);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $i174 := $add.i32($i172, $i173);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i175 := $trunc.i32.i8($i174);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($p0, $mul.ref(22, 1));
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i177 := $load.i8($M.0, $p176);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i178 := $zext.i8.i32($i177);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $i179 := $zext.i8.i32($i175);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i180 := $add.i32($i178, $i179);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i181 := $trunc.i32.i8($i180);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($p0, $mul.ref(23, 1));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i183 := $load.i8($M.0, $p182);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i184 := $zext.i8.i32($i183);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i185 := $zext.i8.i32($i181);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i186 := $add.i32($i184, $i185);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i187 := $trunc.i32.i8($i186);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($p0, $mul.ref(24, 1));
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i189 := $load.i8($M.0, $p188);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i190 := $zext.i8.i32($i189);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i191 := $zext.i8.i32($i187);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i192 := $add.i32($i190, $i191);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i193 := $trunc.i32.i8($i192);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($p0, $mul.ref(25, 1));
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i195 := $load.i8($M.0, $p194);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i196 := $zext.i8.i32($i195);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i197 := $zext.i8.i32($i193);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i198 := $add.i32($i196, $i197);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i199 := $trunc.i32.i8($i198);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($p0, $mul.ref(26, 1));
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $i201 := $load.i8($M.0, $p200);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i202 := $zext.i8.i32($i201);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i203 := $zext.i8.i32($i199);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $i204 := $add.i32($i202, $i203);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $i205 := $trunc.i32.i8($i204);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($p0, $mul.ref(27, 1));
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i207 := $load.i8($M.0, $p206);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i208 := $zext.i8.i32($i207);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i209 := $zext.i8.i32($i205);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i210 := $add.i32($i208, $i209);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i32.i8($i210);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($p0, $mul.ref(28, 1));
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i213 := $load.i8($M.0, $p212);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i214 := $zext.i8.i32($i213);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $i215 := $zext.i8.i32($i211);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i216 := $add.i32($i214, $i215);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i217 := $trunc.i32.i8($i216);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($p0, $mul.ref(29, 1));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i219 := $load.i8($M.0, $p218);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i220 := $zext.i8.i32($i219);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i221 := $zext.i8.i32($i217);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i222 := $add.i32($i220, $i221);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i223 := $trunc.i32.i8($i222);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($p0, $mul.ref(30, 1));
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i225 := $load.i8($M.0, $p224);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i226 := $zext.i8.i32($i225);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i227 := $zext.i8.i32($i223);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i228 := $add.i32($i226, $i227);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i229 := $trunc.i32.i8($i228);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($p0, $mul.ref(31, 1));
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i231 := $load.i8($M.0, $p230);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i232 := $zext.i8.i32($i231);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i233 := $zext.i8.i32($i229);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i234 := $add.i32($i232, $i233);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i235 := $trunc.i32.i8($i234);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($p0, $mul.ref(32, 1));
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i237 := $load.i8($M.0, $p236);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i238 := $zext.i8.i32($i237);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i239 := $zext.i8.i32($i235);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i240 := $add.i32($i238, $i239);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i241 := $trunc.i32.i8($i240);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($p0, $mul.ref(33, 1));
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i243 := $load.i8($M.0, $p242);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i244 := $zext.i8.i32($i243);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i245 := $zext.i8.i32($i241);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i246 := $add.i32($i244, $i245);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i247 := $trunc.i32.i8($i246);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($p0, $mul.ref(34, 1));
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i249 := $load.i8($M.0, $p248);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i250 := $zext.i8.i32($i249);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i251 := $zext.i8.i32($i247);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i252 := $add.i32($i250, $i251);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i253 := $trunc.i32.i8($i252);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($p0, $mul.ref(35, 1));
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i255 := $load.i8($M.0, $p254);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i256 := $zext.i8.i32($i255);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i257 := $zext.i8.i32($i253);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i258 := $add.i32($i256, $i257);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i259 := $trunc.i32.i8($i258);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($p0, $mul.ref(36, 1));
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i261 := $load.i8($M.0, $p260);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i262 := $zext.i8.i32($i261);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i263 := $zext.i8.i32($i259);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i264 := $add.i32($i262, $i263);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i265 := $trunc.i32.i8($i264);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($p0, $mul.ref(37, 1));
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i267 := $load.i8($M.0, $p266);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i268 := $zext.i8.i32($i267);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i269 := $zext.i8.i32($i265);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i270 := $add.i32($i268, $i269);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i271 := $trunc.i32.i8($i270);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($p0, $mul.ref(38, 1));
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i273 := $load.i8($M.0, $p272);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i274 := $zext.i8.i32($i273);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i275 := $zext.i8.i32($i271);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i276 := $add.i32($i274, $i275);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i277 := $trunc.i32.i8($i276);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($p0, $mul.ref(39, 1));
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i279 := $load.i8($M.0, $p278);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i280 := $zext.i8.i32($i279);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i281 := $zext.i8.i32($i277);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i282 := $add.i32($i280, $i281);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i283 := $trunc.i32.i8($i282);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($p0, $mul.ref(40, 1));
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i285 := $load.i8($M.0, $p284);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i286 := $zext.i8.i32($i285);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $i287 := $zext.i8.i32($i283);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i288 := $add.i32($i286, $i287);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i289 := $trunc.i32.i8($i288);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($p0, $mul.ref(41, 1));
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $i291 := $load.i8($M.0, $p290);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i292 := $zext.i8.i32($i291);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i293 := $zext.i8.i32($i289);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i294 := $add.i32($i292, $i293);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i295 := $trunc.i32.i8($i294);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($p0, $mul.ref(42, 1));
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i297 := $load.i8($M.0, $p296);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i298 := $zext.i8.i32($i297);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i299 := $zext.i8.i32($i295);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i300 := $add.i32($i298, $i299);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $i301 := $trunc.i32.i8($i300);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($p0, $mul.ref(43, 1));
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i303 := $load.i8($M.0, $p302);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i304 := $zext.i8.i32($i303);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i305 := $zext.i8.i32($i301);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i306 := $add.i32($i304, $i305);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i307 := $trunc.i32.i8($i306);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($p0, $mul.ref(44, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $i309 := $load.i8($M.0, $p308);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i310 := $zext.i8.i32($i309);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i311 := $zext.i8.i32($i307);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i312 := $add.i32($i310, $i311);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i313 := $trunc.i32.i8($i312);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($p0, $mul.ref(45, 1));
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i315 := $load.i8($M.0, $p314);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $i316 := $zext.i8.i32($i315);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $i317 := $zext.i8.i32($i313);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i318 := $add.i32($i316, $i317);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i319 := $trunc.i32.i8($i318);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($p0, $mul.ref(46, 1));
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i321 := $load.i8($M.0, $p320);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i322 := $zext.i8.i32($i321);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i323 := $zext.i8.i32($i319);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i324 := $add.i32($i322, $i323);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i325 := $trunc.i32.i8($i324);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($p0, $mul.ref(47, 1));
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i327 := $load.i8($M.0, $p326);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i328 := $zext.i8.i32($i327);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i329 := $zext.i8.i32($i325);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i330 := $add.i32($i328, $i329);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i331 := $trunc.i32.i8($i330);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($p0, $mul.ref(48, 1));
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i333 := $load.i8($M.0, $p332);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i334 := $zext.i8.i32($i333);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $i335 := $zext.i8.i32($i331);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i336 := $add.i32($i334, $i335);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i337 := $trunc.i32.i8($i336);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($p0, $mul.ref(49, 1));
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i339 := $load.i8($M.0, $p338);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i340 := $zext.i8.i32($i339);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i341 := $zext.i8.i32($i337);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i342 := $add.i32($i340, $i341);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $i343 := $trunc.i32.i8($i342);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($p0, $mul.ref(50, 1));
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i345 := $load.i8($M.0, $p344);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i346 := $zext.i8.i32($i345);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i347 := $zext.i8.i32($i343);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i348 := $add.i32($i346, $i347);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i349 := $trunc.i32.i8($i348);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($p0, $mul.ref(51, 1));
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i351 := $load.i8($M.0, $p350);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i352 := $zext.i8.i32($i351);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i353 := $zext.i8.i32($i349);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i354 := $add.i32($i352, $i353);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i355 := $trunc.i32.i8($i354);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($p0, $mul.ref(52, 1));
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $i357 := $load.i8($M.0, $p356);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $i358 := $zext.i8.i32($i357);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i359 := $zext.i8.i32($i355);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i360 := $add.i32($i358, $i359);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i361 := $trunc.i32.i8($i360);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($p0, $mul.ref(53, 1));
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i363 := $load.i8($M.0, $p362);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i364 := $zext.i8.i32($i363);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i365 := $zext.i8.i32($i361);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $i366 := $add.i32($i364, $i365);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i367 := $trunc.i32.i8($i366);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($p0, $mul.ref(54, 1));
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i369 := $load.i8($M.0, $p368);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i370 := $zext.i8.i32($i369);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i371 := $zext.i8.i32($i367);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $i372 := $add.i32($i370, $i371);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i373 := $trunc.i32.i8($i372);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($p0, $mul.ref(55, 1));
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i375 := $load.i8($M.0, $p374);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i376 := $zext.i8.i32($i375);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i377 := $zext.i8.i32($i373);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i378 := $add.i32($i376, $i377);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i379 := $trunc.i32.i8($i378);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($p0, $mul.ref(56, 1));
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $i381 := $load.i8($M.0, $p380);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i382 := $zext.i8.i32($i381);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i383 := $zext.i8.i32($i379);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i384 := $add.i32($i382, $i383);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i385 := $trunc.i32.i8($i384);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($p0, $mul.ref(57, 1));
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i387 := $load.i8($M.0, $p386);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i388 := $zext.i8.i32($i387);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i389 := $zext.i8.i32($i385);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i390 := $add.i32($i388, $i389);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i391 := $trunc.i32.i8($i390);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($p0, $mul.ref(58, 1));
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i393 := $load.i8($M.0, $p392);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $i394 := $zext.i8.i32($i393);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i395 := $zext.i8.i32($i391);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i396 := $add.i32($i394, $i395);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i397 := $trunc.i32.i8($i396);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($p0, $mul.ref(59, 1));
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i399 := $load.i8($M.0, $p398);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i400 := $zext.i8.i32($i399);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i401 := $zext.i8.i32($i397);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i402 := $add.i32($i400, $i401);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i403 := $trunc.i32.i8($i402);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($p0, $mul.ref(60, 1));
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $i405 := $load.i8($M.0, $p404);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i406 := $zext.i8.i32($i405);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i407 := $zext.i8.i32($i403);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i408 := $add.i32($i406, $i407);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i409 := $trunc.i32.i8($i408);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($p0, $mul.ref(61, 1));
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i411 := $load.i8($M.0, $p410);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i412 := $zext.i8.i32($i411);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i413 := $zext.i8.i32($i409);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i414 := $add.i32($i412, $i413);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $i415 := $trunc.i32.i8($i414);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($p0, $mul.ref(62, 1));
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i417 := $load.i8($M.0, $p416);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i418 := $zext.i8.i32($i417);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i419 := $zext.i8.i32($i415);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i420 := $add.i32($i418, $i419);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i421 := $trunc.i32.i8($i420);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($p0, $mul.ref(63, 1));
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i423 := $load.i8($M.0, $p422);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $i424 := $zext.i8.i32($i423);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $i425 := $zext.i8.i32($i421);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i426 := $add.i32($i424, $i425);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i427 := $trunc.i32.i8($i426);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($p0, $mul.ref(64, 1));
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $i429 := $load.i8($M.0, $p428);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i430 := $zext.i8.i32($i429);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i431 := $zext.i8.i32($i427);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i432 := $add.i32($i430, $i431);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i433 := $trunc.i32.i8($i432);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($p0, $mul.ref(65, 1));
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $i435 := $load.i8($M.0, $p434);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i436 := $zext.i8.i32($i435);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i437 := $zext.i8.i32($i433);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i438 := $add.i32($i436, $i437);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i439 := $trunc.i32.i8($i438);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($p0, $mul.ref(66, 1));
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i441 := $load.i8($M.0, $p440);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i442 := $zext.i8.i32($i441);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i443 := $zext.i8.i32($i439);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i444 := $add.i32($i442, $i443);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i445 := $trunc.i32.i8($i444);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($p0, $mul.ref(67, 1));
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $i447 := $load.i8($M.0, $p446);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i448 := $zext.i8.i32($i447);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $i449 := $zext.i8.i32($i445);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $i450 := $add.i32($i448, $i449);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i451 := $trunc.i32.i8($i450);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($p0, $mul.ref(68, 1));
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $i453 := $load.i8($M.0, $p452);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i454 := $zext.i8.i32($i453);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $i455 := $zext.i8.i32($i451);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i456 := $add.i32($i454, $i455);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i457 := $trunc.i32.i8($i456);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($p0, $mul.ref(69, 1));
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $i459 := $load.i8($M.0, $p458);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i460 := $zext.i8.i32($i459);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $i461 := $zext.i8.i32($i457);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i462 := $add.i32($i460, $i461);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i463 := $trunc.i32.i8($i462);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p464 := $add.ref($p0, $mul.ref(70, 1));
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i465 := $load.i8($M.0, $p464);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $i466 := $zext.i8.i32($i465);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i467 := $zext.i8.i32($i463);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i468 := $add.i32($i466, $i467);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i469 := $trunc.i32.i8($i468);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($p0, $mul.ref(71, 1));
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i471 := $load.i8($M.0, $p470);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i472 := $zext.i8.i32($i471);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i473 := $zext.i8.i32($i469);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $i474 := $add.i32($i472, $i473);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i475 := $trunc.i32.i8($i474);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($p0, $mul.ref(72, 1));
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i477 := $load.i8($M.0, $p476);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i478 := $zext.i8.i32($i477);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i479 := $zext.i8.i32($i475);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i480 := $add.i32($i478, $i479);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i481 := $trunc.i32.i8($i480);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($p0, $mul.ref(73, 1));
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i483 := $load.i8($M.0, $p482);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $i484 := $zext.i8.i32($i483);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $i485 := $zext.i8.i32($i481);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i486 := $add.i32($i484, $i485);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i487 := $trunc.i32.i8($i486);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($p0, $mul.ref(74, 1));
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i489 := $load.i8($M.0, $p488);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i490 := $zext.i8.i32($i489);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i491 := $zext.i8.i32($i487);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i492 := $add.i32($i490, $i491);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i493 := $trunc.i32.i8($i492);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($p0, $mul.ref(75, 1));
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i495 := $load.i8($M.0, $p494);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i496 := $zext.i8.i32($i495);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i497 := $zext.i8.i32($i493);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i498 := $add.i32($i496, $i497);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i499 := $trunc.i32.i8($i498);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p500 := $add.ref($p0, $mul.ref(76, 1));
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i501 := $load.i8($M.0, $p500);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i502 := $zext.i8.i32($i501);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i503 := $zext.i8.i32($i499);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i504 := $add.i32($i502, $i503);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i505 := $trunc.i32.i8($i504);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($p0, $mul.ref(77, 1));
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i507 := $load.i8($M.0, $p506);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $i508 := $zext.i8.i32($i507);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i509 := $zext.i8.i32($i505);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i510 := $add.i32($i508, $i509);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i511 := $trunc.i32.i8($i510);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p512 := $add.ref($p0, $mul.ref(78, 1));
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i513 := $load.i8($M.0, $p512);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i514 := $zext.i8.i32($i513);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i515 := $zext.i8.i32($i511);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i516 := $add.i32($i514, $i515);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i517 := $trunc.i32.i8($i516);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($p0, $mul.ref(79, 1));
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i519 := $load.i8($M.0, $p518);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i520 := $zext.i8.i32($i519);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i521 := $zext.i8.i32($i517);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i522 := $add.i32($i520, $i521);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i523 := $trunc.i32.i8($i522);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p524 := $add.ref($p0, $mul.ref(80, 1));
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i525 := $load.i8($M.0, $p524);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i526 := $zext.i8.i32($i525);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i527 := $zext.i8.i32($i523);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i528 := $add.i32($i526, $i527);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i529 := $trunc.i32.i8($i528);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($p0, $mul.ref(81, 1));
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i531 := $load.i8($M.0, $p530);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $i532 := $zext.i8.i32($i531);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i533 := $zext.i8.i32($i529);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i534 := $add.i32($i532, $i533);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $i535 := $trunc.i32.i8($i534);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($p0, $mul.ref(82, 1));
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i537 := $load.i8($M.0, $p536);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i538 := $zext.i8.i32($i537);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i539 := $zext.i8.i32($i535);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i540 := $add.i32($i538, $i539);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i541 := $trunc.i32.i8($i540);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($p0, $mul.ref(83, 1));
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i543 := $load.i8($M.0, $p542);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i544 := $zext.i8.i32($i543);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i545 := $zext.i8.i32($i541);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i546 := $add.i32($i544, $i545);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i547 := $trunc.i32.i8($i546);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p548 := $add.ref($p0, $mul.ref(84, 1));
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i549 := $load.i8($M.0, $p548);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i550 := $zext.i8.i32($i549);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i551 := $zext.i8.i32($i547);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i552 := $add.i32($i550, $i551);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $i553 := $trunc.i32.i8($i552);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($p0, $mul.ref(85, 1));
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i555 := $load.i8($M.0, $p554);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i556 := $zext.i8.i32($i555);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i557 := $zext.i8.i32($i553);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i558 := $add.i32($i556, $i557);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i559 := $trunc.i32.i8($i558);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($p0, $mul.ref(86, 1));
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i561 := $load.i8($M.0, $p560);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i562 := $zext.i8.i32($i561);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i563 := $zext.i8.i32($i559);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $i564 := $add.i32($i562, $i563);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i565 := $trunc.i32.i8($i564);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p566 := $add.ref($p0, $mul.ref(87, 1));
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i567 := $load.i8($M.0, $p566);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i568 := $zext.i8.i32($i567);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i569 := $zext.i8.i32($i565);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i570 := $add.i32($i568, $i569);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i571 := $trunc.i32.i8($i570);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p572 := $add.ref($p0, $mul.ref(88, 1));
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $i573 := $load.i8($M.0, $p572);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i574 := $zext.i8.i32($i573);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $i575 := $zext.i8.i32($i571);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $i576 := $add.i32($i574, $i575);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i577 := $trunc.i32.i8($i576);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($p0, $mul.ref(89, 1));
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $i579 := $load.i8($M.0, $p578);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i580 := $zext.i8.i32($i579);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i581 := $zext.i8.i32($i577);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $i582 := $add.i32($i580, $i581);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $i583 := $trunc.i32.i8($i582);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p584 := $add.ref($p0, $mul.ref(90, 1));
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i585 := $load.i8($M.0, $p584);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i586 := $zext.i8.i32($i585);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i587 := $zext.i8.i32($i583);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i588 := $add.i32($i586, $i587);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i589 := $trunc.i32.i8($i588);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p590 := $add.ref($p0, $mul.ref(91, 1));
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i591 := $load.i8($M.0, $p590);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i592 := $zext.i8.i32($i591);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i593 := $zext.i8.i32($i589);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $i594 := $add.i32($i592, $i593);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $i595 := $trunc.i32.i8($i594);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($p0, $mul.ref(92, 1));
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i597 := $load.i8($M.0, $p596);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i598 := $zext.i8.i32($i597);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i599 := $zext.i8.i32($i595);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i600 := $add.i32($i598, $i599);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i601 := $trunc.i32.i8($i600);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p602 := $add.ref($p0, $mul.ref(93, 1));
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i603 := $load.i8($M.0, $p602);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i604 := $zext.i8.i32($i603);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i605 := $zext.i8.i32($i601);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i606 := $add.i32($i604, $i605);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i607 := $trunc.i32.i8($i606);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p608 := $add.ref($p0, $mul.ref(94, 1));
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i609 := $load.i8($M.0, $p608);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i610 := $zext.i8.i32($i609);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i611 := $zext.i8.i32($i607);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i612 := $add.i32($i610, $i611);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i613 := $trunc.i32.i8($i612);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $p614 := $add.ref($p0, $mul.ref(95, 1));
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i615 := $load.i8($M.0, $p614);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i616 := $zext.i8.i32($i615);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i617 := $zext.i8.i32($i613);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i618 := $add.i32($i616, $i617);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i619 := $trunc.i32.i8($i618);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p620 := $add.ref($p0, $mul.ref(96, 1));
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i621 := $load.i8($M.0, $p620);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i622 := $zext.i8.i32($i621);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i623 := $zext.i8.i32($i619);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i624 := $add.i32($i622, $i623);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i625 := $trunc.i32.i8($i624);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p626 := $add.ref($p0, $mul.ref(97, 1));
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i627 := $load.i8($M.0, $p626);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i628 := $zext.i8.i32($i627);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i629 := $zext.i8.i32($i625);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i630 := $add.i32($i628, $i629);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i631 := $trunc.i32.i8($i630);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($p0, $mul.ref(98, 1));
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i633 := $load.i8($M.0, $p632);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i634 := $zext.i8.i32($i633);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i635 := $zext.i8.i32($i631);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $i636 := $add.i32($i634, $i635);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i637 := $trunc.i32.i8($i636);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p638 := $add.ref($p0, $mul.ref(99, 1));
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i639 := $load.i8($M.0, $p638);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i640 := $zext.i8.i32($i639);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i641 := $zext.i8.i32($i637);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i642 := $add.i32($i640, $i641);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i643 := $trunc.i32.i8($i642);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $p644 := $add.ref($p0, $mul.ref(100, 1));
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i645 := $load.i8($M.0, $p644);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i646 := $zext.i8.i32($i645);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i647 := $zext.i8.i32($i643);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i648 := $add.i32($i646, $i647);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i649 := $trunc.i32.i8($i648);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p650 := $add.ref($p0, $mul.ref(101, 1));
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i651 := $load.i8($M.0, $p650);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i652 := $zext.i8.i32($i651);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i653 := $zext.i8.i32($i649);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i654 := $add.i32($i652, $i653);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i655 := $trunc.i32.i8($i654);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $p656 := $add.ref($p0, $mul.ref(102, 1));
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i657 := $load.i8($M.0, $p656);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $i658 := $zext.i8.i32($i657);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $i659 := $zext.i8.i32($i655);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $i660 := $add.i32($i658, $i659);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $i661 := $trunc.i32.i8($i660);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p662 := $add.ref($p0, $mul.ref(103, 1));
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $i663 := $load.i8($M.0, $p662);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i664 := $zext.i8.i32($i663);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $i665 := $zext.i8.i32($i661);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i666 := $add.i32($i664, $i665);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i667 := $trunc.i32.i8($i666);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p668 := $add.ref($p0, $mul.ref(104, 1));
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $i669 := $load.i8($M.0, $p668);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i670 := $zext.i8.i32($i669);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i671 := $zext.i8.i32($i667);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i672 := $add.i32($i670, $i671);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $i673 := $trunc.i32.i8($i672);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p674 := $add.ref($p0, $mul.ref(105, 1));
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i675 := $load.i8($M.0, $p674);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i676 := $zext.i8.i32($i675);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $i677 := $zext.i8.i32($i673);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i678 := $add.i32($i676, $i677);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i679 := $trunc.i32.i8($i678);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $p680 := $add.ref($p0, $mul.ref(106, 1));
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i681 := $load.i8($M.0, $p680);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $i682 := $zext.i8.i32($i681);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i683 := $zext.i8.i32($i679);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i684 := $add.i32($i682, $i683);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $i685 := $trunc.i32.i8($i684);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($p0, $mul.ref(107, 1));
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $i687 := $load.i8($M.0, $p686);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i688 := $zext.i8.i32($i687);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $i689 := $zext.i8.i32($i685);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i690 := $add.i32($i688, $i689);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i691 := $trunc.i32.i8($i690);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $p692 := $add.ref($p0, $mul.ref(108, 1));
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i693 := $load.i8($M.0, $p692);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i694 := $zext.i8.i32($i693);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i695 := $zext.i8.i32($i691);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $i696 := $add.i32($i694, $i695);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i697 := $trunc.i32.i8($i696);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($p0, $mul.ref(109, 1));
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i699 := $load.i8($M.0, $p698);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i700 := $zext.i8.i32($i699);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i701 := $zext.i8.i32($i697);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i702 := $add.i32($i700, $i701);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i703 := $trunc.i32.i8($i702);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($p0, $mul.ref(110, 1));
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i705 := $load.i8($M.0, $p704);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i706 := $zext.i8.i32($i705);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i707 := $zext.i8.i32($i703);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i708 := $add.i32($i706, $i707);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i709 := $trunc.i32.i8($i708);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p710 := $add.ref($p0, $mul.ref(111, 1));
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i711 := $load.i8($M.0, $p710);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $i712 := $zext.i8.i32($i711);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i713 := $zext.i8.i32($i709);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $i714 := $add.i32($i712, $i713);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $i715 := $trunc.i32.i8($i714);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $p716 := $add.ref($p0, $mul.ref(112, 1));
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i717 := $load.i8($M.0, $p716);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $i718 := $zext.i8.i32($i717);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i719 := $zext.i8.i32($i715);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i720 := $add.i32($i718, $i719);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i721 := $trunc.i32.i8($i720);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $p722 := $add.ref($p0, $mul.ref(113, 1));
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i723 := $load.i8($M.0, $p722);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i724 := $zext.i8.i32($i723);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i725 := $zext.i8.i32($i721);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i726 := $add.i32($i724, $i725);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $i727 := $trunc.i32.i8($i726);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p728 := $add.ref($p0, $mul.ref(114, 1));
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i729 := $load.i8($M.0, $p728);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i730 := $zext.i8.i32($i729);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i731 := $zext.i8.i32($i727);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i732 := $add.i32($i730, $i731);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i733 := $trunc.i32.i8($i732);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $p734 := $add.ref($p0, $mul.ref(115, 1));
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i735 := $load.i8($M.0, $p734);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i736 := $zext.i8.i32($i735);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i737 := $zext.i8.i32($i733);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i738 := $add.i32($i736, $i737);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i739 := $trunc.i32.i8($i738);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $p740 := $add.ref($p0, $mul.ref(116, 1));
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i741 := $load.i8($M.0, $p740);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i742 := $zext.i8.i32($i741);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i743 := $zext.i8.i32($i739);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $i744 := $add.i32($i742, $i743);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i745 := $trunc.i32.i8($i744);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $p746 := $add.ref($p0, $mul.ref(117, 1));
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i747 := $load.i8($M.0, $p746);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i748 := $zext.i8.i32($i747);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i749 := $zext.i8.i32($i745);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i750 := $add.i32($i748, $i749);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i751 := $trunc.i32.i8($i750);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p752 := $add.ref($p0, $mul.ref(118, 1));
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i753 := $load.i8($M.0, $p752);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i754 := $zext.i8.i32($i753);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i755 := $zext.i8.i32($i751);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i756 := $add.i32($i754, $i755);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i757 := $trunc.i32.i8($i756);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $p758 := $add.ref($p0, $mul.ref(119, 1));
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i759 := $load.i8($M.0, $p758);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $i760 := $zext.i8.i32($i759);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $i761 := $zext.i8.i32($i757);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i762 := $add.i32($i760, $i761);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $i763 := $trunc.i32.i8($i762);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $p764 := $add.ref($p0, $mul.ref(120, 1));
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i765 := $load.i8($M.0, $p764);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i766 := $zext.i8.i32($i765);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i767 := $zext.i8.i32($i763);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i768 := $add.i32($i766, $i767);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i769 := $trunc.i32.i8($i768);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p770 := $add.ref($p0, $mul.ref(121, 1));
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i771 := $load.i8($M.0, $p770);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i772 := $zext.i8.i32($i771);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i773 := $zext.i8.i32($i769);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i774 := $add.i32($i772, $i773);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i775 := $trunc.i32.i8($i774);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $p776 := $add.ref($p0, $mul.ref(122, 1));
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i777 := $load.i8($M.0, $p776);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i778 := $zext.i8.i32($i777);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i779 := $zext.i8.i32($i775);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i780 := $add.i32($i778, $i779);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i781 := $trunc.i32.i8($i780);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $p782 := $add.ref($p0, $mul.ref(123, 1));
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i783 := $load.i8($M.0, $p782);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i784 := $zext.i8.i32($i783);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i785 := $zext.i8.i32($i781);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i786 := $add.i32($i784, $i785);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $i787 := $trunc.i32.i8($i786);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $p788 := $add.ref($p0, $mul.ref(124, 1));
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i789 := $load.i8($M.0, $p788);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $i790 := $zext.i8.i32($i789);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i791 := $zext.i8.i32($i787);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i792 := $add.i32($i790, $i791);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i793 := $trunc.i32.i8($i792);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p794 := $add.ref($p0, $mul.ref(125, 1));
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $i795 := $load.i8($M.0, $p794);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i796 := $zext.i8.i32($i795);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i797 := $zext.i8.i32($i793);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i798 := $add.i32($i796, $i797);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i799 := $trunc.i32.i8($i798);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $p800 := $add.ref($p0, $mul.ref(126, 1));
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i801 := $load.i8($M.0, $p800);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i802 := $zext.i8.i32($i801);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i803 := $zext.i8.i32($i799);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $i804 := $add.i32($i802, $i803);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i804);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i46);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, $i45);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p0, $mul.ref(127, 1));
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, $i48);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb186:
    assume $i826 == 1;
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i827 := edid_is_ascii_block($p824);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i828 := $eq.i32($i827, 0);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i828} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i828 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb189:
    assume $i828 == 1;
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i829 := edid_is_monitor_block($p824);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $i830 := $eq.i32($i829, 0);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i830} true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i830 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb192:
    assume $i830 == 1;
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $i831 := edid_is_timing_block($p824);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $i832 := $eq.i32($i831, 0);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $p29 := $p824;
    assume {:branchcond $i832} true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i832 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb195:
    assume {:verifier.code 0} true;
    assume $i832 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 0);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref(1, 1));
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 0);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p29, $mul.ref(2, 1));
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, 0);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p29, $mul.ref(3, 1));
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $sub.i8(0, 3));
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p29, $mul.ref(4, 1));
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 0);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p29, $mul.ref(5, 1));
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 60);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p29, $mul.ref(6, 1));
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, 60);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p29, $mul.ref(7, 1));
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, 30);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p29, $mul.ref(8, 1));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, 75);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p29, $mul.ref(9, 1));
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, 17);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p29, $mul.ref(10, 1));
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 0);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb173:
    assume $i816 == 1;
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $i817 := edid_is_ascii_block($p814);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i818 := $eq.i32($i817, 0);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i818} true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i818 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb176:
    assume $i818 == 1;
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i819 := edid_is_monitor_block($p814);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i820 := $eq.i32($i819, 0);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i820} true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i820 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb179:
    assume $i820 == 1;
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $i821 := edid_is_timing_block($p814);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $i822 := $eq.i32($i821, 0);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $p29 := $p814;
    assume {:branchcond $i822} true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i822 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb182:
    assume {:verifier.code 0} true;
    assume $i822 == 1;
    goto $bb21;

  $bb160:
    assume $i806 == 1;
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $i807 := edid_is_ascii_block($p41);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i808 := $eq.i32($i807, 0);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i808} true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i808 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb163:
    assume $i808 == 1;
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i809 := edid_is_monitor_block($p41);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $i810 := $eq.i32($i809, 0);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i810} true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i810 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb166:
    assume $i810 == 1;
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $i811 := edid_is_timing_block($p41);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i812 := $eq.i32($i811, 0);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p29 := $p41;
    assume {:branchcond $i812} true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i812 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb169:
    assume {:verifier.code 0} true;
    assume $i812 == 1;
    goto $bb21;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $i23 := edid_is_ascii_block($p20);
    call {:si_unique_call 425} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb16:
    assume $i24 == 1;
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $i25 := edid_is_monitor_block($p20);
    call {:si_unique_call 427} {:cexpr "tmp___1"} boogie_si_record_i32($i25);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb18:
    assume $i26 == 1;
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $i27 := edid_is_timing_block($p20);
    call {:si_unique_call 429} {:cexpr "tmp___2"} boogie_si_record_i32($i27);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $p29 := $p20;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb21;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} vslice_dummy_var_147 := printk.ref(.str.39);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p0, $mul.ref(20, 1));
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 127);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, $i12);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p0, $mul.ref(127, 1));
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 128);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p0, $mul.ref(127, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i17);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb9:
    assume $i5 == 1;
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} vslice_dummy_var_149 := printk.ref(.str.38);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.0;
    cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 421} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p0, edid_v1_header, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_35;
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const edid_is_serial_block: ref;

axiom edid_is_serial_block == $sub.ref(0, 390705);

procedure edid_is_serial_block($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation edid_is_serial_block($p0: ref) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 255);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb12;
}



const edid_is_ascii_block: ref;

axiom edid_is_ascii_block == $sub.ref(0, 391737);

procedure edid_is_ascii_block($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation edid_is_ascii_block($p0: ref) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 254);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb12;
}



const edid_is_monitor_block: ref;

axiom edid_is_monitor_block == $sub.ref(0, 392769);

procedure edid_is_monitor_block($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation edid_is_monitor_block($p0: ref) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 252);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb12;
}



const strncmp: ref;

axiom strncmp == $sub.ref(0, 393801);

procedure strncmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const edid_is_limits_block: ref;

axiom edid_is_limits_block == $sub.ref(0, 394833);

procedure edid_is_limits_block($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation edid_is_limits_block($p0: ref) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 253);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb12;
}



const fb_edid_to_monspecs: ref;

axiom fb_edid_to_monspecs == $sub.ref(0, 395865);

procedure fb_edid_to_monspecs($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.46, $CurrAddr;



implementation fb_edid_to_monspecs($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i37: i32;
  var $i46: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i32;
  var $i55: i16;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i4 := edid_checksum($p0);
    call {:si_unique_call 444} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $i6 := edid_check_header($p0);
    call {:si_unique_call 446} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.0;
    call {:si_unique_call 447} cmdloc_dummy_var_37 := $memset.i8(cmdloc_dummy_var_36, $p8, 0, 144, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_37;
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p0, $mul.ref(18, 1));
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(140, 1));
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i10);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p0, $mul.ref(19, 1));
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(141, 1));
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i13);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} parse_vendor_block($p15, $p1);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p0, $mul.ref(54, 1));
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} $i17 := edid_is_serial_block($p16);
    call {:si_unique_call 450} {:cexpr "tmp___3"} boogie_si_record_i32($i17);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i18 == 1);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $i21 := edid_is_ascii_block($p16);
    call {:si_unique_call 453} {:cexpr "tmp___2"} boogie_si_record_i32($i21);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i22 == 1);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $i25 := edid_is_monitor_block($p16);
    call {:si_unique_call 456} {:cexpr "tmp___1"} boogie_si_record_i32($i25);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    $i29 := $add.i64(54, 18);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p0, $mul.ref($i29, 1));
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i57 := edid_is_serial_block($p30);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i58 == 1);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i59 := edid_is_ascii_block($p30);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i60 == 1);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $i61 := edid_is_monitor_block($p30);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    $i69 := $add.i64($i29, 18);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p0, $mul.ref($i69, 1));
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $i71 := edid_is_serial_block($p70);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i72 == 1);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $i73 := edid_is_ascii_block($p70);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i74 == 1);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $i75 := edid_is_monitor_block($p70);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    $i83 := $add.i64($i69, 18);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p0, $mul.ref($i83, 1));
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $i85 := edid_is_serial_block($p84);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i86 == 1);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i87 := edid_is_ascii_block($p84);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i88 == 1);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $i89 := edid_is_monitor_block($p84);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} get_monspecs($p0, $p1);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $p32 := fb_create_modedb($p0, $p31, $p1);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(32, 1));
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p32);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $i36 := $ult.i32(0, $i35);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i46, 0);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb36:
    assume $i50 == 1;
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(138, 1));
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 65533);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(138, 1));
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p56, $i55);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb24:
    assume $i36 == 1;
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb27;

  $bb27:
    call $p38, $p39, $i40, $p42, $i43, $i44, $i45, $i47, $i48, $i49, $i37 := fb_edid_to_monspecs_loop_$bb27($p1, $p34, $p38, $p39, $i40, $p42, $i43, $i44, $i45, $i47, $i48, $i49, $i37);
    goto $bb27_last;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(32, 1));
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i37);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p39, $mul.ref($i40, 64)), $mul.ref(56, 1));
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 1);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i37, 1);
    call {:si_unique_call 461} {:cexpr "i"} boogie_si_record_i32($i47);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p34);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i49 := $ult.i32($i47, $i48);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i49 == 1);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb33:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i37 := $i47;
    goto $bb33_dummy;

  $bb29:
    assume $i45 == 1;
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $i46 := 1;
    goto $bb31;

  $bb63:
    assume $i90 == 1;
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(44, 1));
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} copy_string($p84, $p92);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb61:
    assume $i88 == 1;
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} copy_string($p84, $p94);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb59:
    assume $i86 == 1;
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(58, 1));
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} copy_string($p84, $p96);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb53:
    assume $i76 == 1;
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(44, 1));
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} copy_string($p70, $p78);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb51:
    assume $i74 == 1;
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} copy_string($p70, $p80);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb49:
    assume $i72 == 1;
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(58, 1));
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} copy_string($p70, $p82);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb43:
    assume $i62 == 1;
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(44, 1));
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} copy_string($p30, $p64);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb41:
    assume $i60 == 1;
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} copy_string($p30, $p66);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb39:
    assume $i58 == 1;
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(58, 1));
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} copy_string($p30, $p68);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb19:
    assume $i26 == 1;
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(44, 1));
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} copy_string($p16, $p28);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i22 == 1;
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} copy_string($p16, $p24);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i18 == 1;
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(58, 1));
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} copy_string($p16, $p20);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb33_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6602;
}



const parse_vendor_block: ref;

axiom parse_vendor_block == $sub.ref(0, 396897);

procedure parse_vendor_block($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation parse_vendor_block($p0: ref, $p1: ref)
{
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i8;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i8;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $p73: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p0);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 124);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $i5 := $ashr.i32($i4, 2);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 64);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i9);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p0);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 3);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i15 := $shl.i32($i14, 3);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i19 := $ashr.i32($i18, 5);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i15, $i21);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 64);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(40, 1)), $mul.ref(1, 1));
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, $i24);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 31);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, 64);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(40, 1)), $mul.ref(2, 1));
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, $i32);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(40, 1)), $mul.ref(3, 1));
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, 0);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $i43 := $shl.i32($i42, 8);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i39, $i43);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(92, 1));
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p0, $mul.ref(5, 1));
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i52 := $shl.i32($i51, 8);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i48, $i52);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p0, $mul.ref(6, 1));
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i57 := $shl.i32($i56, 16);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i53, $i57);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p0, $mul.ref(7, 1));
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i62 := $shl.i32($i61, 24);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i58, $i62);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i63);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p0, $mul.ref(9, 1));
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i67, 1990);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(100, 1));
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i68);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i72);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    return;
}



const copy_string: ref;

axiom copy_string == $sub.ref(0, 397929);

procedure copy_string($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation copy_string($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i8;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $i10: i32;
  var $p11: ref;
  var $i15: i32;
  var $i16: i1;
  var $i20: i32;
  var $i21: i1;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i8;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i8;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $i45: i8;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $i49: i64;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $i53: i8;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $i57: i64;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $i61: i8;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $i65: i64;
  var $p66: ref;
  var $i67: i64;
  var $p68: ref;
  var $i69: i8;
  var $i70: i8;
  var $i71: i32;
  var $i72: i1;
  var $i73: i64;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $i77: i8;
  var $i78: i8;
  var $i79: i32;
  var $i80: i1;
  var $i81: i64;
  var $p82: ref;
  var $i83: i64;
  var $p84: ref;
  var $i85: i8;
  var $i86: i8;
  var $i87: i32;
  var $i88: i1;
  var $i89: i64;
  var $p90: ref;
  var $i91: i64;
  var $p92: ref;
  var $i93: i8;
  var $i94: i8;
  var $i95: i32;
  var $i96: i1;
  var $i97: i64;
  var $p98: ref;
  var $i99: i64;
  var $p100: ref;
  var $i101: i8;
  var $i102: i8;
  var $i103: i32;
  var $i104: i1;
  var $i105: i64;
  var $p106: ref;
  var $i107: i64;
  var $p108: ref;
  var $i109: i8;
  var $i110: i8;
  var $i111: i32;
  var $i112: i1;
  var $i113: i64;
  var $p114: ref;
  var $i115: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p0, $mul.ref(5, 1));
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p2);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 10);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $i10, $p11 := 0, $p1;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 0);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i10, 1);
    call {:si_unique_call 479} {:cexpr "i"} boogie_si_record_i32($i15);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i10, 0);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i16 == 1;
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i17, $p18 := $i15, $p11;
    goto $bb12;

  $bb12:
    call $i20, $i21, $i17, $p18, $p19, $i22, $i23, $i24 := copy_string_loop_$bb12($i20, $i21, $i17, $p18, $p19, $i22, $i23, $i24);
    goto $bb12_last;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref($sub.ref(0, 1), 1));
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p19);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 32);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i24 == 1);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume $i24 == 1;
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 0);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i17, 1);
    call {:si_unique_call 480} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i17, 0);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i21 == 1);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i17, $p18 := $i20, $p19;
    goto $bb14_dummy;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref(1, 1));
    $i4 := $add.i64(5, 1);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p0, $mul.ref($i4, 1));
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p2);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i6);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p5);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 10);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $i10, $p11 := 1, $p3;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb5;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    $i25 := $add.i64(1, 1);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p1, $mul.ref($i25, 1));
    $i27 := $add.i64($i4, 1);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p0, $mul.ref($i27, 1));
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p5);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, $i29);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p28);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 10);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i10, $p11 := 2, $p26;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb5;

  $bb21:
    assume $i32 == 1;
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    $i33 := $add.i64($i25, 1);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p1, $mul.ref($i33, 1));
    $i35 := $add.i64($i27, 1);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p0, $mul.ref($i35, 1));
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p28);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, $i37);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p36);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 10);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $i10, $p11 := 3, $p34;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb5;

  $bb24:
    assume $i40 == 1;
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    $i41 := $add.i64($i33, 1);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p1, $mul.ref($i41, 1));
    $i43 := $add.i64($i35, 1);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p0, $mul.ref($i43, 1));
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p36);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, $i45);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p44);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 10);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $i10, $p11 := 4, $p42;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb5;

  $bb27:
    assume $i48 == 1;
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    $i49 := $add.i64($i41, 1);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p1, $mul.ref($i49, 1));
    $i51 := $add.i64($i43, 1);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p0, $mul.ref($i51, 1));
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p44);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, $i53);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p52);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 10);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $i10, $p11 := 5, $p50;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb5;

  $bb30:
    assume $i56 == 1;
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    $i57 := $add.i64($i49, 1);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p1, $mul.ref($i57, 1));
    $i59 := $add.i64($i51, 1);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p0, $mul.ref($i59, 1));
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p52);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, $i61);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p60);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 10);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $i10, $p11 := 6, $p58;
    assume {:branchcond $i64} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb5;

  $bb33:
    assume $i64 == 1;
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    $i65 := $add.i64($i57, 1);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p1, $mul.ref($i65, 1));
    $i67 := $add.i64($i59, 1);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p0, $mul.ref($i67, 1));
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p60);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, $i69);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p68);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 10);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $i10, $p11 := 7, $p66;
    assume {:branchcond $i72} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb5;

  $bb36:
    assume $i72 == 1;
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    $i73 := $add.i64($i65, 1);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p1, $mul.ref($i73, 1));
    $i75 := $add.i64($i67, 1);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p0, $mul.ref($i75, 1));
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p68);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, $i77);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p76);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 10);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $i10, $p11 := 8, $p74;
    assume {:branchcond $i80} true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb5;

  $bb39:
    assume $i80 == 1;
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    $i81 := $add.i64($i73, 1);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p1, $mul.ref($i81, 1));
    $i83 := $add.i64($i75, 1);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p0, $mul.ref($i83, 1));
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.0, $p76);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, $i85);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.0, $p84);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 10);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i10, $p11 := 9, $p82;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb5;

  $bb42:
    assume $i88 == 1;
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    $i89 := $add.i64($i81, 1);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p1, $mul.ref($i89, 1));
    $i91 := $add.i64($i83, 1);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p0, $mul.ref($i91, 1));
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.0, $p84);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p82, $i93);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p92);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 10);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $i10, $p11 := 10, $p90;
    assume {:branchcond $i96} true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i96 == 1);
    goto $bb5;

  $bb45:
    assume $i96 == 1;
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    $i97 := $add.i64($i89, 1);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p1, $mul.ref($i97, 1));
    $i99 := $add.i64($i91, 1);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p0, $mul.ref($i99, 1));
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.0, $p92);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p90, $i101);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.0, $p100);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 10);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i10, $p11 := 11, $p98;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb5;

  $bb48:
    assume $i104 == 1;
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    $i105 := $add.i64($i97, 1);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p1, $mul.ref($i105, 1));
    $i107 := $add.i64($i99, 1);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p0, $mul.ref($i107, 1));
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.0, $p100);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p98, $i109);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.0, $p108);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i32($i110);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 10);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i10, $p11 := 12, $p106;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i112 == 1);
    goto $bb5;

  $bb51:
    assume $i112 == 1;
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    $i113 := $add.i64($i105, 1);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p1, $mul.ref($i113, 1));
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.0, $p108);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, $i115);
    assume {:verifier.code 0} true;
    $i10, $p11 := 13, $p114;
    goto $bb5;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6817;
}



const get_monspecs: ref;

axiom get_monspecs == $sub.ref(0, 398961);

procedure get_monspecs($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.46, $CurrAddr;



implementation get_monspecs($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $i15: i16;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $i29: i32;
  var $i30: i16;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $i36: i16;
  var $p37: ref;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $i41: i32;
  var $i42: i16;
  var $p43: ref;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $i47: i32;
  var $i48: i16;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i16;
  var $i60: i32;
  var $i61: i32;
  var $i62: i16;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i16;
  var $i69: i32;
  var $i70: i32;
  var $i71: i16;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $i79: i32;
  var $i80: i16;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i16;
  var $i87: i32;
  var $i88: i32;
  var $i89: i16;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $i95: i16;
  var $i96: i32;
  var $i97: i32;
  var $i98: i16;
  var $p99: ref;
  var $i100: i64;
  var $p101: ref;
  var $i102: i8;
  var $p103: ref;
  var $i104: i64;
  var $p105: ref;
  var $i106: i8;
  var $p107: ref;
  var $i108: i64;
  var $p109: ref;
  var $i110: i8;
  var $i111: i16;
  var $i112: i32;
  var $i113: i32;
  var $i114: i16;
  var $p115: ref;
  var $i116: i64;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i8;
  var $i121: i64;
  var $p122: ref;
  var $i123: i8;
  var $i124: i32;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $p131: ref;
  var $i132: i16;
  var $i133: i32;
  var $i134: i32;
  var $i135: i16;
  var $p136: ref;
  var $p137: ref;
  var $i138: i16;
  var $i139: i32;
  var $i140: i32;
  var $i141: i16;
  var $p142: ref;
  var $p143: ref;
  var $i144: i16;
  var $i145: i32;
  var $i146: i32;
  var $i147: i16;
  var $p148: ref;
  var $p149: ref;
  var $i150: i16;
  var $i151: i32;
  var $i152: i32;
  var $i153: i16;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $p157: ref;
  var $i158: i8;
  var $i159: i32;
  var $i160: i32;
  var $i161: i8;
  var $i162: i32;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $i166: i16;
  var $i167: i32;
  var $i168: i32;
  var $i169: i16;
  var $p170: ref;
  var $i171: i32;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $i175: i16;
  var $i176: i32;
  var $i177: i32;
  var $i178: i16;
  var $p179: ref;
  var $i180: i32;
  var $i181: i32;
  var $i182: i1;
  var $p184: ref;
  var $i185: i8;
  var $i186: i8;
  var $i187: i8;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p0, $mul.ref(20, 1));
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} vslice_dummy_var_150 := fb_get_monitor_limits($p0, $p1);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p2);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 128);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    call {:si_unique_call 482} {:cexpr "c"} boogie_si_record_i8($i7);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(124, 1));
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, 0);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i7);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p2);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 96);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $i20 := $ashr.i32($i19, 5);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i20, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i20, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p2);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 15);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    call {:si_unique_call 483} {:cexpr "c"} boogie_si_record_i8($i53);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p54, 0);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i53);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i55, 16);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i53);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 8);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i53);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, 4);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i53);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, 2);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i53);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $i92 := $and.i32($i91, 1);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    $i100 := $add.i64(20, 1);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p0, $mul.ref($i100, 1));
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.0, $p101);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(142, 1));
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p103, $i102);
    $i104 := $add.i64(20, 2);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p0, $mul.ref($i104, 1));
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(143, 1));
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p107, $i106);
    $i108 := $add.i64(20, 3);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p0, $mul.ref($i108, 1));
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.0, $p109);
    call {:si_unique_call 484} {:cexpr "c"} boogie_si_record_i8($i110);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i16($i110);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $i112 := $zext.i16.i32($i111);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i112, 100);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i16($i113);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(134, 1));
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p115, $i114);
    $i116 := $add.i64(20, 4);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p0, $mul.ref($i116, 1));
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.0, $p117);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i32.i8($i119);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} get_dpms_capabilities($i120, $p1);
    $i121 := $add.i64(20, 4);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p0, $mul.ref($i121, 1));
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.0, $p122);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i123);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $i125 := $and.i32($i124, 24);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i126 := $ashr.i32($i125, 3);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i126, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i126, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i126, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i129 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(124, 1));
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i150 := $load.i16($M.0, $p149);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $i151 := $zext.i16.i32($i150);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $i152 := $or.i32($i151, 256);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i32.i16($i152);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(124, 1));
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p154, $i153);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} get_chroma($p2, $p1);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(138, 1));
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p155, 0);
    $i156 := $add.i64(20, 4);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($p0, $mul.ref($i156, 1));
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $i158 := $load.i8($M.0, $p157);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i159 := $zext.i8.i32($i158);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i160 := $and.i32($i159, 7);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $i161 := $trunc.i32.i8($i160);
    call {:si_unique_call 487} {:cexpr "c"} boogie_si_record_i8($i161);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $i162 := $zext.i8.i32($i161);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $i163 := $and.i32($i162, 4);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i163, 0);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i32($i161);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $i172 := $and.i32($i171, 2);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i172, 0);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i180 := $zext.i8.i32($i161);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $i181 := $and.i32($i180, 1);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i182 := $ne.i32($i181, 0);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    return;

  $bb51:
    assume $i182 == 1;
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} vslice_dummy_var_151 := printk.ref(.str.41);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.0, $p184);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i186 := $and.i8($i185, $sub.i8(0, 2));
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $i187 := $or.i8($i186, 1);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p184, $i187);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb48:
    assume $i173 == 1;
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(138, 1));
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i175 := $load.i16($M.0, $p174);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i176 := $zext.i16.i32($i175);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $i177 := $or.i32($i176, 2);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i178 := $trunc.i32.i16($i177);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(138, 1));
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p179, $i178);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb45:
    assume $i164 == 1;
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(138, 1));
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i166 := $load.i16($M.0, $p165);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i167 := $zext.i16.i32($i166);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i168 := $or.i32($i167, 1);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i32.i16($i168);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(138, 1));
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p170, $i169);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb38:
    assume $i129 == 1;
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(124, 1));
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i144 := $load.i16($M.0, $p143);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i145 := $zext.i16.i32($i144);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $i146 := $or.i32($i145, 128);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i32.i16($i146);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(124, 1));
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p148, $i147);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb36:
    assume $i128 == 1;
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(124, 1));
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i138 := $load.i16($M.0, $p137);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i139 := $zext.i16.i32($i138);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i140 := $or.i32($i139, 64);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i141 := $trunc.i32.i16($i140);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(124, 1));
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p142, $i141);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb34:
    assume $i127 == 1;
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i126, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb40;

  $bb41:
    assume $i130 == 1;
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(124, 1));
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $i132 := $load.i16($M.0, $p131);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i133 := $zext.i16.i32($i132);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $i134 := $or.i32($i133, 32);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i16($i134);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(124, 1));
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p136, $i135);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb30:
    assume $i93 == 1;
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i95 := $load.i16($M.0, $p94);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i95);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i97 := $or.i32($i96, 16);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i16($i97);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p99, $i98);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i84 == 1;
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i86 := $load.i16($M.0, $p85);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32($i86);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i88 := $or.i32($i87, 8);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i16($i88);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p90, $i89);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i75 == 1;
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.0, $p76);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i79 := $or.i32($i78, 4);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i16($i79);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p81, $i80);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i66 == 1;
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.0, $p67);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i68);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i70 := $or.i32($i69, 2);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i16($i70);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p72, $i71);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i57 == 1;
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $i59 := $load.i16($M.0, $p58);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i32($i59);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i61 := $or.i32($i60, 1);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i16($i61);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p63, $i62);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(124, 1));
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i46, 16);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(124, 1));
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p49, $i48);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(124, 1));
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.0, $p38);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i40, 8);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(124, 1));
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p43, $i42);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb5:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i20, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i24 == 1);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(124, 1));
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, 4);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(124, 1));
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p37, $i36);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb12:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i20, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb11;

  $bb14:
    assume $i25 == 1;
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(124, 1));
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.0, $p26);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i28, 2);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(124, 1));
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, $i30);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(124, 1));
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i13, 1);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(124, 1));
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, $i15);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fb_create_modedb: ref;

axiom fb_create_modedb == $sub.ref(0, 399993);

procedure fb_create_modedb($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.46, $CurrAddr;



implementation fb_create_modedb($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i27: i64;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $i78: i1;
  var $i55: i32;
  var $i56: i32;
  var $p58: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $p7: ref;
  var $i93: i64;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $i97: i64;
  var $p98: ref;
  var $i99: i64;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i64;
  var $p104: ref;
  var $i105: i64;
  var $p106: ref;
  var $i107: i32;
  var $i108: i32;
  var $i109: i64;
  var $p110: ref;
  var $i111: i64;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i64;
  var $p116: ref;
  var $i117: i64;
  var $p118: ref;
  var $i119: i32;
  var $i120: i32;
  var $i121: i64;
  var $p122: ref;
  var $i123: i64;
  var $p124: ref;
  var $i125: i32;
  var $i126: i32;
  var $i127: i64;
  var $p128: ref;
  var $i129: i64;
  var $p130: ref;
  var $i131: i32;
  var $i57: i32;
  var $i132: i8;
  var $i133: i32;
  var $i134: i1;
  var $i135: i64;
  var $p136: ref;
  var $i137: i8;
  var $i138: i32;
  var $i139: i1;
  var $i142: i64;
  var $p143: ref;
  var $i144: i1;
  var $i146: i64;
  var $p148: ref;
  var $i149: i32;
  var $i150: i32;
  var $i151: i64;
  var $p153: ref;
  var $i145: i32;
  var $i154: i32;
  var $i140: i32;
  var $i141: i32;
  var $i155: i64;
  var $p156: ref;
  var $i157: i8;
  var $i158: i32;
  var $i159: i1;
  var $i160: i64;
  var $p161: ref;
  var $i162: i8;
  var $i163: i32;
  var $i164: i1;
  var $i167: i64;
  var $p168: ref;
  var $i169: i1;
  var $i171: i64;
  var $p173: ref;
  var $i174: i32;
  var $i175: i32;
  var $i176: i64;
  var $p178: ref;
  var $i170: i32;
  var $i179: i32;
  var $i165: i32;
  var $i166: i32;
  var $i180: i64;
  var $p181: ref;
  var $i182: i8;
  var $i183: i32;
  var $i184: i1;
  var $i185: i64;
  var $p186: ref;
  var $i187: i8;
  var $i188: i32;
  var $i189: i1;
  var $i190: i64;
  var $p191: ref;
  var $i192: i1;
  var $i193: i64;
  var $p195: ref;
  var $i196: i32;
  var $i197: i32;
  var $i198: i64;
  var $p200: ref;
  var $i201: i32;
  var $i43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $p3 := kzalloc(3200, 208);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i11 := edid_checksum($p0);
    call {:si_unique_call 492} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i14 := edid_check_header($p0);
    call {:si_unique_call 495} {:cexpr "tmp___1"} boogie_si_record_i32($i14);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p0, $mul.ref(18, 1));
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    call {:si_unique_call 497} {:cexpr "ver"} boogie_si_record_i32($i19);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p0, $mul.ref(19, 1));
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    call {:si_unique_call 498} {:cexpr "rev"} boogie_si_record_i32($i22);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p0, $mul.ref(54, 1));
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i26 == 1);
    $i27 := $add.i64(54, 1);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p0, $mul.ref($i27, 1));
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i37, $i38 := 0, 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i39 := $add.i64(54, 18);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p0, $mul.ref($i39, 1));
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.0, $p40);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i32($i132);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i133, 0);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb58;

  $bb58:
    assume !($i134 == 1);
    $i135 := $add.i64($i39, 1);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p0, $mul.ref($i135, 1));
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.0, $p136);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    $i140, $i141 := $i37, $i38;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i155 := $add.i64($i39, 18);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p0, $mul.ref($i155, 1));
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.0, $p156);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i157);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $i159 := $ne.i32($i158, 0);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i159} true;
    goto $bb66, $bb68;

  $bb68:
    assume !($i159 == 1);
    $i160 := $add.i64($i155, 1);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($p0, $mul.ref($i160, 1));
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $i162 := $load.i8($M.0, $p161);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i163 := $zext.i8.i32($i162);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i163, 0);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    $i165, $i166 := $i140, $i141;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i180 := $add.i64($i155, 18);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($p0, $mul.ref($i180, 1));
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i182 := $load.i8($M.0, $p181);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i32($i182);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i184 := $ne.i32($i183, 0);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb76, $bb78;

  $bb78:
    assume !($i184 == 1);
    $i185 := $add.i64($i180, 1);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($p0, $mul.ref($i185, 1));
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $i187 := $load.i8($M.0, $p186);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i188 := $zext.i8.i32($i187);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $i189 := $ne.i32($i188, 0);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    $i43 := $i165;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p0, $mul.ref(35, 1));
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i43);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p4, $mul.ref($i42, 64));
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i45 := get_est_timing($p41, $p44);
    call {:si_unique_call 501} {:cexpr "tmp___2"} boogie_si_record_i32($i45);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, $i43);
    call {:si_unique_call 502} {:cexpr "num"} boogie_si_record_i32($i46);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p0, $mul.ref(38, 1));
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i46);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p4, $mul.ref($i48, 64));
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i50 := get_std_timing($p47, $p49, $i19, $i22, $p2);
    call {:si_unique_call 504} {:cexpr "tmp___3"} boogie_si_record_i32($i50);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i50, $i46);
    call {:si_unique_call 505} {:cexpr "num"} boogie_si_record_i32($i51);
    $i52 := $add.i64(38, 2);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p0, $mul.ref($i52, 1));
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i51);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p4, $mul.ref($i93, 64));
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $i95 := get_std_timing($p53, $p94, $i19, $i22, $p2);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i95, $i51);
    $i97 := $add.i64($i52, 2);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p0, $mul.ref($i97, 1));
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i99 := $sext.i32.i64($i96);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p4, $mul.ref($i99, 64));
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i101 := get_std_timing($p98, $p100, $i19, $i22, $p2);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i102 := $add.i32($i101, $i96);
    $i103 := $add.i64($i97, 2);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p0, $mul.ref($i103, 1));
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i105 := $sext.i32.i64($i102);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p4, $mul.ref($i105, 64));
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i107 := get_std_timing($p104, $p106, $i19, $i22, $p2);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i108 := $add.i32($i107, $i102);
    $i109 := $add.i64($i103, 2);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p0, $mul.ref($i109, 1));
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i111 := $sext.i32.i64($i108);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p4, $mul.ref($i111, 64));
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i113 := get_std_timing($p110, $p112, $i19, $i22, $p2);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i113, $i108);
    $i115 := $add.i64($i109, 2);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p0, $mul.ref($i115, 1));
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i117 := $sext.i32.i64($i114);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p4, $mul.ref($i117, 64));
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $i119 := get_std_timing($p116, $p118, $i19, $i22, $p2);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i120 := $add.i32($i119, $i114);
    $i121 := $add.i64($i115, 2);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p0, $mul.ref($i121, 1));
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i123 := $sext.i32.i64($i120);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($p4, $mul.ref($i123, 64));
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $i125 := get_std_timing($p122, $p124, $i19, $i22, $p2);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $i126 := $add.i32($i125, $i120);
    $i127 := $add.i64($i121, 2);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p0, $mul.ref($i127, 1));
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i129 := $sext.i32.i64($i126);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p4, $mul.ref($i129, 64));
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i131 := get_std_timing($p128, $p130, $i19, $i22, $p2);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i131, $i126);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p0, $mul.ref(54, 1));
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $i55, $i56, $p58 := 0, $i57, $p54;
    goto $bb31;

  $bb31:
    call $i59, $i60, $i61, $p62, $i63, $i64, $i65, $p66, $i67, $i68, $i69, $p70, $i71, $p72, $i73, $i74, $i75, $i76, $p77, $i78, $i55, $i56, $p58, $i79 := fb_create_modedb_loop_$bb31($p2, $p4, $i19, $i22, $i59, $i60, $i61, $p62, $i63, $i64, $i65, $p66, $i67, $i68, $i69, $p70, $i71, $p72, $i73, $i74, $i75, $i76, $p77, $i78, $i55, $i56, $p58, $i79);
    goto $bb31_last;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i75 := $i56;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i55, 1);
    call {:si_unique_call 510} {:cexpr "i"} boogie_si_record_i32($i76);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p58, $mul.ref(18, 1));
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i78 := $sle.i32($i76, 3);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i79 := $i75;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 0);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i79);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i79);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i83 := $mul.i64($i82, 64);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $p84 := kmalloc($i83, 208);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i87 := $eq.i64($i86, 0);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p85);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p4);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i79);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i91 := $mul.i64($i90, 64);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} llvm.memmove.p0i8.p0i8.i64($p88, $p89, $i91, 1, 0);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p4);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} kfree($p92);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $p7 := $p84;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb47:
    assume $i87 == 1;
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $p7 := $p3;
    goto $bb3;

  $bb44:
    assume $i80 == 1;
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p4);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} kfree($p81);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb41:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i55, $i56, $p58 := $i76, $i75, $p77;
    goto $bb41_dummy;

  $bb33:
    assume $i61 == 1;
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p58, $mul.ref(1, 1));
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb35;

  $bb36:
    assume $i65 == 1;
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p58, $mul.ref(3, 1));
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 250);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb35;

  $bb38:
    assume $i69 == 1;
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p58, $mul.ref(5, 1));
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i56);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p4, $mul.ref($i71, 64));
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i73 := get_dst_timing($p70, $p72, $i19, $i22, $p2);
    call {:si_unique_call 508} {:cexpr "tmp___4"} boogie_si_record_i32($i73);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i73, $i56);
    call {:si_unique_call 509} {:cexpr "num"} boogie_si_record_i32($i74);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i75 := $i74;
    goto $bb40;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i189 == 1;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i190 := $sext.i32.i64($i165);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($p4, $mul.ref($i190, 64));
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} get_detailed_timing($p181, $p191);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i192 := $ne.i32($i166, 0);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i201 := $add.i32($i165, 1);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $i43 := $i201;
    goto $bb81;

  $bb82:
    assume $i192 == 1;
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i193 := $sext.i32.i64($i165);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p4, $mul.ref($i193, 64)), $mul.ref(56, 1));
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i196 := $load.i32($M.0, $p195);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i197 := $or.i32($i196, 16);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i198 := $sext.i32.i64($i165);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p4, $mul.ref($i198, 64)), $mul.ref(56, 1));
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p200, $i197);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i184 == 1;
    goto $bb77;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i164 == 1;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i167 := $sext.i32.i64($i140);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($p4, $mul.ref($i167, 64));
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} get_detailed_timing($p156, $p168);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i141, 0);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i169} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    $i170 := $i141;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $i179 := $add.i32($i140, 1);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i165, $i166 := $i179, $i170;
    goto $bb71;

  $bb72:
    assume $i169 == 1;
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $i171 := $sext.i32.i64($i140);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p4, $mul.ref($i171, 64)), $mul.ref(56, 1));
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.0, $p173);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $i175 := $or.i32($i174, 16);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i176 := $sext.i32.i64($i140);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p4, $mul.ref($i176, 64)), $mul.ref(56, 1));
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p178, $i175);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i170 := 0;
    goto $bb74;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i159 == 1;
    goto $bb67;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i139 == 1;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i142 := $sext.i32.i64($i37);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($p4, $mul.ref($i142, 64));
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} get_detailed_timing($p40, $p143);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i38, 0);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    $i145 := $i38;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $i154 := $add.i32($i37, 1);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i140, $i141 := $i154, $i145;
    goto $bb61;

  $bb62:
    assume $i144 == 1;
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i146 := $sext.i32.i64($i37);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p4, $mul.ref($i146, 64)), $mul.ref(56, 1));
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.0, $p148);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $i150 := $or.i32($i149, 16);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i151 := $sext.i32.i64($i37);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p4, $mul.ref($i151, 64)), $mul.ref(56, 1));
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p153, $i150);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i145 := 0;
    goto $bb64;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i134 == 1;
    goto $bb57;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} get_detailed_timing($p23, $p4);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb21, $bb22;

  $bb22:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    $i36 := 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $i37, $i38 := 1, $i36;
    goto $bb24;

  $bb21:
    assume 1 == 1;
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i33, 16);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb23;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb17;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p4);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} kfree($p16);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p4);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} kfree($p13);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p4);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} kfree($p10);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb41_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7290;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 401025);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 525} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const get_detailed_timing: ref;

axiom get_detailed_timing == $sub.ref(0, 402057);

procedure get_detailed_timing($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation get_detailed_timing($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i32;
  var $i104: i32;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i32;
  var $p109: ref;
  var $i110: i8;
  var $i111: i32;
  var $i112: i32;
  var $i113: i32;
  var $i114: i32;
  var $p115: ref;
  var $i116: i8;
  var $i117: i32;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $p121: ref;
  var $i122: i8;
  var $i123: i32;
  var $i124: i32;
  var $i125: i32;
  var $p126: ref;
  var $i127: i8;
  var $i128: i32;
  var $i129: i32;
  var $i130: i32;
  var $i131: i32;
  var $p132: ref;
  var $p133: ref;
  var $i134: i8;
  var $i135: i32;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $p139: ref;
  var $i140: i8;
  var $i141: i32;
  var $i142: i32;
  var $i143: i32;
  var $p144: ref;
  var $p145: ref;
  var $i146: i8;
  var $i147: i32;
  var $i148: i32;
  var $i149: i32;
  var $i150: i32;
  var $p151: ref;
  var $i152: i8;
  var $i153: i32;
  var $i154: i32;
  var $p155: ref;
  var $p156: ref;
  var $i157: i8;
  var $i158: i32;
  var $i159: i32;
  var $i160: i32;
  var $p161: ref;
  var $i162: i8;
  var $i163: i32;
  var $i164: i32;
  var $i165: i32;
  var $p166: ref;
  var $p167: ref;
  var $i168: i8;
  var $i169: i32;
  var $i170: i32;
  var $i171: i1;
  var $p172: ref;
  var $i173: i32;
  var $i174: i32;
  var $p175: ref;
  var $p176: ref;
  var $i177: i8;
  var $i178: i32;
  var $i179: i32;
  var $i180: i1;
  var $p181: ref;
  var $i182: i32;
  var $i183: i32;
  var $p184: ref;
  var $p185: ref;
  var $i186: i8;
  var $i187: i32;
  var $i188: i32;
  var $i189: i8;
  var $i190: i32;
  var $i191: i32;
  var $i192: i32;
  var $p193: ref;
  var $i194: i8;
  var $i195: i32;
  var $i196: i32;
  var $i197: i32;
  var $p198: ref;
  var $i199: i8;
  var $i200: i32;
  var $i201: i32;
  var $p202: ref;
  var $i203: i8;
  var $i204: i32;
  var $i205: i32;
  var $i206: i32;
  var $p207: ref;
  var $i208: i8;
  var $i209: i32;
  var $i210: i32;
  var $i211: i32;
  var $p212: ref;
  var $i213: i8;
  var $i214: i32;
  var $i215: i32;
  var $i216: i32;
  var $p217: ref;
  var $i218: i8;
  var $i219: i32;
  var $i220: i32;
  var $p221: ref;
  var $i222: i8;
  var $i223: i32;
  var $i224: i32;
  var $i225: i32;
  var $p226: ref;
  var $i227: i8;
  var $i228: i32;
  var $i229: i32;
  var $i230: i32;
  var $i231: i32;
  var $i232: i32;
  var $p233: ref;
  var $p234: ref;
  var $i235: i8;
  var $i236: i32;
  var $i237: i1;
  var $p238: ref;
  var $i239: i32;
  var $i240: i32;
  var $p241: ref;
  var $p242: ref;
  var $i243: i32;
  var $i244: i32;
  var $p245: ref;
  var $p246: ref;
  var $i247: i32;
  var $i248: i32;
  var $p249: ref;
  var $p250: ref;
  var $i251: i32;
  var $i252: i32;
  var $p253: ref;
  var $p254: ref;
  var $i255: i32;
  var $i256: i32;
  var $p257: ref;
  var $p258: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i5 := $ashr.i32($i4, 4);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i5, 8);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i6, $i9);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p0, $mul.ref(7, 1));
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i15 := $ashr.i32($i14, 4);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i16 := $shl.i32($i15, 8);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p0, $mul.ref(5, 1));
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i16, $i19);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32($i24, 8);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p0);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i25, $i27);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i29 := $mul.i32($i28, 10000);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i33 := $udiv.i32($i32, 1000);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i37 := $udiv.i32(1000000000, $i36);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p0, $mul.ref(11, 1));
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $i42 := $ashr.i32($i41, 6);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $i43 := $shl.i32($i42, 8);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i43, $i46);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $i52 := $ashr.i32($i51, 4);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $i53 := $shl.i32($i52, 8);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i53, $i56);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 15);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $i62 := $shl.i32($i61, 8);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i62, $i65);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i57, $i66);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $i71 := $ashr.i32($i70, 4);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $i72 := $shl.i32($i71, 8);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $i76 := $or.i32($i72, $i75);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p0, $mul.ref(11, 1));
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $i80 := $ashr.i32($i79, 6);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $i81 := $shl.i32($i80, 8);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.0, $p82);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $i85 := $or.i32($i81, $i84);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i76, $i85);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p0, $mul.ref(11, 1));
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 48);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $i91 := $lshr.i32($i90, 4);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $i92 := $shl.i32($i91, 8);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p0, $mul.ref(9, 1));
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p93);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $i96 := $or.i32($i92, $i95);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $i97 := $add.i32($i86, $i96);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $i98 := $sub.i32($i67, $i97);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, $i98);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p0, $mul.ref(7, 1));
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.0, $p100);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, 15);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $i104 := $shl.i32($i103, 8);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p0, $mul.ref(6, 1));
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $i108 := $or.i32($i104, $i107);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p0, $mul.ref(11, 1));
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.0, $p109);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i32($i110);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $i112 := $and.i32($i111, 12);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $i113 := $lshr.i32($i112, 2);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $i114 := $shl.i32($i113, 4);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p0, $mul.ref(10, 1));
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $i118 := $ashr.i32($i117, 4);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $i119 := $or.i32($i114, $i118);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i120 := $sub.i32($i108, $i119);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p0, $mul.ref(11, 1));
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.0, $p121);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i122);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i123, 3);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $i125 := $shl.i32($i124, 4);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($p0, $mul.ref(10, 1));
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.0, $p126);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i128, 15);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $i130 := $or.i32($i125, $i129);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $i131 := $sub.i32($i120, $i130);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p132, $i131);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p0, $mul.ref(11, 1));
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $i134 := $load.i8($M.0, $p133);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $i135 := $zext.i8.i32($i134);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $i136 := $and.i32($i135, 12);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $i137 := $lshr.i32($i136, 2);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $i138 := $shl.i32($i137, 4);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p0, $mul.ref(10, 1));
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.0, $p139);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i32($i140);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $i142 := $ashr.i32($i141, 4);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $i143 := $or.i32($i138, $i142);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, $i143);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p0, $mul.ref(11, 1));
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $i146 := $load.i8($M.0, $p145);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $i147 := $zext.i8.i32($i146);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i148 := $and.i32($i147, 48);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i149 := $lshr.i32($i148, 4);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $i150 := $shl.i32($i149, 8);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p0, $mul.ref(9, 1));
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $i152 := $load.i8($M.0, $p151);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i32($i152);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $i154 := $or.i32($i150, $i153);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p155, $i154);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p0, $mul.ref(11, 1));
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.0, $p156);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i157);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $i159 := $and.i32($i158, 3);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $i160 := $shl.i32($i159, 4);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($p0, $mul.ref(10, 1));
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $i162 := $load.i8($M.0, $p161);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $i163 := $zext.i8.i32($i162);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $i164 := $and.i32($i163, 15);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $i165 := $or.i32($i160, $i164);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p166, $i165);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($p0, $mul.ref(17, 1));
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $i168 := $load.i8($M.0, $p167);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i169 := $zext.i8.i32($i168);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $i170 := $and.i32($i169, 4);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $i171 := $ne.i32($i170, 0);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($p0, $mul.ref(17, 1));
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $i177 := $load.i8($M.0, $p176);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $i178 := $zext.i8.i32($i177);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $i179 := $and.i32($i178, 2);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $i180 := $ne.i32($i179, 0);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $i186 := $load.i8($M.0, $p185);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $i187 := $zext.i8.i32($i186);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $i188 := $shl.i32($i187, 8);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $i189 := $load.i8($M.0, $p0);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $i190 := $zext.i8.i32($i189);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $i191 := $or.i32($i188, $i190);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i192 := $mul.i32($i191, 10000);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i194 := $load.i8($M.0, $p193);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $i195 := $zext.i8.i32($i194);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $i196 := $ashr.i32($i195, 4);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $i197 := $shl.i32($i196, 8);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $i199 := $load.i8($M.0, $p198);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $i200 := $zext.i8.i32($i199);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $i201 := $or.i32($i197, $i200);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $i203 := $load.i8($M.0, $p202);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $i204 := $zext.i8.i32($i203);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $i205 := $and.i32($i204, 15);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i206 := $shl.i32($i205, 8);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $i208 := $load.i8($M.0, $p207);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $i209 := $zext.i8.i32($i208);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $i210 := $or.i32($i206, $i209);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $i211 := $add.i32($i201, $i210);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($p0, $mul.ref(7, 1));
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $i213 := $load.i8($M.0, $p212);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $i214 := $zext.i8.i32($i213);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $i215 := $ashr.i32($i214, 4);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $i216 := $shl.i32($i215, 8);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($p0, $mul.ref(5, 1));
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $i218 := $load.i8($M.0, $p217);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i219 := $zext.i8.i32($i218);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $i220 := $or.i32($i216, $i219);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($p0, $mul.ref(7, 1));
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $i222 := $load.i8($M.0, $p221);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $i223 := $zext.i8.i32($i222);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $i224 := $and.i32($i223, 15);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $i225 := $shl.i32($i224, 8);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($p0, $mul.ref(6, 1));
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $i227 := $load.i8($M.0, $p226);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $i228 := $zext.i8.i32($i227);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $i229 := $or.i32($i225, $i228);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $i230 := $add.i32($i220, $i229);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $i231 := $mul.i32($i211, $i230);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $i232 := $udiv.i32($i192, $i231);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p233, $i232);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($p0, $mul.ref(17, 1));
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $i235 := $load.i8($M.0, $p234);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $i236 := $sext.i8.i32($i235);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $i237 := $slt.i32($i236, 0);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i237} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p258, 1);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i237 == 1;
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $i239 := $load.i32($M.0, $p238);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $i240 := $mul.i32($i239, 2);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p241, $i240);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $i243 := $load.i32($M.0, $p242);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $i244 := $mul.i32($i243, 2);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p245, $i244);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $i247 := $load.i32($M.0, $p246);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $i248 := $mul.i32($i247, 2);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p249, $i248);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $i251 := $load.i32($M.0, $p250);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $i252 := $mul.i32($i251, 2);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p253, $i252);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $i255 := $load.i32($M.0, $p254);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $i256 := $or.i32($i255, 1);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p257, $i256);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i180 == 1;
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.0, $p181);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $i183 := $or.i32($i182, 2);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p184, $i183);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i171 == 1;
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $i173 := $load.i32($M.0, $p172);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $i174 := $or.i32($i173, 1);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p175, $i174);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_est_timing: ref;

axiom get_est_timing == $sub.ref(0, 403089);

procedure get_est_timing($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation get_est_timing($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i64;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i64;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i92: i64;
  var $p93: ref;
  var $i94: i32;
  var $i95: i64;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $i103: i64;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $i107: i32;
  var $i108: i32;
  var $i109: i1;
  var $i110: i32;
  var $i111: i64;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i64;
  var $p120: ref;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i64;
  var $p128: ref;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i135: i64;
  var $p136: ref;
  var $p137: ref;
  var $i138: i32;
  var $p139: ref;
  var $i140: i8;
  var $i141: i32;
  var $i142: i1;
  var $i143: i32;
  var $i144: i64;
  var $p145: ref;
  var $p146: ref;
  var $i147: i32;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p0);
    call {:si_unique_call 527} {:cexpr "c"} boogie_si_record_i8($i2);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i2);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 64);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i21 := $i11;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i2);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 32);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i21;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i2);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 16);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i39 := $i29;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i2);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 8);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i47 := $i39;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i2);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 4);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i55 := $i47;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i2);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 2);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i63 := $i55;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i2);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 1);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i71 := $i63;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    call {:si_unique_call 544} {:cexpr "c"} boogie_si_record_i8($i73);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $i74 := $sext.i8.i32($i73);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i74, 0);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i80 := $i71;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i73);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 64);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i88 := $i80;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i73);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 32);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i98 := $i88;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i73);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i99, 16);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i106 := $i98;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i73);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $i108 := $and.i32($i107, 8);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    $i114 := $i106;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i73);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i115, 4);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    $i122 := $i114;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i73);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i123, 2);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    $i130 := $i122;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $i131 := $zext.i8.i32($i73);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $i132 := $and.i32($i131, 1);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    $i138 := $i130;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.0, $p139);
    call {:si_unique_call 561} {:cexpr "c"} boogie_si_record_i8($i140);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $i141 := $sext.i8.i32($i140);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $i142 := $slt.i32($i141, 0);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    $i147 := $i138;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $r := $i147;
    return;

  $bb49:
    assume $i142 == 1;
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $i143 := $add.i32($i138, 1);
    call {:si_unique_call 562} {:cexpr "num"} boogie_si_record_i32($i143);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $i144 := $sext.i32.i64($i138);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p1, $mul.ref($i144, 64));
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p145);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_74 := $M.0;
    cmdloc_dummy_var_75 := $M.0;
    call {:si_unique_call 563} cmdloc_dummy_var_76 := $memcpy.i8(cmdloc_dummy_var_74, cmdloc_dummy_var_75, $p146, $add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(17, 64)), 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_76;
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $i147 := $i143;
    goto $bb51;

  $bb46:
    assume $i133 == 1;
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $i134 := $add.i32($i130, 1);
    call {:si_unique_call 559} {:cexpr "num"} boogie_si_record_i32($i134);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $i135 := $sext.i32.i64($i130);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p1, $mul.ref($i135, 64));
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p136);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_71 := $M.0;
    cmdloc_dummy_var_72 := $M.0;
    call {:si_unique_call 560} cmdloc_dummy_var_73 := $memcpy.i8(cmdloc_dummy_var_71, cmdloc_dummy_var_72, $p137, $add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(21, 64)), 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_73;
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $i138 := $i134;
    goto $bb48;

  $bb43:
    assume $i125 == 1;
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $i126 := $add.i32($i122, 1);
    call {:si_unique_call 557} {:cexpr "num"} boogie_si_record_i32($i126);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $i127 := $sext.i32.i64($i122);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p1, $mul.ref($i127, 64));
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_68 := $M.0;
    cmdloc_dummy_var_69 := $M.0;
    call {:si_unique_call 558} cmdloc_dummy_var_70 := $memcpy.i8(cmdloc_dummy_var_68, cmdloc_dummy_var_69, $p129, $add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(15, 64)), 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_70;
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $i130 := $i126;
    goto $bb45;

  $bb40:
    assume $i117 == 1;
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $i118 := $add.i32($i114, 1);
    call {:si_unique_call 555} {:cexpr "num"} boogie_si_record_i32($i118);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i114);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($p1, $mul.ref($i119, 64));
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_65 := $M.0;
    cmdloc_dummy_var_66 := $M.0;
    call {:si_unique_call 556} cmdloc_dummy_var_67 := $memcpy.i8(cmdloc_dummy_var_65, cmdloc_dummy_var_66, $p121, $add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(14, 64)), 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_67;
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $i122 := $i118;
    goto $bb42;

  $bb37:
    assume $i109 == 1;
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i106, 1);
    call {:si_unique_call 553} {:cexpr "num"} boogie_si_record_i32($i110);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $i111 := $sext.i32.i64($i106);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p1, $mul.ref($i111, 64));
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_62 := $M.0;
    cmdloc_dummy_var_63 := $M.0;
    call {:si_unique_call 554} cmdloc_dummy_var_64 := $memcpy.i8(cmdloc_dummy_var_62, cmdloc_dummy_var_63, $p113, $add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(13, 64)), 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_64;
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i114 := $i110;
    goto $bb39;

  $bb34:
    assume $i101 == 1;
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $i102 := $add.i32($i98, 1);
    call {:si_unique_call 551} {:cexpr "num"} boogie_si_record_i32($i102);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i98);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p1, $mul.ref($i103, 64));
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_59 := $M.0;
    cmdloc_dummy_var_60 := $M.0;
    call {:si_unique_call 552} cmdloc_dummy_var_61 := $memcpy.i8(cmdloc_dummy_var_59, cmdloc_dummy_var_60, $p105, $add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(12, 64)), 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_61;
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $i106 := $i102;
    goto $bb36;

  $bb31:
    assume $i91 == 1;
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i88);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p1, $mul.ref($i92, 64));
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} calc_mode_timings(832, 624, 75, $p93);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i88, 1);
    call {:si_unique_call 550} {:cexpr "num"} boogie_si_record_i32($i94);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64($i88);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p1, $mul.ref($i95, 64)), $mul.ref(56, 1));
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p97, 8);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $i98 := $i94;
    goto $bb33;

  $bb28:
    assume $i83 == 1;
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i80, 1);
    call {:si_unique_call 547} {:cexpr "num"} boogie_si_record_i32($i84);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i80);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p1, $mul.ref($i85, 64));
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_56 := $M.0;
    cmdloc_dummy_var_57 := $M.0;
    call {:si_unique_call 548} cmdloc_dummy_var_58 := $memcpy.i8(cmdloc_dummy_var_56, cmdloc_dummy_var_57, $p87, $add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(10, 64)), 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_58;
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $i88 := $i84;
    goto $bb30;

  $bb25:
    assume $i75 == 1;
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i71, 1);
    call {:si_unique_call 545} {:cexpr "num"} boogie_si_record_i32($i76);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i71);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p1, $mul.ref($i77, 64));
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.0;
    cmdloc_dummy_var_54 := $M.0;
    call {:si_unique_call 546} cmdloc_dummy_var_55 := $memcpy.i8(cmdloc_dummy_var_53, cmdloc_dummy_var_54, $p79, $add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(9, 64)), 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_55;
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $i80 := $i76;
    goto $bb27;

  $bb22:
    assume $i66 == 1;
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i63, 1);
    call {:si_unique_call 542} {:cexpr "num"} boogie_si_record_i32($i67);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i63);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p1, $mul.ref($i68, 64));
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_50 := $M.0;
    cmdloc_dummy_var_51 := $M.0;
    call {:si_unique_call 543} cmdloc_dummy_var_52 := $memcpy.i8(cmdloc_dummy_var_50, cmdloc_dummy_var_51, $p70, $add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(8, 64)), 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_52;
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $i71 := $i67;
    goto $bb24;

  $bb19:
    assume $i58 == 1;
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i55, 1);
    call {:si_unique_call 540} {:cexpr "num"} boogie_si_record_i32($i59);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i55);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p1, $mul.ref($i60, 64));
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_47 := $M.0;
    cmdloc_dummy_var_48 := $M.0;
    call {:si_unique_call 541} cmdloc_dummy_var_49 := $memcpy.i8(cmdloc_dummy_var_47, cmdloc_dummy_var_48, $p62, $add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(7, 64)), 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_49;
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $i63 := $i59;
    goto $bb21;

  $bb16:
    assume $i50 == 1;
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i47, 1);
    call {:si_unique_call 538} {:cexpr "num"} boogie_si_record_i32($i51);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i47);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p1, $mul.ref($i52, 64));
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_44 := $M.0;
    cmdloc_dummy_var_45 := $M.0;
    call {:si_unique_call 539} cmdloc_dummy_var_46 := $memcpy.i8(cmdloc_dummy_var_44, cmdloc_dummy_var_45, $p54, $add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(5, 64)), 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_46;
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i55 := $i51;
    goto $bb18;

  $bb13:
    assume $i42 == 1;
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i39, 1);
    call {:si_unique_call 536} {:cexpr "num"} boogie_si_record_i32($i43);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i39);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p1, $mul.ref($i44, 64));
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_41 := $M.0;
    cmdloc_dummy_var_42 := $M.0;
    call {:si_unique_call 537} cmdloc_dummy_var_43 := $memcpy.i8(cmdloc_dummy_var_41, cmdloc_dummy_var_42, $p46, $add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(4, 64)), 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_43;
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $i47 := $i43;
    goto $bb15;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i29);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p1, $mul.ref($i33, 64));
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} calc_mode_timings(640, 480, 67, $p34);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i29, 1);
    call {:si_unique_call 535} {:cexpr "num"} boogie_si_record_i32($i35);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i29);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref($i36, 64)), $mul.ref(56, 1));
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 8);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $i39 := $i35;
    goto $bb12;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i21, 1);
    call {:si_unique_call 532} {:cexpr "num"} boogie_si_record_i32($i25);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i21);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p1, $mul.ref($i26, 64));
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.0;
    cmdloc_dummy_var_39 := $M.0;
    call {:si_unique_call 533} cmdloc_dummy_var_40 := $memcpy.i8(cmdloc_dummy_var_38, cmdloc_dummy_var_39, $p28, $add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(3, 64)), 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_40;
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $i29 := $i25;
    goto $bb9;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i11);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p1, $mul.ref($i15, 64));
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} calc_mode_timings(720, 400, 88, $p16);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i11, 1);
    call {:si_unique_call 531} {:cexpr "num"} boogie_si_record_i32($i17);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i11);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref($i18, 64)), $mul.ref(56, 1));
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 8);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $i21 := $i17;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64(0);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p1, $mul.ref($i5, 64));
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} calc_mode_timings(720, 400, 70, $p6);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $i7 := $add.i32(0, 1);
    call {:si_unique_call 529} {:cexpr "num"} boogie_si_record_i32($i7);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64(0);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref($i8, 64)), $mul.ref(56, 1));
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 8);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $i11 := $i7;
    goto $bb3;
}



const get_std_timing: ref;

axiom get_std_timing == $sub.ref(0, 404121);

procedure get_std_timing($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation get_std_timing($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i51: i32;
  var $i52: i32;
  var $i50: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i53: i32;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i64;
  var $i74: i64;
  var $p75: ref;
  var $i76: i32;
  var $i77: i64;
  var $i78: i1;
  var $i37: i32;
  var $i79: i8;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $i87: i8;
  var $i88: i32;
  var $i89: i32;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $p98: ref;
  var $i99: i8;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i103: i8;
  var $i104: i32;
  var $i105: i32;
  var $p106: ref;
  var $i107: i8;
  var $i108: i32;
  var $i109: i32;
  var $i110: i1;
  var $i111: i8;
  var $i112: i32;
  var $i113: i32;
  var $p114: ref;
  var $i115: i8;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $i119: i8;
  var $i120: i32;
  var $i121: i32;
  var $p122: ref;
  var $i123: i8;
  var $i124: i32;
  var $i125: i32;
  var $i126: i1;
  var $i127: i8;
  var $i128: i32;
  var $i129: i32;
  var $p130: ref;
  var $i131: i8;
  var $i132: i32;
  var $i133: i32;
  var $i134: i1;
  var $i135: i8;
  var $i136: i32;
  var $i137: i32;
  var $p138: ref;
  var $i139: i8;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $i143: i8;
  var $i144: i32;
  var $i145: i32;
  var $p146: ref;
  var $i147: i8;
  var $i148: i32;
  var $i149: i32;
  var $i150: i1;
  var $i151: i8;
  var $i152: i32;
  var $i153: i32;
  var $p154: ref;
  var $i155: i8;
  var $i156: i32;
  var $i157: i32;
  var $i158: i1;
  var $i159: i8;
  var $i160: i32;
  var $i161: i32;
  var $p162: ref;
  var $i163: i8;
  var $i164: i32;
  var $i165: i32;
  var $i166: i1;
  var $i167: i8;
  var $i168: i32;
  var $i169: i32;
  var $p170: ref;
  var $i171: i8;
  var $i172: i32;
  var $i173: i32;
  var $i174: i1;
  var $i175: i8;
  var $i176: i32;
  var $i177: i32;
  var $p178: ref;
  var $i179: i8;
  var $i180: i32;
  var $i181: i32;
  var $i182: i1;
  var $i183: i8;
  var $i184: i32;
  var $i185: i32;
  var $p186: ref;
  var $i187: i8;
  var $i188: i32;
  var $i189: i32;
  var $i190: i1;
  var $i191: i8;
  var $i192: i32;
  var $i193: i32;
  var $p194: ref;
  var $i195: i8;
  var $i196: i32;
  var $i197: i32;
  var $i198: i1;
  var $i199: i8;
  var $i200: i32;
  var $i201: i32;
  var $p202: ref;
  var $i203: i8;
  var $i204: i32;
  var $i205: i32;
  var $i206: i1;
  var $i207: i8;
  var $i208: i32;
  var $i209: i32;
  var $p210: ref;
  var $i211: i8;
  var $i212: i32;
  var $i213: i32;
  var $i214: i1;
  var $i215: i8;
  var $i216: i32;
  var $i217: i32;
  var $p218: ref;
  var $i219: i8;
  var $i220: i32;
  var $i221: i32;
  var $i222: i1;
  var $i223: i8;
  var $i224: i32;
  var $i225: i32;
  var $p226: ref;
  var $i227: i8;
  var $i228: i32;
  var $i229: i32;
  var $i230: i1;
  var $i231: i8;
  var $i232: i32;
  var $i233: i32;
  var $p234: ref;
  var $i235: i8;
  var $i236: i32;
  var $i237: i32;
  var $i238: i1;
  var $i239: i8;
  var $i240: i32;
  var $i241: i32;
  var $p242: ref;
  var $i243: i8;
  var $i244: i32;
  var $i245: i32;
  var $i246: i1;
  var $i247: i8;
  var $i248: i32;
  var $i249: i32;
  var $p250: ref;
  var $i251: i8;
  var $i252: i32;
  var $i253: i32;
  var $i254: i1;
  var $i255: i8;
  var $i256: i32;
  var $i257: i32;
  var $p258: ref;
  var $i259: i8;
  var $i260: i32;
  var $i261: i32;
  var $i262: i1;
  var $i263: i8;
  var $i264: i32;
  var $i265: i32;
  var $p266: ref;
  var $i267: i8;
  var $i268: i32;
  var $i269: i32;
  var $i270: i1;
  var $i271: i8;
  var $i272: i32;
  var $i273: i32;
  var $p274: ref;
  var $i275: i8;
  var $i276: i32;
  var $i277: i32;
  var $i278: i1;
  var $i279: i8;
  var $i280: i32;
  var $i281: i32;
  var $p282: ref;
  var $i283: i8;
  var $i284: i32;
  var $i285: i32;
  var $i286: i1;
  var $i287: i8;
  var $i288: i32;
  var $i289: i32;
  var $p290: ref;
  var $i291: i8;
  var $i292: i32;
  var $i293: i32;
  var $i294: i1;
  var $i295: i8;
  var $i296: i32;
  var $i297: i32;
  var $p298: ref;
  var $i299: i8;
  var $i300: i32;
  var $i301: i32;
  var $i302: i1;
  var $i303: i8;
  var $i304: i32;
  var $i305: i32;
  var $p306: ref;
  var $i307: i8;
  var $i308: i32;
  var $i309: i32;
  var $i310: i1;
  var $i311: i8;
  var $i312: i32;
  var $i313: i32;
  var $p314: ref;
  var $i315: i8;
  var $i316: i32;
  var $i317: i32;
  var $i318: i1;
  var $i319: i8;
  var $i320: i32;
  var $i321: i32;
  var $p322: ref;
  var $i323: i8;
  var $i324: i32;
  var $i325: i32;
  var $i326: i1;
  var $i327: i8;
  var $i328: i32;
  var $i329: i32;
  var $p330: ref;
  var $i331: i8;
  var $i332: i32;
  var $i333: i32;
  var $i334: i1;
  var $i335: i8;
  var $i336: i32;
  var $i337: i32;
  var $p338: ref;
  var $i339: i8;
  var $i340: i32;
  var $i341: i32;
  var $i342: i1;
  var $i343: i8;
  var $i344: i32;
  var $i345: i32;
  var $p346: ref;
  var $i347: i8;
  var $i348: i32;
  var $i349: i32;
  var $i350: i1;
  var $i351: i8;
  var $i352: i32;
  var $i353: i32;
  var $p354: ref;
  var $i355: i8;
  var $i356: i32;
  var $i357: i32;
  var $i358: i1;
  var $i359: i8;
  var $i360: i32;
  var $i361: i32;
  var $p362: ref;
  var $i363: i8;
  var $i364: i32;
  var $i365: i32;
  var $i366: i1;
  var $i367: i8;
  var $i368: i32;
  var $i369: i32;
  var $p370: ref;
  var $i371: i8;
  var $i372: i32;
  var $i373: i32;
  var $i374: i1;
  var $i375: i8;
  var $i376: i32;
  var $i377: i32;
  var $p378: ref;
  var $i379: i8;
  var $i380: i32;
  var $i381: i32;
  var $i382: i1;
  var $i383: i8;
  var $i384: i32;
  var $i385: i32;
  var $p386: ref;
  var $i387: i8;
  var $i388: i32;
  var $i389: i32;
  var $i390: i1;
  var $i391: i8;
  var $i392: i32;
  var $i393: i32;
  var $p394: ref;
  var $i395: i8;
  var $i396: i32;
  var $i397: i32;
  var $i398: i1;
  var $i399: i8;
  var $i400: i32;
  var $i401: i32;
  var $p402: ref;
  var $i403: i8;
  var $i404: i32;
  var $i405: i32;
  var $i406: i1;
  var $i407: i8;
  var $i408: i32;
  var $i409: i32;
  var $p410: ref;
  var $i411: i8;
  var $i412: i32;
  var $i413: i32;
  var $i414: i1;
  var $i415: i8;
  var $i416: i32;
  var $i417: i32;
  var $p418: ref;
  var $i419: i8;
  var $i420: i32;
  var $i421: i32;
  var $i422: i1;
  var $i423: i8;
  var $i424: i32;
  var $i425: i32;
  var $p426: ref;
  var $i427: i8;
  var $i428: i32;
  var $i429: i32;
  var $i430: i1;
  var $i431: i8;
  var $i432: i32;
  var $i433: i32;
  var $p434: ref;
  var $i435: i8;
  var $i436: i32;
  var $i437: i32;
  var $i438: i1;
  var $i439: i8;
  var $i440: i32;
  var $i441: i32;
  var $p442: ref;
  var $i443: i8;
  var $i444: i32;
  var $i445: i32;
  var $i446: i1;
  var $i447: i8;
  var $i448: i32;
  var $i449: i32;
  var $p450: ref;
  var $i451: i8;
  var $i452: i32;
  var $i453: i32;
  var $i454: i1;
  var $i455: i8;
  var $i456: i32;
  var $i457: i32;
  var $p458: ref;
  var $i459: i8;
  var $i460: i32;
  var $i461: i32;
  var $i462: i1;
  var $i463: i8;
  var $i464: i32;
  var $i465: i32;
  var $p466: ref;
  var $i467: i8;
  var $i468: i32;
  var $i469: i32;
  var $i470: i1;
  var $i471: i8;
  var $i472: i32;
  var $i473: i32;
  var $p474: ref;
  var $i475: i8;
  var $i476: i32;
  var $i477: i32;
  var $i478: i1;
  var $i479: i8;
  var $i480: i32;
  var $i481: i32;
  var $p482: ref;
  var $i483: i8;
  var $i484: i32;
  var $i485: i32;
  var $i486: i1;
  var $i487: i8;
  var $i488: i32;
  var $i489: i32;
  var $p490: ref;
  var $i491: i8;
  var $i492: i32;
  var $i493: i32;
  var $i494: i1;
  var $i495: i8;
  var $i496: i32;
  var $i497: i32;
  var $p498: ref;
  var $i499: i8;
  var $i500: i32;
  var $i501: i32;
  var $i502: i1;
  var $i503: i8;
  var $i504: i32;
  var $i505: i32;
  var $p506: ref;
  var $i507: i8;
  var $i508: i32;
  var $i509: i32;
  var $i510: i1;
  var $i511: i8;
  var $i512: i32;
  var $i513: i32;
  var $p514: ref;
  var $i515: i8;
  var $i516: i32;
  var $i517: i32;
  var $i518: i1;
  var $i519: i8;
  var $i520: i32;
  var $i521: i32;
  var $p522: ref;
  var $i523: i8;
  var $i524: i32;
  var $i525: i32;
  var $i526: i1;
  var $i527: i8;
  var $i528: i32;
  var $i529: i32;
  var $p530: ref;
  var $i531: i8;
  var $i532: i32;
  var $i533: i32;
  var $i534: i1;
  var $i535: i8;
  var $i536: i32;
  var $i537: i32;
  var $p538: ref;
  var $i539: i8;
  var $i540: i32;
  var $i541: i32;
  var $i542: i1;
  var $i543: i8;
  var $i544: i32;
  var $i545: i32;
  var $p546: ref;
  var $i547: i8;
  var $i548: i32;
  var $i549: i32;
  var $i550: i1;
  var $i551: i8;
  var $i552: i32;
  var $i553: i32;
  var $p554: ref;
  var $i555: i8;
  var $i556: i32;
  var $i557: i32;
  var $i558: i1;
  var $i559: i8;
  var $i560: i32;
  var $i561: i32;
  var $p562: ref;
  var $i563: i8;
  var $i564: i32;
  var $i565: i32;
  var $i566: i1;
  var $i567: i8;
  var $i568: i32;
  var $i569: i32;
  var $p570: ref;
  var $i571: i8;
  var $i572: i32;
  var $i573: i32;
  var $i574: i1;
  var $i575: i8;
  var $i576: i32;
  var $i577: i32;
  var $p578: ref;
  var $i579: i8;
  var $i580: i32;
  var $i581: i32;
  var $i582: i1;
  var $i583: i8;
  var $i584: i32;
  var $i585: i32;
  var $p586: ref;
  var $i587: i8;
  var $i588: i32;
  var $i589: i32;
  var $i590: i1;
  var $i591: i8;
  var $i592: i32;
  var $i593: i32;
  var $p594: ref;
  var $i595: i8;
  var $i596: i32;
  var $i597: i32;
  var $i598: i1;
  var $i599: i8;
  var $i600: i32;
  var $i601: i32;
  var $p602: ref;
  var $i603: i8;
  var $i604: i32;
  var $i605: i32;
  var $i606: i1;
  var $i607: i8;
  var $i608: i32;
  var $i609: i32;
  var $p610: ref;
  var $i611: i8;
  var $i612: i32;
  var $i613: i32;
  var $i614: i1;
  var $i615: i8;
  var $i616: i32;
  var $i617: i32;
  var $p618: ref;
  var $i619: i8;
  var $i620: i32;
  var $i621: i32;
  var $i622: i1;
  var $i623: i8;
  var $i624: i32;
  var $i625: i32;
  var $p626: ref;
  var $i627: i8;
  var $i628: i32;
  var $i629: i32;
  var $i630: i1;
  var $i631: i8;
  var $i632: i32;
  var $i633: i32;
  var $p634: ref;
  var $i635: i8;
  var $i636: i32;
  var $i637: i32;
  var $i638: i1;
  var $i639: i8;
  var $i640: i32;
  var $i641: i32;
  var $p642: ref;
  var $i643: i8;
  var $i644: i32;
  var $i645: i32;
  var $i646: i1;
  var $i647: i8;
  var $i648: i32;
  var $i649: i32;
  var $p650: ref;
  var $i651: i8;
  var $i652: i32;
  var $i653: i32;
  var $i654: i1;
  var $i655: i8;
  var $i656: i32;
  var $i657: i32;
  var $p658: ref;
  var $i659: i8;
  var $i660: i32;
  var $i661: i32;
  var $i662: i1;
  var $i663: i8;
  var $i664: i32;
  var $i665: i32;
  var $p666: ref;
  var $i667: i8;
  var $i668: i32;
  var $i669: i32;
  var $i670: i1;
  var $i671: i8;
  var $i672: i32;
  var $i673: i32;
  var $p674: ref;
  var $i675: i8;
  var $i676: i32;
  var $i677: i32;
  var $i678: i1;
  var $i679: i8;
  var $i680: i32;
  var $i681: i32;
  var $p682: ref;
  var $i683: i8;
  var $i684: i32;
  var $i685: i32;
  var $i686: i1;
  var $i687: i8;
  var $i688: i32;
  var $i689: i32;
  var $p690: ref;
  var $i691: i8;
  var $i692: i32;
  var $i693: i32;
  var $i694: i1;
  var $i695: i8;
  var $i696: i32;
  var $i697: i32;
  var $p698: ref;
  var $i699: i8;
  var $i700: i32;
  var $i701: i32;
  var $i702: i1;
  var $i703: i8;
  var $i704: i32;
  var $i705: i32;
  var $p706: ref;
  var $i707: i8;
  var $i708: i32;
  var $i709: i32;
  var $i710: i1;
  var cmdloc_dummy_var_77: [ref]i8;
  var cmdloc_dummy_var_78: [ref]i8;
  var cmdloc_dummy_var_79: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} {:cexpr "get_std_timing:arg:ver"} boogie_si_record_i32($i2);
    call {:si_unique_call 565} {:cexpr "get_std_timing:arg:rev"} boogie_si_record_i32($i3);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p0);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i6, 8);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i7, $i10);
    call {:si_unique_call 566} {:cexpr "std_2byte_code"} boogie_si_record_i32($i11);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32(0, $i11);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $i13 := 0;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p0);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i81 := $shl.i32($i80, 8);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.0, $p82);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $i85 := $or.i32($i81, $i84);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32(12569, $i85);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $i13 := 1;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.0, $p0);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $i89 := $shl.i32($i88, 8);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $i93 := $or.i32($i89, $i92);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32(0, $i93);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $i13 := 2;
    assume {:branchcond $i94} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.0, $p0);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $i97 := $shl.i32($i96, 8);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.0, $p98);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $i101 := $or.i32($i97, $i100);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32(12608, $i101);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $i13 := 3;
    assume {:branchcond $i102} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.0, $p0);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $i105 := $shl.i32($i104, 8);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.0, $p106);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $i109 := $or.i32($i105, $i108);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32(12620, $i109);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $i13 := 4;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p0);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $i113 := $shl.i32($i112, 8);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.0, $p114);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i115);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $i117 := $or.i32($i113, $i116);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32(12623, $i117);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $i13 := 5;
    assume {:branchcond $i118} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.0, $p0);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i120 := $zext.i8.i32($i119);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $i121 := $shl.i32($i120, 8);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.0, $p122);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i123);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $i125 := $or.i32($i121, $i124);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32(12633, $i125);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $i13 := 6;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.0, $p0);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $i129 := $shl.i32($i128, 8);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.0, $p130);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $i133 := $or.i32($i129, $i132);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32(0, $i133);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $i13 := 7;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.0, $p0);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i32($i135);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $i137 := $shl.i32($i136, 8);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $i139 := $load.i8($M.0, $p138);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $i140 := $zext.i8.i32($i139);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $i141 := $or.i32($i137, $i140);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32(17728, $i141);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $i13 := 8;
    assume {:branchcond $i142} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.0, $p0);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $i144 := $zext.i8.i32($i143);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $i145 := $shl.i32($i144, 8);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $i147 := $load.i8($M.0, $p146);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $i148 := $zext.i8.i32($i147);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $i149 := $or.i32($i145, $i148);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32(17740, $i149);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $i13 := 9;
    assume {:branchcond $i150} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.0, $p0);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i32($i151);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $i153 := $shl.i32($i152, 8);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $i155 := $load.i8($M.0, $p154);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $i156 := $zext.i8.i32($i155);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $i157 := $or.i32($i153, $i156);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32(17743, $i157);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $i13 := 10;
    assume {:branchcond $i158} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i159 := $load.i8($M.0, $p0);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $i160 := $zext.i8.i32($i159);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $i161 := $shl.i32($i160, 8);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $i163 := $load.i8($M.0, $p162);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $i164 := $zext.i8.i32($i163);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $i165 := $or.i32($i161, $i164);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32(17753, $i165);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $i13 := 11;
    assume {:branchcond $i166} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.0, $p0);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $i168 := $zext.i8.i32($i167);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $i169 := $shl.i32($i168, 8);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $i171 := $load.i8($M.0, $p170);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $i172 := $zext.i8.i32($i171);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $i173 := $or.i32($i169, $i172);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32(0, $i173);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $i13 := 12;
    assume {:branchcond $i174} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.0, $p0);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $i176 := $zext.i8.i32($i175);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $i177 := $shl.i32($i176, 8);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $i179 := $load.i8($M.0, $p178);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $i180 := $zext.i8.i32($i179);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $i181 := $or.i32($i177, $i180);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32(0, $i181);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $i13 := 13;
    assume {:branchcond $i182} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i183 := $load.i8($M.0, $p0);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $i184 := $zext.i8.i32($i183);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $i185 := $shl.i32($i184, 8);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $i187 := $load.i8($M.0, $p186);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $i188 := $zext.i8.i32($i187);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i189 := $or.i32($i185, $i188);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32(0, $i189);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $i13 := 14;
    assume {:branchcond $i190} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i191 := $load.i8($M.0, $p0);
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $i192 := $zext.i8.i32($i191);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $i193 := $shl.i32($i192, 8);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $i195 := $load.i8($M.0, $p194);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $i196 := $zext.i8.i32($i195);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $i197 := $or.i32($i193, $i196);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $i198 := $eq.i32(24896, $i197);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $i13 := 15;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i199 := $load.i8($M.0, $p0);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $i200 := $zext.i8.i32($i199);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $i201 := $shl.i32($i200, 8);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $i203 := $load.i8($M.0, $p202);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $i204 := $zext.i8.i32($i203);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $i205 := $or.i32($i201, $i204);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $i206 := $eq.i32(24906, $i205);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $i13 := 16;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $i207 := $load.i8($M.0, $p0);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $i208 := $zext.i8.i32($i207);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $i209 := $shl.i32($i208, 8);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $i211 := $load.i8($M.0, $p210);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $i212 := $zext.i8.i32($i211);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $i213 := $or.i32($i209, $i212);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $i214 := $eq.i32(24911, $i213);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $i13 := 17;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i215 := $load.i8($M.0, $p0);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $i216 := $zext.i8.i32($i215);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $i217 := $shl.i32($i216, 8);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $i219 := $load.i8($M.0, $p218);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $i220 := $zext.i8.i32($i219);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $i221 := $or.i32($i217, $i220);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32(24921, $i221);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $i13 := 18;
    assume {:branchcond $i222} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i223 := $load.i8($M.0, $p0);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $i224 := $zext.i8.i32($i223);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $i225 := $shl.i32($i224, 8);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i227 := $load.i8($M.0, $p226);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i228 := $zext.i8.i32($i227);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $i229 := $or.i32($i225, $i228);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32(0, $i229);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i13 := 19;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i231 := $load.i8($M.0, $p0);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $i232 := $zext.i8.i32($i231);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $i233 := $shl.i32($i232, 8);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i235 := $load.i8($M.0, $p234);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $i236 := $zext.i8.i32($i235);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $i237 := $or.i32($i233, $i236);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32(29007, $i237);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $i13 := 20;
    assume {:branchcond $i238} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i239 := $load.i8($M.0, $p0);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $i240 := $zext.i8.i32($i239);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $i241 := $shl.i32($i240, 8);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $i243 := $load.i8($M.0, $p242);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $i244 := $zext.i8.i32($i243);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $i245 := $or.i32($i241, $i244);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32(0, $i245);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $i13 := 21;
    assume {:branchcond $i246} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $i247 := $load.i8($M.0, $p0);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $i248 := $zext.i8.i32($i247);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $i249 := $shl.i32($i248, 8);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $i251 := $load.i8($M.0, $p250);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $i252 := $zext.i8.i32($i251);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $i253 := $or.i32($i249, $i252);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32(0, $i253);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $i13 := 22;
    assume {:branchcond $i254} true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $i255 := $load.i8($M.0, $p0);
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    $i256 := $zext.i8.i32($i255);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $i257 := $shl.i32($i256, 8);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $i259 := $load.i8($M.0, $p258);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $i260 := $zext.i8.i32($i259);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $i261 := $or.i32($i257, $i260);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $i262 := $eq.i32(0, $i261);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $i13 := 23;
    assume {:branchcond $i262} true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $i263 := $load.i8($M.0, $p0);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $i264 := $zext.i8.i32($i263);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $i265 := $shl.i32($i264, 8);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i267 := $load.i8($M.0, $p266);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $i268 := $zext.i8.i32($i267);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $i269 := $or.i32($i265, $i268);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $i270 := $eq.i32(0, $i269);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $i13 := 24;
    assume {:branchcond $i270} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $i271 := $load.i8($M.0, $p0);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $i272 := $zext.i8.i32($i271);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $i273 := $shl.i32($i272, 8);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $i275 := $load.i8($M.0, $p274);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $i276 := $zext.i8.i32($i275);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i277 := $or.i32($i273, $i276);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $i278 := $eq.i32(0, $i277);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $i13 := 25;
    assume {:branchcond $i278} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $i279 := $load.i8($M.0, $p0);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $i280 := $zext.i8.i32($i279);
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $i281 := $shl.i32($i280, 8);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $i283 := $load.i8($M.0, $p282);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $i284 := $zext.i8.i32($i283);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $i285 := $or.i32($i281, $i284);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $i286 := $eq.i32(0, $i285);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i13 := 26;
    assume {:branchcond $i286} true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $i287 := $load.i8($M.0, $p0);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $i288 := $zext.i8.i32($i287);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $i289 := $shl.i32($i288, 8);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $i291 := $load.i8($M.0, $p290);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $i292 := $zext.i8.i32($i291);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $i293 := $or.i32($i289, $i292);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32(33024, $i293);
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $i13 := 27;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $i295 := $load.i8($M.0, $p0);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $i296 := $zext.i8.i32($i295);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $i297 := $shl.i32($i296, 8);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $i299 := $load.i8($M.0, $p298);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $i300 := $zext.i8.i32($i299);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $i301 := $or.i32($i297, $i300);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32(33039, $i301);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $i13 := 28;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $i303 := $load.i8($M.0, $p0);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $i304 := $zext.i8.i32($i303);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $i305 := $shl.i32($i304, 8);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $i307 := $load.i8($M.0, $p306);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $i308 := $zext.i8.i32($i307);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $i309 := $or.i32($i305, $i308);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $i310 := $eq.i32(33049, $i309);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $i13 := 29;
    assume {:branchcond $i310} true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $i311 := $load.i8($M.0, $p0);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $i312 := $zext.i8.i32($i311);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $i313 := $shl.i32($i312, 8);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $i315 := $load.i8($M.0, $p314);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $i316 := $zext.i8.i32($i315);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $i317 := $or.i32($i313, $i316);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $i318 := $eq.i32(0, $i317);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $i13 := 30;
    assume {:branchcond $i318} true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    $i319 := $load.i8($M.0, $p0);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $i320 := $zext.i8.i32($i319);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $i321 := $shl.i32($i320, 8);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $i323 := $load.i8($M.0, $p322);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $i324 := $zext.i8.i32($i323);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $i325 := $or.i32($i321, $i324);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32(33088, $i325);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $i13 := 31;
    assume {:branchcond $i326} true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $i327 := $load.i8($M.0, $p0);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $i328 := $zext.i8.i32($i327);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $i329 := $shl.i32($i328, 8);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i331 := $load.i8($M.0, $p330);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $i332 := $zext.i8.i32($i331);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $i333 := $or.i32($i329, $i332);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $i334 := $eq.i32(33113, $i333);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $i13 := 32;
    assume {:branchcond $i334} true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $i335 := $load.i8($M.0, $p0);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $i336 := $zext.i8.i32($i335);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $i337 := $shl.i32($i336, 8);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $i339 := $load.i8($M.0, $p338);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $i340 := $zext.i8.i32($i339);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $i341 := $or.i32($i337, $i340);
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $i342 := $eq.i32(0, $i341);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $i13 := 33;
    assume {:branchcond $i342} true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $i343 := $load.i8($M.0, $p0);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $i344 := $zext.i8.i32($i343);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $i345 := $shl.i32($i344, 8);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $i347 := $load.i8($M.0, $p346);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $i348 := $zext.i8.i32($i347);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $i349 := $or.i32($i345, $i348);
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $i350 := $eq.i32(33152, $i349);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $i13 := 34;
    assume {:branchcond $i350} true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $i351 := $load.i8($M.0, $p0);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $i352 := $zext.i8.i32($i351);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i353 := $shl.i32($i352, 8);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $i355 := $load.i8($M.0, $p354);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $i356 := $zext.i8.i32($i355);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $i357 := $or.i32($i353, $i356);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i358 := $eq.i32(33167, $i357);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $i13 := 35;
    assume {:branchcond $i358} true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $i359 := $load.i8($M.0, $p0);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $i360 := $zext.i8.i32($i359);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $i361 := $shl.i32($i360, 8);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $i363 := $load.i8($M.0, $p362);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $i364 := $zext.i8.i32($i363);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $i365 := $or.i32($i361, $i364);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $i366 := $eq.i32(33177, $i365);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $i13 := 36;
    assume {:branchcond $i366} true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $i367 := $load.i8($M.0, $p0);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i368 := $zext.i8.i32($i367);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $i369 := $shl.i32($i368, 8);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $i371 := $load.i8($M.0, $p370);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $i372 := $zext.i8.i32($i371);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $i373 := $or.i32($i369, $i372);
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $i374 := $eq.i32(0, $i373);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $i13 := 37;
    assume {:branchcond $i374} true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $i375 := $load.i8($M.0, $p0);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $i376 := $zext.i8.i32($i375);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $i377 := $shl.i32($i376, 8);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $i379 := $load.i8($M.0, $p378);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $i380 := $zext.i8.i32($i379);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $i381 := $or.i32($i377, $i380);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $i382 := $eq.i32(0, $i381);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $i13 := 38;
    assume {:branchcond $i382} true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $i383 := $load.i8($M.0, $p0);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $i384 := $zext.i8.i32($i383);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $i385 := $shl.i32($i384, 8);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $i387 := $load.i8($M.0, $p386);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $i388 := $zext.i8.i32($i387);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $i389 := $or.i32($i385, $i388);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $i390 := $eq.i32(0, $i389);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $i13 := 39;
    assume {:branchcond $i390} true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i390 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $i391 := $load.i8($M.0, $p0);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $i392 := $zext.i8.i32($i391);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $i393 := $shl.i32($i392, 8);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $i395 := $load.i8($M.0, $p394);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $i396 := $zext.i8.i32($i395);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $i397 := $or.i32($i393, $i396);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $i398 := $eq.i32(0, $i397);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $i13 := 40;
    assume {:branchcond $i398} true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $i399 := $load.i8($M.0, $p0);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $i400 := $zext.i8.i32($i399);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $i401 := $shl.i32($i400, 8);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $i403 := $load.i8($M.0, $p402);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $i404 := $zext.i8.i32($i403);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $i405 := $or.i32($i401, $i404);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $i406 := $eq.i32(36928, $i405);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $i13 := 41;
    assume {:branchcond $i406} true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i406 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $i407 := $load.i8($M.0, $p0);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $i408 := $zext.i8.i32($i407);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $i409 := $shl.i32($i408, 8);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i411 := $load.i8($M.0, $p410);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $i412 := $zext.i8.i32($i411);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $i413 := $or.i32($i409, $i412);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $i414 := $eq.i32(36943, $i413);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $i13 := 42;
    assume {:branchcond $i414} true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i414 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $i415 := $load.i8($M.0, $p0);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $i416 := $zext.i8.i32($i415);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $i417 := $shl.i32($i416, 8);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $i419 := $load.i8($M.0, $p418);
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $i420 := $zext.i8.i32($i419);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $i421 := $or.i32($i417, $i420);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $i422 := $eq.i32(36953, $i421);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $i13 := 43;
    assume {:branchcond $i422} true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i422 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $i423 := $load.i8($M.0, $p0);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $i424 := $zext.i8.i32($i423);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $i425 := $shl.i32($i424, 8);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $i427 := $load.i8($M.0, $p426);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $i428 := $zext.i8.i32($i427);
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $i429 := $or.i32($i425, $i428);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $i430 := $eq.i32(0, $i429);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $i13 := 44;
    assume {:branchcond $i430} true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i430 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $i431 := $load.i8($M.0, $p0);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $i432 := $zext.i8.i32($i431);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $i433 := $shl.i32($i432, 8);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $i435 := $load.i8($M.0, $p434);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $i436 := $zext.i8.i32($i435);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $i437 := $or.i32($i433, $i436);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $i438 := $eq.i32(38144, $i437);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $i13 := 45;
    assume {:branchcond $i438} true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i438 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $i439 := $load.i8($M.0, $p0);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $i440 := $zext.i8.i32($i439);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $i441 := $shl.i32($i440, 8);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $i443 := $load.i8($M.0, $p442);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $i444 := $zext.i8.i32($i443);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $i445 := $or.i32($i441, $i444);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $i446 := $eq.i32(38144, $i445);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $i13 := 46;
    assume {:branchcond $i446} true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i446 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $i447 := $load.i8($M.0, $p0);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $i448 := $zext.i8.i32($i447);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $i449 := $shl.i32($i448, 8);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $i451 := $load.i8($M.0, $p450);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $i452 := $zext.i8.i32($i451);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i453 := $or.i32($i449, $i452);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $i454 := $eq.i32(38159, $i453);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $i13 := 47;
    assume {:branchcond $i454} true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i454 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $i455 := $load.i8($M.0, $p0);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $i456 := $zext.i8.i32($i455);
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $i457 := $shl.i32($i456, 8);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $i459 := $load.i8($M.0, $p458);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $i460 := $zext.i8.i32($i459);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $i461 := $or.i32($i457, $i460);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $i462 := $eq.i32(38169, $i461);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $i13 := 48;
    assume {:branchcond $i462} true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $i463 := $load.i8($M.0, $p0);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $i464 := $zext.i8.i32($i463);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $i465 := $shl.i32($i464, 8);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $i467 := $load.i8($M.0, $p466);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $i468 := $zext.i8.i32($i467);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $i469 := $or.i32($i465, $i468);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $i470 := $eq.i32(0, $i469);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i13 := 49;
    assume {:branchcond $i470} true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i470 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    $i471 := $load.i8($M.0, $p0);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $i472 := $zext.i8.i32($i471);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $i473 := $shl.i32($i472, 8);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $i475 := $load.i8($M.0, $p474);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $i476 := $zext.i8.i32($i475);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $i477 := $or.i32($i473, $i476);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $i478 := $eq.i32(43328, $i477);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $i13 := 50;
    assume {:branchcond $i478} true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i478 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $i479 := $load.i8($M.0, $p0);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $i480 := $zext.i8.i32($i479);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $i481 := $shl.i32($i480, 8);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $i483 := $load.i8($M.0, $p482);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $i484 := $zext.i8.i32($i483);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i485 := $or.i32($i481, $i484);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $i486 := $eq.i32(43333, $i485);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $i13 := 51;
    assume {:branchcond $i486} true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i486 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $i487 := $load.i8($M.0, $p0);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $i488 := $zext.i8.i32($i487);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $i489 := $shl.i32($i488, 8);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $i491 := $load.i8($M.0, $p490);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $i492 := $zext.i8.i32($i491);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $i493 := $or.i32($i489, $i492);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $i494 := $eq.i32(43338, $i493);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $i13 := 52;
    assume {:branchcond $i494} true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i494 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    $i495 := $load.i8($M.0, $p0);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $i496 := $zext.i8.i32($i495);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $i497 := $shl.i32($i496, 8);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $p498 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $i499 := $load.i8($M.0, $p498);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $i500 := $zext.i8.i32($i499);
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $i501 := $or.i32($i497, $i500);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $i502 := $eq.i32(43343, $i501);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $i13 := 53;
    assume {:branchcond $i502} true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i502 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $i503 := $load.i8($M.0, $p0);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $i504 := $zext.i8.i32($i503);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $i505 := $shl.i32($i504, 8);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $i507 := $load.i8($M.0, $p506);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $i508 := $zext.i8.i32($i507);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $i509 := $or.i32($i505, $i508);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $i510 := $eq.i32(43353, $i509);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $i13 := 54;
    assume {:branchcond $i510} true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i510 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $i511 := $load.i8($M.0, $p0);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $i512 := $zext.i8.i32($i511);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i513 := $shl.i32($i512, 8);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $i515 := $load.i8($M.0, $p514);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $i516 := $zext.i8.i32($i515);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $i517 := $or.i32($i513, $i516);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $i518 := $eq.i32(0, $i517);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $i13 := 55;
    assume {:branchcond $i518} true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i518 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    $i519 := $load.i8($M.0, $p0);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i520 := $zext.i8.i32($i519);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $i521 := $shl.i32($i520, 8);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $i523 := $load.i8($M.0, $p522);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $i524 := $zext.i8.i32($i523);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $i525 := $or.i32($i521, $i524);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $i526 := $eq.i32(0, $i525);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $i13 := 56;
    assume {:branchcond $i526} true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i526 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    $i527 := $load.i8($M.0, $p0);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $i528 := $zext.i8.i32($i527);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $i529 := $shl.i32($i528, 8);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $i531 := $load.i8($M.0, $p530);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $i532 := $zext.i8.i32($i531);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $i533 := $or.i32($i529, $i532);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $i534 := $eq.i32(45824, $i533);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $i13 := 57;
    assume {:branchcond $i534} true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i534 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    $i535 := $load.i8($M.0, $p0);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $i536 := $zext.i8.i32($i535);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $i537 := $shl.i32($i536, 8);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $p538 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $i539 := $load.i8($M.0, $p538);
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $i540 := $zext.i8.i32($i539);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $i541 := $or.i32($i537, $i540);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $i542 := $eq.i32(45839, $i541);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $i13 := 58;
    assume {:branchcond $i542} true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i542 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    $i543 := $load.i8($M.0, $p0);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $i544 := $zext.i8.i32($i543);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $i545 := $shl.i32($i544, 8);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $p546 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $i547 := $load.i8($M.0, $p546);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $i548 := $zext.i8.i32($i547);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $i549 := $or.i32($i545, $i548);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $i550 := $eq.i32(45849, $i549);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $i13 := 59;
    assume {:branchcond $i550} true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i550 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    $i551 := $load.i8($M.0, $p0);
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $i552 := $zext.i8.i32($i551);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $i553 := $shl.i32($i552, 8);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $i555 := $load.i8($M.0, $p554);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $i556 := $zext.i8.i32($i555);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $i557 := $or.i32($i553, $i556);
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $i558 := $eq.i32(0, $i557);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $i13 := 60;
    assume {:branchcond $i558} true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i558 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    $i559 := $load.i8($M.0, $p0);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $i560 := $zext.i8.i32($i559);
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $i561 := $shl.i32($i560, 8);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $i563 := $load.i8($M.0, $p562);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $i564 := $zext.i8.i32($i563);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $i565 := $or.i32($i561, $i564);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $i566 := $eq.i32(49472, $i565);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $i13 := 61;
    assume {:branchcond $i566} true;
    goto $bb291, $bb292;

  $bb292:
    assume !($i566 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    $i567 := $load.i8($M.0, $p0);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $i568 := $zext.i8.i32($i567);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $i569 := $shl.i32($i568, 8);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $i571 := $load.i8($M.0, $p570);
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $i572 := $zext.i8.i32($i571);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $i573 := $or.i32($i569, $i572);
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $i574 := $eq.i32(49487, $i573);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $i13 := 62;
    assume {:branchcond $i574} true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i574 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    $i575 := $load.i8($M.0, $p0);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $i576 := $zext.i8.i32($i575);
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $i577 := $shl.i32($i576, 8);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $i579 := $load.i8($M.0, $p578);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $i580 := $zext.i8.i32($i579);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $i581 := $or.i32($i577, $i580);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $i582 := $eq.i32(0, $i581);
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $i13 := 63;
    assume {:branchcond $i582} true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i582 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    $i583 := $load.i8($M.0, $p0);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $i584 := $zext.i8.i32($i583);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $i585 := $shl.i32($i584, 8);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $i587 := $load.i8($M.0, $p586);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $i588 := $zext.i8.i32($i587);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $i589 := $or.i32($i585, $i588);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $i590 := $eq.i32(51520, $i589);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $i13 := 64;
    assume {:branchcond $i590} true;
    goto $bb303, $bb304;

  $bb304:
    assume !($i590 == 1);
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    $i591 := $load.i8($M.0, $p0);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $i592 := $zext.i8.i32($i591);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $i593 := $shl.i32($i592, 8);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $p594 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $i595 := $load.i8($M.0, $p594);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $i596 := $zext.i8.i32($i595);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $i597 := $or.i32($i593, $i596);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $i598 := $eq.i32(51535, $i597);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $i13 := 65;
    assume {:branchcond $i598} true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i598 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    $i599 := $load.i8($M.0, $p0);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $i600 := $zext.i8.i32($i599);
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $i601 := $shl.i32($i600, 8);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $p602 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $i603 := $load.i8($M.0, $p602);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $i604 := $zext.i8.i32($i603);
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $i605 := $or.i32($i601, $i604);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $i606 := $eq.i32(0, $i605);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $i13 := 66;
    assume {:branchcond $i606} true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i606 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    $i607 := $load.i8($M.0, $p0);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $i608 := $zext.i8.i32($i607);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $i609 := $shl.i32($i608, 8);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $p610 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $i611 := $load.i8($M.0, $p610);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $i612 := $zext.i8.i32($i611);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $i613 := $or.i32($i609, $i612);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $i614 := $eq.i32(0, $i613);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $i13 := 67;
    assume {:branchcond $i614} true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i614 == 1);
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    $i615 := $load.i8($M.0, $p0);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $i616 := $zext.i8.i32($i615);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $i617 := $shl.i32($i616, 8);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $p618 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $i619 := $load.i8($M.0, $p618);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $i620 := $zext.i8.i32($i619);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $i621 := $or.i32($i617, $i620);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $i622 := $eq.i32(53504, $i621);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $i13 := 68;
    assume {:branchcond $i622} true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i622 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    $i623 := $load.i8($M.0, $p0);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $i624 := $zext.i8.i32($i623);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $i625 := $shl.i32($i624, 8);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $p626 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $i627 := $load.i8($M.0, $p626);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $i628 := $zext.i8.i32($i627);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $i629 := $or.i32($i625, $i628);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $i630 := $eq.i32(53519, $i629);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $i13 := 69;
    assume {:branchcond $i630} true;
    goto $bb323, $bb324;

  $bb324:
    assume !($i630 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    $i631 := $load.i8($M.0, $p0);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $i632 := $zext.i8.i32($i631);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $i633 := $shl.i32($i632, 8);
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $p634 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $i635 := $load.i8($M.0, $p634);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $i636 := $zext.i8.i32($i635);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $i637 := $or.i32($i633, $i636);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $i638 := $eq.i32(53529, $i637);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $i13 := 70;
    assume {:branchcond $i638} true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i638 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    $i639 := $load.i8($M.0, $p0);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $i640 := $zext.i8.i32($i639);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $i641 := $shl.i32($i640, 8);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $i643 := $load.i8($M.0, $p642);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $i644 := $zext.i8.i32($i643);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $i645 := $or.i32($i641, $i644);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $i646 := $eq.i32(0, $i645);
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $i13 := 71;
    assume {:branchcond $i646} true;
    goto $bb331, $bb332;

  $bb332:
    assume !($i646 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    $i647 := $load.i8($M.0, $p0);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $i648 := $zext.i8.i32($i647);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $i649 := $shl.i32($i648, 8);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $p650 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $i651 := $load.i8($M.0, $p650);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $i652 := $zext.i8.i32($i651);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $i653 := $or.i32($i649, $i652);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $i654 := $eq.i32(53568, $i653);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $i13 := 72;
    assume {:branchcond $i654} true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i654 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    $i655 := $load.i8($M.0, $p0);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $i656 := $zext.i8.i32($i655);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $i657 := $shl.i32($i656, 8);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $p658 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $i659 := $load.i8($M.0, $p658);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $i660 := $zext.i8.i32($i659);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $i661 := $or.i32($i657, $i660);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $i662 := $eq.i32(53583, $i661);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $i13 := 73;
    assume {:branchcond $i662} true;
    goto $bb339, $bb340;

  $bb340:
    assume !($i662 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    $i663 := $load.i8($M.0, $p0);
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $i664 := $zext.i8.i32($i663);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $i665 := $shl.i32($i664, 8);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $p666 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $i667 := $load.i8($M.0, $p666);
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $i668 := $zext.i8.i32($i667);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $i669 := $or.i32($i665, $i668);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $i670 := $eq.i32(0, $i669);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $i13 := 74;
    assume {:branchcond $i670} true;
    goto $bb343, $bb344;

  $bb344:
    assume !($i670 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    $i671 := $load.i8($M.0, $p0);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i672 := $zext.i8.i32($i671);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $i673 := $shl.i32($i672, 8);
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $p674 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $i675 := $load.i8($M.0, $p674);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $i676 := $zext.i8.i32($i675);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $i677 := $or.i32($i673, $i676);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    $i678 := $eq.i32(0, $i677);
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $i13 := 75;
    assume {:branchcond $i678} true;
    goto $bb347, $bb348;

  $bb348:
    assume !($i678 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    $i679 := $load.i8($M.0, $p0);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $i680 := $zext.i8.i32($i679);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $i681 := $shl.i32($i680, 8);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $p682 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $i683 := $load.i8($M.0, $p682);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $i684 := $zext.i8.i32($i683);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $i685 := $or.i32($i681, $i684);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $i686 := $eq.i32(0, $i685);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $i13 := 76;
    assume {:branchcond $i686} true;
    goto $bb351, $bb352;

  $bb352:
    assume !($i686 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    $i687 := $load.i8($M.0, $p0);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $i688 := $zext.i8.i32($i687);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $i689 := $shl.i32($i688, 8);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $p690 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $i691 := $load.i8($M.0, $p690);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $i692 := $zext.i8.i32($i691);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $i693 := $or.i32($i689, $i692);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $i694 := $eq.i32(0, $i693);
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $i13 := 77;
    assume {:branchcond $i694} true;
    goto $bb355, $bb356;

  $bb356:
    assume !($i694 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    $i695 := $load.i8($M.0, $p0);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $i696 := $zext.i8.i32($i695);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $i697 := $shl.i32($i696, 8);
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $i699 := $load.i8($M.0, $p698);
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $i700 := $zext.i8.i32($i699);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $i701 := $or.i32($i697, $i700);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $i702 := $eq.i32(0, $i701);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $i13 := 78;
    assume {:branchcond $i702} true;
    goto $bb359, $bb360;

  $bb360:
    assume !($i702 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    $i703 := $load.i8($M.0, $p0);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $i704 := $zext.i8.i32($i703);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $i705 := $shl.i32($i704, 8);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $p706 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $i707 := $load.i8($M.0, $p706);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $i708 := $zext.i8.i32($i707);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $i709 := $or.i32($i705, $i708);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $i710 := $eq.i32(0, $i709);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $i13 := 79;
    assume {:branchcond $i710} true;
    goto $bb363, $bb364;

  $bb364:
    assume !($i710 == 1);
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i14 := 80;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $i15 := $sle.i32($i14, 79);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p0);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, 31);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $i35 := $mul.i32($i34, 8);
    call {:si_unique_call 567} {:cexpr "xres"} boogie_si_record_i32($i35);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i36 := $sle.i32($i35, 256);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $i41 := $ashr.i32($i40, 6);
    call {:si_unique_call 569} {:cexpr "ratio"} boogie_si_record_i32($i41);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i41, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i41, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 63);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i63, 60);
    call {:si_unique_call 574} {:cexpr "refresh"} boogie_si_record_i32($i64);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} calc_mode_timings($i35, $i53, $i64, $p1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p4);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i37 := 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb43:
    assume $i66 == 1;
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(120, 1));
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb45;

  $bb46:
    assume $i69 == 1;
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $i72 := $udiv.i32(1000000000, $i71);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $i73 := $zext.i32.i64($i72);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i74 := $mul.i64($i73, 1000);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(120, 1));
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $i77 := $zext.i32.i64($i76);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $i78 := $ugt.i64($i74, $i77);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb45;

  $bb48:
    assume $i78 == 1;
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb18;

  $bb25:
    assume $i44 == 1;
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $i58 := $mul.i32($i35, 9);
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $i59 := $sdiv.i32($i58, 16);
    call {:si_unique_call 571} {:cexpr "yres"} boogie_si_record_i32($i59);
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $i53 := $i59;
    goto $bb41;

  $bb23:
    assume $i43 == 1;
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $i56 := $mul.i32($i35, 4);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $i57 := $sdiv.i32($i56, 5);
    call {:si_unique_call 570} {:cexpr "yres"} boogie_si_record_i32($i57);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i53 := $i57;
    goto $bb41;

  $bb21:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i41, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i45 == 1);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $i54 := $mul.i32($i35, 3);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $i55 := $sdiv.i32($i54, 4);
    call {:si_unique_call 572} {:cexpr "yres"} boogie_si_record_i32($i55);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $i53 := $i55;
    goto $bb41;

  $bb28:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i41, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb27;

  $bb30:
    assume $i46 == 1;
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $i47 := $sle.i32($i2, 0);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i47 == 1);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i2, 1);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i51 := $mul.i32($i35, 10);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $i52 := $sdiv.i32($i51, 16);
    call {:si_unique_call 573} {:cexpr "yres"} boogie_si_record_i32($i52);
    assume {:verifier.code 0} true;
    $i50 := $i52;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $i53 := $i50;
    goto $bb41;

  $bb35:
    assume $i48 == 1;
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $i49 := $sle.i32($i3, 2);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb37;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i50 := $i35;
    goto $bb40;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb33;

  $bb16:
    assume $i36 == 1;
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb18;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i14);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref($i16, 24)), $mul.ref(16, 1));
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.48, $p18);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb12;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i14);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref($i22, 24)), $mul.ref(16, 1));
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.48, $p24);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p1);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p25);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_77 := $M.0;
    cmdloc_dummy_var_78 := $M.0;
    call {:si_unique_call 568} cmdloc_dummy_var_79 := $memcpy.i8(cmdloc_dummy_var_77, cmdloc_dummy_var_78, $p26, $p27, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_79;
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i29, 2);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb363:
    assume {:verifier.code 0} true;
    assume $i710 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb6;

  $bb359:
    assume {:verifier.code 0} true;
    assume $i702 == 1;
    goto $bb4;

  $bb355:
    assume {:verifier.code 0} true;
    assume $i694 == 1;
    goto $bb4;

  $bb351:
    assume {:verifier.code 0} true;
    assume $i686 == 1;
    goto $bb4;

  $bb347:
    assume {:verifier.code 0} true;
    assume $i678 == 1;
    goto $bb4;

  $bb343:
    assume {:verifier.code 0} true;
    assume $i670 == 1;
    goto $bb4;

  $bb339:
    assume {:verifier.code 0} true;
    assume $i662 == 1;
    goto $bb4;

  $bb335:
    assume {:verifier.code 0} true;
    assume $i654 == 1;
    goto $bb4;

  $bb331:
    assume {:verifier.code 0} true;
    assume $i646 == 1;
    goto $bb4;

  $bb327:
    assume {:verifier.code 0} true;
    assume $i638 == 1;
    goto $bb4;

  $bb323:
    assume {:verifier.code 0} true;
    assume $i630 == 1;
    goto $bb4;

  $bb319:
    assume {:verifier.code 0} true;
    assume $i622 == 1;
    goto $bb4;

  $bb315:
    assume {:verifier.code 0} true;
    assume $i614 == 1;
    goto $bb4;

  $bb311:
    assume {:verifier.code 0} true;
    assume $i606 == 1;
    goto $bb4;

  $bb307:
    assume {:verifier.code 0} true;
    assume $i598 == 1;
    goto $bb4;

  $bb303:
    assume {:verifier.code 0} true;
    assume $i590 == 1;
    goto $bb4;

  $bb299:
    assume {:verifier.code 0} true;
    assume $i582 == 1;
    goto $bb4;

  $bb295:
    assume {:verifier.code 0} true;
    assume $i574 == 1;
    goto $bb4;

  $bb291:
    assume {:verifier.code 0} true;
    assume $i566 == 1;
    goto $bb4;

  $bb287:
    assume {:verifier.code 0} true;
    assume $i558 == 1;
    goto $bb4;

  $bb283:
    assume {:verifier.code 0} true;
    assume $i550 == 1;
    goto $bb4;

  $bb279:
    assume {:verifier.code 0} true;
    assume $i542 == 1;
    goto $bb4;

  $bb275:
    assume {:verifier.code 0} true;
    assume $i534 == 1;
    goto $bb4;

  $bb271:
    assume {:verifier.code 0} true;
    assume $i526 == 1;
    goto $bb4;

  $bb267:
    assume {:verifier.code 0} true;
    assume $i518 == 1;
    goto $bb4;

  $bb263:
    assume {:verifier.code 0} true;
    assume $i510 == 1;
    goto $bb4;

  $bb259:
    assume {:verifier.code 0} true;
    assume $i502 == 1;
    goto $bb4;

  $bb255:
    assume {:verifier.code 0} true;
    assume $i494 == 1;
    goto $bb4;

  $bb251:
    assume {:verifier.code 0} true;
    assume $i486 == 1;
    goto $bb4;

  $bb247:
    assume {:verifier.code 0} true;
    assume $i478 == 1;
    goto $bb4;

  $bb243:
    assume {:verifier.code 0} true;
    assume $i470 == 1;
    goto $bb4;

  $bb239:
    assume {:verifier.code 0} true;
    assume $i462 == 1;
    goto $bb4;

  $bb235:
    assume {:verifier.code 0} true;
    assume $i454 == 1;
    goto $bb4;

  $bb231:
    assume {:verifier.code 0} true;
    assume $i446 == 1;
    goto $bb4;

  $bb227:
    assume {:verifier.code 0} true;
    assume $i438 == 1;
    goto $bb4;

  $bb223:
    assume {:verifier.code 0} true;
    assume $i430 == 1;
    goto $bb4;

  $bb219:
    assume {:verifier.code 0} true;
    assume $i422 == 1;
    goto $bb4;

  $bb215:
    assume {:verifier.code 0} true;
    assume $i414 == 1;
    goto $bb4;

  $bb211:
    assume {:verifier.code 0} true;
    assume $i406 == 1;
    goto $bb4;

  $bb207:
    assume {:verifier.code 0} true;
    assume $i398 == 1;
    goto $bb4;

  $bb203:
    assume {:verifier.code 0} true;
    assume $i390 == 1;
    goto $bb4;

  $bb199:
    assume {:verifier.code 0} true;
    assume $i382 == 1;
    goto $bb4;

  $bb195:
    assume {:verifier.code 0} true;
    assume $i374 == 1;
    goto $bb4;

  $bb191:
    assume {:verifier.code 0} true;
    assume $i366 == 1;
    goto $bb4;

  $bb187:
    assume {:verifier.code 0} true;
    assume $i358 == 1;
    goto $bb4;

  $bb183:
    assume {:verifier.code 0} true;
    assume $i350 == 1;
    goto $bb4;

  $bb179:
    assume {:verifier.code 0} true;
    assume $i342 == 1;
    goto $bb4;

  $bb175:
    assume {:verifier.code 0} true;
    assume $i334 == 1;
    goto $bb4;

  $bb171:
    assume {:verifier.code 0} true;
    assume $i326 == 1;
    goto $bb4;

  $bb167:
    assume {:verifier.code 0} true;
    assume $i318 == 1;
    goto $bb4;

  $bb163:
    assume {:verifier.code 0} true;
    assume $i310 == 1;
    goto $bb4;

  $bb159:
    assume {:verifier.code 0} true;
    assume $i302 == 1;
    goto $bb4;

  $bb155:
    assume {:verifier.code 0} true;
    assume $i294 == 1;
    goto $bb4;

  $bb151:
    assume {:verifier.code 0} true;
    assume $i286 == 1;
    goto $bb4;

  $bb147:
    assume {:verifier.code 0} true;
    assume $i278 == 1;
    goto $bb4;

  $bb143:
    assume {:verifier.code 0} true;
    assume $i270 == 1;
    goto $bb4;

  $bb139:
    assume {:verifier.code 0} true;
    assume $i262 == 1;
    goto $bb4;

  $bb135:
    assume {:verifier.code 0} true;
    assume $i254 == 1;
    goto $bb4;

  $bb131:
    assume {:verifier.code 0} true;
    assume $i246 == 1;
    goto $bb4;

  $bb127:
    assume {:verifier.code 0} true;
    assume $i238 == 1;
    goto $bb4;

  $bb123:
    assume {:verifier.code 0} true;
    assume $i230 == 1;
    goto $bb4;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i222 == 1;
    goto $bb4;

  $bb115:
    assume {:verifier.code 0} true;
    assume $i214 == 1;
    goto $bb4;

  $bb111:
    assume {:verifier.code 0} true;
    assume $i206 == 1;
    goto $bb4;

  $bb107:
    assume {:verifier.code 0} true;
    assume $i198 == 1;
    goto $bb4;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i190 == 1;
    goto $bb4;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i182 == 1;
    goto $bb4;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i174 == 1;
    goto $bb4;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i166 == 1;
    goto $bb4;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i158 == 1;
    goto $bb4;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i150 == 1;
    goto $bb4;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i142 == 1;
    goto $bb4;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i134 == 1;
    goto $bb4;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i126 == 1;
    goto $bb4;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb4;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i110 == 1;
    goto $bb4;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb4;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb4;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb4;
}



const get_dst_timing: ref;

axiom get_dst_timing == $sub.ref(0, 405153);

procedure get_dst_timing($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation get_dst_timing($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $p6: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} {:cexpr "get_dst_timing:arg:ver"} boogie_si_record_i32($i2);
    call {:si_unique_call 577} {:cexpr "get_dst_timing:arg:rev"} boogie_si_record_i32($i3);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $i5 := get_std_timing($p0, $p1, $i2, $i3, $p4);
    call {:si_unique_call 579} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p1, $mul.ref($i8, 64));
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $i10 := get_std_timing($p6, $p9, $i2, $i3, $p4);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, $i5);
    $i12 := $add.i64(2, 2);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p0, $mul.ref($i12, 1));
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i11);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p1, $mul.ref($i14, 64));
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i16 := get_std_timing($p13, $p15, $i2, $i3, $p4);
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, $i11);
    $i18 := $add.i64($i12, 2);
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p0, $mul.ref($i18, 1));
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i17);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p1, $mul.ref($i20, 64));
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $i22 := get_std_timing($p19, $p21, $i2, $i3, $p4);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, $i17);
    $i24 := $add.i64($i18, 2);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p0, $mul.ref($i24, 1));
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i23);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p1, $mul.ref($i26, 64));
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $i28 := get_std_timing($p25, $p27, $i2, $i3, $p4);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, $i23);
    $i30 := $add.i64($i24, 2);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p0, $mul.ref($i30, 1));
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i29);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p1, $mul.ref($i32, 64));
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $i34 := get_std_timing($p31, $p33, $i2, $i3, $p4);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i34, $i29);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const llvm.memmove.p0i8.p0i8.i64: ref;

axiom llvm.memmove.p0i8.p0i8.i64 == $sub.ref(0, 406185);

procedure llvm.memmove.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const calc_mode_timings: ref;

axiom calc_mode_timings == $sub.ref(0, 407217);

procedure calc_mode_timings($i0: i32, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calc_mode_timings($i0: i32, $i1: i32, $i2: i32, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var vslice_dummy_var_152: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} {:cexpr "calc_mode_timings:arg:xres"} boogie_si_record_i32($i0);
    call {:si_unique_call 586} {:cexpr "calc_mode_timings:arg:yres"} boogie_si_record_i32($i1);
    call {:si_unique_call 587} {:cexpr "calc_mode_timings:arg:refresh"} boogie_si_record_i32($i2);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $p4 := kzalloc(160, 208);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i0);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i1);
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} vslice_dummy_var_152 := fb_get_mode(257, $i2, $p5, $0.ref);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i0);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i1);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(100, 1));
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i2);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(104, 1));
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(108, 1));
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(116, 1));
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 0);
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 0);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p5);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} kfree($p37);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fb_get_mode: ref;

axiom fb_get_mode == $sub.ref(0, 408249);

procedure fb_get_mode($i0: i32, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fb_get_mode($i0: i32, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i26: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $i42: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p54: ref;
  var $i55: i32;
  var $p57: ref;
  var $i58: i32;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $p64: ref;
  var $i65: i16;
  var $i66: i32;
  var $p68: ref;
  var $i69: i32;
  var $p71: ref;
  var $i72: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $p86: ref;
  var $i87: i32;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $p117: ref;
  var $i112: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $i137: i32;
  var $i138: i1;
  var $p140: ref;
  var $i141: i32;
  var $i142: i32;
  var $i143: i32;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $i148: i32;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $i152: i32;
  var $p153: ref;
  var $i154: i32;
  var $i155: i32;
  var $p156: ref;
  var $p157: ref;
  var $i158: i32;
  var $p159: ref;
  var $i160: i32;
  var $i161: i32;
  var $p162: ref;
  var $i163: i32;
  var $i164: i32;
  var $p165: ref;
  var $i166: i32;
  var $i167: i32;
  var $p168: ref;
  var $i169: i32;
  var $p170: ref;
  var $p171: ref;
  var $i172: i32;
  var $i173: i32;
  var $i174: i32;
  var $p175: ref;
  var $i176: i32;
  var $p177: ref;
  var $i178: i32;
  var $i179: i32;
  var $i180: i32;
  var $p181: ref;
  var $i139: i32;
  var $p182: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} {:cexpr "fb_get_mode:arg:flags"} boogie_si_record_i32($i0);
    call {:si_unique_call 592} {:cexpr "fb_get_mode:arg:val"} boogie_si_record_i32($i1);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $p4 := kzalloc(36, 208);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p3);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i10 == 1);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(112, 1));
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.49, $p12);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(132, 1));
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.50, $p16);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(120, 1));
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.51, $p21);
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(112, 1));
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.49, $p25);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(108, 1));
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.52, $p28);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $i30 := $ult.i32($i26, $i29);
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(132, 1));
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.50, $p32);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(130, 1));
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.53, $p36);
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i34, $i38);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i39 == 1);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(120, 1));
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.51, $p41);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(116, 1));
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.54, $p44);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $i46 := $ult.i32($i42, $i45);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i46 == 1);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(108, 1));
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.52, $p54);
    call {:si_unique_call 594} {:cexpr "hfmin"} boogie_si_record_i32($i55);
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(112, 1));
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.49, $p57);
    call {:si_unique_call 595} {:cexpr "hfmax"} boogie_si_record_i32($i58);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(130, 1));
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.53, $p60);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    call {:si_unique_call 596} {:cexpr "vfmin"} boogie_si_record_i32($i62);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(132, 1));
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.50, $p64);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i65);
    call {:si_unique_call 597} {:cexpr "vfmax"} boogie_si_record_i32($i66);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(116, 1));
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.54, $p68);
    call {:si_unique_call 598} {:cexpr "dclkmin"} boogie_si_record_i32($i69);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(120, 1));
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.51, $p71);
    call {:si_unique_call 599} {:cexpr "dclkmax"} boogie_si_record_i32($i72);
    assume {:verifier.code 0} true;
    $i47, $i48, $i49, $i50, $i51, $i52 := $i58, $i55, $i62, $i66, $i69, $i72;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(12, 1));
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i77);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(132, 1));
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, 1);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i87 := 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(132, 1));
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 2);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i96 := 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i0, $sub.i32(0, 257));
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i97, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i97, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i97, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i112 := $sub.i32(0, 22);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i112, 0);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb48, $bb50;

  $bb50:
    assume !($i118 == 1);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i0, 256);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 0);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.0, $p140);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $i142 := $udiv.i32($i141, 1000);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $i143 := $udiv.i32(1000000000, $i142);
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(100, 1));
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, $i143);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(28, 1));
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $i147 := $mul.i32($i146, 8);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $i148 := $udiv.i32($i147, 100);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p149, $i148);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.0, $p150);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $i152 := $udiv.i32($i151, 2);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.0, $p153);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    $i155 := $sub.i32($i152, $i154);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(108, 1));
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p156, $i155);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.0, $p157);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(108, 1));
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.0, $p159);
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32($i158, $i160);
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, $p162);
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $i164 := $sub.i32($i161, $i163);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(104, 1));
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p165, $i164);
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $i166 := $mul.i32($i87, 3);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $i167 := $udiv.i32($i166, $i96);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p168, $i167);
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $i169 := $udiv.i32($i87, $i96);
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(116, 1));
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p170, $i169);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.0, $p171);
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $i173 := $mul.i32($i172, $i87);
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $i174 := $udiv.i32($i173, $i96);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $i176 := $load.i32($M.0, $p175);
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(116, 1));
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $i178 := $load.i32($M.0, $p177);
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $i179 := $add.i32($i176, $i178);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $i180 := $sub.i32($i174, $i179);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p181, $i180);
    assume {:verifier.code 0} true;
    $i139 := $i112;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $p182 := $bitcast.ref.ref($p5);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} kfree($p182);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $i8 := $i139;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb51:
    assume $i120 == 1;
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $i123 := $ult.i32($i122, $i49);
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i123 == 1);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $i126 := $ugt.i32($i125, $i50);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i126 == 1);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.0, $p127);
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $i129 := $ult.i32($i128, $i48);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i129 == 1);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    $i132 := $ugt.i32($i131, $i47);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i132 == 1);
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $i135 := $ult.i32($i134, $i51);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i135 == 1);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $i138 := $ugt.i32($i137, $i52);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i138 == 1);
    goto $bb53;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i138 == 1;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i139 := $sub.i32(0, 22);
    goto $bb66;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i135 == 1;
    goto $bb49;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i132 == 1;
    goto $bb49;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i129 == 1;
    goto $bb49;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i126 == 1;
    goto $bb49;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb49;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb49;

  $bb32:
    assume $i100 == 1;
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $i115 := $udiv.i32(1000000000, $i1);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $i116 := $mul.i32($i115, 1000);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, $i116);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} fb_timings_dclk($p5);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $i112 := 0;
    goto $bb45;

  $bb30:
    assume $i99 == 1;
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p114, $i1);
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} fb_timings_hfreq($p5);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $i112 := 0;
    goto $bb45;

  $bb28:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i97, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i101 == 1);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, $i1);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} fb_timings_vfreq($p5);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $i112 := 0;
    goto $bb45;

  $bb35:
    assume $i101 == 1;
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i97, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb34;

  $bb37:
    assume $i102 == 1;
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p103, $i47);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} fb_timings_hfreq($p5);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $i106 := $ugt.i32($i105, $i50);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $i110 := $ugt.i32($i109, $i52);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i112 := 0;
    goto $bb45;

  $bb42:
    assume $i110 == 1;
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $i52);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} fb_timings_dclk($p5);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i106 == 1;
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p107, $i50);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} fb_timings_vfreq($p5);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb24:
    assume $i91 == 1;
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $i94 := $mul.i32($i93, 2);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p95, $i94);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $i96 := 2;
    goto $bb26;

  $bb21:
    assume $i82 == 1;
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $i85 := $udiv.i32($i84, 2);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p5, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, $i85);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $i87 := 2;
    goto $bb23;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i47, $i48, $i49, $i50, $i51, $i52 := 30000, 29000, 60, 60, 0, 25000000;
    goto $bb20;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb6;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb6;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;
}



const fb_timings_hfreq: ref;

axiom fb_timings_hfreq == $sub.ref(0, 409281);

procedure fb_timings_hfreq($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fb_timings_hfreq($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $i3 := fb_get_vblank($i2);
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i6, $i8);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $i15 := $udiv.i32($i12, $i14);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(12, 1));
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i21 := fb_get_hblank_by_hfreq($i18, $i20);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(12, 1));
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i24, $i26);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(28, 1));
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(28, 1));
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $i33 := $mul.i32($i30, $i32);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    return;
}



const fb_timings_vfreq: ref;

axiom fb_timings_vfreq == $sub.ref(0, 410313);

procedure fb_timings_vfreq($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fb_timings_vfreq($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $i5 := fb_get_hfreq($i2, $i4);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i9 := fb_get_vblank($i8);
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i12, $i14);
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(12, 1));
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $i21 := fb_get_hblank_by_hfreq($i18, $i20);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(12, 1));
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i24, $i26);
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(28, 1));
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(28, 1));
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $i33 := $mul.i32($i30, $i32);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    return;
}



const fb_timings_dclk: ref;

axiom fb_timings_dclk == $sub.ref(0, 411345);

procedure fb_timings_dclk($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fb_timings_dclk($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(12, 1));
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $i5 := fb_get_hblank_by_dclk($i2, $i4);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(12, 1));
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i8, $i10);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(28, 1));
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(28, 1));
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $i17 := $udiv.i32($i14, $i16);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $i21 := fb_get_vblank($i20);
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i24, $i26);
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $i33 := $udiv.i32($i30, $i32);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    return;
}



const fb_get_hblank_by_dclk: ref;

axiom fb_get_hblank_by_dclk == $sub.ref(0, 412377);

procedure fb_get_hblank_by_dclk($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fb_get_hblank_by_dclk($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} {:cexpr "fb_get_hblank_by_dclk:arg:dclk"} boogie_si_record_i32($i0);
    call {:si_unique_call 615} {:cexpr "fb_get_hblank_by_dclk:arg:xres"} boogie_si_record_i32($i1);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $i2 := $udiv.i32($i0, 1000);
    call {:si_unique_call 616} {:cexpr "dclk"} boogie_si_record_i32($i2);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    $i3 := $mul.i32(70, 70);
    call {:si_unique_call 617} {:cexpr "h_period"} boogie_si_record_i32($i3);
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i1, 600000);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $i5 := $mul.i32($i2, 5);
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $i6 := $udiv.i32($i4, $i5);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, $i3);
    call {:si_unique_call 618} {:cexpr "h_period"} boogie_si_record_i32($i7);
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i7, 10000);
    call {:si_unique_call 619} {:cexpr "h_period"} boogie_si_record_i32($i8);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $i10 := int_sqrt($i9);
    call {:si_unique_call 621} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    call {:si_unique_call 622} {:cexpr "h_period"} boogie_si_record_i32($i11);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32($i11, 7000);
    call {:si_unique_call 623} {:cexpr "h_period"} boogie_si_record_i32($i12);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $i13 := $mul.i32($i12, 1000);
    call {:si_unique_call 624} {:cexpr "h_period"} boogie_si_record_i32($i13);
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $i14 := $udiv.i32($i13, 600);
    call {:si_unique_call 625} {:cexpr "h_period"} boogie_si_record_i32($i14);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i14, 300);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $i16 := $udiv.i32($i15, 100);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(30000, $i16);
    call {:si_unique_call 626} {:cexpr "duty_cycle"} boogie_si_record_i32($i17);
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $i18 := $mul.i32($i1, $i17);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(100000, $i17);
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $i20 := $udiv.i32($i18, $i19);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 8);
    call {:si_unique_call 627} {:cexpr "hblank"} boogie_si_record_i32($i21);
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, $sub.i32(0, 16));
    call {:si_unique_call 628} {:cexpr "hblank"} boogie_si_record_i32($i22);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;
}



const fb_get_vblank: ref;

axiom fb_get_vblank == $sub.ref(0, 413409);

procedure fb_get_vblank($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fb_get_vblank($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} {:cexpr "fb_get_vblank:arg:hfreq"} boogie_si_record_i32($i0);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $i1 := $mul.i32($i0, 550);
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $i2 := $udiv.i32($i1, 1000);
    call {:si_unique_call 630} {:cexpr "vblank"} boogie_si_record_i32($i2);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 500);
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i32($i3, 1000);
    call {:si_unique_call 631} {:cexpr "vblank"} boogie_si_record_i32($i4);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 1);
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const int_sqrt: ref;

axiom int_sqrt == $sub.ref(0, 414441);

procedure int_sqrt($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation int_sqrt($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 632} {:cexpr "int_sqrt:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 1} true;
    call {:si_unique_call 633} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 634} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fb_get_hfreq: ref;

axiom fb_get_hfreq == $sub.ref(0, 415473);

procedure fb_get_hfreq($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fb_get_hfreq($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} {:cexpr "fb_get_hfreq:arg:vfreq"} boogie_si_record_i32($i0);
    call {:si_unique_call 636} {:cexpr "fb_get_hfreq:arg:yres"} boogie_si_record_i32($i1);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $i2 := $mul.i32($i0, 550);
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(1000000, $i2);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i32($i3, 1000);
    call {:si_unique_call 637} {:cexpr "divisor"} boogie_si_record_i32($i4);
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i1, 1);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i5, $i0);
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i6, 1000);
    call {:si_unique_call 638} {:cexpr "hfreq"} boogie_si_record_i32($i7);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $i8 := $udiv.i32($i7, $i4);
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const fb_get_hblank_by_hfreq: ref;

axiom fb_get_hblank_by_hfreq == $sub.ref(0, 416505);

procedure fb_get_hblank_by_hfreq($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fb_get_hblank_by_hfreq($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} {:cexpr "fb_get_hblank_by_hfreq:arg:hfreq"} boogie_si_record_i32($i0);
    call {:si_unique_call 640} {:cexpr "fb_get_hblank_by_hfreq:arg:xres"} boogie_si_record_i32($i1);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $i2 := $mul.i32(300, 1000000);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $i3 := $udiv.i32($i2, $i0);
    call {:si_unique_call 641} {:cexpr "m_val"} boogie_si_record_i32($i3);
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(30000, $i3);
    call {:si_unique_call 642} {:cexpr "duty_cycle"} boogie_si_record_i32($i4);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $i5 := $mul.i32($i1, $i4);
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(100000, $i4);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $i7 := $udiv.i32($i5, $i6);
    call {:si_unique_call 643} {:cexpr "hblank"} boogie_si_record_i32($i7);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const fb_get_monitor_limits: ref;

axiom fb_get_monitor_limits == $sub.ref(0, 417537);

procedure fb_get_monitor_limits($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.46, $CurrAddr;



implementation fb_get_monitor_limits($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i16;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i16;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;
  var $i37: i8;
  var $i38: i8;
  var $i39: i8;
  var $i40: i8;
  var $i42: i64;
  var $p43: ref;
  var $i41: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $i49: i32;
  var $i50: i1;
  var $i52: i64;
  var $i54: i64;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $i132: i16;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $i136: i16;
  var $i137: i32;
  var $i138: i1;
  var $i139: i16;
  var $p140: ref;
  var $p141: ref;
  var $i142: i16;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $i146: i16;
  var $i147: i32;
  var $i148: i1;
  var $i149: i16;
  var $p150: ref;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $i51: i32;
  var $i154: i32;
  var $i48: i32;
  var $i155: i32;
  var $i156: i1;
  var $i157: i64;
  var $p158: ref;
  var $i159: i32;
  var $i160: i1;
  var $i161: i64;
  var $p162: ref;
  var $i163: i32;
  var $i164: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p0, $mul.ref(54, 1));
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $i4 := edid_is_limits_block($p3);
    call {:si_unique_call 646} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $p6 := $p3;
    assume {:branchcond $i5} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $i42 := $add.i64(54, 18);
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p0, $mul.ref($i42, 1));
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $i155 := edid_is_limits_block($p43);
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $i156 := $ne.i32($i155, 0);
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $p6 := $p43;
    assume {:branchcond $i156} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    $i157 := $add.i64($i42, 18);
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($p0, $mul.ref($i157, 1));
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $i159 := edid_is_limits_block($p158);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i159, 0);
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    $p6 := $p158;
    assume {:branchcond $i160} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    $i161 := $add.i64($i157, 18);
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($p0, $mul.ref($i161, 1));
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $i163 := edid_is_limits_block($p162);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i163, 0);
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $p6 := $p162;
    assume {:branchcond $i164} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i41 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i41, 0);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i154 := $i41;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $i48 := $i154;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $r := $i48;
    return;

  $bb10:
    assume $i44 == 1;
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $p45 := fb_create_modedb($p0, $p2, $p1);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.55, $p2);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32(0, $i49);
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} fb_destroy_modedb($p45);
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $i154 := 0;
    goto $bb66;

  $bb16:
    assume $i50 == 1;
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    $i51 := 0;
    goto $bb19;

  $bb19:
    call $i52, $i54, $p56, $i57, $i58, $i59, $p60, $i61, $p62, $i63, $i64, $p65, $i66, $i67, $p68, $i69, $i70, $p71, $i72, $p73, $i74, $i75, $p76, $i77, $i78, $p79, $i80, $i81, $p82, $i83, $i84, $i85, $i86, $i87, $p88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $p103, $i104, $i105, $p106, $i107, $i108, $p109, $p110, $i111, $i112, $p113, $i114, $i115, $p116, $p117, $i118, $i119, $p120, $i121, $i122, $p123, $p124, $i125, $i126, $p127, $i128, $i129, $p130, $p131, $i132, $i133, $i134, $p135, $i136, $i137, $i138, $i139, $p140, $p141, $i142, $i143, $i144, $p145, $i146, $i147, $i148, $i149, $p150, $i151, $i152, $i153, $i51 := fb_get_monitor_limits_loop_$bb19($p1, $p2, $p45, $i52, $i54, $p56, $i57, $i58, $i59, $p60, $i61, $p62, $i63, $i64, $p65, $i66, $i67, $p68, $i69, $i70, $p71, $i72, $p73, $i74, $i75, $p76, $i77, $i78, $p79, $i80, $i81, $p82, $i83, $i84, $i85, $i86, $i87, $p88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $p103, $i104, $i105, $p106, $i107, $i108, $p109, $p110, $i111, $i112, $p113, $i114, $i115, $p116, $p117, $i118, $i119, $p120, $i121, $i122, $p123, $p124, $i125, $i126, $p127, $i128, $i129, $p130, $p131, $i132, $i133, $i134, $p135, $i136, $i137, $i138, $i139, $p140, $p141, $i142, $i143, $i144, $p145, $i146, $i147, $i148, $i149, $p150, $i151, $i152, $i153, $i51);
    goto $bb19_last;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i51);
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p45, $mul.ref($i54, 64)), $mul.ref(20, 1));
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    $i58 := $udiv.i32(1000000000, $i57);
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $i59 := $mul.i32($i58, 1000);
    call {:si_unique_call 649} {:cexpr "pixclock"} boogie_si_record_i32($i59);
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p45, $mul.ref($i52, 64)), $mul.ref(12, 1));
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p45, $mul.ref($i52, 64)), $mul.ref(28, 1));
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i61, $i63);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p45, $mul.ref($i52, 64)), $mul.ref(40, 1));
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i64, $i66);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p45, $mul.ref($i52, 64)), $mul.ref(24, 1));
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i67, $i69);
    call {:si_unique_call 650} {:cexpr "htotal"} boogie_si_record_i32($i70);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p45, $mul.ref($i52, 64)), $mul.ref(16, 1));
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p45, $mul.ref($i52, 64)), $mul.ref(36, 1));
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i72, $i74);
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p45, $mul.ref($i52, 64)), $mul.ref(44, 1));
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i75, $i77);
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p45, $mul.ref($i52, 64)), $mul.ref(32, 1));
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i78, $i80);
    call {:si_unique_call 651} {:cexpr "vtotal"} boogie_si_record_i32($i81);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p45, $mul.ref($i52, 64)), $mul.ref(52, 1));
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, 1);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    $i87 := $i81;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p45, $mul.ref($i52, 64)), $mul.ref(52, 1));
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 2);
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i93 := $i87;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $i94 := $sdiv.i32($i70, 2);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i94, $i59);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $i96 := $sdiv.i32($i95, $i70);
    call {:si_unique_call 654} {:cexpr "hscan"} boogie_si_record_i32($i96);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $i97 := $add.i32($i96, 500);
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $i98 := $sdiv.i32($i97, 1000);
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $i99 := $mul.i32($i98, 1000);
    call {:si_unique_call 655} {:cexpr "hscan"} boogie_si_record_i32($i99);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $i100 := $sdiv.i32($i93, 2);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i100, $i99);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $i102 := $sdiv.i32($i101, $i93);
    call {:si_unique_call 656} {:cexpr "hz"} boogie_si_record_i32($i102);
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(120, 1));
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 0);
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb29;

  $bb29:
    assume !($i105 == 1);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(120, 1));
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $i108 := $ult.i32($i107, $i59);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(116, 1));
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i111, 0);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb35;

  $bb35:
    assume !($i112 == 1);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(116, 1));
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    $i115 := $ugt.i32($i114, $i59);
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 0);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb41;

  $bb41:
    assume !($i119 == 1);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $i122 := $ult.i32($i121, $i99);
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(108, 1));
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 0);
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb47;

  $bb47:
    assume !($i126 == 1);
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(108, 1));
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.0, $p127);
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    $i129 := $ugt.i32($i128, $i99);
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(132, 1));
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    $i132 := $load.i16($M.0, $p131);
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    $i133 := $zext.i16.i32($i132);
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 0);
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb53;

  $bb53:
    assume !($i134 == 1);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(132, 1));
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $i136 := $load.i16($M.0, $p135);
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $i137 := $zext.i16.i32($i136);
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $i138 := $slt.i32($i137, $i102);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(130, 1));
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $i142 := $load.i16($M.0, $p141);
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    $i143 := $zext.i16.i32($i142);
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 0);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb59;

  $bb59:
    assume !($i144 == 1);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(130, 1));
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $i146 := $load.i16($M.0, $p145);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    $i147 := $zext.i16.i32($i146);
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    $i148 := $sgt.i32($i147, $i102);
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i151 := $add.i32($i51, 1);
    call {:si_unique_call 657} {:cexpr "i"} boogie_si_record_i32($i151);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.55, $p2);
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $i153 := $slt.i32($i151, $i152);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i153 == 1);
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb63:
    assume $i153 == 1;
    assume {:verifier.code 0} true;
    $i51 := $i151;
    goto $bb63_dummy;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i32.i16($i102);
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(130, 1));
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p150, $i149);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb58;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i138 == 1;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i16($i102);
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(132, 1));
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p140, $i139);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i134 == 1;
    goto $bb52;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i129 == 1;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(108, 1));
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p130, $i99);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i126 == 1;
    goto $bb46;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i122 == 1;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, $i99);
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i119 == 1;
    goto $bb40;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i115 == 1;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(116, 1));
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, $i59);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i112 == 1;
    goto $bb34;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(120, 1));
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p109, $i59);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i105 == 1;
    goto $bb28;

  $bb24:
    assume $i91 == 1;
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    $i92 := $mul.i32($i87, 2);
    call {:si_unique_call 653} {:cexpr "vtotal"} boogie_si_record_i32($i92);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $i93 := $i92;
    goto $bb26;

  $bb21:
    assume $i85 == 1;
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $i86 := $sdiv.i32($i81, 2);
    call {:si_unique_call 652} {:cexpr "vtotal"} boogie_si_record_i32($i86);
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $i87 := $i86;
    goto $bb23;

  $bb12:
    assume $i47 == 1;
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $i48 := 1;
    goto $bb14;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i164 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(7, 1));
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $i10 := $mul.i32($i9, 1000);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(108, 1));
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p6, $mul.ref(8, 1));
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i14, 1000);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p6, $mul.ref(5, 1));
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i16($i18);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(130, 1));
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, $i19);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p6, $mul.ref(6, 1));
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i16($i22);
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(132, 1));
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, $i23);
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p6, $mul.ref(9, 1));
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $i28 := $mul.i32($i27, 10000000);
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(120, 1));
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p6, $mul.ref(10, 1));
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $i38 := $and.i8($i35, 1);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    $i39 := $and.i8($i37, $sub.i8(0, 2));
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    $i40 := $or.i8($i39, $i38);
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i40);
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb6;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i160 == 1;
    goto $bb4;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i156 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb4;

  $bb63_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9357;
}



const get_dpms_capabilities: ref;

axiom get_dpms_capabilities == $sub.ref(0, 418569);

procedure get_dpms_capabilities($i0: i8, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation get_dpms_capabilities($i0: i8, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i16;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i32;
  var $i27: i16;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} {:cexpr "get_dpms_capabilities:arg:flags"} boogie_si_record_i8($i0);
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p2, 0);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i0);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 32);
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i0);
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 64);
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i21 := $sext.i8.i32($i0);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 0);
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i25, 4);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, $i27);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, 2);
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, $i19);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, 1);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, $i10);
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_chroma: ref;

axiom get_chroma == $sub.ref(0, 419601);

procedure get_chroma($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation get_chroma($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $p88: ref;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $p103: ref;
  var $p104: ref;
  var $i105: i8;
  var $i106: i32;
  var $i107: i32;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $i113: i32;
  var $i114: i32;
  var $i115: i32;
  var $p117: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p0, $mul.ref(5, 1));
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $i5 := $ashr.i32($i4, 6);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p0, $mul.ref(7, 1));
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    $i9 := $shl.i32($i8, 2);
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i5, $i9);
    call {:si_unique_call 662} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $i11 := $mul.i32($i10, 1000);
    call {:si_unique_call 663} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 512);
    call {:si_unique_call 664} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $i13 := $sdiv.i32($i12, 1024);
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i13);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p0, $mul.ref(5, 1));
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 48);
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $i20 := $ashr.i32($i19, 4);
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    $i24 := $shl.i32($i23, 2);
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i20, $i24);
    call {:si_unique_call 665} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    $i26 := $mul.i32($i25, 1000);
    call {:si_unique_call 666} {:cexpr "tmp"} boogie_si_record_i32($i26);
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 512);
    call {:si_unique_call 667} {:cexpr "tmp"} boogie_si_record_i32($i27);
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $i28 := $sdiv.i32($i27, 1024);
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i28);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p0, $mul.ref(5, 1));
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 12);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $i35 := $ashr.i32($i34, 2);
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p0, $mul.ref(9, 1));
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    $i39 := $shl.i32($i38, 2);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i35, $i39);
    call {:si_unique_call 668} {:cexpr "tmp"} boogie_si_record_i32($i40);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $i41 := $mul.i32($i40, 1000);
    call {:si_unique_call 669} {:cexpr "tmp"} boogie_si_record_i32($i41);
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, 512);
    call {:si_unique_call 670} {:cexpr "tmp"} boogie_si_record_i32($i42);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $i43 := $sdiv.i32($i42, 1024);
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i43);
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p0, $mul.ref(5, 1));
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 3);
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p0, $mul.ref(10, 1));
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $i53 := $shl.i32($i52, 2);
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    $i54 := $or.i32($i49, $i53);
    call {:si_unique_call 671} {:cexpr "tmp"} boogie_si_record_i32($i54);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    $i55 := $mul.i32($i54, 1000);
    call {:si_unique_call 672} {:cexpr "tmp"} boogie_si_record_i32($i55);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i55, 512);
    call {:si_unique_call 673} {:cexpr "tmp"} boogie_si_record_i32($i56);
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $i57 := $sdiv.i32($i56, 1024);
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(20, 1));
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i57);
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p0, $mul.ref(6, 1));
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $i63 := $ashr.i32($i62, 6);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p0, $mul.ref(11, 1));
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    $i67 := $shl.i32($i66, 2);
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    $i68 := $or.i32($i63, $i67);
    call {:si_unique_call 674} {:cexpr "tmp"} boogie_si_record_i32($i68);
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    $i69 := $mul.i32($i68, 1000);
    call {:si_unique_call 675} {:cexpr "tmp"} boogie_si_record_i32($i69);
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i69, 512);
    call {:si_unique_call 676} {:cexpr "tmp"} boogie_si_record_i32($i70);
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $i71 := $sdiv.i32($i70, 1024);
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i71);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p0, $mul.ref(6, 1));
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 48);
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    $i78 := $ashr.i32($i77, 4);
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p0, $mul.ref(12, 1));
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    $i82 := $shl.i32($i81, 2);
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    $i83 := $or.i32($i78, $i82);
    call {:si_unique_call 677} {:cexpr "tmp"} boogie_si_record_i32($i83);
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    $i84 := $mul.i32($i83, 1000);
    call {:si_unique_call 678} {:cexpr "tmp"} boogie_si_record_i32($i84);
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i84, 512);
    call {:si_unique_call 679} {:cexpr "tmp"} boogie_si_record_i32($i85);
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $i86 := $sdiv.i32($i85, 1024);
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, $i86);
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p0, $mul.ref(6, 1));
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.0, $p89);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    $i92 := $and.i32($i91, 12);
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    $i93 := $ashr.i32($i92, 2);
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p0, $mul.ref(13, 1));
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.0, $p94);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $i97 := $shl.i32($i96, 2);
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    $i98 := $or.i32($i93, $i97);
    call {:si_unique_call 680} {:cexpr "tmp"} boogie_si_record_i32($i98);
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $i99 := $mul.i32($i98, 1000);
    call {:si_unique_call 681} {:cexpr "tmp"} boogie_si_record_i32($i99);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i99, 512);
    call {:si_unique_call 682} {:cexpr "tmp"} boogie_si_record_i32($i100);
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $i101 := $sdiv.i32($i100, 1024);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p103, $i101);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p0, $mul.ref(6, 1));
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.0, $p104);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i106, 3);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p0, $mul.ref(14, 1));
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.0, $p108);
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $i111 := $shl.i32($i110, 2);
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    $i112 := $or.i32($i107, $i111);
    call {:si_unique_call 683} {:cexpr "tmp"} boogie_si_record_i32($i112);
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    $i113 := $mul.i32($i112, 1000);
    call {:si_unique_call 684} {:cexpr "tmp"} boogie_si_record_i32($i113);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i113, 512);
    call {:si_unique_call 685} {:cexpr "tmp"} boogie_si_record_i32($i114);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    $i115 := $sdiv.i32($i114, 1024);
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, $i115);
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    return;
}



const fb_destroy_modedb: ref;

axiom fb_destroy_modedb == $sub.ref(0, 420633);

procedure fb_destroy_modedb($p0: ref);
  free requires assertsPassed;



implementation fb_destroy_modedb($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} kfree($p1);
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    return;
}



const fb_edid_add_monspecs: ref;

axiom fb_edid_add_monspecs == $sub.ref(0, 421665);

procedure fb_edid_add_monspecs($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.0, $M.57, $M.46, $CurrAddr;



implementation fb_edid_add_monspecs($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i30: i64;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $i36: i64;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i8;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i24;
  var $i49: i24;
  var $i50: i24;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i64;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i8;
  var $i78: i32;
  var $i79: i32;
  var $i80: i8;
  var $i81: i32;
  var $i82: i64;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i24;
  var $i91: i24;
  var $i92: i24;
  var $p93: ref;
  var $p94: ref;
  var $i95: i8;
  var $i96: i64;
  var $i97: i64;
  var $i98: i64;
  var $i99: i1;
  var $i100: i32;
  var $i101: i32;
  var $i102: i64;
  var $p103: ref;
  var $i104: i8;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $i110: i1;
  var $i68: i8;
  var $i69: i32;
  var $i111: i8;
  var $i67: i8;
  var $i113: i32;
  var $i114: i1;
  var $i115: i32;
  var $i116: i1;
  var $i117: i64;
  var $i118: i64;
  var $p119: ref;
  var $i120: i8;
  var $i121: i32;
  var $i122: i1;
  var $i123: i64;
  var $i124: i64;
  var $p125: ref;
  var $i126: i8;
  var $i127: i32;
  var $i128: i1;
  var $i129: i64;
  var $i130: i64;
  var $p131: ref;
  var $i132: i8;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $i136: i16;
  var $i137: i32;
  var $i138: i32;
  var $i139: i16;
  var $p140: ref;
  var $i112: i8;
  var $i141: i32;
  var $i142: i32;
  var $i143: i32;
  var $i144: i32;
  var $i145: i8;
  var $i146: i8;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $i28: i8;
  var $i29: i8;
  var $i150: i8;
  var $i27: i8;
  var $p151: ref;
  var $i152: i8;
  var $i153: i64;
  var $p154: ref;
  var $p155: ref;
  var $i156: i8;
  var $i157: i32;
  var $i158: i32;
  var $i159: i32;
  var $i160: i1;
  var $p165: ref;
  var $i166: i8;
  var $i167: i32;
  var $i168: i32;
  var $i169: i8;
  var $i170: i32;
  var $i171: i32;
  var $i172: i32;
  var $i173: i1;
  var $i174: i32;
  var $i175: i64;
  var $i176: i8;
  var $i177: i32;
  var $i178: i64;
  var $i179: i8;
  var $i180: i32;
  var $i181: i32;
  var $i182: i8;
  var $i183: i64;
  var $p184: ref;
  var $i185: i32;
  var $i186: i32;
  var $p187: ref;
  var $i188: i8;
  var $i189: i32;
  var $i190: i32;
  var $i191: i32;
  var $i192: i1;
  var $p162: ref;
  var $i163: i32;
  var $i164: i32;
  var $i193: i32;
  var $i161: i32;
  var $i194: i32;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $i198: i32;
  var $i199: i32;
  var $i200: i32;
  var $i201: i32;
  var $i202: i64;
  var $i203: i64;
  var $p204: ref;
  var $p205: ref;
  var $i206: i64;
  var $i207: i1;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $i213: i32;
  var $i214: i64;
  var $i215: i64;
  var $p216: ref;
  var $i217: i32;
  var $p218: ref;
  var $i219: i32;
  var $i220: i32;
  var $i221: i1;
  var $p223: ref;
  var $i224: i32;
  var $i225: i32;
  var $i226: i64;
  var $p227: ref;
  var $i228: i8;
  var $i229: i64;
  var $p230: ref;
  var $i231: i64;
  var $p232: ref;
  var $p233: ref;
  var $i234: i32;
  var $i235: i1;
  var $i236: i64;
  var $p238: ref;
  var $i239: i32;
  var $i240: i32;
  var $i241: i64;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $i250: i24;
  var $i251: i24;
  var $i252: i24;
  var $p253: ref;
  var $p254: ref;
  var $i255: i8;
  var $i256: i64;
  var $i257: i64;
  var $i258: i64;
  var $i259: i1;
  var $i260: i64;
  var $p262: ref;
  var $i263: i32;
  var $i264: i64;
  var $p266: ref;
  var $i267: i32;
  var $i268: i64;
  var $p270: ref;
  var $i271: i32;
  var $i272: i32;
  var $i273: i32;
  var $i274: i32;
  var $i275: i1;
  var $i222: i32;
  var $p276: ref;
  var $i277: i32;
  var $i278: i32;
  var $p279: ref;
  var $i280: i32;
  var $i281: i32;
  var $i282: i32;
  var $i283: i32;
  var $i284: i1;
  var $p286: ref;
  var $i287: i32;
  var $i288: i32;
  var $i289: i32;
  var $i290: i64;
  var $p291: ref;
  var $i292: i8;
  var $i293: i32;
  var $i294: i1;
  var $i295: i1;
  var $i297: i1;
  var $i298: i64;
  var $p300: ref;
  var $i301: i32;
  var $i302: i1;
  var $p304: ref;
  var $i305: i64;
  var $p306: ref;
  var $i307: i64;
  var $p308: ref;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $p314: ref;
  var $i315: i24;
  var $i316: i24;
  var $i317: i24;
  var $p318: ref;
  var $p319: ref;
  var $i320: i8;
  var $i321: i64;
  var $i322: i64;
  var $i323: i64;
  var $i324: i1;
  var $i325: i64;
  var $p327: ref;
  var $i328: i32;
  var $i329: i64;
  var $p331: ref;
  var $i332: i32;
  var $i333: i64;
  var $p335: ref;
  var $i336: i32;
  var $i337: i32;
  var $i338: i32;
  var $i339: i32;
  var $i340: i32;
  var $i341: i1;
  var $i285: i32;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $i347: i32;
  var $i348: i32;
  var $i349: i32;
  var $i350: i32;
  var $p351: ref;
  var cmdloc_dummy_var_80: [ref]i8;
  var cmdloc_dummy_var_81: [ref]i8;
  var cmdloc_dummy_var_82: [ref]i8;
  var cmdloc_dummy_var_83: [ref]i8;
  var cmdloc_dummy_var_84: [ref]i8;
  var cmdloc_dummy_var_85: [ref]i8;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p2 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $p3 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $i10 := edid_checksum($p0);
    call {:si_unique_call 694} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p0);
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 2);
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i14 == 1);
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $i18 := $ule.i32($i17, 3);
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i32($i21, 110);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i25, 4);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $i27 := 0;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    $i152 := $load.i8($M.0, $p151);
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i64($i152);
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($p0, $mul.ref($i153, 1));
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.0, $p155);
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i156);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    $i158 := $sub.i32(128, $i157);
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    $i159 := $sdiv.i32($i158, 18);
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    $i160 := $sgt.i32($i159, 0);
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    $i161 := 0;
    assume {:branchcond $i160} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i160 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i194 := $zext.i8.i32($i27);
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    $i195 := $add.i32($i194, $i161);
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i195, 0);
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    $i198 := $load.i32($M.0, $p197);
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    $i199 := $add.i32($i198, $i161);
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    $i200 := $zext.i8.i32($i27);
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    $i201 := $add.i32($i199, $i200);
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    $i202 := $zext.i32.i64($i201);
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    $i203 := $mul.i64($i202, 64);
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $p204 := kzalloc($i203, 208);
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    $p205 := $bitcast.ref.ref($p204);
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    $i206 := $p2i.ref.i64($p205);
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    $i207 := $eq.i64($i206, 0);
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p205);
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(32, 1));
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.0, $p209);
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $p211 := $bitcast.ref.ref($p210);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.0, $p212);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    $i214 := $zext.i32.i64($i213);
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    $i215 := $mul.i64($i214, 64);
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_80 := $M.0;
    cmdloc_dummy_var_81 := $M.0;
    call {:si_unique_call 711} cmdloc_dummy_var_82 := $memcpy.i8(cmdloc_dummy_var_80, cmdloc_dummy_var_81, $p208, $p211, $i215, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_82;
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $i217 := $load.i32($M.0, $p216);
    call {:si_unique_call 712} {:cexpr "i"} boogie_si_record_i32($i217);
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    $i219 := $load.i32($M.0, $p218);
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    $i220 := $add.i32($i219, $i161);
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    $i221 := $ult.i32($i217, $i220);
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i221 == 1);
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    $i277 := $load.i32($M.0, $p276);
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    $i278 := $add.i32($i277, $i161);
    call {:si_unique_call 718} {:cexpr "i"} boogie_si_record_i32($i278);
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    $i280 := $load.i32($M.0, $p279);
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    $i281 := $add.i32($i280, $i161);
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $i282 := $zext.i8.i32($i27);
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $i283 := $add.i32($i281, $i282);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    $i284 := $ult.i32($i278, $i283);
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i284} true;
    goto $bb86, $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume !($i284 == 1);
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(32, 1));
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    $p343 := $load.ref($M.0, $p342);
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    $p344 := $bitcast.ref.ref($p343);
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} kfree($p344);
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(32, 1));
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p345, $p204);
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    $i347 := $load.i32($M.0, $p346);
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    $i348 := $add.i32($i347, $i161);
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $i349 := $zext.i8.i32($i27);
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    $i350 := $add.i32($i348, $i349);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p351, $i350);
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb86:
    assume $i284 == 1;
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    $i285 := $i278;
    goto $bb89;

  $bb89:
    call $p286, $i287, $i288, $i289, $i290, $p291, $i292, $i293, $i294, $i295, $i297, $i298, $p300, $i301, $i302, $p304, $i305, $p306, $i307, $p308, $p309, $p310, $p311, $p312, $p313, $p314, $i315, $i316, $i317, $p318, $p319, $i320, $i321, $i322, $i323, $i324, $i325, $p327, $i328, $i329, $p331, $i332, $i333, $p335, $i336, $i337, $i338, $i339, $i340, $i341, $i285, cmdloc_dummy_var_83, cmdloc_dummy_var_84, cmdloc_dummy_var_85, vslice_dummy_var_153, vslice_dummy_var_154 := fb_edid_add_monspecs_loop_$bb89($p1, $p2, $p7, $i161, $p205, $p279, $i282, $p286, $i287, $i288, $i289, $i290, $p291, $i292, $i293, $i294, $i295, $i297, $i298, $p300, $i301, $i302, $p304, $i305, $p306, $i307, $p308, $p309, $p310, $p311, $p312, $p313, $p314, $i315, $i316, $i317, $p318, $p319, $i320, $i321, $i322, $i323, $i324, $i325, $p327, $i328, $i329, $p331, $i332, $i333, $p335, $i336, $i337, $i338, $i339, $i340, $i341, $i285, cmdloc_dummy_var_83, cmdloc_dummy_var_84, cmdloc_dummy_var_85, vslice_dummy_var_153, vslice_dummy_var_154);
    goto $bb89_last;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    $i287 := $load.i32($M.0, $p286);
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    $i288 := $sub.i32($i285, $i287);
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    $i289 := $sub.i32($i288, $i161);
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    $i290 := $zext.i32.i64($i289);
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref($i290, 1));
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $i292 := $load.i8($M.56, $p291);
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $i293 := $zext.i8.i32($i292);
    call {:si_unique_call 719} {:cexpr "idx___0"} boogie_si_record_i32($i293);
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i293, 0);
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb93;

  $bb93:
    assume !($i294 == 1);
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $i295 := $sgt.i32($i293, 63);
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i295 == 1);
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    $i297 := $ugt.i32($i293, 64);
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb99;

  $bb99:
    assume !($i297 == 1);
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    $i298 := $sext.i32.i64($i293);
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref($i298, 64)), $mul.ref(12, 1));
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    $i301 := $load.i32($M.0, $p300);
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i301, 0);
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i302 == 1);
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $p304 := $bitcast.ref.ref($p205);
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $i305 := $sext.i32.i64($i285);
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($p304, $mul.ref($i305, 1));
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $i307 := $sext.i32.i64($i293);
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    $p308 := $add.ref(cea_modes, $mul.ref($i307, 1));
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_83 := $M.0;
    cmdloc_dummy_var_84 := $M.0;
    call {:si_unique_call 723} cmdloc_dummy_var_85 := $memcpy.i8(cmdloc_dummy_var_83, cmdloc_dummy_var_84, $p306, $p308, 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_85;
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p309, .str.1);
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p310, .str.2);
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p311, .str.3);
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p312, .str.11);
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    $p314 := $bitcast.ref.ref($p313);
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $i315 := $load.i24($M.27, $p314);
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    $i316 := $and.i24($i315, $sub.i24(0, 262144));
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    $i317 := $or.i24($i316, 1082);
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p314, $i317);
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p318, 0);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    $i320 := $load.i8($M.28, $p319);
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    $i321 := $zext.i8.i64($i320);
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    $i322 := $and.i64($i321, 1);
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $i323 := ldv__builtin_expect($i322, 0);
    call {:si_unique_call 725} {:cexpr "tmp___6"} boogie_si_record_i64($i323);
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    $i324 := $ne.i64($i323, 0);
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i337 := $add.i32($i285, 1);
    call {:si_unique_call 721} {:cexpr "i"} boogie_si_record_i32($i337);
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    $i338 := $load.i32($M.0, $p279);
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    $i339 := $add.i32($i338, $i161);
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    $i340 := $add.i32($i339, $i282);
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    $i341 := $ult.i32($i337, $i340);
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i341 == 1);
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb106:
    assume $i341 == 1;
    assume {:verifier.code 0} true;
    $i285 := $i337;
    goto $bb106_dummy;

  $bb103:
    assume $i324 == 1;
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $i325 := $sext.i32.i64($i285);
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p205, $mul.ref($i325, 64)), $mul.ref(12, 1));
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    $i328 := $load.i32($M.0, $p327);
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    $i329 := $sext.i32.i64($i285);
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p205, $mul.ref($i329, 64)), $mul.ref(16, 1));
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    $i332 := $load.i32($M.0, $p331);
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    $i333 := $sext.i32.i64($i285);
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p205, $mul.ref($i333, 64)), $mul.ref(8, 1));
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    $i336 := $load.i32($M.0, $p335);
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} __dynamic_pr_debug.ref.ref.i32.i32.i32.i32($p7, .str.11, $i293, $i328, $i332, $i336);
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb100:
    assume {:verifier.code 0} true;
    assume $i302 == 1;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} vslice_dummy_var_154 := printk.ref.i32(.str.10, $i293);
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb97:
    assume {:verifier.code 0} true;
    assume $i297 == 1;
    goto $bb98;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i295 == 1;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} vslice_dummy_var_153 := printk.ref.i32(.str.9, $i293);
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i294 == 1;
    goto $bb92;

  $bb72:
    assume $i221 == 1;
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $i222 := $i217;
    goto $bb75;

  $bb75:
    call $p223, $i224, $i225, $i226, $p227, $i228, $i229, $p230, $i231, $p232, $p233, $i234, $i235, $i236, $p238, $i239, $i240, $i241, $p243, $p244, $p245, $p246, $p247, $p248, $p249, $i250, $i251, $i252, $p253, $p254, $i255, $i256, $i257, $i258, $i259, $i260, $p262, $i263, $i264, $p266, $i267, $i268, $p270, $i271, $i272, $i273, $i274, $i275, $i222 := fb_edid_add_monspecs_loop_$bb75($p0, $p1, $p3, $p6, $i161, $p205, $p218, $p223, $i224, $i225, $i226, $p227, $i228, $i229, $p230, $i231, $p232, $p233, $i234, $i235, $i236, $p238, $i239, $i240, $i241, $p243, $p244, $p245, $p246, $p247, $p248, $p249, $i250, $i251, $i252, $p253, $p254, $i255, $i256, $i257, $i258, $i259, $i260, $p262, $i263, $i264, $p266, $i267, $i268, $p270, $i271, $i272, $i273, $i274, $i275, $i222);
    goto $bb75_last;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    $i224 := $load.i32($M.0, $p223);
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    $i225 := $sub.i32($i222, $i224);
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $i226 := $zext.i32.i64($i225);
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p3, $mul.ref(0, 6)), $mul.ref($i226, 1));
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    $i228 := $load.i8($M.57, $p227);
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $i229 := $zext.i8.i64($i228);
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($p0, $mul.ref($i229, 1));
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    $i231 := $sext.i32.i64($i222);
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($p205, $mul.ref($i231, 64));
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} get_detailed_timing($p230, $p232);
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    $i234 := $load.i32($M.0, $p233);
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i222, $i234);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p244, .str.1);
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p245, .str.2);
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p246, .str.3);
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p247, .str.8);
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $p249 := $bitcast.ref.ref($p248);
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    $i250 := $load.i24($M.27, $p249);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $i251 := $and.i24($i250, $sub.i24(0, 262144));
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    $i252 := $or.i24($i251, 1070);
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p249, $i252);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p253, 0);
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    $i255 := $load.i8($M.28, $p254);
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    $i256 := $zext.i8.i64($i255);
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    $i257 := $and.i64($i256, 1);
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $i258 := ldv__builtin_expect($i257, 0);
    call {:si_unique_call 715} {:cexpr "tmp___5"} boogie_si_record_i64($i258);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    $i259 := $ne.i64($i258, 0);
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i272 := $add.i32($i222, 1);
    call {:si_unique_call 717} {:cexpr "i"} boogie_si_record_i32($i272);
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $i273 := $load.i32($M.0, $p218);
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    $i274 := $add.i32($i273, $i161);
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    $i275 := $ult.i32($i272, $i274);
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i275 == 1);
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb83:
    assume $i275 == 1;
    assume {:verifier.code 0} true;
    $i222 := $i272;
    goto $bb83_dummy;

  $bb80:
    assume $i259 == 1;
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    $i260 := $sext.i32.i64($i222);
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p205, $mul.ref($i260, 64)), $mul.ref(12, 1));
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    $i263 := $load.i32($M.0, $p262);
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $i264 := $sext.i32.i64($i222);
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p205, $mul.ref($i264, 64)), $mul.ref(16, 1));
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $i267 := $load.i32($M.0, $p266);
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $i268 := $sext.i32.i64($i222);
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p205, $mul.ref($i268, 64)), $mul.ref(8, 1));
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    $i271 := $load.i32($M.0, $p270);
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} __dynamic_pr_debug.ref.ref.i32.i32.i32($p6, .str.8, $i263, $i267, $i271);
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb77:
    assume $i235 == 1;
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    $i236 := $sext.i32.i64($i222);
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p205, $mul.ref($i236, 64)), $mul.ref(56, 1));
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $i239 := $load.i32($M.0, $p238);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    $i240 := $or.i32($i239, 16);
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    $i241 := $sext.i32.i64($i222);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p205, $mul.ref($i241, 64)), $mul.ref(56, 1));
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p243, $i240);
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb69:
    assume $i207 == 1;
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb66:
    assume $i196 == 1;
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb55:
    assume $i160 == 1;
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $p162, $i163, $i164 := $p154, 0, 0;
    goto $bb58;

  $bb58:
    call $p165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $p184, $i185, $i186, $p187, $i188, $i189, $i190, $i191, $i192, $p162, $i163, $i164, $i193 := fb_edid_add_monspecs_loop_$bb58($p0, $p3, $p155, $p165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $p184, $i185, $i186, $p187, $i188, $i189, $i190, $i191, $i192, $p162, $i163, $i164, $i193);
    goto $bb58_last;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($p162, $mul.ref(1, 1));
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    $i166 := $load.i8($M.0, $p165);
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    $i167 := $zext.i8.i32($i166);
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $i168 := $shl.i32($i167, 8);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    $i169 := $load.i8($M.0, $p162);
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    $i170 := $zext.i8.i32($i169);
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    $i171 := $or.i32($i168, $i170);
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $i172 := $mul.i32($i171, 10000);
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i172, 0);
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    $i185 := $i164;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $i186 := $add.i32($i163, 1);
    call {:si_unique_call 709} {:cexpr "i"} boogie_si_record_i32($i186);
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($p162, $mul.ref(18, 1));
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    $i188 := $load.i8($M.0, $p155);
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    $i189 := $zext.i8.i32($i188);
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    $i190 := $sub.i32(128, $i189);
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    $i191 := $sdiv.i32($i190, 18);
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    $i192 := $sgt.i32($i191, $i186);
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $i193 := $i185;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    $i161 := $i193;
    goto $bb57;

  $bb63:
    assume $i192 == 1;
    assume {:verifier.code 0} true;
    $p162, $i163, $i164 := $p187, $i186, $i185;
    goto $bb63_dummy;

  $bb60:
    assume $i173 == 1;
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    $i174 := $add.i32($i164, 1);
    call {:si_unique_call 708} {:cexpr "num"} boogie_si_record_i32($i174);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    $i175 := $p2i.ref.i64($p162);
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    $i176 := $trunc.i64.i8($i175);
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    $i177 := $zext.i8.i32($i176);
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $i178 := $p2i.ref.i64($p0);
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    $i179 := $trunc.i64.i8($i178);
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    $i180 := $zext.i8.i32($i179);
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    $i181 := $sub.i32($i177, $i180);
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $i182 := $trunc.i32.i8($i181);
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    $i183 := $sext.i32.i64($i164);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p3, $mul.ref(0, 6)), $mul.ref($i183, 1));
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    $M.57 := $store.i8($M.57, $p184, $i182);
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    $i185 := $i174;
    goto $bb62;

  $bb16:
    assume $i26 == 1;
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $i28, $i29 := 0, 4;
    goto $bb19;

  $bb19:
    call $i30, $p31, $i32, $i33, $i34, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $p42, $p43, $p44, $p45, $p46, $p47, $i48, $i49, $i50, $p51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i70, $i71, $i72, $p73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $p83, $p84, $p85, $p86, $p87, $p88, $p89, $i90, $i91, $i92, $p93, $p94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $p103, $i104, $i105, $i106, $p107, $i108, $i109, $i110, $i68, $i69, $i111, $i67, $i113, $i114, $i115, $i116, $i117, $i118, $p119, $i120, $i121, $i122, $i123, $i124, $p125, $i126, $i127, $i128, $i129, $i130, $p131, $i132, $i133, $i134, $p135, $i136, $i137, $i138, $i139, $p140, $i112, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i28, $i29, $i150 := fb_edid_add_monspecs_loop_$bb19($p0, $p1, $p2, $p4, $p5, $p23, $i30, $p31, $i32, $i33, $i34, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $p42, $p43, $p44, $p45, $p46, $p47, $i48, $i49, $i50, $p51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i70, $i71, $i72, $p73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $p83, $p84, $p85, $p86, $p87, $p88, $p89, $i90, $i91, $i92, $p93, $p94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $p103, $i104, $i105, $i106, $p107, $i108, $i109, $i110, $i68, $i69, $i111, $i67, $i113, $i114, $i115, $i116, $i117, $i118, $p119, $i120, $i121, $i122, $i123, $i124, $p125, $i126, $i127, $i128, $i129, $i130, $p131, $i132, $i133, $i134, $p135, $i136, $i137, $i138, $i139, $p140, $i112, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i28, $i29, $i150);
    goto $bb19_last;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i29);
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p0, $mul.ref($i30, 1));
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 31);
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    call {:si_unique_call 695} {:cexpr "len"} boogie_si_record_i8($i35);
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i64($i29);
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p0, $mul.ref($i36, 1));
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $i40 := $ashr.i32($i39, 5);
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    call {:si_unique_call 696} {:cexpr "type"} boogie_si_record_i8($i41);
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p42, .str.1);
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p43, .str.2);
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p44, .str.3);
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p45, .str.4);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $i48 := $load.i24($M.27, $p47);
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    $i49 := $and.i24($i48, $sub.i24(0, 262144));
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    $i50 := $or.i24($i49, 1027);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p47, $i50);
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p51, 0);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.28, $p52);
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i64($i53);
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $i55 := $and.i64($i54, 1);
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $i56 := ldv__builtin_expect($i55, 0);
    call {:si_unique_call 698} {:cexpr "tmp___0"} boogie_si_record_i64($i56);
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i41);
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 2);
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i61 == 1);
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i41);
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 3);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i112 := $i28;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i32($i35);
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i32($i29);
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $i143 := $add.i32($i141, $i142);
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    $i144 := $add.i32($i143, 1);
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i32.i8($i144);
    call {:si_unique_call 707} {:cexpr "pos"} boogie_si_record_i8($i145);
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $i146 := $load.i8($M.0, $p23);
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    $i147 := $zext.i8.i32($i146);
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $i148 := $zext.i8.i32($i145);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    $i149 := $sgt.i32($i147, $i148);
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    $i150 := $i112;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $i27 := $i150;
    goto $bb18;

  $bb52:
    assume $i149 == 1;
    assume {:verifier.code 0} true;
    $i28, $i29 := $i112, $i145;
    goto $bb52_dummy;

  $bb38:
    assume $i114 == 1;
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i35);
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    $i116 := $ugt.i32($i115, 2);
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb40;

  $bb41:
    assume $i116 == 1;
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i64($i29);
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    $i118 := $add.i64($i117, 1);
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p0, $mul.ref($i118, 1));
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.0, $p119);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i120);
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 3);
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i122 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb43:
    assume $i122 == 1;
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i64($i29);
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $i124 := $add.i64($i123, 2);
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p0, $mul.ref($i124, 1));
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.0, $p125);
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i126);
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 12);
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i128 == 1);
    goto $bb45;

  $bb46:
    assume $i128 == 1;
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i64($i29);
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $i130 := $add.i64($i129, 3);
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($p0, $mul.ref($i130, 1));
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.0, $p131);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i32($i132);
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 0);
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i134 == 1);
    goto $bb45;

  $bb48:
    assume $i134 == 1;
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(138, 1));
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    $i136 := $load.i16($M.0, $p135);
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $i137 := $zext.i16.i32($i136);
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $i138 := $or.i32($i137, 4);
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i16($i138);
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(138, 1));
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p140, $i139);
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb24:
    assume $i61 == 1;
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i29);
    call {:si_unique_call 700} {:cexpr "i"} boogie_si_record_i32($i62);
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i29);
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i35);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i63, $i64);
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    $i66 := $sgt.i32($i65, $i62);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    $i67 := $i28;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i112 := $i67;
    goto $bb37;

  $bb26:
    assume $i66 == 1;
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    $i68, $i69 := $i28, $i62;
    goto $bb29;

  $bb29:
    call $i70, $i71, $i72, $p73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $p83, $p84, $p85, $p86, $p87, $p88, $p89, $i90, $i91, $i92, $p93, $p94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $p103, $i104, $i105, $i106, $p107, $i108, $i109, $i110, $i68, $i69, $i111 := fb_edid_add_monspecs_loop_$bb29($p0, $p2, $p5, $i65, $i70, $i71, $i72, $p73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $p83, $p84, $p85, $p86, $p87, $p88, $p89, $i90, $i91, $i92, $p93, $p94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $p103, $i104, $i105, $i106, $p107, $i108, $i109, $i110, $i68, $i69, $i111, $i29);
    goto $bb29_last;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i29);
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i70, $i69);
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i71);
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p0, $mul.ref($i72, 1));
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i75, 127);
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    call {:si_unique_call 701} {:cexpr "idx"} boogie_si_record_i8($i77);
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i68);
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, 1);
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i8($i79);
    call {:si_unique_call 702} {:cexpr "svd_n"} boogie_si_record_i8($i80);
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i68);
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i81);
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref($i82, 1));
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    $M.56 := $store.i8($M.56, $p83, $i77);
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p84, .str.1);
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p85, .str.2);
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p86, .str.3);
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p87, .str.5);
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    $i90 := $load.i24($M.27, $p89);
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $i91 := $and.i24($i90, $sub.i24(0, 262144));
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $i92 := $or.i24($i91, 1033);
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p89, $i92);
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p93, 0);
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.28, $p94);
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i64($i95);
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    $i97 := $and.i64($i96, 1);
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $i98 := ldv__builtin_expect($i97, 0);
    call {:si_unique_call 704} {:cexpr "tmp___2"} boogie_si_record_i64($i98);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i98, 0);
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i69, 1);
    call {:si_unique_call 706} {:cexpr "i"} boogie_si_record_i32($i109);
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    $i110 := $sgt.i32($i65, $i109);
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $i111 := $i80;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $i67 := $i111;
    goto $bb28;

  $bb34:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $i68, $i69 := $i80, $i109;
    goto $bb34_dummy;

  $bb31:
    assume $i99 == 1;
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i29);
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i100, $i69);
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i101);
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p0, $mul.ref($i102, 1));
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.0, $p103);
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $i105 := $sext.i8.i32($i104);
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i105, 0);
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    $p107 := (if $i106 == 1 then .str.6 else .str.7);
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i77);
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} __dynamic_pr_debug.ref.ref.ref.i32($p5, .str.5, $p107, $i108);
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb21:
    assume $i57 == 1;
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i41);
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i35);
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} __dynamic_pr_debug.ref.ref.i32.i32($p4, .str.4, $i58, $i59);
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb9;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb9;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb106_dummy:
    assume false;
    return;

  $bb89_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10051;

  $bb83_dummy:
    assume false;
    return;

  $bb75_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9966;

  $bb63_dummy:
    assume false;
    return;

  $bb58_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9891;

  $bb34_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9771;

  $bb52_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9713;
}



const fb_validate_mode: ref;

axiom fb_validate_mode == $sub.ref(0, 422697);

procedure fb_validate_mode($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fb_validate_mode($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $i33: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p45: ref;
  var $i46: i32;
  var $p48: ref;
  var $i49: i32;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $p55: ref;
  var $i56: i16;
  var $i57: i32;
  var $p59: ref;
  var $i60: i32;
  var $p62: ref;
  var $i63: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $p83: ref;
  var $i84: i32;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i32;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i32;
  var $i109: i32;
  var $i110: i32;
  var $i111: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i112: i1;
  var $i118: i32;
  var $i67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(112, 1));
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(132, 1));
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(120, 1));
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(112, 1));
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(108, 1));
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    $i21 := $ult.i32($i17, $i20);
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(132, 1));
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(130, 1));
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i25, $i29);
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(120, 1));
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(116, 1));
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $i37 := $ult.i32($i33, $i36);
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i37 == 1);
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(108, 1));
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    call {:si_unique_call 728} {:cexpr "hfmin"} boogie_si_record_i32($i46);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(112, 1));
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    call {:si_unique_call 729} {:cexpr "hfmax"} boogie_si_record_i32($i49);
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(130, 1));
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    call {:si_unique_call 730} {:cexpr "vfmin"} boogie_si_record_i32($i53);
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(132, 1));
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.0, $p55);
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    call {:si_unique_call 731} {:cexpr "vfmax"} boogie_si_record_i32($i57);
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(116, 1));
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    call {:si_unique_call 732} {:cexpr "dclkmin"} boogie_si_record_i32($i60);
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(120, 1));
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    call {:si_unique_call 733} {:cexpr "dclkmax"} boogie_si_record_i32($i63);
    assume {:verifier.code 0} true;
    $i38, $i39, $i40, $i41, $i42, $i43 := $i46, $i49, $i53, $i57, $i60, $i63;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(100, 1));
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 0);
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(100, 1));
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    $i70 := $udiv.i32(1000000000, $i69);
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    $i71 := $mul.i32($i70, 1000);
    call {:si_unique_call 734} {:cexpr "pixclock"} boogie_si_record_i32($i71);
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(108, 1));
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i73, $i75);
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i76, $i78);
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(104, 1));
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    $i82 := $add.i32($i79, $i81);
    call {:si_unique_call 735} {:cexpr "htotal"} boogie_si_record_i32($i82);
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(116, 1));
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $i87 := $add.i32($i84, $i86);
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i87, $i89);
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i90, $i92);
    call {:si_unique_call 736} {:cexpr "vtotal"} boogie_si_record_i32($i93);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(132, 1));
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    $i96 := $and.i32($i95, 1);
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i99 := $i93;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(132, 1));
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 2);
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i105 := $i99;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    $i106 := $udiv.i32($i71, $i82);
    call {:si_unique_call 739} {:cexpr "hfreq"} boogie_si_record_i32($i106);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    $i107 := $add.i32($i106, 500);
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    $i108 := $udiv.i32($i107, 1000);
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    $i109 := $mul.i32($i108, 1000);
    call {:si_unique_call 740} {:cexpr "hfreq"} boogie_si_record_i32($i109);
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $i110 := $udiv.i32($i109, $i105);
    call {:si_unique_call 741} {:cexpr "vfreq"} boogie_si_record_i32($i110);
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    $i111 := $ult.i32($i110, $i40);
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    $i112 := 1;
    assume true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i111 == 1);
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    $i113 := $ugt.i32($i110, $i41);
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $i112 := 1;
    assume {:branchcond $i113} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i113 == 1);
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    $i114 := $ult.i32($i109, $i38);
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    $i112 := 1;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i114 == 1);
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    $i115 := $ugt.i32($i109, $i39);
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    $i112 := 1;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i115 == 1);
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    $i116 := $ult.i32($i71, $i42);
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    $i112 := 1;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i116 == 1);
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    $i117 := $ugt.i32($i71, $i43);
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    $i112 := $i117;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    $i118 := (if $i112 == 1 then $sub.i32(0, 22) else 0);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    $i67 := $i118;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    $r := $i67;
    return;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb26;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i115 == 1;
    goto $bb26;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i114 == 1;
    goto $bb26;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i111 == 1;
    goto $bb26;

  $bb22:
    assume $i103 == 1;
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    $i104 := $mul.i32($i99, 2);
    call {:si_unique_call 738} {:cexpr "vtotal"} boogie_si_record_i32($i104);
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    $i105 := $i104;
    goto $bb24;

  $bb19:
    assume $i97 == 1;
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    $i98 := $udiv.i32($i93, 2);
    call {:si_unique_call 737} {:cexpr "vtotal"} boogie_si_record_i32($i98);
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    $i99 := $i98;
    goto $bb21;

  $bb15:
    assume $i66 == 1;
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    $i67 := $sub.i32(0, 22);
    goto $bb17;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i38, $i39, $i40, $i41, $i42, $i43 := 29000, 30000, 60, 60, 0, 25000000;
    goto $bb14;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb2;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb2;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const fb_alloc_cmap: ref;

axiom fb_alloc_cmap == $sub.ref(0, 423729);

procedure fb_alloc_cmap($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const fb_alloc_cmap_gfp: ref;

axiom fb_alloc_cmap_gfp == $sub.ref(0, 424761);

procedure fb_alloc_cmap_gfp($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fb_alloc_cmap_gfp($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i10: i64;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i19: i64;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i64;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $i35: i1;
  var $i36: i64;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i18: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} {:cexpr "fb_alloc_cmap_gfp:arg:len"} boogie_si_record_i32($i1);
    call {:si_unique_call 743} {:cexpr "fb_alloc_cmap_gfp:arg:transp"} boogie_si_record_i32($i2);
    call {:si_unique_call 744} {:cexpr "fb_alloc_cmap_gfp:arg:flags"} boogie_si_record_i32($i3);
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i1, 2);
    call {:si_unique_call 745} {:cexpr "size"} boogie_si_record_i32($i4);
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, $i1);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 0);
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i1);
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $p47 := fb_default_cmap($i1);
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $i48 := fb_copy_cmap($p47, $p0);
    call {:si_unique_call 754} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb24:
    assume $i49 == 1;
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    $i18 := $i48;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} fb_dealloc_cmap($p0);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    $i9 := $i18;
    goto $bb5;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} fb_dealloc_cmap($p0);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 0);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i4);
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $p11 := kmalloc($i10, $i3);
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p11);
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i4);
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $p20 := kmalloc($i19, $i3);
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p20);
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i4);
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $p28 := kmalloc($i27, $i3);
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p28);
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i2, 0);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i4);
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $p37 := kmalloc($i36, $i3);
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p37);
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i43 == 1;
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb9;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb9;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb9;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb9;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb5;
}



const fb_dealloc_cmap: ref;

axiom fb_dealloc_cmap == $sub.ref(0, 425793);

procedure fb_dealloc_cmap($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fb_dealloc_cmap($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} kfree($p3);
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} kfree($p6);
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} kfree($p9);
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} kfree($p12);
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $0.ref);
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $0.ref);
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $0.ref);
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $0.ref);
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    return;
}



const fb_default_cmap: ref;

axiom fb_default_cmap == $sub.ref(0, 426825);

procedure fb_default_cmap($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation fb_default_cmap($i0: i32) returns ($r: ref)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} {:cexpr "fb_default_cmap:arg:len"} boogie_si_record_i32($i0);
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 2);
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i0, 4);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i0, 8);
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p2 := default_16_colors;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  $bb8:
    assume $i4 == 1;
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    $p2 := default_8_colors;
    goto $bb3;

  $bb5:
    assume $i3 == 1;
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    $p2 := default_4_colors;
    goto $bb3;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    $p2 := default_2_colors;
    goto $bb3;
}



const fb_invert_cmaps: ref;

axiom fb_invert_cmaps == $sub.ref(0, 427857);

procedure fb_invert_cmaps();



const framebuffer_alloc: ref;

axiom framebuffer_alloc == $sub.ref(0, 428889);

procedure framebuffer_alloc($i0: i64, $p1: ref) returns ($r: ref);



const framebuffer_release: ref;

axiom framebuffer_release == $sub.ref(0, 429921);

procedure framebuffer_release($p0: ref);
  free requires assertsPassed;



implementation framebuffer_release($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1592, 1));
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} kfree($p5);
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} kfree($p6);
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fb_bl_default_curve: ref;

axiom fb_bl_default_curve == $sub.ref(0, 430953);

procedure fb_bl_default_curve($p0: ref, $i1: i8, $i2: i8, $i3: i8);



const fb_find_best_display: ref;

axiom fb_find_best_display == $sub.ref(0, 431985);

procedure fb_find_best_display($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fb_find_best_display($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p40: ref;
  var $p19: ref;
  var $p34: ref;
  var $p35: ref;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $i70: i64;
  var $i71: i1;
  var $p11: ref;
  var cmdloc_dummy_var_86: [ref]i8;
  var cmdloc_dummy_var_87: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $p2 := $alloc($mul.ref(160, $zext.i32.i64(1)));
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $i12 := list_empty($p1);
    call {:si_unique_call 764} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p1);
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i16, $i17);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    $p19 := $0.ref;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p34, $p35 := $p19, $0.ref;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(138, 1));
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 2);
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(142, 1));
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p35);
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p11 := $p34;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb38:
    assume $i71 == 1;
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    $p11 := $p35;
    goto $bb6;

  $bb29:
    assume $i49 == 1;
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(143, 1));
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb31;

  $bb32:
    assume $i53 == 1;
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p2);
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_86 := $M.0;
    call {:si_unique_call 765} cmdloc_dummy_var_87 := $memset.i8(cmdloc_dummy_var_86, $p54, 0, 160, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_87;
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(142, 1));
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    $i58 := $mul.i32($i57, 7200);
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $i59 := $sdiv.i32($i58, 254);
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(143, 1));
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    $i64 := $mul.i32($i63, 7200);
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $i65 := $sdiv.i32($i64, 254);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $p67 := fb_find_best_mode($p2, $p1);
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i69 == 1;
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $p11 := $p67;
    goto $bb6;

  $bb26:
    assume $i45 == 1;
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $p11 := $p35;
    goto $bb6;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    $i20, $p21, $p22 := 0, $p15, $0.ref;
    goto $bb14;

  $bb14:
    call $p23, $p24, $i25, $p26, $i27, $p28, $i29, $i30, $i31, $p32, $p33, $p36, $p37, $i38, $i39, $i20, $p21, $p22, $p40 := fb_find_best_display_loop_$bb14($i17, $p23, $p24, $i25, $p26, $i27, $p28, $i29, $i30, $i31, $p32, $p33, $p36, $p37, $i38, $i39, $i20, $p21, $p22, $p40);
    goto $bb14_last;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p21);
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i20, 0);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $p26, $i27 := $p22, $i20;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 16);
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    $p32, $p33 := $p24, $p26;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p21, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, $i17);
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $p40 := $p26;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $p19 := $p40;
    goto $bb13;

  $bb23:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i20, $p21, $p22 := $i27, $p37, $p26;
    goto $bb23_dummy;

  $bb19:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    $p34, $p35 := $p33, $p32;
    goto $bb21;

  $bb16:
    assume $i25 == 1;
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $p26, $i27 := $p24, 1;
    goto $bb18;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb23_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10443;
}



const fb_find_best_mode: ref;

axiom fb_find_best_mode == $sub.ref(0, 433017);

procedure fb_find_best_mode($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fb_find_best_mode($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i37: i1;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p35: ref;
  var $i36: i32;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p52: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i4, $i5);
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    $i8, $p9, $p10 := $sub.i32(0, 1), $0.ref, $p3;
    goto $bb4;

  $bb4:
    call $p11, $p12, $p13, $i14, $p15, $i16, $i17, $p18, $i19, $p20, $i21, $i22, $p23, $i24, $p25, $i26, $i27, $p28, $i29, $p30, $i31, $i32, $i33, $i34, $i37, $i38, $i39, $p40, $i41, $p42, $i43, $i44, $p45, $p35, $i36, $p46, $i47, $p48, $p49, $i50, $i51, $i8, $p9, $p10, $p52 := fb_find_best_mode_loop_$bb4($p0, $i5, $p11, $p12, $p13, $i14, $p15, $i16, $i17, $p18, $i19, $p20, $i21, $i22, $p23, $i24, $p25, $i26, $i27, $p28, $i29, $p30, $i31, $i32, $i33, $i34, $i37, $i38, $i39, $p40, $i41, $p42, $i43, $i44, $p45, $p35, $i36, $p46, $i47, $p48, $p49, $i50, $i51, $i8, $p9, $p10, $p52);
    goto $bb4_last;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 80)), $mul.ref(16, 1));
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    $i17 := $uge.i32($i14, $i16);
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p46, $i47 := $p9, $i8;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, $i5);
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    $p52 := $p46;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    $p7 := $p52;
    goto $bb3;

  $bb23:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i8, $p9, $p10 := $i47, $p46, $p49;
    goto $bb23_dummy;

  $bb6:
    assume $i17 == 1;
    $p18 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    $i22 := $uge.i32($i19, $i21);
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb8;

  $bb9:
    assume $i22 == 1;
    $p23 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32($i24, $i26);
    $p28 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i29, $i31);
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i27, $i32);
    call {:si_unique_call 767} {:cexpr "d"} boogie_si_record_i32($i33);
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    $i34 := $ugt.i32($i8, $i33);
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i8, $i33);
    goto corral_source_split_10552;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p45 := $p9;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p35, $i36 := $p45, $i8;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    $p46, $i47 := $p35, $i36;
    goto $bb22;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p9);
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb16;

  $bb17:
    assume $i39 == 1;
    $p40 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p9, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    $i44 := $ugt.i32($i41, $i43);
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb16;

  $bb19:
    assume $i44 == 1;
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    $p45 := $p12;
    goto $bb21;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p12, $i33;
    goto $bb13;

  $bb23_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10522;
}



const fb_videomode_to_var: ref;

axiom fb_videomode_to_var == $sub.ref(0, 434049);

procedure fb_videomode_to_var($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fb_videomode_to_var($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(12, 1));
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(20, 1));
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 0);
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(100, 1));
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(104, 1));
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(108, 1));
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(116, 1));
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 255);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(132, 1));
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i42);
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    return;
}



const fb_match_mode: ref;

axiom fb_match_mode == $sub.ref(0, 435081);

procedure fb_match_mode($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fb_match_mode($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p8: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $p2 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} fb_var_to_videomode($p2, $p0);
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p1);
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i5, $i6);
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    $p8 := $p4;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $i12, $p13, $p15, $p16, $i17, $i18, $p8 := fb_match_mode_loop_$bb4($p2, $i6, $p9, $p10, $i11, $i12, $p13, $p15, $p16, $i17, $i18, $p8);
    goto $bb4_last;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $i11 := fb_mode_is_equal($p10, $p2);
    call {:si_unique_call 771} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    $p13 := $p10;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, $i6);
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $p8 := $p16;
    goto $bb10_dummy;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    $p14 := $p13;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10645;
}



const fb_find_nearest_mode: ref;

axiom fb_find_nearest_mode == $sub.ref(0, 436113);

procedure fb_find_nearest_mode($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fb_find_nearest_mode($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i64;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i64;
  var $i45: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $i58: i64;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $i64: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p69: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i4, $i5);
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    $i8, $p9, $i10, $p11 := $sub.i32(0, 1), $p3, $sub.i32(0, 1), $0.ref;
    goto $bb4;

  $bb4:
    call $p12, $p13, $p14, $i15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $p23, $i24, $p25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $p36, $i37, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i49, $p50, $i51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p61, $i62, $p63, $i64, $p46, $i47, $i48, $p65, $p66, $i67, $i68, $i8, $p9, $i10, $p11, $p69 := fb_find_nearest_mode_loop_$bb4($p0, $i5, $p12, $p13, $p14, $i15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $p23, $i24, $p25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $p36, $i37, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i49, $p50, $i51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p61, $i62, $p63, $i64, $p46, $i47, $i48, $p65, $p66, $i67, $i68, $i8, $p9, $i10, $p11, $p69);
    goto $bb4_last;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p9);
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 80)), $mul.ref(16, 1));
    $p14 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i15, $i17);
    call {:si_unique_call 772} {:cexpr "__x___0"} boogie_si_record_i32($i18);
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    $i21 := $i18;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    call {:si_unique_call 773} {:cexpr "ret"} boogie_si_record_i64($i22);
    $p23 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32($i24, $i26);
    call {:si_unique_call 774} {:cexpr "__x___2"} boogie_si_record_i32($i27);
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    $i30 := $i27;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    call {:si_unique_call 775} {:cexpr "ret___0"} boogie_si_record_i64($i31);
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32($i22);
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i32($i31);
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i32, $i33);
    call {:si_unique_call 776} {:cexpr "d"} boogie_si_record_i32($i34);
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    $i35 := $ugt.i32($i10, $i34);
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i35 == 1);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i10, $i34);
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $p63, $i64 := $p11, $i8;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p46, $i47, $i48 := $p63, $i10, $i64;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, $i5);
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    $p69 := $p46;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    $p7 := $p69;
    goto $bb3;

  $bb27:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i8, $p9, $i10, $p11 := $i48, $p66, $i47, $p46;
    goto $bb27_dummy;

  $bb18:
    assume $i49 == 1;
    $p50 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32($i51, $i53);
    call {:si_unique_call 780} {:cexpr "__x___6"} boogie_si_record_i32($i54);
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i54, 0);
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i55 == 1);
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    $i57 := $i54;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i57);
    call {:si_unique_call 781} {:cexpr "ret___2"} boogie_si_record_i64($i58);
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i64.i32($i58);
    call {:si_unique_call 782} {:cexpr "d"} boogie_si_record_i32($i59);
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    $i60 := $ugt.i32($i8, $i59);
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $p61, $i62 := $p11, $i8;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    $p63, $i64 := $p61, $i62;
    goto $bb26;

  $bb23:
    assume $i60 == 1;
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    $p61, $i62 := $p13, $i59;
    goto $bb25;

  $bb20:
    assume $i55 == 1;
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32(0, $i54);
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb22;

  $bb12:
    assume $i35 == 1;
    $p36 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i37, $i39);
    call {:si_unique_call 777} {:cexpr "__x___4"} boogie_si_record_i32($i40);
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 0);
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i41 == 1);
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    $i43 := $i40;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    call {:si_unique_call 778} {:cexpr "ret___1"} boogie_si_record_i64($i44);
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i64.i32($i44);
    call {:si_unique_call 779} {:cexpr "diff_refresh"} boogie_si_record_i32($i45);
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    $p46, $i47, $i48 := $p13, $i34, $i45;
    goto $bb17;

  $bb14:
    assume $i41 == 1;
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, $i40);
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb16;

  $bb9:
    assume $i28 == 1;
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, $i27);
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb11;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, $i18);
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb8;

  $bb27_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10672;
}



const fb_videomode_to_modelist: ref;

axiom fb_videomode_to_modelist == $sub.ref(0, 437145);

procedure fb_videomode_to_modelist($p0: ref, $i1: i32, $p2: ref);



const fb_find_mode: ref;

axiom fb_find_mode == $sub.ref(0, 438177);

procedure fb_find_mode($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $p5: ref, $i6: i32) returns ($r: i32);



const strlen: ref;

axiom strlen == $sub.ref(0, 439209);

procedure strlen($p0: ref) returns ($r: i64);



const simple_strtol: ref;

axiom simple_strtol == $sub.ref(0, 440241);

procedure simple_strtol($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);



const fb_find_mode_cvt: ref;

axiom fb_find_mode_cvt == $sub.ref(0, 441273);

procedure fb_find_mode_cvt($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const fb_try_mode: ref;

axiom fb_try_mode == $sub.ref(0, 442305);

procedure fb_try_mode($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);



const fb_cvt_aspect_ratio: ref;

axiom fb_cvt_aspect_ratio == $sub.ref(0, 443337);

procedure fb_cvt_aspect_ratio($p0: ref) returns ($r: i32);



const fb_cvt_hperiod: ref;

axiom fb_cvt_hperiod == $sub.ref(0, 444369);

procedure fb_cvt_hperiod($p0: ref) returns ($r: i32);



const fb_cvt_vtotal: ref;

axiom fb_cvt_vtotal == $sub.ref(0, 445401);

procedure fb_cvt_vtotal($p0: ref) returns ($r: i32);



const fb_cvt_hblank: ref;

axiom fb_cvt_hblank == $sub.ref(0, 446433);

procedure fb_cvt_hblank($p0: ref) returns ($r: i32);



const fb_cvt_hsync: ref;

axiom fb_cvt_hsync == $sub.ref(0, 447465);

procedure fb_cvt_hsync($p0: ref) returns ($r: i32);



const fb_cvt_pixclock: ref;

axiom fb_cvt_pixclock == $sub.ref(0, 448497);

procedure fb_cvt_pixclock($p0: ref) returns ($r: i32);



const fb_cvt_print_name: ref;

axiom fb_cvt_print_name == $sub.ref(0, 449529);

procedure fb_cvt_print_name($p0: ref);



const fb_cvt_convert_to_mode: ref;

axiom fb_cvt_convert_to_mode == $sub.ref(0, 450561);

procedure fb_cvt_convert_to_mode($p0: ref, $p1: ref);



const snprintf: ref;

axiom snprintf == $sub.ref(0, 451593);

procedure snprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32);



procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref.i32.i32.i32.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);



procedure snprintf.ref.i64.ref.i32.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);



const fb_cvt_ideal_duty_cycle: ref;

axiom fb_cvt_ideal_duty_cycle == $sub.ref(0, 452625);

procedure fb_cvt_ideal_duty_cycle($p0: ref) returns ($r: i32);



const fb_cvt_vbi_lines: ref;

axiom fb_cvt_vbi_lines == $sub.ref(0, 453657);

procedure fb_cvt_vbi_lines($p0: ref) returns ($r: i32);



const fb_deferred_io_fsync: ref;

axiom fb_deferred_io_fsync == $sub.ref(0, 454689);

procedure fb_deferred_io_fsync($p0: ref, $i1: i64, $i2: i64, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.61, $M.63, $M.65, $M.67, $M.62, $M.64, $M.66, $M.68;



implementation fb_deferred_io_fsync($p0: ref, $i1: i64, $i2: i64, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $i12: i32;
  var vslice_dummy_var_155: i1;
  var vslice_dummy_var_156: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} {:cexpr "fb_deferred_io_fsync:arg:start"} boogie_si_record_i64($i1);
    call {:si_unique_call 784} {:cexpr "fb_deferred_io_fsync:arg:end"} boogie_si_record_i64($i2);
    call {:si_unique_call 785} {:cexpr "fb_deferred_io_fsync:arg:datasync"} boogie_si_record_i32($i3);
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $p7 := file_inode($p0);
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1000)), $mul.ref(48, 1));
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $i10 := filemap_write_and_wait_range($p9, $i1, $i2);
    call {:si_unique_call 788} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 1608)), $mul.ref(1496, 1));
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 1000)), $mul.ref(232, 1));
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} mutex_lock_nested($p17, 0);
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 1608)), $mul.ref(1272, 1));
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} vslice_dummy_var_155 := ldv_cancel_delayed_work_sync_105($p18);
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 1608)), $mul.ref(1272, 1));
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} vslice_dummy_var_156 := schedule_delayed_work($p20, 0);
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p7, $mul.ref(0, 1000)), $mul.ref(232, 1));
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} mutex_unlock($p22);
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10767;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb3;
}



const file_inode: ref;

axiom file_inode == $sub.ref(0, 455721);

procedure file_inode($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation file_inode($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(32, 1));
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const filemap_write_and_wait_range: ref;

axiom filemap_write_and_wait_range == $sub.ref(0, 456753);

procedure filemap_write_and_wait_range($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation filemap_write_and_wait_range($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 793} {:cexpr "filemap_write_and_wait_range:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 794} {:cexpr "filemap_write_and_wait_range:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 1} true;
    call {:si_unique_call 795} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 796} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_cancel_delayed_work_sync_105: ref;

axiom ldv_cancel_delayed_work_sync_105 == $sub.ref(0, 457785);

procedure ldv_cancel_delayed_work_sync_105($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.61, $M.63, $M.65, $M.67;



implementation ldv_cancel_delayed_work_sync_105($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $i1 := cancel_delayed_work_sync($p0);
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 798} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 799} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} disable_work_1($p5);
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const schedule_delayed_work: ref;

axiom schedule_delayed_work == $sub.ref(0, 458817);

procedure schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.62, $M.61, $M.64, $M.63, $M.66, $M.65, $M.68, $M.67;



implementation schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} {:cexpr "schedule_delayed_work:arg:delay"} boogie_si_record_i64($i1);
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.11, system_wq);
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $i3 := queue_delayed_work($p2, $p0, $i1);
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 803} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const queue_delayed_work: ref;

axiom queue_delayed_work == $sub.ref(0, 459849);

procedure queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.62, $M.61, $M.64, $M.63, $M.66, $M.65, $M.68, $M.67;



implementation queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} {:cexpr "queue_delayed_work:arg:delay"} boogie_si_record_i64($i2);
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $i3 := ldv_queue_delayed_work_on_101(8192, $p0, $p1, $i2);
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 806} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_queue_delayed_work_on_101: ref;

axiom ldv_queue_delayed_work_on_101 == $sub.ref(0, 460881);

procedure ldv_queue_delayed_work_on_101($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.62, $M.61, $M.64, $M.63, $M.66, $M.65, $M.68, $M.67;



implementation ldv_queue_delayed_work_on_101($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i8;
  var $p8: ref;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} {:cexpr "ldv_queue_delayed_work_on_101:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 808} {:cexpr "ldv_queue_delayed_work_on_101:arg:ldv_func_arg4"} boogie_si_record_i64($i3);
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $i4 := queue_delayed_work_on($i0, $p1, $p2, $i3);
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 810} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 811} {:cexpr "ldv_func_res"} boogie_si_record_i8($i7);
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} activate_work_1($p8, 2);
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i7);
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const queue_delayed_work_on: ref;

axiom queue_delayed_work_on == $sub.ref(0, 461913);

procedure queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 813} {:cexpr "queue_delayed_work_on:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 814} {:cexpr "queue_delayed_work_on:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 1} true;
    call {:si_unique_call 815} $i4 := __VERIFIER_nondet_bool();
    call {:si_unique_call 816} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i4);
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const activate_work_1: ref;

axiom activate_work_1 == $sub.ref(0, 462945);

procedure activate_work_1($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.62, $M.61, $M.64, $M.63, $M.66, $M.65, $M.68, $M.67;



implementation activate_work_1($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} {:cexpr "activate_work_1:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    $i2 := $M.61;
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.63;
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.65;
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.67;
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_10847;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    $M.68 := $p0;
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    $M.67 := $i1;
    call {:si_unique_call 821} {:cexpr "ldv_work_1_3"} boogie_si_record_i32($i1);
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    $M.66 := $p0;
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    $M.65 := $i1;
    call {:si_unique_call 820} {:cexpr "ldv_work_1_2"} boogie_si_record_i32($i1);
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    $M.64 := $p0;
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    $M.63 := $i1;
    call {:si_unique_call 819} {:cexpr "ldv_work_1_1"} boogie_si_record_i32($i1);
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    $M.62 := $p0;
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    $M.61 := $i1;
    call {:si_unique_call 818} {:cexpr "ldv_work_1_0"} boogie_si_record_i32($i1);
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cancel_delayed_work_sync: ref;

axiom cancel_delayed_work_sync == $sub.ref(0, 463977);

procedure cancel_delayed_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_delayed_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 1} true;
    call {:si_unique_call 822} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 823} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_work_1: ref;

axiom disable_work_1 == $sub.ref(0, 465009);

procedure disable_work_1($p0: ref);
  free requires assertsPassed;
  modifies $M.61, $M.63, $M.65, $M.67;



implementation disable_work_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    $i1 := $M.61;
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 3);
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    $i3 := $M.61;
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $M.63;
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 3);
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    $i11 := $M.63;
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := $M.65;
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i18 == 1);
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    $i19 := $M.65;
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i25 := $M.67;
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 3);
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i26 == 1);
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    $i27 := $M.67;
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p29 := $M.68;
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i30, $i31);
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb33;

  $bb34:
    assume $i32 == 1;
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 827} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p21 := $M.66;
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb24;

  $bb25:
    assume $i24 == 1;
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 826} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $M.64;
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i14, $i15);
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb16:
    assume $i16 == 1;
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 825} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $M.62;
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i6, $i7);
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 824} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const fb_deferred_io_init: ref;

axiom fb_deferred_io_init == $sub.ref(0, 466041);

procedure fb_deferred_io_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fb_deferred_io_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p27: ref;
  var $p30: ref;
  var $p33: ref;
  var $p35: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var cmdloc_dummy_var_88: [ref]i8;
  var cmdloc_dummy_var_89: [ref]i8;
  var cmdloc_dummy_var_90: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1496, 1));
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_10921;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 833} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} __mutex_init($p13, .str.19, $p1);
    goto corral_source_split_10930;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 192)), $mul.ref(152, 1));
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, fb_deferred_io_mmap);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1272, 1)), $mul.ref(0, 1));
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} __init_work($p18, 0);
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, 137438953408);
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1272, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_88 := $M.0;
    cmdloc_dummy_var_89 := $M.0;
    call {:si_unique_call 837} cmdloc_dummy_var_90 := $memcpy.i8(cmdloc_dummy_var_88, cmdloc_dummy_var_89, $p23, $p24, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_90;
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1272, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} lockdep_init_map($p27, .str.20, $p2, 0);
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1272, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} INIT_LIST_HEAD($p30);
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1272, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, fb_deferred_io_work);
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1272, 1)), $mul.ref(80, 1));
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} init_timer_key($p35, 2097152, .str.21, $p4);
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1272, 1)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_10951;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, delayed_work_timer_fn);
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1272, 1));
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1272, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p43, $i40);
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} INIT_LIST_HEAD($p44);
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 200)), $mul.ref(0, 1));
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i47 == 1;
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 200)), $mul.ref(0, 1));
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, 250);
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 834} devirtbounce.9(0, .str.18, 208, 12);
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call fb_deferred_io_init_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const fb_deferred_io_mmap: ref;

axiom fb_deferred_io_mmap == $sub.ref(0, 467073);

procedure fb_deferred_io_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fb_deferred_io_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, fb_deferred_io_vm_ops);
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    $i5 := $or.i64($i4, 67371008);
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p6, $i5);
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 4);
    goto corral_source_split_10977;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p0);
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    $i13 := $or.i64($i12, 16384);
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, $i13);
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 468105);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 469137);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    return;
}



const fb_deferred_io_work: ref;

axiom fb_deferred_io_work == $sub.ref(0, 470169);

procedure fb_deferred_io_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.46, $CurrAddr;



implementation fb_deferred_io_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p17: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p41: ref;
  var $p42: ref;
  var $p47: ref;
  var vslice_dummy_var_157: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 1272), 1608));
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1272), 1608)), $mul.ref(1496, 1));
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} mutex_lock_nested($p5, 0);
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($sub.ref(0, 32), 64));
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 32), 64)), $mul.ref(32, 1));
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i13, $i15);
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(192, 1));
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(168, 1));
    call {:si_unique_call 848} devirtbounce.10($p30, $p2, $p31);
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p34);
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i38, $i39);
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} mutex_unlock($p47);
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i40 == 1;
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    $p41, $p42 := $p36, $p34;
    goto $bb12;

  $bb12:
    call $p43, $p44, $i45, $i46, $p41, $p42 := fb_deferred_io_work_loop_$bb12($i38, $p43, $p44, $i45, $i46, $p41, $p42);
    goto $bb12_last;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} list_del($p42);
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p41, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p41);
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i38, $i45);
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i46 == 1);
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $p41, $p42 := $p44, $p41;
    goto $bb14_dummy;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $p17 := $p10;
    goto $bb4;

  $bb4:
    call $p19, $p20, $p21, $p22, $p23, $p24, $p25, $p26, $i27, $i28, $p17, vslice_dummy_var_157 := fb_deferred_io_work_loop_$bb4($i15, $p19, $p20, $p21, $p22, $p23, $p24, $p25, $p26, $i27, $i28, $p17, vslice_dummy_var_157);
    goto $bb4_last;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} lock_page($p17);
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} vslice_dummy_var_157 := page_mkclean($p17);
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} unlock_page($p17);
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p17, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref($sub.ref(0, 32), 64));
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p23, $mul.ref($sub.ref(0, 32), 64)), $mul.ref(32, 1));
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, $i15);
    goto corral_source_split_11029;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i28 == 1);
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p17 := $p24;
    goto $bb6_dummy;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11047;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11015;
}



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 471201);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    return;
}



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 472233);

procedure delayed_work_timer_fn($i0: i64);



const lock_page: ref;

axiom lock_page == $sub.ref(0, 473265);

procedure lock_page($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation lock_page($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} __might_sleep(.str.76, 449, 0);
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $i1 := trylock_page($p0);
    call {:si_unique_call 854} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} __lock_page($p0);
    goto corral_source_split_11068;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const page_mkclean: ref;

axiom page_mkclean == $sub.ref(0, 474297);

procedure page_mkclean($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation page_mkclean($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 1} true;
    call {:si_unique_call 856} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 857} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const unlock_page: ref;

axiom unlock_page == $sub.ref(0, 475329);

procedure unlock_page($p0: ref);
  free requires assertsPassed;



implementation unlock_page($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    return;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 476361);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 859} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    return;
}



const trylock_page: ref;

axiom trylock_page == $sub.ref(0, 477393);

procedure trylock_page($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation trylock_page($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $i2 := test_and_set_bit_lock(0, $p1);
    call {:si_unique_call 861} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_11080;

  corral_source_split_11080:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_11082;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $i6 := ldv__builtin_expect($i5, 1);
    call {:si_unique_call 863} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const __lock_page: ref;

axiom __lock_page == $sub.ref(0, 478425);

procedure __lock_page($p0: ref);
  free requires assertsPassed;



implementation __lock_page($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    return;
}



const test_and_set_bit_lock: ref;

axiom test_and_set_bit_lock == $sub.ref(0, 479457);

procedure test_and_set_bit_lock($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit_lock($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} {:cexpr "test_and_set_bit_lock:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $i2 := test_and_set_bit($i0, $p1);
    call {:si_unique_call 866} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 480489);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 868} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 869} devirtbounce.11(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.69, $p2);
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const fb_deferred_io_open: ref;

axiom fb_deferred_io_open == $sub.ref(0, 481521);

procedure fb_deferred_io_open($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fb_deferred_io_open($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(496, 1));
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 408)), $mul.ref(296, 1));
    goto corral_source_split_11100;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, fb_deferred_io_aops);
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    return;
}



const fb_deferred_io_cleanup: ref;

axiom fb_deferred_io_cleanup == $sub.ref(0, 482553);

procedure fb_deferred_io_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.11, $M.0, $M.61, $M.63, $M.65, $M.67;



implementation fb_deferred_io_cleanup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i15: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var vslice_dummy_var_158: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1496, 1));
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 871} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1272, 1));
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} vslice_dummy_var_158 := ldv_cancel_delayed_work_sync_106($p9);
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(24, 1));
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    $i14 := $ult.i32(0, $i13);
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 192)), $mul.ref(152, 1));
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $0.ref);
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} mutex_destroy($p26);
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  $bb8:
    call $i16, $p17, $p18, $p19, $i20, $i21, $i22, $i15 := fb_deferred_io_cleanup_loop_$bb8($p0, $p12, $i16, $p17, $p18, $p19, $i20, $i21, $i22, $i15);
    goto $bb8_last;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $p17 := fb_deferred_io_page($p0, $i16);
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p19, $0.ref);
    goto corral_source_split_11129;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i15, 4096);
    call {:si_unique_call 875} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p12);
    goto corral_source_split_11131;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    $i22 := $ult.i32($i20, $i21);
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i15 := $i20;
    goto $bb10_dummy;

  $bb1:
    assume $i8 == 1;
    call {:si_unique_call 872} devirtbounce.9(0, .str.18, 232, 12);
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call fb_deferred_io_cleanup_loop_$bb3();
    goto $bb3_last;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11123;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv_cancel_delayed_work_sync_106: ref;

axiom ldv_cancel_delayed_work_sync_106 == $sub.ref(0, 483585);

procedure ldv_cancel_delayed_work_sync_106($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.61, $M.63, $M.65, $M.67;



implementation ldv_cancel_delayed_work_sync_106($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $i1 := cancel_delayed_work_sync($p0);
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 878} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 879} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_11148;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} disable_work_1($p5);
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const fb_deferred_io_page: ref;

axiom fb_deferred_io_page == $sub.ref(0, 484617);

procedure fb_deferred_io_page($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation fb_deferred_io_page($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} {:cexpr "fb_deferred_io_page:arg:offs"} boogie_si_record_i64($i1);
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1544, 1));
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($i1, 1));
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $i5 := is_vmalloc_addr($p4);
    call {:si_unique_call 883} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(16, 1));
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, $i1);
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    $i14 := $lshr.i64($i13, 12);
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i14, 64));
    assume {:verifier.code 0} true;
    $p9 := $p15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p3, $mul.ref($i1, 1));
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $p8 := vmalloc_to_page($p7);
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    $p9 := $p8;
    goto $bb3;
}



const mutex_destroy: ref;

axiom mutex_destroy == $sub.ref(0, 485649);

procedure mutex_destroy($p0: ref);
  free requires assertsPassed;



implementation mutex_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    return;
}



const is_vmalloc_addr: ref;

axiom is_vmalloc_addr == $sub.ref(0, 486681);

procedure is_vmalloc_addr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_vmalloc_addr($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i4: i1;
  var $i3: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 885} {:cexpr "addr"} boogie_si_record_i64($i1);
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446683600570023935);
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i3);
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $i4 := $ule.i64($i1, 18446718784942112766);
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;
}



const vmalloc_to_page: ref;

axiom vmalloc_to_page == $sub.ref(0, 487713);

procedure vmalloc_to_page($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vmalloc_to_page($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $p1 := external_alloc();
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const seq_lseek: ref;

axiom seq_lseek == $sub.ref(0, 488745);

procedure seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 887} {:cexpr "seq_lseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 888} {:cexpr "seq_lseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 1} true;
    call {:si_unique_call 889} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 890} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_read: ref;

axiom seq_read == $sub.ref(0, 489777);

procedure seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 891} {:cexpr "seq_read:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 1} true;
    call {:si_unique_call 892} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 893} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const proc_fb_open: ref;

axiom proc_fb_open == $sub.ref(0, 490809);

procedure proc_fb_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.70, $M.71, $M.0, $CurrAddr;



implementation proc_fb_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $i2 := ldv_seq_open_10($p1, proc_fb_seq_ops);
    call {:si_unique_call 895} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_11193;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const seq_release: ref;

axiom seq_release == $sub.ref(0, 491841);

procedure seq_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 1} true;
    call {:si_unique_call 896} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 897} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_seq_open_10: ref;

axiom ldv_seq_open_10 == $sub.ref(0, 492873);

procedure ldv_seq_open_10($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.70, $M.71, $M.0, $CurrAddr;



implementation ldv_seq_open_10($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $i2 := seq_open($p0, $p1);
    call {:si_unique_call 899} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 900} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} ldv_seq_operations_6();
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const seq_open: ref;

axiom seq_open == $sub.ref(0, 493905);

procedure seq_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 1} true;
    call {:si_unique_call 902} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 903} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_seq_operations_6: ref;

axiom ldv_seq_operations_6 == $sub.ref(0, 494937);

procedure ldv_seq_operations_6();
  free requires assertsPassed;
  modifies $M.71, $M.0, $CurrAddr;



implementation ldv_seq_operations_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $p0 := ldv_init_zalloc(256);
    goto corral_source_split_11210;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    $M.71 := $p0;
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 495969);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $p1 := calloc(1, $i0);
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_11216;

  corral_source_split_11216:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_11218;

  corral_source_split_11218:
    assume {:verifier.code 1} true;
    call {:si_unique_call 907} __VERIFIER_assume($i4);
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const default_llseek: ref;

axiom default_llseek == $sub.ref(0, 497001);

procedure default_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation default_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 908} {:cexpr "default_llseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 909} {:cexpr "default_llseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 1} true;
    call {:si_unique_call 910} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 911} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const fb_read: ref;

axiom fb_read == $sub.ref(0, 498033);

procedure fb_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.19, $M.21, $CurrAddr, $M.11, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.46;



implementation fb_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $i36: i1;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $i43: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i61: i1;
  var $i67: i1;
  var $i68: i64;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $p72: ref;
  var $i73: i64;
  var $i74: i64;
  var $i75: i1;
  var $i76: i32;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $i82: i64;
  var $p83: ref;
  var $i84: i32;
  var $i85: i64;
  var $i86: i64;
  var $i87: i1;
  var $p63: ref;
  var $i64: i64;
  var $i65: i32;
  var $p66: ref;
  var $i88: i32;
  var $i62: i32;
  var $i77: i32;
  var $i78: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i64;
  var $i12: i64;
  var vslice_dummy_var_159: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} {:cexpr "fb_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_11224;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    call {:si_unique_call 913} {:cexpr "p"} boogie_si_record_i64($i4);
    goto corral_source_split_11225;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $p5 := file_fb_info($p0);
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_11228;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(1544, 1));
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_11232;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(1568, 1));
    goto corral_source_split_11238;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 192)), $mul.ref(24, 1));
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(1552, 1));
    goto corral_source_split_11257;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    call {:si_unique_call 917} {:cexpr "total_size"} boogie_si_record_i64($i28);
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_11259;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i28;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_11266;

  corral_source_split_11266:
    assume {:verifier.code 0} true;
    $i35 := $uge.i64($i4, $i34);
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i36 := $uge.i64($i2, $i34);
    goto corral_source_split_11271;

  corral_source_split_11271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $i2;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, $i4);
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    $i39 := $ugt.i64($i38, $i34);
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i41 := $i37;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    $i42 := $ult.i64(4096, $i41);
    goto corral_source_split_11283;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i42 == 1);
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    $i43 := $i41;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} $p44 := kmalloc($i43, 208);
    goto corral_source_split_11290;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_11292;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(1544, 1));
    goto corral_source_split_11296;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref($i4, 1));
    goto corral_source_split_11298;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 192)), $mul.ref(128, 1));
    goto corral_source_split_11301;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i41, 0);
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    $i62 := 0;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i77, $i78 := $i62, 0;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11336;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} kfree($p44);
    goto corral_source_split_11337;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i78, 0);
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i89 == 1);
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    $i90 := $i77;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    $i91 := $sext.i32.i64($i90);
    goto corral_source_split_11358;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    $i12 := $i91;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_11236;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb50:
    assume $i89 == 1;
    goto corral_source_split_11353;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    $i90 := $i78;
    goto $bb52;

  $bb35:
    assume $i61 == 1;
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    $p63, $i64, $i65, $p66 := $p1, $i41, 0, $p49;
    goto $bb38;

  $bb38:
    call $i67, $i68, $i69, $i70, $i71, $p72, $i73, $i74, $i75, $i76, $i79, $i80, $i81, $i82, $p83, $i84, $i85, $i86, $i87, $p63, $i64, $i65, $p66, $i88 := fb_read_loop_$bb38($p3, $p44, $i67, $i68, $i69, $i70, $i71, $p72, $i73, $i74, $i75, $i76, $i79, $i80, $i81, $i82, $p83, $i84, $i85, $i86, $i87, $p63, $i64, $i65, $p66, $i88);
    goto $bb38_last;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i67 := $ult.i64(4096, $i64);
    goto corral_source_split_11318;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i67 == 1);
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    $i68 := $i64;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i64.i32($i68);
    call {:si_unique_call 922} {:cexpr "c"} boogie_si_record_i32($i69);
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i69);
    goto corral_source_split_11326;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} memcpy_fromio($p44, $p66, $i70);
    goto corral_source_split_11327;

  corral_source_split_11327:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i69);
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p66, $mul.ref($i71, 1));
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i69);
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $i74 := copy_to_user($p63, $p44, $i73);
    call {:si_unique_call 925} {:cexpr "tmp___2"} boogie_si_record_i64($i74);
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    $i76 := $i65;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.0, $p3);
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i69);
    goto corral_source_split_11341;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    $i81 := $add.i64($i79, $i80);
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i81);
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i69);
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p63, $mul.ref($i82, 1));
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i65, $i69);
    call {:si_unique_call 927} {:cexpr "cnt"} boogie_si_record_i32($i84);
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i69);
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    $i86 := $sub.i64($i64, $i85);
    call {:si_unique_call 928} {:cexpr "count"} boogie_si_record_i64($i86);
    goto corral_source_split_11348;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    $i88 := $i84;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_11351;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    $i62 := $i88;
    goto $bb37;

  $bb47:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $p63, $i64, $i65, $p66 := $p83, $i86, $i84, $p72;
    goto $bb47_dummy;

  $bb43:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    $i77, $i78 := $i76, $sub.i32(0, 14);
    goto $bb45;

  $bb40:
    assume $i67 == 1;
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    $i68 := 4096;
    goto $bb42;

  $bb32:
    assume $i55 == 1;
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_11308;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(128, 1));
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    call {:si_unique_call 921} vslice_dummy_var_159 := devirtbounce($p59, $p5);
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i46 == 1;
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 12);
    goto $bb6;

  $bb26:
    assume $i42 == 1;
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    $i43 := 4096;
    goto $bb28;

  $bb23:
    assume $i39 == 1;
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    $i40 := $sub.i64($i34, $i4);
    call {:si_unique_call 919} {:cexpr "count"} boogie_si_record_i64($i40);
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb25;

  $bb20:
    assume $i36 == 1;
    goto corral_source_split_11273;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    $i37 := $i34;
    goto $bb22;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_11269;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_11261;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(24, 1));
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    call {:si_unique_call 918} {:cexpr "total_size"} boogie_si_record_i64($i33);
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb16;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 192)), $mul.ref(24, 1));
    goto corral_source_split_11254;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    call {:si_unique_call 915} $i26 := devirtbounce.12($p25, $p5, $p1, $i2, $p3);
    call {:si_unique_call 916} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    $i12 := $i26;
    goto $bb6;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_11242;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 1);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 19);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb47_dummy:
    assume false;
    return;

  $bb38_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11316;
}



const fb_write: ref;

axiom fb_write == $sub.ref(0, 499065);

procedure fb_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.19, $M.21, $CurrAddr, $M.11, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.46;



implementation fb_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $i41: i1;
  var $i42: i32;
  var $i43: i64;
  var $i44: i32;
  var $i45: i64;
  var $i46: i1;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i65: i1;
  var $i71: i1;
  var $i72: i64;
  var $i73: i32;
  var $i74: i64;
  var $i75: i64;
  var $i76: i1;
  var $i77: i32;
  var $i80: i64;
  var $i81: i64;
  var $p82: ref;
  var $i83: i64;
  var $i84: i64;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $i88: i32;
  var $i89: i64;
  var $i90: i64;
  var $i91: i1;
  var $p67: ref;
  var $i68: i64;
  var $i69: i32;
  var $p70: ref;
  var $i92: i32;
  var $i66: i32;
  var $i78: i32;
  var $i79: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i64;
  var $i12: i64;
  var vslice_dummy_var_160: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} {:cexpr "fb_write:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    call {:si_unique_call 930} {:cexpr "p"} boogie_si_record_i64($i4);
    goto corral_source_split_11361;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $p5 := file_fb_info($p0);
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_11363;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_11364;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(1544, 1));
    goto corral_source_split_11367;

  corral_source_split_11367:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(1568, 1));
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_11375;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_11380;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_11381;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 192)), $mul.ref(32, 1));
    goto corral_source_split_11382;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(1552, 1));
    goto corral_source_split_11393;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    call {:si_unique_call 934} {:cexpr "total_size"} boogie_si_record_i64($i28);
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i28;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    $i35 := $ugt.i64($i4, $i34);
    goto corral_source_split_11403;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i36 := $ugt.i64($i2, $i34);
    goto corral_source_split_11407;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37, $i38 := 0, $i2;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11411;

  corral_source_split_11411:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, $i4);
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    $i40 := $ugt.i64($i39, $i34);
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i44, $i45 := $i37, $i38;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11423;

  corral_source_split_11423:
    assume {:verifier.code 0} true;
    $i46 := $ult.i64(4096, $i45);
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i46 == 1);
    goto corral_source_split_11428;

  corral_source_split_11428:
    assume {:verifier.code 0} true;
    $i47 := $i45;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $p48 := kmalloc($i47, 208);
    goto corral_source_split_11431;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_11432;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(1544, 1));
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref($i4, 1));
    goto corral_source_split_11439;

  corral_source_split_11439:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_11440;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 192)), $mul.ref(128, 1));
    goto corral_source_split_11442;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_11443;

  corral_source_split_11443:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_11444;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_11445;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i45, 0);
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    $i66 := 0;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i78, $i79 := $i66, $i44;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11473;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} kfree($p48);
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i78, 0);
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i93 == 1);
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    $i94 := $i79;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_11498;

  corral_source_split_11498:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64($i94);
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    $i12 := $i95;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb53:
    assume $i93 == 1;
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    $i94 := $i78;
    goto $bb55;

  $bb38:
    assume $i65 == 1;
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    $p67, $i68, $i69, $p70 := $p1, $i45, 0, $p53;
    goto $bb41;

  $bb41:
    call $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i80, $i81, $p82, $i83, $i84, $i85, $i86, $p87, $i88, $i89, $i90, $i91, $p67, $i68, $i69, $p70, $i92 := fb_write_loop_$bb41($p3, $p48, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i80, $i81, $p82, $i83, $i84, $i85, $i86, $p87, $i88, $i89, $i90, $i91, $p67, $i68, $i69, $p70, $i92);
    goto $bb41_last;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i71 := $ult.i64(4096, $i68);
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i71 == 1);
    goto corral_source_split_11463;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    $i72 := $i68;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i64.i32($i72);
    call {:si_unique_call 939} {:cexpr "c"} boogie_si_record_i32($i73);
    goto corral_source_split_11466;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i73);
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $i75 := copy_from_user($p48, $p67, $i74);
    call {:si_unique_call 941} {:cexpr "tmp___2"} boogie_si_record_i64($i75);
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_11469;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    $i77 := $i69;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i73);
    goto corral_source_split_11477;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} memcpy_toio($p70, $p48, $i80);
    goto corral_source_split_11478;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i73);
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p70, $mul.ref($i81, 1));
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.0, $p3);
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i73);
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    $i85 := $add.i64($i83, $i84);
    goto corral_source_split_11483;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i85);
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i73);
    goto corral_source_split_11485;

  corral_source_split_11485:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p67, $mul.ref($i86, 1));
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    $i88 := $add.i32($i69, $i73);
    call {:si_unique_call 944} {:cexpr "cnt"} boogie_si_record_i32($i88);
    goto corral_source_split_11487;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i73);
    goto corral_source_split_11488;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    $i90 := $sub.i64($i68, $i89);
    call {:si_unique_call 945} {:cexpr "count"} boogie_si_record_i64($i90);
    goto corral_source_split_11489;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    $i92 := $i88;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_11492;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    $i66 := $i92;
    goto $bb40;

  $bb50:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    $p67, $i68, $i69, $p70 := $p87, $i90, $i88, $p82;
    goto $bb50_dummy;

  $bb46:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    $i78, $i79 := $i77, $sub.i32(0, 14);
    goto $bb48;

  $bb43:
    assume $i71 == 1;
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    $i72 := 4096;
    goto $bb45;

  $bb35:
    assume $i59 == 1;
    goto corral_source_split_11447;

  corral_source_split_11447:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_11449;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 192)), $mul.ref(128, 1));
    goto corral_source_split_11450;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    call {:si_unique_call 938} vslice_dummy_var_160 := devirtbounce($p63, $p5);
    goto corral_source_split_11451;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i50 == 1;
    goto corral_source_split_11435;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 12);
    goto $bb6;

  $bb29:
    assume $i46 == 1;
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    $i47 := 4096;
    goto $bb31;

  $bb23:
    assume $i40 == 1;
    goto corral_source_split_11415;

  corral_source_split_11415:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i37, 0);
    goto corral_source_split_11416;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $i37;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    $i43 := $sub.i64($i34, $i4);
    call {:si_unique_call 936} {:cexpr "count"} boogie_si_record_i64($i43);
    goto corral_source_split_11421;

  corral_source_split_11421:
    assume {:verifier.code 0} true;
    $i44, $i45 := $i42, $i43;
    goto $bb28;

  $bb25:
    assume $i41 == 1;
    goto corral_source_split_11418;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 28);
    goto $bb27;

  $bb20:
    assume $i36 == 1;
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    $i37, $i38 := $sub.i32(0, 27), $i34;
    goto $bb22;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 27);
    goto $bb6;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_11397;

  corral_source_split_11397:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(24, 1));
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_11399;

  corral_source_split_11399:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    call {:si_unique_call 935} {:cexpr "total_size"} boogie_si_record_i64($i33);
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb16;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_11388;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 192)), $mul.ref(32, 1));
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    call {:si_unique_call 932} $i26 := devirtbounce.12($p25, $p5, $p1, $i2, $p3);
    call {:si_unique_call 933} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_11391;

  corral_source_split_11391:
    assume {:verifier.code 0} true;
    $i12 := $i26;
    goto $bb6;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 1);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 19);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb50_dummy:
    assume false;
    return;

  $bb41_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11457;
}



const fb_ioctl: ref;

axiom fb_ioctl == $sub.ref(0, 500097);

procedure fb_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.18, $M.16, $M.17, $M.19, $M.21, $CurrAddr, $M.70, $M.10, $M.72, $M.11, $M.46, $M.71, $M.12, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.13, assertsPassed, $M.62, $M.64, $M.66, $M.68;



implementation fb_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} {:cexpr "fb_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 947} {:cexpr "fb_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $p3 := file_fb_info($p0);
    goto corral_source_split_11502;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_11503;

  corral_source_split_11503:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $i7 := do_fb_ioctl($p3, $i1, $i2);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 950} {:cexpr "tmp___0"} boogie_si_record_i64($i7);
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11508;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_11506;

  corral_source_split_11506:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64(0, 19);
    goto $bb3;
}



const fb_compat_ioctl: ref;

axiom fb_compat_ioctl == $sub.ref(0, 501129);

procedure fb_compat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.18, $M.11, $M.16, $M.17, $M.19, $M.21, $CurrAddr, $M.70, $M.10, $M.72, $M.46, $M.71, $M.12, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.13, assertsPassed, $M.62, $M.64, $M.66, $M.68;



implementation fb_compat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $p23: ref;
  var $i24: i64;
  var $i14: i64;
  var $i25: i64;
  var $i27: i32;
  var $i28: i64;
  var $i29: i32;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i26: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} {:cexpr "fb_compat_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 952} {:cexpr "fb_compat_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $p3 := file_fb_info($p0);
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_11514;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_11521;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i1, 17925);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i1, 17935);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i1, 17936);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i1, 17937);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i1, 17937);
    assume {:verifier.code 0} true;
    $i14 := $i2;
    assume {:branchcond $i13} true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_11543;

  corral_source_split_11543:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_11545;

  corral_source_split_11545:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i39 := $sub.i64(0, 515);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_11553;

  corral_source_split_11553:
    assume {:verifier.code 0} true;
    $i26 := $i39;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_11541;

  corral_source_split_11541:
    assume {:verifier.code 0} true;
    $i6 := $i26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11519;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb39:
    assume $i34 == 1;
    goto corral_source_split_11548;

  corral_source_split_11548:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_11549;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    call {:si_unique_call 964} $i37 := devirtbounce.13($p36, $p3, $i1, $i2);
    call {:si_unique_call 965} {:cexpr "tmp___3"} boogie_si_record_i32($i37);
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    call {:si_unique_call 966} {:cexpr "ret"} boogie_si_record_i64($i38);
    goto corral_source_split_11551;

  corral_source_split_11551:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb41;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_11527;

  corral_source_split_11527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} $i25 := do_fb_ioctl($p3, $i1, $i14);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 957} {:cexpr "ret"} boogie_si_record_i64($i25);
    goto corral_source_split_11528;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb37;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i2);
    goto corral_source_split_11523;

  corral_source_split_11523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $p23 := compat_ptr($i22);
    goto corral_source_split_11524;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    call {:si_unique_call 955} {:cexpr "arg"} boogie_si_record_i64($i24);
    goto corral_source_split_11525;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    $i14 := $i24;
    goto $bb17;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i1, 17926);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i1, 17926);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} $i29 := fb_getput_cmap($p3, $i1, $i2);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 959} {:cexpr "tmp___2"} boogie_si_record_i32($i29);
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    call {:si_unique_call 960} {:cexpr "ret"} boogie_si_record_i64($i30);
    goto corral_source_split_11531;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    $i26 := $i30;
    goto $bb37;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i1, 17922);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i1, 17924);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i18 == 1);
    goto corral_source_split_11533;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i1, 17922);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb19;

  $bb30:
    assume $i19 == 1;
    goto corral_source_split_11535;

  corral_source_split_11535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $i27 := fb_get_fscreeninfo($p3, $i1, $i2);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 962} {:cexpr "tmp___1"} boogie_si_record_i32($i27);
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    call {:si_unique_call 963} {:cexpr "ret"} boogie_si_record_i64($i28);
    goto corral_source_split_11537;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    $i26 := $i28;
    goto $bb37;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i1, 17921);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb32:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i1, 17920);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb19;

  $bb35:
    assume $i21 == 1;
    goto corral_source_split_11539;

  corral_source_split_11539:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_11517;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64(0, 19);
    goto $bb3;
}



const fb_mmap: ref;

axiom fb_mmap == $sub.ref(0, 502161);

procedure fb_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $CurrAddr, $M.16, $M.17, $M.19, $M.21, $M.70, $M.10, $M.18, $M.72, $M.11, $M.46, $M.71, $M.12, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.13, assertsPassed, $M.62, $M.64, $M.66, $M.68;



implementation fb_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p21: ref;
  var $i22: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $p44: ref;
  var $i45: i64;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i32;
  var $i6: i32;
  var cmdloc_dummy_var_91: [ref]i8;
  var cmdloc_dummy_var_92: [ref]i8;
  var cmdloc_dummy_var_93: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11555;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $p3 := file_fb_info($p0);
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_11557;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_11564;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_11566;

  corral_source_split_11566:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(176, 1));
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} mutex_lock_nested($p11, 0);
    goto corral_source_split_11572;

  corral_source_split_11572:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(152, 1));
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_11574;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_11576;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(16, 1));
    goto corral_source_split_11584;

  corral_source_split_11584:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    call {:si_unique_call 973} {:cexpr "start"} boogie_si_record_i64($i22);
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(24, 1));
    goto corral_source_split_11586;

  corral_source_split_11586:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    call {:si_unique_call 974} {:cexpr "len"} boogie_si_record_i32($i25);
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i22, 4095);
    goto corral_source_split_11588;

  corral_source_split_11588:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i25);
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i26, $i27);
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 4095);
    goto corral_source_split_11591;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    $i30 := $lshr.i64($i29, 12);
    call {:si_unique_call 975} {:cexpr "mmio_pgoff"} boogie_si_record_i64($i30);
    goto corral_source_split_11592;

  corral_source_split_11592:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_11593;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_11594;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    $i33 := $uge.i64($i32, $i30);
    goto corral_source_split_11595;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i49, $i50 := $i22, $i25;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11616;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(176, 1));
    goto corral_source_split_11617;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} mutex_unlock($p51);
    goto corral_source_split_11618;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_11620;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p53);
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $i55 := vm_get_page_prot($i54);
    goto corral_source_split_11622;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_11623;

  corral_source_split_11623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p56, $i55);
    goto corral_source_split_11624;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p52);
    goto corral_source_split_11625;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p2);
    goto corral_source_split_11626;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_91 := $M.0;
    cmdloc_dummy_var_92 := $M.0;
    call {:si_unique_call 981} cmdloc_dummy_var_93 := $memcpy.i8(cmdloc_dummy_var_91, cmdloc_dummy_var_92, $p57, $p58, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_93;
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} fb_pgprotect($p0, $p1, $i49);
    goto corral_source_split_11628;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64($i50);
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $i60 := vm_iomap_memory($p1, $i49, $i59);
    call {:si_unique_call 984} {:cexpr "tmp___0"} boogie_si_record_i32($i60);
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    $i6 := $i60;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(96, 1));
    goto corral_source_split_11598;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_11599;

  corral_source_split_11599:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_11600;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    goto corral_source_split_11607;

  corral_source_split_11607:
    assume {:verifier.code 0} true;
    $i41 := $sub.i64($i40, $i30);
    goto corral_source_split_11608;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_11609;

  corral_source_split_11609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p42, $i41);
    goto corral_source_split_11610;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(56, 1));
    goto corral_source_split_11611;

  corral_source_split_11611:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    call {:si_unique_call 977} {:cexpr "start"} boogie_si_record_i64($i45);
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(64, 1));
    goto corral_source_split_11613;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    call {:si_unique_call 978} {:cexpr "len"} boogie_si_record_i32($i48);
    goto corral_source_split_11614;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    $i49, $i50 := $i45, $i48;
    goto $bb16;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(176, 1));
    goto corral_source_split_11603;

  corral_source_split_11603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} mutex_unlock($p38);
    goto corral_source_split_11604;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_11578;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(152, 1));
    goto corral_source_split_11579;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 970} $i18 := devirtbounce.14($p17, $p3, $p1);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 971} {:cexpr "res"} boogie_si_record_i32($i18);
    goto corral_source_split_11580;

  corral_source_split_11580:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 1608)), $mul.ref(176, 1));
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} mutex_unlock($p19);
    goto corral_source_split_11582;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    $i6 := $i18;
    goto $bb3;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_11569;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_11560;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb3;
}



const fb_open: ref;

axiom fb_open == $sub.ref(0, 503193);

procedure fb_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.18, $M.14, $M.15, $M.72, $M.11, $M.12, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.13, $CurrAddr, assertsPassed, $M.46, $M.16, $M.17, $M.19, $M.21, $M.70, $M.71, $M.62, $M.64, $M.66, $M.68;



implementation fb_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $i25: i8;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $i29: i32;
  var $p53: ref;
  var $i54: i1;
  var $i10: i32;
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11632;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $i2 := iminor($p0);
    call {:si_unique_call 986} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $p3 := get_fb_info($i2);
    goto corral_source_split_11634;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_11635;

  corral_source_split_11635:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_11636;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $p11 := $p3;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_11648;

  corral_source_split_11648:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_11649;

  corral_source_split_11649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $i13 := IS_ERR($p12);
    goto corral_source_split_11650;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 991} {:cexpr "tmp___1"} boogie_si_record_i8($i14);
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_11652;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 1608)), $mul.ref(16, 1));
    goto corral_source_split_11659;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} mutex_lock_nested($p19, 0);
    goto corral_source_split_11660;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p11, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_11661;

  corral_source_split_11661:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_11663;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_11664;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $i24 := ldv_try_module_get_11($p23);
    goto corral_source_split_11665;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i8($i24);
    call {:si_unique_call 996} {:cexpr "tmp___2"} boogie_si_record_i8($i25);
    goto corral_source_split_11666;

  corral_source_split_11666:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_11667;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_11672;

  corral_source_split_11672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_11682;

  corral_source_split_11682:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p11);
    goto corral_source_split_11683;

  corral_source_split_11683:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p11, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_11688;

  corral_source_split_11688:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_11705;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p11, $mul.ref(0, 1608)), $mul.ref(1496, 1));
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_11707;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_11708;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_11709;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i29 := $i48;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_11676;

  corral_source_split_11676:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p11, $mul.ref(0, 1608)), $mul.ref(16, 1));
    goto corral_source_split_11677;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} mutex_unlock($p53);
    goto corral_source_split_11678;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i29, 0);
    goto corral_source_split_11679;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i10 := $i29;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb27:
    assume $i54 == 1;
    goto corral_source_split_11714;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} put_fb_info($p11);
    goto corral_source_split_11715;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i52 == 1;
    goto corral_source_split_11711;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} fb_deferred_io_open($p11, $p0, $p1);
    goto corral_source_split_11712;

  corral_source_split_11712:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb18:
    assume $i37 == 1;
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p11, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_11692;

  corral_source_split_11692:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_11694;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    call {:si_unique_call 998} $i42 := devirtbounce.15($p41, $p11, 1);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 999} {:cexpr "res"} boogie_si_record_i32($i42);
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_11696;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i48 := $i42;
    goto $bb23;

  $bb20:
    assume $i43 == 1;
    goto corral_source_split_11698;

  corral_source_split_11698:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p11, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_11700;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_11701;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} ldv_module_put_12($p47);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_11703;

  corral_source_split_11703:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_11674;

  corral_source_split_11674:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 19);
    goto $bb16;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb13;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p11);
    goto corral_source_split_11655;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $i17 := PTR_ERR($p16);
    call {:si_unique_call 993} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_11656;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i17);
    goto corral_source_split_11657;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    $i10 := $i18;
    goto $bb5;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_11638;

  corral_source_split_11638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} vslice_dummy_var_161 := __request_module.i1.ref.i32(1, .str.28, $i2);
    goto corral_source_split_11639;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $p7 := get_fb_info($i2);
    goto corral_source_split_11640;

  corral_source_split_11640:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_11642;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p11 := $p7;
    goto $bb7;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_11644;

  corral_source_split_11644:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 19);
    goto $bb5;
}



const fb_release: ref;

axiom fb_release == $sub.ref(0, 504225);

procedure fb_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.18, $M.14, $M.15, $M.0, $M.11, $M.12, $M.72, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.13, $CurrAddr, $M.46, assertsPassed, $M.16, $M.17, $M.19, $M.21, $M.70, $M.71, $M.62, $M.64, $M.66, $M.68;



implementation fb_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var vslice_dummy_var_162: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_11718;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_11719;

  corral_source_split_11719:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1608)), $mul.ref(16, 1));
    goto corral_source_split_11721;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} mutex_lock_nested($p5, 0);
    goto corral_source_split_11722;

  corral_source_split_11722:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_11723;

  corral_source_split_11723:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_11724;

  corral_source_split_11724:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(16, 1));
    goto corral_source_split_11725;

  corral_source_split_11725:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_11727;

  corral_source_split_11727:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_11728;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_11736;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_11737;

  corral_source_split_11737:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_11739;

  corral_source_split_11739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} ldv_module_put_13($p20);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_11740;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 1608)), $mul.ref(16, 1));
    goto corral_source_split_11741;

  corral_source_split_11741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} mutex_unlock($p21);
    goto corral_source_split_11742;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} put_fb_info($p4);
    goto corral_source_split_11743;

  corral_source_split_11743:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_11730;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_11731;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_11732;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 192)), $mul.ref(16, 1));
    goto corral_source_split_11733;

  corral_source_split_11733:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 1004} vslice_dummy_var_162 := devirtbounce.15($p15, $p4, 1);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const ldv_module_put_13: ref;

axiom ldv_module_put_13 == $sub.ref(0, 505257);

procedure ldv_module_put_13($p0: ref);
  free requires assertsPassed;
  modifies $M.72, assertsPassed;



implementation ldv_module_put_13($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11745;

  corral_source_split_11745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} ldv_module_put($p0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_11746;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const ldv_module_put: ref;

axiom ldv_module_put == $sub.ref(0, 506289);

procedure ldv_module_put($p0: ref);
  free requires assertsPassed;
  modifies $M.72, assertsPassed;



implementation ldv_module_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11748;

  corral_source_split_11748:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_11749;

  corral_source_split_11749:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_11750;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    $i3 := $M.72;
    goto corral_source_split_11753;

  corral_source_split_11753:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 1);
    goto corral_source_split_11754;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $M.72;
    goto corral_source_split_11759;

  corral_source_split_11759:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_11760;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    $M.72 := $i6;
    call {:si_unique_call 1010} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_11761;

  corral_source_split_11761:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_11756;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} ldv_error();
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_11757;

  corral_source_split_11757:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 507321);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11763;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1011} __VERIFIER_error();
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_11765;

  corral_source_split_11765:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const iminor: ref;

axiom iminor == $sub.ref(0, 508353);

procedure iminor($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iminor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11767;

  corral_source_split_11767:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(76, 1));
    goto corral_source_split_11768;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_11769;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1048575);
    goto corral_source_split_11770;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const get_fb_info: ref;

axiom get_fb_info == $sub.ref(0, 509385);

procedure get_fb_info($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.46, $CurrAddr;



implementation get_fb_info($i0: i32) returns ($r: ref)
{
  var $i1: i1;
  var $p2: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} {:cexpr "get_fb_info:arg:idx"} boogie_si_record_i32($i0);
    goto corral_source_split_11772;

  corral_source_split_11772:
    assume {:verifier.code 0} true;
    $i1 := $ugt.i32($i0, 31);
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} mutex_lock_nested(registration_lock, 0);
    goto corral_source_split_11781;

  corral_source_split_11781:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i0);
    goto corral_source_split_11782;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref($i5, 8));
    goto corral_source_split_11783;

  corral_source_split_11783:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.19, $p6);
    goto corral_source_split_11784;

  corral_source_split_11784:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_11785;

  corral_source_split_11785:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_11786;

  corral_source_split_11786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} mutex_unlock(registration_lock);
    goto corral_source_split_11792;

  corral_source_split_11792:
    assume {:verifier.code 0} true;
    $p4 := $p7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11779;

  corral_source_split_11779:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_11788;

  corral_source_split_11788:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 1608)), $mul.ref(0, 1));
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} atomic_inc($p10);
    goto corral_source_split_11790;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_11775;

  corral_source_split_11775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $p2 := ERR_PTR($sub.i64(0, 19));
    goto corral_source_split_11776;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    goto corral_source_split_11777;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    $p4 := $p2;
    goto $bb3;
}



const __request_module: ref;

axiom __request_module == $sub.ref(0, 510417);

procedure __request_module.i1.ref.i32($i0: i1, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __request_module.i1.ref.i32($i0: i1, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1017} {:cexpr "__request_module:arg:arg0"} boogie_si_record_i1($i0);
    goto corral_source_split_11794;

  corral_source_split_11794:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1018} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1019} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11795;

  corral_source_split_11795:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_try_module_get_11: ref;

axiom ldv_try_module_get_11 == $sub.ref(0, 511449);

procedure ldv_try_module_get_11($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.72;



implementation ldv_try_module_get_11($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11797;

  corral_source_split_11797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 1021} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11799;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_module_put_12: ref;

axiom ldv_module_put_12 == $sub.ref(0, 512481);

procedure ldv_module_put_12($p0: ref);
  free requires assertsPassed;
  modifies $M.72, assertsPassed;



implementation ldv_module_put_12($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11801;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} ldv_module_put($p0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_11802;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const ldv_try_module_get: ref;

axiom ldv_try_module_get == $sub.ref(0, 513513);

procedure ldv_try_module_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.72;



implementation ldv_try_module_get($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11804;

  corral_source_split_11804:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_11805;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_11806;

  corral_source_split_11806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_11819;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11808;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $i3 := ldv_undef_int();
    call {:si_unique_call 1024} {:cexpr "module_get_succeeded"} boogie_si_record_i32($i3);
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_11810;

  corral_source_split_11810:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    goto corral_source_split_11817;

  corral_source_split_11817:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_11812;

  corral_source_split_11812:
    assume {:verifier.code 0} true;
    $i5 := $M.72;
    goto corral_source_split_11813;

  corral_source_split_11813:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    $M.72 := $i6;
    call {:si_unique_call 1025} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_11815;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb5;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 514545);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11821;

  corral_source_split_11821:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1026} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1027} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1028} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_11822;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 515577);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_11824;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_11825;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 516609);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.46, $CurrAddr;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 1031} devirtbounce.16(0, $p1, $p1);
    goto corral_source_split_11828;

  corral_source_split_11828:
    assume {:verifier.code 0} true;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 517641);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_11830;

  corral_source_split_11830:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(2012, $i0);
    goto corral_source_split_11831;

  corral_source_split_11831:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_11832;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const file_fb_info: ref;

axiom file_fb_info == $sub.ref(0, 518673);

procedure file_fb_info($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation file_fb_info($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11834;

  corral_source_split_11834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $p1 := file_inode($p0);
    goto corral_source_split_11835;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $i2 := iminor($p1);
    call {:si_unique_call 1035} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_11836;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_11837;

  corral_source_split_11837:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref($i3, 8));
    goto corral_source_split_11838;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.19, $p4);
    goto corral_source_split_11839;

  corral_source_split_11839:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_11840;

  corral_source_split_11840:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_11841;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p5);
    goto corral_source_split_11843;

  corral_source_split_11843:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i8, $i10);
    goto corral_source_split_11845;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $p12 := $p5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11849;

  corral_source_split_11849:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_11847;

  corral_source_split_11847:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb3;
}



const vm_get_page_prot: ref;

axiom vm_get_page_prot == $sub.ref(0, 519705);

procedure vm_get_page_prot($i0: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vm_get_page_prot($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var cmdloc_dummy_var_94: [ref]i8;
  var cmdloc_dummy_var_95: [ref]i8;
  var cmdloc_dummy_var_96: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1037} {:cexpr "vm_get_page_prot:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_11851;

  corral_source_split_11851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} $p2 := external_alloc();
    goto corral_source_split_11852;

  corral_source_split_11852:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_11853;

  corral_source_split_11853:
    assume {:verifier.code 1} true;
    $i4 := $ne.ref($p3, $0.ref);
    goto corral_source_split_11854;

  corral_source_split_11854:
    assume {:verifier.code 1} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_11855;

  corral_source_split_11855:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1039} __VERIFIER_assume($i5);
    goto corral_source_split_11856;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_11858;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_94 := $M.0;
    cmdloc_dummy_var_95 := $M.0;
    call {:si_unique_call 1040} cmdloc_dummy_var_96 := $memcpy.i8(cmdloc_dummy_var_94, cmdloc_dummy_var_95, $p6, $p7, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_96;
    goto corral_source_split_11859;

  corral_source_split_11859:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_11860;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_11861;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const fb_pgprotect: ref;

axiom fb_pgprotect == $sub.ref(0, 520737);

procedure fb_pgprotect($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation fb_pgprotect($p0: ref, $p1: ref, $i2: i64)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} {:cexpr "fb_pgprotect:arg:off"} boogie_si_record_i64($i2);
    goto corral_source_split_11863;

  corral_source_split_11863:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_11864;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_11865;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, $sub.i64(0, 153));
    call {:si_unique_call 1042} {:cexpr "prot"} boogie_si_record_i64($i6);
    goto corral_source_split_11866;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.11, boot_cpu_data);
    goto corral_source_split_11867;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_11868;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i32($i8, 3);
    goto corral_source_split_11869;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_11871;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $i10 := cachemode2protval(2);
    call {:si_unique_call 1044} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_11872;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    $i11 := $or.i64($i10, $i6);
    goto corral_source_split_11873;

  corral_source_split_11873:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_11874;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i11);
    goto corral_source_split_11875;

  corral_source_split_11875:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vm_iomap_memory: ref;

axiom vm_iomap_memory == $sub.ref(0, 521769);

procedure vm_iomap_memory($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation vm_iomap_memory($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1045} {:cexpr "vm_iomap_memory:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1046} {:cexpr "vm_iomap_memory:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_11877;

  corral_source_split_11877:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1047} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1048} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const cachemode2protval: ref;

axiom cachemode2protval == $sub.ref(0, 522801);

procedure cachemode2protval($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation cachemode2protval($i0: i32) returns ($r: i64)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $i9: i16;
  var $i10: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} {:cexpr "cachemode2protval:arg:pcm"} boogie_si_record_i32($i0);
    goto corral_source_split_11880;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11881;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11882;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_11883;

  corral_source_split_11883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $i4 := ldv__builtin_expect($i3, 1);
    call {:si_unique_call 1051} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_11884;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_11885;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i0);
    goto corral_source_split_11891;

  corral_source_split_11891:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(__cachemode2pte_tbl, $mul.ref(0, 16)), $mul.ref($i7, 2));
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.11, $p8);
    goto corral_source_split_11893;

  corral_source_split_11893:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i64($i9);
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    $i6 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11889;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_11887;

  corral_source_split_11887:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const compat_ptr: ref;

axiom compat_ptr == $sub.ref(0, 523833);

procedure compat_ptr($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation compat_ptr($i0: i32) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} {:cexpr "compat_ptr:arg:uptr"} boogie_si_record_i32($i0);
    goto corral_source_split_11896;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    goto corral_source_split_11897;

  corral_source_split_11897:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const do_fb_ioctl: ref;

axiom do_fb_ioctl == $sub.ref(0, 524865);

procedure do_fb_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.18, $M.16, $M.17, $M.19, $M.21, $CurrAddr, $M.70, $M.10, $M.72, $M.11, $M.46, $M.71, $M.12, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.13, assertsPassed, $M.62, $M.64, $M.66, $M.68;



implementation do_fb_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $i32: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $i49: i1;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $i53: i64;
  var $i54: i64;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $i63: i64;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $i67: i32;
  var $i68: i64;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i64;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $p107: ref;
  var $i108: i64;
  var $i109: i1;
  var $i110: i64;
  var $p111: ref;
  var $i112: i64;
  var $i113: i1;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i124: i32;
  var $i125: i64;
  var $p126: ref;
  var $p127: ref;
  var $i128: i64;
  var $i129: i1;
  var $p130: ref;
  var $i131: i32;
  var $p133: ref;
  var $i134: i32;
  var $i135: i64;
  var $p136: ref;
  var $p137: ref;
  var $i138: i64;
  var $i139: i1;
  var $p141: ref;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i64;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $i151: i32;
  var $i152: i32;
  var $p153: ref;
  var $i154: i32;
  var $i155: i32;
  var $i156: i64;
  var $p157: ref;
  var $i158: i32;
  var $i159: i32;
  var $p160: ref;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i64;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var $i171: i32;
  var $i172: i64;
  var $i173: i64;
  var $i33: i64;
  var $i25: i64;
  var cmdloc_dummy_var_97: [ref]i8;
  var cmdloc_dummy_var_98: [ref]i8;
  var cmdloc_dummy_var_99: [ref]i8;
  var cmdloc_dummy_var_100: [ref]i8;
  var cmdloc_dummy_var_101: [ref]i8;
  var cmdloc_dummy_var_102: [ref]i8;
  var cmdloc_dummy_var_103: [ref]i8;
  var cmdloc_dummy_var_104: [ref]i8;
  var cmdloc_dummy_var_105: [ref]i8;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $p3 := $alloc($mul.ref(160, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $p4 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $p8 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1059} {:cexpr "do_fb_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 1060} {:cexpr "do_fb_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_11900;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i1, 17925);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i1, 17935);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i1, 17936);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i1, 17937);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i1, 17937);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $i161 := lock_fb_info($p0);
    call {:si_unique_call 1146} {:cexpr "tmp___24"} boogie_si_record_i32($i161);
    goto corral_source_split_12161;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 0);
    goto corral_source_split_12162;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_12166;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.0, $p163);
    goto corral_source_split_12167;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p164, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_12168;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.0, $p165);
    goto corral_source_split_12169;

  corral_source_split_12169:
    assume {:verifier.code 0} true;
    $i167 := $p2i.ref.i64($p166);
    goto corral_source_split_12170;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    $i168 := $ne.i64($i167, 0);
    goto corral_source_split_12171;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    $i173 := $sub.i64(0, 25);
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto corral_source_split_12178;

  corral_source_split_12178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} unlock_fb_info($p0);
    goto corral_source_split_12179;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i33 := $i173;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_11961;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    $i25 := $i33;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_11949;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb110:
    assume $i168 == 1;
    goto corral_source_split_12173;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p164, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_12174;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    call {:si_unique_call 1147} $i171 := devirtbounce.13($p170, $p0, $i1, $i2);
    call {:si_unique_call 1148} {:cexpr "tmp___25"} boogie_si_record_i32($i171);
    goto corral_source_split_12175;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    $i172 := $sext.i32.i64($i171);
    call {:si_unique_call 1149} {:cexpr "ret"} boogie_si_record_i64($i172);
    goto corral_source_split_12176;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    $i173 := $i172;
    goto $bb112;

  $bb107:
    assume $i162 == 1;
    goto corral_source_split_12164;

  corral_source_split_12164:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64(0, 19);
    goto $bb31;

  $bb10:
    assume $i14 == 1;
    goto corral_source_split_11912;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} console_lock();
    goto corral_source_split_11913;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $i148 := lock_fb_info($p0);
    call {:si_unique_call 1067} {:cexpr "tmp___22"} boogie_si_record_i32($i148);
    goto corral_source_split_11914;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 0);
    goto corral_source_split_11915;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_12145;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.0, $p150);
    goto corral_source_split_12146;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    $i152 := $or.i32($i151, 65536);
    goto corral_source_split_12147;

  corral_source_split_12147:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_12148;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p153, $i152);
    goto corral_source_split_12149;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    $i154 := $trunc.i64.i32($i2);
    goto corral_source_split_12150;

  corral_source_split_12150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $i155 := fb_blank($p0, $i154);
    call {:si_unique_call 1141} {:cexpr "tmp___23"} boogie_si_record_i32($i155);
    goto corral_source_split_12151;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    $i156 := $sext.i32.i64($i155);
    call {:si_unique_call 1142} {:cexpr "ret"} boogie_si_record_i64($i156);
    goto corral_source_split_12152;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_12153;

  corral_source_split_12153:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.0, $p157);
    goto corral_source_split_12154;

  corral_source_split_12154:
    assume {:verifier.code 0} true;
    $i159 := $and.i32($i158, $sub.i32(0, 65537));
    goto corral_source_split_12155;

  corral_source_split_12155:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_12156;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p160, $i159);
    goto corral_source_split_12157;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} unlock_fb_info($p0);
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} console_unlock();
    goto corral_source_split_12159;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    $i33 := $i156;
    goto $bb33;

  $bb103:
    assume $i149 == 1;
    goto corral_source_split_12142;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} console_unlock();
    goto corral_source_split_12143;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64(0, 19);
    goto $bb31;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_11907;

  corral_source_split_11907:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p5);
    goto corral_source_split_11908;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} $i112 := copy_from_user($p111, $p9, 8);
    call {:si_unique_call 1064} {:cexpr "tmp___19"} boogie_si_record_i64($i112);
    goto corral_source_split_11909;

  corral_source_split_11909:
    assume {:verifier.code 0} true;
    $i113 := $ne.i64($i112, 0);
    goto corral_source_split_11910;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_12086;

  corral_source_split_12086:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_12087;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 0);
    goto corral_source_split_12088;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb87;

  $bb87:
    assume !($i116 == 1);
    goto corral_source_split_12090;

  corral_source_split_12090:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_12091;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_12092;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    $i119 := $ugt.i32($i118, 63);
    goto corral_source_split_12093;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_12095;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_12096;

  corral_source_split_12096:
    assume {:verifier.code 0} true;
    $i122 := $ugt.i32($i121, 31);
    goto corral_source_split_12097;

  corral_source_split_12097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_12101;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_12102;

  corral_source_split_12102:
    assume {:verifier.code 0} true;
    $i125 := $zext.i32.i64($i124);
    goto corral_source_split_12103;

  corral_source_split_12103:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref($i125, 8));
    goto corral_source_split_12104;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.19, $p126);
    goto corral_source_split_12105;

  corral_source_split_12105:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p127);
    goto corral_source_split_12106;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    $i129 := $eq.i64($i128, 0);
    goto corral_source_split_12107;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_12114;

  corral_source_split_12114:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_12115;

  corral_source_split_12115:
    assume {:verifier.code 0} true;
    $i135 := $zext.i32.i64($i134);
    goto corral_source_split_12116;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref($i135, 8));
    goto corral_source_split_12117;

  corral_source_split_12117:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.19, $p136);
    goto corral_source_split_12118;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    $i138 := $p2i.ref.i64($p137);
    goto corral_source_split_12119;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    $i139 := $eq.i64($i138, 0);
    goto corral_source_split_12120;

  corral_source_split_12120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto corral_source_split_12124;

  corral_source_split_12124:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12125;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p141, $p5);
    goto corral_source_split_12126;

  corral_source_split_12126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} console_lock();
    goto corral_source_split_12127;

  corral_source_split_12127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $i142 := lock_fb_info($p0);
    call {:si_unique_call 1132} {:cexpr "tmp___20"} boogie_si_record_i32($i142);
    goto corral_source_split_12128;

  corral_source_split_12128:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 0);
    goto corral_source_split_12129;

  corral_source_split_12129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p144, $p0);
    goto corral_source_split_12135;

  corral_source_split_12135:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p8);
    goto corral_source_split_12136;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $i146 := fb_notifier_call_chain(8, $p145);
    call {:si_unique_call 1135} {:cexpr "tmp___21"} boogie_si_record_i32($i146);
    goto corral_source_split_12137;

  corral_source_split_12137:
    assume {:verifier.code 0} true;
    $i147 := $sext.i32.i64($i146);
    call {:si_unique_call 1136} {:cexpr "ret"} boogie_si_record_i64($i147);
    goto corral_source_split_12138;

  corral_source_split_12138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} unlock_fb_info($p0);
    goto corral_source_split_12139;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} console_unlock();
    goto corral_source_split_12140;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    $i33 := $i147;
    goto $bb33;

  $bb100:
    assume $i143 == 1;
    goto corral_source_split_12131;

  corral_source_split_12131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} console_unlock();
    goto corral_source_split_12132;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64(0, 19);
    goto $bb31;

  $bb97:
    assume $i139 == 1;
    goto corral_source_split_12122;

  corral_source_split_12122:
    assume {:verifier.code 0} true;
    $i33 := $sub.i64(0, 22);
    goto $bb33;

  $bb94:
    assume $i129 == 1;
    goto corral_source_split_12109;

  corral_source_split_12109:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_12111;

  corral_source_split_12111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} vslice_dummy_var_164 := __request_module.i1.ref.i32(1, .str.28, $i131);
    goto corral_source_split_12112;

  corral_source_split_12112:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb91:
    assume $i122 == 1;
    goto corral_source_split_12099;

  corral_source_split_12099:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64(0, 22);
    goto $bb31;

  $bb88:
    assume {:verifier.code 0} true;
    assume $i119 == 1;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64(0, 22);
    goto $bb31;

  $bb85:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb86;

  $bb82:
    assume $i113 == 1;
    goto corral_source_split_12084;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64(0, 14);
    goto $bb31;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p5);
    goto corral_source_split_11903;

  corral_source_split_11903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} $i91 := copy_from_user($p90, $p9, 8);
    call {:si_unique_call 1062} {:cexpr "tmp___16"} boogie_si_record_i64($i91);
    goto corral_source_split_11904;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_11905;

  corral_source_split_11905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_12055;

  corral_source_split_12055:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_12056;

  corral_source_split_12056:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 0);
    goto corral_source_split_12057;

  corral_source_split_12057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb73, $bb75;

  $bb75:
    assume !($i95 == 1);
    goto corral_source_split_12059;

  corral_source_split_12059:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_12060;

  corral_source_split_12060:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_12061;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    $i98 := $ugt.i32($i97, 63);
    goto corral_source_split_12062;

  corral_source_split_12062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_12064;

  corral_source_split_12064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, $sub.i32(0, 1));
    goto corral_source_split_12065;

  corral_source_split_12065:
    assume {:verifier.code 0} true;
    goto corral_source_split_12066;

  corral_source_split_12066:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12067;

  corral_source_split_12067:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p101, $p5);
    goto corral_source_split_12068;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} $i102 := lock_fb_info($p0);
    call {:si_unique_call 1123} {:cexpr "tmp___17"} boogie_si_record_i32($i102);
    goto corral_source_split_12069;

  corral_source_split_12069:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 0);
    goto corral_source_split_12070;

  corral_source_split_12070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12074;

  corral_source_split_12074:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p104, $p0);
    goto corral_source_split_12075;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p8);
    goto corral_source_split_12076;

  corral_source_split_12076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} vslice_dummy_var_163 := fb_notifier_call_chain(7, $p105);
    goto corral_source_split_12077;

  corral_source_split_12077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} unlock_fb_info($p0);
    goto corral_source_split_12078;

  corral_source_split_12078:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p5);
    goto corral_source_split_12079;

  corral_source_split_12079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $i108 := copy_to_user($p9, $p107, 8);
    call {:si_unique_call 1127} {:cexpr "tmp___18"} boogie_si_record_i64($i108);
    goto corral_source_split_12080;

  corral_source_split_12080:
    assume {:verifier.code 0} true;
    $i109 := $ne.i64($i108, 0);
    goto corral_source_split_12081;

  corral_source_split_12081:
    assume {:verifier.code 0} true;
    $i110 := (if $i109 == 1 then $sub.i64(0, 14) else 0);
    call {:si_unique_call 1128} {:cexpr "ret"} boogie_si_record_i64($i110);
    goto corral_source_split_12082;

  corral_source_split_12082:
    assume {:verifier.code 0} true;
    $i33 := $i110;
    goto $bb33;

  $bb79:
    assume $i103 == 1;
    goto corral_source_split_12072;

  corral_source_split_12072:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64(0, 19);
    goto $bb31;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64(0, 22);
    goto $bb31;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb74;

  $bb70:
    assume $i92 == 1;
    goto corral_source_split_12053;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64(0, 14);
    goto $bb31;

  $bb4:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i1, 17926);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i1, 17926);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb12;

  $bb15:
    assume $i16 == 1;
    goto corral_source_split_11922;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p3);
    goto corral_source_split_11923;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $i80 := copy_from_user($p79, $p9, 160);
    call {:si_unique_call 1071} {:cexpr "tmp___12"} boogie_si_record_i64($i80);
    goto corral_source_split_11924;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_11925;

  corral_source_split_11925:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} console_lock();
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} $i82 := lock_fb_info($p0);
    call {:si_unique_call 1113} {:cexpr "tmp___13"} boogie_si_record_i32($i82);
    goto corral_source_split_12034;

  corral_source_split_12034:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 0);
    goto corral_source_split_12035;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} $i84 := fb_pan_display($p0, $p3);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 1116} {:cexpr "tmp___14"} boogie_si_record_i32($i84);
    goto corral_source_split_12040;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i84);
    call {:si_unique_call 1117} {:cexpr "ret"} boogie_si_record_i64($i85);
    goto corral_source_split_12041;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} unlock_fb_info($p0);
    goto corral_source_split_12042;

  corral_source_split_12042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} console_unlock();
    goto corral_source_split_12043;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    $i86 := $eq.i64($i85, 0);
    goto corral_source_split_12044;

  corral_source_split_12044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i33 := $i85;
    goto $bb33;

  $bb64:
    assume $i86 == 1;
    goto corral_source_split_12046;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p3);
    goto corral_source_split_12047;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} $i88 := copy_to_user($p9, $p87, 160);
    call {:si_unique_call 1121} {:cexpr "tmp___15"} boogie_si_record_i64($i88);
    goto corral_source_split_12048;

  corral_source_split_12048:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_12049;

  corral_source_split_12049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb66:
    assume $i89 == 1;
    goto corral_source_split_12051;

  corral_source_split_12051:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64(0, 14);
    goto $bb31;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb61:
    assume $i83 == 1;
    goto corral_source_split_12037;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} console_unlock();
    goto corral_source_split_12038;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64(0, 19);
    goto $bb31;

  $bb58:
    assume $i81 == 1;
    goto corral_source_split_12031;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64(0, 14);
    goto $bb31;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_11917;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p7);
    goto corral_source_split_11918;

  corral_source_split_11918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $i65 := copy_from_user($p64, $p9, 40);
    call {:si_unique_call 1069} {:cexpr "tmp___7"} boogie_si_record_i64($i65);
    goto corral_source_split_11919;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_11920;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} $i67 := fb_set_user_cmap($p7, $p0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 1102} {:cexpr "tmp___8"} boogie_si_record_i32($i67);
    goto corral_source_split_12013;

  corral_source_split_12013:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    call {:si_unique_call 1103} {:cexpr "ret"} boogie_si_record_i64($i68);
    goto corral_source_split_12014;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    $i33 := $i68;
    goto $bb33;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb49:
    assume $i66 == 1;
    goto corral_source_split_12011;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64(0, 14);
    goto $bb31;

  $bb2:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i1, 17921);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i1, 17922);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i1, 17924);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i19 == 1);
    goto corral_source_split_11932;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p7);
    goto corral_source_split_11933;

  corral_source_split_11933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $i70 := copy_from_user($p69, $p9, 40);
    call {:si_unique_call 1075} {:cexpr "tmp___9"} boogie_si_record_i64($i70);
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_11935;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $i72 := lock_fb_info($p0);
    call {:si_unique_call 1105} {:cexpr "tmp___10"} boogie_si_record_i32($i72);
    goto corral_source_split_12018;

  corral_source_split_12018:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 0);
    goto corral_source_split_12019;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(912, 1));
    goto corral_source_split_12023;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p6);
    goto corral_source_split_12024;

  corral_source_split_12024:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p74);
    goto corral_source_split_12025;

  corral_source_split_12025:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_103 := $M.0;
    cmdloc_dummy_var_104 := $M.0;
    call {:si_unique_call 1106} cmdloc_dummy_var_105 := $memcpy.i8(cmdloc_dummy_var_103, cmdloc_dummy_var_104, $p75, $p76, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_105;
    goto corral_source_split_12026;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} unlock_fb_info($p0);
    goto corral_source_split_12027;

  corral_source_split_12027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $i77 := fb_cmap_to_user($p6, $p7);
    call {:si_unique_call 1109} {:cexpr "tmp___11"} boogie_si_record_i32($i77);
    goto corral_source_split_12028;

  corral_source_split_12028:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i77);
    call {:si_unique_call 1110} {:cexpr "ret"} boogie_si_record_i64($i78);
    goto corral_source_split_12029;

  corral_source_split_12029:
    assume {:verifier.code 0} true;
    $i33 := $i78;
    goto $bb33;

  $bb55:
    assume $i73 == 1;
    goto corral_source_split_12021;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64(0, 19);
    goto $bb31;

  $bb52:
    assume $i71 == 1;
    goto corral_source_split_12016;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64(0, 14);
    goto $bb31;

  $bb21:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i1, 17922);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb12;

  $bb23:
    assume $i20 == 1;
    goto corral_source_split_11937;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $i55 := lock_fb_info($p0);
    call {:si_unique_call 1077} {:cexpr "tmp___5"} boogie_si_record_i32($i55);
    goto corral_source_split_11938;

  corral_source_split_11938:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_11939;

  corral_source_split_11939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1));
    goto corral_source_split_12001;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p4);
    goto corral_source_split_12002;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p57);
    goto corral_source_split_12003;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_100 := $M.0;
    cmdloc_dummy_var_101 := $M.0;
    call {:si_unique_call 1096} cmdloc_dummy_var_102 := $memcpy.i8(cmdloc_dummy_var_100, cmdloc_dummy_var_101, $p58, $p59, 80, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_102;
    goto corral_source_split_12004;

  corral_source_split_12004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} unlock_fb_info($p0);
    goto corral_source_split_12005;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p4);
    goto corral_source_split_12006;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $i61 := copy_to_user($p9, $p60, 80);
    call {:si_unique_call 1099} {:cexpr "tmp___6"} boogie_si_record_i64($i61);
    goto corral_source_split_12007;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_12008;

  corral_source_split_12008:
    assume {:verifier.code 0} true;
    $i63 := (if $i62 == 1 then $sub.i64(0, 14) else 0);
    call {:si_unique_call 1100} {:cexpr "ret"} boogie_si_record_i64($i63);
    goto corral_source_split_12009;

  corral_source_split_12009:
    assume {:verifier.code 0} true;
    $i33 := $i63;
    goto $bb33;

  $bb46:
    assume $i56 == 1;
    goto corral_source_split_11999;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64(0, 19);
    goto $bb31;

  $bb19:
    assume $i18 == 1;
    goto corral_source_split_11927;

  corral_source_split_11927:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p3);
    goto corral_source_split_11928;

  corral_source_split_11928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $i35 := copy_from_user($p34, $p9, 160);
    call {:si_unique_call 1073} {:cexpr "tmp___1"} boogie_si_record_i64($i35);
    goto corral_source_split_11929;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_11930;

  corral_source_split_11930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} console_lock();
    goto corral_source_split_11965;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $i37 := lock_fb_info($p0);
    call {:si_unique_call 1087} {:cexpr "tmp___2"} boogie_si_record_i32($i37);
    goto corral_source_split_11966;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_11967;

  corral_source_split_11967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_11972;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_11973;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i40, 65536);
    goto corral_source_split_11974;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_11975;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_11976;

  corral_source_split_11976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} $i43 := fb_set_var($p0, $p3);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 1090} {:cexpr "tmp___3"} boogie_si_record_i32($i43);
    goto corral_source_split_11977;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    call {:si_unique_call 1091} {:cexpr "ret"} boogie_si_record_i64($i44);
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_11979;

  corral_source_split_11979:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_11980;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, $sub.i32(0, 65537));
    goto corral_source_split_11981;

  corral_source_split_11981:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_11982;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} unlock_fb_info($p0);
    goto corral_source_split_11984;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} console_unlock();
    goto corral_source_split_11985;

  corral_source_split_11985:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i44, 0);
    goto corral_source_split_11986;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i54 := $i44;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_11997;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    $i33 := $i54;
    goto $bb33;

  $bb40:
    assume $i49 == 1;
    goto corral_source_split_11988;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p3);
    goto corral_source_split_11989;

  corral_source_split_11989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} $i51 := copy_to_user($p9, $p50, 160);
    call {:si_unique_call 1095} {:cexpr "tmp___4"} boogie_si_record_i64($i51);
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_11991;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $i44;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_11995;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    $i54 := $i53;
    goto $bb45;

  $bb42:
    assume $i52 == 1;
    goto corral_source_split_11993;

  corral_source_split_11993:
    assume {:verifier.code 0} true;
    $i53 := $sub.i64(0, 14);
    goto $bb44;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i38 == 1;
    goto corral_source_split_11969;

  corral_source_split_11969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} console_unlock();
    goto corral_source_split_11970;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64(0, 19);
    goto $bb31;

  $bb34:
    assume $i36 == 1;
    goto corral_source_split_11963;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64(0, 14);
    goto $bb31;

  $bb17:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i1, 17920);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i21 == 1);
    goto corral_source_split_11941;

  corral_source_split_11941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i23 := lock_fb_info($p0);
    call {:si_unique_call 1079} {:cexpr "tmp"} boogie_si_record_i32($i23);
    goto corral_source_split_11942;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_11943;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1));
    goto corral_source_split_11951;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p3);
    goto corral_source_split_11952;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p26);
    goto corral_source_split_11953;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_97 := $M.0;
    cmdloc_dummy_var_98 := $M.0;
    call {:si_unique_call 1080} cmdloc_dummy_var_99 := $memcpy.i8(cmdloc_dummy_var_97, cmdloc_dummy_var_98, $p27, $p28, 160, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_99;
    goto corral_source_split_11954;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} unlock_fb_info($p0);
    goto corral_source_split_11955;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p3);
    goto corral_source_split_11956;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} $i30 := copy_to_user($p9, $p29, 160);
    call {:si_unique_call 1083} {:cexpr "tmp___0"} boogie_si_record_i64($i30);
    goto corral_source_split_11957;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_11958;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    $i32 := (if $i31 == 1 then $sub.i64(0, 14) else 0);
    call {:si_unique_call 1084} {:cexpr "ret"} boogie_si_record_i64($i32);
    goto corral_source_split_11959;

  corral_source_split_11959:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb33;

  $bb29:
    assume $i24 == 1;
    goto corral_source_split_11947;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64(0, 19);
    goto $bb31;

  $bb25:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i1, $sub.i32(0, 1066908152));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb12;

  $bb27:
    assume $i22 == 1;
    goto corral_source_split_11945;

  corral_source_split_11945:
    assume {:verifier.code 0} true;
    $i33 := $sub.i64(0, 22);
    goto $bb33;
}



const fb_get_fscreeninfo: ref;

axiom fb_get_fscreeninfo == $sub.ref(0, 525897);

procedure fb_get_fscreeninfo($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.0, $M.14, $M.15, $M.18, $M.16, $M.17, $M.19, $M.21, $CurrAddr, $M.70, $M.10, $M.72, $M.46, $M.71, $M.12, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.13, assertsPassed, $M.62, $M.64, $M.66, $M.68;



implementation fb_get_fscreeninfo($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var cmdloc_dummy_var_106: [ref]i8;
  var cmdloc_dummy_var_107: [ref]i8;
  var cmdloc_dummy_var_108: [ref]i8;
  var cmdloc_dummy_var_109: [ref]i8;
  var cmdloc_dummy_var_110: [ref]i8;
  var cmdloc_dummy_var_111: [ref]i8;
  var cmdloc_dummy_var_112: [ref]i8;
  var cmdloc_dummy_var_113: [ref]i8;
  var cmdloc_dummy_var_114: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $p4 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1154} {:cexpr "fb_get_fscreeninfo:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 1155} {:cexpr "fb_get_fscreeninfo:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_12181;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_12182;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $p7 := compat_ptr($i6);
    goto corral_source_split_12183;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_12184;

  corral_source_split_12184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} $p9 := current_thread_info();
    goto corral_source_split_12185;

  corral_source_split_12185:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_12186;

  corral_source_split_12186:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p3);
    goto corral_source_split_12187;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p10);
    goto corral_source_split_12188;

  corral_source_split_12188:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_106 := $M.11;
    cmdloc_dummy_var_107 := $M.11;
    call {:si_unique_call 1158} cmdloc_dummy_var_108 := $memcpy.i8(cmdloc_dummy_var_106, cmdloc_dummy_var_107, $p11, $p12, 8, $zext.i32.i64(8), 0 == 1);
    $M.11 := cmdloc_dummy_var_108;
    goto corral_source_split_12189;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} $p13 := current_thread_info();
    goto corral_source_split_12190;

  corral_source_split_12190:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_12191;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    $M.11 := $store.i64($M.11, $p14, $sub.i64(0, 1));
    goto corral_source_split_12192;

  corral_source_split_12192:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p13, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_12193;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_12194;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p5);
    goto corral_source_split_12195;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_109 := $M.11;
    cmdloc_dummy_var_110 := $M.11;
    call {:si_unique_call 1160} cmdloc_dummy_var_111 := $memcpy.i8(cmdloc_dummy_var_109, cmdloc_dummy_var_110, $p16, $p17, 8, $zext.i32.i64(8), 0 == 1);
    $M.11 := cmdloc_dummy_var_111;
    goto corral_source_split_12196;

  corral_source_split_12196:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p4);
    goto corral_source_split_12197;

  corral_source_split_12197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $i19 := do_fb_ioctl($p0, $i1, $i18);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 1162} {:cexpr "tmp___2"} boogie_si_record_i64($i19);
    goto corral_source_split_12198;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i19);
    call {:si_unique_call 1163} {:cexpr "err"} boogie_si_record_i32($i20);
    goto corral_source_split_12199;

  corral_source_split_12199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $p21 := current_thread_info();
    goto corral_source_split_12200;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_12201;

  corral_source_split_12201:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_12202;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_12203;

  corral_source_split_12203:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_112 := $M.11;
    cmdloc_dummy_var_113 := $M.11;
    call {:si_unique_call 1165} cmdloc_dummy_var_114 := $memcpy.i8(cmdloc_dummy_var_112, cmdloc_dummy_var_113, $p23, $p24, 8, $zext.i32.i64(8), 0 == 1);
    $M.11 := cmdloc_dummy_var_114;
    goto corral_source_split_12204;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i20, 0);
    goto corral_source_split_12205;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i27 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12210;

  corral_source_split_12210:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_12207;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $i26 := do_fscreeninfo_to_user($p4, $p8);
    call {:si_unique_call 1167} {:cexpr "err"} boogie_si_record_i32($i26);
    goto corral_source_split_12208;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb3;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const fb_getput_cmap: ref;

axiom fb_getput_cmap == $sub.ref(0, 526929);

procedure fb_getput_cmap($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.18, $M.16, $M.17, $M.19, $M.21, $CurrAddr, $M.70, $M.10, $M.72, $M.11, $M.46, $M.71, $M.12, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.13, assertsPassed, $M.62, $M.64, $M.66, $M.68;



implementation fb_getput_cmap($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i64;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i32;
  var $i74: i1;
  var $i75: i64;
  var $i76: i64;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $i85: i32;
  var $i86: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} {:cexpr "fb_getput_cmap:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 1169} {:cexpr "fb_getput_cmap:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_12212;

  corral_source_split_12212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $p3 := compat_alloc_user_space(40);
    goto corral_source_split_12213;

  corral_source_split_12213:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_12214;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i2);
    goto corral_source_split_12215;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $p6 := compat_ptr($i5);
    goto corral_source_split_12216;

  corral_source_split_12216:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_12217;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12218;

  corral_source_split_12218:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12220;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_12221;

  corral_source_split_12221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $i12 := copy_in_user($p9, $p11, 8);
    call {:si_unique_call 1173} {:cexpr "tmp___1"} boogie_si_record_i64($i12);
    goto corral_source_split_12222;

  corral_source_split_12222:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_12223;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} __might_fault(.str.33, 1277);
    goto corral_source_split_12229;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(8, 1));
    call {:si_unique_call 1175} $p16 := devirtbounce.17(0, $p15, 4);
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    $p17 := $extractvalue($p16, 0);
    goto corral_source_split_12231;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    $i18 := $extractvalue($p16, 1);
    goto corral_source_split_12232;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p17);
    goto corral_source_split_12233;

  corral_source_split_12233:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i19);
    call {:si_unique_call 1176} {:cexpr "__ret_gu"} boogie_si_record_i32($i20);
    goto corral_source_split_12234;

  corral_source_split_12234:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i18);
    call {:si_unique_call 1177} {:cexpr "data"} boogie_si_record_i32($i21);
    goto corral_source_split_12235;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i20, 0);
    goto corral_source_split_12236;

  corral_source_split_12236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    goto corral_source_split_12240;

  corral_source_split_12240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} __might_fault(.str.33, 1278);
    goto corral_source_split_12241;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $p23 := compat_ptr($i21);
    goto corral_source_split_12242;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    call {:si_unique_call 1180} $p26 := devirtbounce.18(0, $p24, $p25);
    goto corral_source_split_12244;

  corral_source_split_12244:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_12245;

  corral_source_split_12245:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i32($i27);
    call {:si_unique_call 1181} {:cexpr "__ret_pu"} boogie_si_record_i32($i28);
    goto corral_source_split_12246;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_12248;

  corral_source_split_12248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    goto corral_source_split_12252;

  corral_source_split_12252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} __might_fault(.str.33, 1279);
    goto corral_source_split_12253;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(12, 1));
    call {:si_unique_call 1183} $p31 := devirtbounce.17(0, $p30, 4);
    goto corral_source_split_12254;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    $p32 := $extractvalue($p31, 0);
    goto corral_source_split_12255;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    $i33 := $extractvalue($p31, 1);
    goto corral_source_split_12256;

  corral_source_split_12256:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p32);
    goto corral_source_split_12257;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i34);
    call {:si_unique_call 1184} {:cexpr "__ret_gu___0"} boogie_si_record_i32($i35);
    goto corral_source_split_12258;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i64.i32($i33);
    call {:si_unique_call 1185} {:cexpr "data"} boogie_si_record_i32($i36);
    goto corral_source_split_12259;

  corral_source_split_12259:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i35, 0);
    goto corral_source_split_12260;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i37 == 1);
    goto corral_source_split_12264;

  corral_source_split_12264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} __might_fault(.str.33, 1280);
    goto corral_source_split_12265;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} $p38 := compat_ptr($i36);
    goto corral_source_split_12266;

  corral_source_split_12266:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    call {:si_unique_call 1188} $p41 := devirtbounce.18(0, $p39, $p40);
    goto corral_source_split_12268;

  corral_source_split_12268:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_12269;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i64.i32($i42);
    call {:si_unique_call 1189} {:cexpr "__ret_pu___0"} boogie_si_record_i32($i43);
    goto corral_source_split_12270;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_12272;

  corral_source_split_12272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i44 == 1);
    goto corral_source_split_12276;

  corral_source_split_12276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} __might_fault(.str.33, 1281);
    goto corral_source_split_12277;

  corral_source_split_12277:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(16, 1));
    call {:si_unique_call 1191} $p46 := devirtbounce.17(0, $p45, 4);
    goto corral_source_split_12278;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    $p47 := $extractvalue($p46, 0);
    goto corral_source_split_12279;

  corral_source_split_12279:
    assume {:verifier.code 0} true;
    $i48 := $extractvalue($p46, 1);
    goto corral_source_split_12280;

  corral_source_split_12280:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p47);
    goto corral_source_split_12281;

  corral_source_split_12281:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i64.i32($i49);
    call {:si_unique_call 1192} {:cexpr "__ret_gu___1"} boogie_si_record_i32($i50);
    goto corral_source_split_12282;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i64.i32($i48);
    call {:si_unique_call 1193} {:cexpr "data"} boogie_si_record_i32($i51);
    goto corral_source_split_12283;

  corral_source_split_12283:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i50, 0);
    goto corral_source_split_12284;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i52 == 1);
    goto corral_source_split_12288;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} __might_fault(.str.33, 1282);
    goto corral_source_split_12289;

  corral_source_split_12289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} $p53 := compat_ptr($i51);
    goto corral_source_split_12290;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    call {:si_unique_call 1196} $p56 := devirtbounce.18(0, $p54, $p55);
    goto corral_source_split_12292;

  corral_source_split_12292:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i64.i32($i57);
    call {:si_unique_call 1197} {:cexpr "__ret_pu___1"} boogie_si_record_i32($i58);
    goto corral_source_split_12294;

  corral_source_split_12294:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_12296;

  corral_source_split_12296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i59 == 1);
    goto corral_source_split_12300;

  corral_source_split_12300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} __might_fault(.str.33, 1283);
    goto corral_source_split_12301;

  corral_source_split_12301:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(20, 1));
    call {:si_unique_call 1199} $p61 := devirtbounce.17(0, $p60, 4);
    goto corral_source_split_12302;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    $p62 := $extractvalue($p61, 0);
    goto corral_source_split_12303;

  corral_source_split_12303:
    assume {:verifier.code 0} true;
    $i63 := $extractvalue($p61, 1);
    goto corral_source_split_12304;

  corral_source_split_12304:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p62);
    goto corral_source_split_12305;

  corral_source_split_12305:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i64.i32($i64);
    call {:si_unique_call 1200} {:cexpr "__ret_gu___2"} boogie_si_record_i32($i65);
    goto corral_source_split_12306;

  corral_source_split_12306:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i64.i32($i63);
    call {:si_unique_call 1201} {:cexpr "data"} boogie_si_record_i32($i66);
    goto corral_source_split_12307;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i65, 0);
    goto corral_source_split_12308;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i67 == 1);
    goto corral_source_split_12312;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} __might_fault(.str.33, 1284);
    goto corral_source_split_12313;

  corral_source_split_12313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} $p68 := compat_ptr($i66);
    goto corral_source_split_12314;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_12315;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    call {:si_unique_call 1204} $p71 := devirtbounce.18(0, $p69, $p70);
    goto corral_source_split_12316;

  corral_source_split_12316:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_12317;

  corral_source_split_12317:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i64.i32($i72);
    call {:si_unique_call 1205} {:cexpr "__ret_pu___2"} boogie_si_record_i32($i73);
    goto corral_source_split_12318;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_12320;

  corral_source_split_12320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p4);
    goto corral_source_split_12324;

  corral_source_split_12324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} $i76 := do_fb_ioctl($p0, $i1, $i75);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 1207} {:cexpr "tmp___6"} boogie_si_record_i64($i76);
    goto corral_source_split_12325;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i64.i32($i76);
    call {:si_unique_call 1208} {:cexpr "err"} boogie_si_record_i32($i77);
    goto corral_source_split_12326;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 0);
    goto corral_source_split_12327;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i86 := $i77;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_12341;

  corral_source_split_12341:
    assume {:verifier.code 0} true;
    $i14 := $i86;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12227;

  corral_source_split_12227:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb33:
    assume $i78 == 1;
    goto corral_source_split_12329;

  corral_source_split_12329:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12330;

  corral_source_split_12330:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_12331;

  corral_source_split_12331:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12332;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_12333;

  corral_source_split_12333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} $i83 := copy_in_user($p80, $p82, 8);
    call {:si_unique_call 1210} {:cexpr "tmp___7"} boogie_si_record_i64($i83);
    goto corral_source_split_12334;

  corral_source_split_12334:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_12335;

  corral_source_split_12335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i85 := $i77;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_12339;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    $i86 := $i85;
    goto $bb38;

  $bb35:
    assume $i84 == 1;
    goto corral_source_split_12337;

  corral_source_split_12337:
    assume {:verifier.code 0} true;
    $i85 := $sub.i32(0, 14);
    goto $bb37;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i74 == 1;
    goto corral_source_split_12322;

  corral_source_split_12322:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 14);
    goto $bb3;

  $bb20:
    assume $i67 == 1;
    goto corral_source_split_12310;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 14);
    goto $bb3;

  $bb18:
    assume $i59 == 1;
    goto corral_source_split_12298;

  corral_source_split_12298:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 14);
    goto $bb3;

  $bb15:
    assume $i52 == 1;
    goto corral_source_split_12286;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 14);
    goto $bb3;

  $bb13:
    assume $i44 == 1;
    goto corral_source_split_12274;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 14);
    goto $bb3;

  $bb10:
    assume $i37 == 1;
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 14);
    goto $bb3;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_12250;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 14);
    goto $bb3;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_12238;

  corral_source_split_12238:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_12225;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 14);
    goto $bb3;
}



const compat_alloc_user_space: ref;

axiom compat_alloc_user_space == $sub.ref(0, 527961);

procedure compat_alloc_user_space($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation compat_alloc_user_space($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} {:cexpr "compat_alloc_user_space:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_12343;

  corral_source_split_12343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} $p1 := external_alloc();
    goto corral_source_split_12344;

  corral_source_split_12344:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const copy_in_user: ref;

axiom copy_in_user == $sub.ref(0, 528993);

procedure copy_in_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation copy_in_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1213} {:cexpr "copy_in_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_12346;

  corral_source_split_12346:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1214} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1215} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_12347;

  corral_source_split_12347:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __might_fault: ref;

axiom __might_fault == $sub.ref(0, 530025);

procedure __might_fault($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __might_fault($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} {:cexpr "__might_fault:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_12349;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    return;
}



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 531057);

procedure current_thread_info() returns ($r: ref);
  free requires assertsPassed;



implementation current_thread_info() returns ($r: ref)
{
  var $i0: i64;
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12351;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} $i0 := current_top_of_stack();
    call {:si_unique_call 1218} {:cexpr "tmp"} boogie_si_record_i64($i0);
    goto corral_source_split_12352;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64($i0, 32768);
    goto corral_source_split_12353;

  corral_source_split_12353:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_12354;

  corral_source_split_12354:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const do_fscreeninfo_to_user: ref;

axiom do_fscreeninfo_to_user == $sub.ref(0, 532089);

procedure do_fscreeninfo_to_user($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation do_fscreeninfo_to_user($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $i47: i16;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $i58: i64;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12356;

  corral_source_split_12356:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_12357;

  corral_source_split_12357:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_12358;

  corral_source_split_12358:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_12359;

  corral_source_split_12359:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_12360;

  corral_source_split_12360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} $i6 := copy_to_user($p3, $p5, 16);
    call {:si_unique_call 1220} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_12361;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    call {:si_unique_call 1221} {:cexpr "err"} boogie_si_record_i32($i7);
    goto corral_source_split_12362;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_12363;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_12364;

  corral_source_split_12364:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    call {:si_unique_call 1222} {:cexpr "data"} boogie_si_record_i32($i10);
    goto corral_source_split_12365;

  corral_source_split_12365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} __might_fault(.str.33, 1307);
    goto corral_source_split_12366;

  corral_source_split_12366:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 68)), $mul.ref(16, 1));
    call {:si_unique_call 1224} $i12 := devirtbounce.19(0, $i10, $p11);
    call {:si_unique_call 1225} {:cexpr "__ret_pu"} boogie_si_record_i32($i12);
    goto corral_source_split_12367;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, $i7);
    call {:si_unique_call 1226} {:cexpr "err"} boogie_si_record_i32($i13);
    goto corral_source_split_12369;

  corral_source_split_12369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} __might_fault(.str.33, 1309);
    goto corral_source_split_12370;

  corral_source_split_12370:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_12371;

  corral_source_split_12371:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    call {:si_unique_call 1228} {:cexpr "__pu_val___0"} boogie_si_record_i32($i15);
    goto corral_source_split_12372;

  corral_source_split_12372:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 68)), $mul.ref(20, 1));
    call {:si_unique_call 1229} $i17 := devirtbounce.19(0, $i15, $p16);
    call {:si_unique_call 1230} {:cexpr "__ret_pu___0"} boogie_si_record_i32($i17);
    goto corral_source_split_12373;

  corral_source_split_12373:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, $i13);
    call {:si_unique_call 1231} {:cexpr "err"} boogie_si_record_i32($i18);
    goto corral_source_split_12375;

  corral_source_split_12375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} __might_fault(.str.33, 1310);
    goto corral_source_split_12376;

  corral_source_split_12376:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(28, 1));
    goto corral_source_split_12377;

  corral_source_split_12377:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    call {:si_unique_call 1233} {:cexpr "__pu_val___1"} boogie_si_record_i32($i20);
    goto corral_source_split_12378;

  corral_source_split_12378:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 68)), $mul.ref(24, 1));
    call {:si_unique_call 1234} $i22 := devirtbounce.19(0, $i20, $p21);
    call {:si_unique_call 1235} {:cexpr "__ret_pu___1"} boogie_si_record_i32($i22);
    goto corral_source_split_12379;

  corral_source_split_12379:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i22, $i18);
    call {:si_unique_call 1236} {:cexpr "err"} boogie_si_record_i32($i23);
    goto corral_source_split_12381;

  corral_source_split_12381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} __might_fault(.str.33, 1311);
    goto corral_source_split_12382;

  corral_source_split_12382:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_12383;

  corral_source_split_12383:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    call {:si_unique_call 1238} {:cexpr "__pu_val___2"} boogie_si_record_i32($i25);
    goto corral_source_split_12384;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 68)), $mul.ref(28, 1));
    call {:si_unique_call 1239} $i27 := devirtbounce.19(0, $i25, $p26);
    call {:si_unique_call 1240} {:cexpr "__ret_pu___2"} boogie_si_record_i32($i27);
    goto corral_source_split_12385;

  corral_source_split_12385:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, $i23);
    call {:si_unique_call 1241} {:cexpr "err"} boogie_si_record_i32($i28);
    goto corral_source_split_12387;

  corral_source_split_12387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} __might_fault(.str.33, 1312);
    goto corral_source_split_12388;

  corral_source_split_12388:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_12389;

  corral_source_split_12389:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    call {:si_unique_call 1243} {:cexpr "__pu_val___3"} boogie_si_record_i32($i30);
    goto corral_source_split_12390;

  corral_source_split_12390:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 68)), $mul.ref(32, 1));
    call {:si_unique_call 1244} $i32 := devirtbounce.19(0, $i30, $p31);
    call {:si_unique_call 1245} {:cexpr "__ret_pu___3"} boogie_si_record_i32($i32);
    goto corral_source_split_12391;

  corral_source_split_12391:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i32, $i28);
    call {:si_unique_call 1246} {:cexpr "err"} boogie_si_record_i32($i33);
    goto corral_source_split_12393;

  corral_source_split_12393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} __might_fault(.str.33, 1313);
    goto corral_source_split_12394;

  corral_source_split_12394:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_12395;

  corral_source_split_12395:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    call {:si_unique_call 1248} {:cexpr "__pu_val___4"} boogie_si_record_i16($i35);
    goto corral_source_split_12396;

  corral_source_split_12396:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_12397;

  corral_source_split_12397:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 68)), $mul.ref(36, 1));
    call {:si_unique_call 1249} $i38 := devirtbounce.20(0, $i36, $p37);
    call {:si_unique_call 1250} {:cexpr "__ret_pu___4"} boogie_si_record_i32($i38);
    goto corral_source_split_12398;

  corral_source_split_12398:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i38, $i33);
    call {:si_unique_call 1251} {:cexpr "err"} boogie_si_record_i32($i39);
    goto corral_source_split_12400;

  corral_source_split_12400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} __might_fault(.str.33, 1314);
    goto corral_source_split_12401;

  corral_source_split_12401:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(42, 1));
    goto corral_source_split_12402;

  corral_source_split_12402:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    call {:si_unique_call 1253} {:cexpr "__pu_val___5"} boogie_si_record_i16($i41);
    goto corral_source_split_12403;

  corral_source_split_12403:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_12404;

  corral_source_split_12404:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 68)), $mul.ref(38, 1));
    call {:si_unique_call 1254} $i44 := devirtbounce.20(0, $i42, $p43);
    call {:si_unique_call 1255} {:cexpr "__ret_pu___5"} boogie_si_record_i32($i44);
    goto corral_source_split_12405;

  corral_source_split_12405:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i44, $i39);
    call {:si_unique_call 1256} {:cexpr "err"} boogie_si_record_i32($i45);
    goto corral_source_split_12407;

  corral_source_split_12407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} __might_fault(.str.33, 1315);
    goto corral_source_split_12408;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(44, 1));
    goto corral_source_split_12409;

  corral_source_split_12409:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.0, $p46);
    call {:si_unique_call 1258} {:cexpr "__pu_val___6"} boogie_si_record_i16($i47);
    goto corral_source_split_12410;

  corral_source_split_12410:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_12411;

  corral_source_split_12411:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 68)), $mul.ref(40, 1));
    call {:si_unique_call 1259} $i50 := devirtbounce.20(0, $i48, $p49);
    call {:si_unique_call 1260} {:cexpr "__ret_pu___6"} boogie_si_record_i32($i50);
    goto corral_source_split_12412;

  corral_source_split_12412:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($i50, $i45);
    call {:si_unique_call 1261} {:cexpr "err"} boogie_si_record_i32($i51);
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} __might_fault(.str.33, 1316);
    goto corral_source_split_12415;

  corral_source_split_12415:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_12416;

  corral_source_split_12416:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    call {:si_unique_call 1263} {:cexpr "__pu_val___7"} boogie_si_record_i32($i53);
    goto corral_source_split_12417;

  corral_source_split_12417:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 68)), $mul.ref(44, 1));
    call {:si_unique_call 1264} $i55 := devirtbounce.19(0, $i53, $p54);
    call {:si_unique_call 1265} {:cexpr "__ret_pu___7"} boogie_si_record_i32($i55);
    goto corral_source_split_12418;

  corral_source_split_12418:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i55, $i51);
    call {:si_unique_call 1266} {:cexpr "err"} boogie_si_record_i32($i56);
    goto corral_source_split_12420;

  corral_source_split_12420:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_12421;

  corral_source_split_12421:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.0, $p57);
    goto corral_source_split_12422;

  corral_source_split_12422:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i64.i32($i58);
    call {:si_unique_call 1267} {:cexpr "data"} boogie_si_record_i32($i59);
    goto corral_source_split_12423;

  corral_source_split_12423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} __might_fault(.str.33, 1319);
    goto corral_source_split_12424;

  corral_source_split_12424:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 68)), $mul.ref(48, 1));
    call {:si_unique_call 1269} $i61 := devirtbounce.19(0, $i59, $p60);
    call {:si_unique_call 1270} {:cexpr "__ret_pu___8"} boogie_si_record_i32($i61);
    goto corral_source_split_12425;

  corral_source_split_12425:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i62 := $or.i32($i61, $i56);
    call {:si_unique_call 1271} {:cexpr "err"} boogie_si_record_i32($i62);
    goto corral_source_split_12427;

  corral_source_split_12427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} __might_fault(.str.33, 1321);
    goto corral_source_split_12428;

  corral_source_split_12428:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(64, 1));
    goto corral_source_split_12429;

  corral_source_split_12429:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    call {:si_unique_call 1273} {:cexpr "__pu_val___9"} boogie_si_record_i32($i64);
    goto corral_source_split_12430;

  corral_source_split_12430:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 68)), $mul.ref(52, 1));
    call {:si_unique_call 1274} $i66 := devirtbounce.19(0, $i64, $p65);
    call {:si_unique_call 1275} {:cexpr "__ret_pu___9"} boogie_si_record_i32($i66);
    goto corral_source_split_12431;

  corral_source_split_12431:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i67 := $or.i32($i66, $i62);
    call {:si_unique_call 1276} {:cexpr "err"} boogie_si_record_i32($i67);
    goto corral_source_split_12433;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} __might_fault(.str.33, 1322);
    goto corral_source_split_12434;

  corral_source_split_12434:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(68, 1));
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    call {:si_unique_call 1278} {:cexpr "__pu_val___10"} boogie_si_record_i32($i69);
    goto corral_source_split_12436;

  corral_source_split_12436:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 68)), $mul.ref(56, 1));
    call {:si_unique_call 1279} $i71 := devirtbounce.19(0, $i69, $p70);
    call {:si_unique_call 1280} {:cexpr "__ret_pu___10"} boogie_si_record_i32($i71);
    goto corral_source_split_12437;

  corral_source_split_12437:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i72 := $or.i32($i71, $i67);
    call {:si_unique_call 1281} {:cexpr "err"} boogie_si_record_i32($i72);
    goto corral_source_split_12439;

  corral_source_split_12439:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 68)), $mul.ref(60, 1));
    goto corral_source_split_12440;

  corral_source_split_12440:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_12441;

  corral_source_split_12441:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(74, 1));
    goto corral_source_split_12442;

  corral_source_split_12442:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_12443;

  corral_source_split_12443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $i77 := copy_to_user($p74, $p76, 4);
    call {:si_unique_call 1283} {:cexpr "tmp___0"} boogie_si_record_i64($i77);
    goto corral_source_split_12444;

  corral_source_split_12444:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i64.i32($i77);
    goto corral_source_split_12445;

  corral_source_split_12445:
    assume {:verifier.code 0} true;
    $i79 := $or.i32($i78, $i72);
    call {:si_unique_call 1284} {:cexpr "err"} boogie_si_record_i32($i79);
    goto corral_source_split_12446;

  corral_source_split_12446:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_12447;

  corral_source_split_12447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i81 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    $r := $i81;
    return;

  $bb13:
    assume $i80 == 1;
    goto corral_source_split_12449;

  corral_source_split_12449:
    assume {:verifier.code 0} true;
    $i81 := $sub.i32(0, 14);
    goto $bb15;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 533121);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_12453;

  corral_source_split_12453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $i3 := __builtinx_object_size.ref.i32($p1, 0);
    goto corral_source_split_12454;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1287} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_12455;

  corral_source_split_12455:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1288} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_12456;

  corral_source_split_12456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} __might_fault(.str.45, 732);
    goto corral_source_split_12457;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_12458;

  corral_source_split_12458:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_12466;

  corral_source_split_12466:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_12467;

  corral_source_split_12467:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_12468;

  corral_source_split_12468:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_12460;

  corral_source_split_12460:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_12461;

  corral_source_split_12461:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_12462;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 1291} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_12463;

  corral_source_split_12463:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_12464;

  corral_source_split_12464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_12476;

  corral_source_split_12476:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_12470;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_12471;

  corral_source_split_12471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $i15 := _copy_to_user($p0, $p1, $i14);
    call {:si_unique_call 1293} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_12472;

  corral_source_split_12472:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 534153);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 535185);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1295} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_12478;

  corral_source_split_12478:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1296} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1297} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_12479;

  corral_source_split_12479:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 536217);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12481;

  corral_source_split_12481:
    assume {:verifier.code 0} true;
    return;
}



const current_top_of_stack: ref;

axiom current_top_of_stack == $sub.ref(0, 537249);

procedure current_top_of_stack() returns ($r: i64);
  free requires assertsPassed;



implementation current_top_of_stack() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} $i0 := devirtbounce.21(0, $add.ref($add.ref($add.ref(cpu_tss, $mul.ref(0, 8824)), $mul.ref(0, 1)), $mul.ref(8, 1)));
    call {:si_unique_call 1299} {:cexpr "pfo_ret__"} boogie_si_record_i64($i0);
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 538281);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_12485;

  corral_source_split_12485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_12486;

  corral_source_split_12486:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1302} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1303} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_12488;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} __might_fault(.str.45, 697);
    goto corral_source_split_12489;

  corral_source_split_12489:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_12490;

  corral_source_split_12490:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_12498;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_12499;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_12500;

  corral_source_split_12500:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_12492;

  corral_source_split_12492:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_12493;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_12494;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 1306} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_12495;

  corral_source_split_12495:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_12496;

  corral_source_split_12496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_12506;

  corral_source_split_12506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_12508;

  corral_source_split_12508:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_12502;

  corral_source_split_12502:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_12503;

  corral_source_split_12503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $i15 := _copy_from_user($p0, $p1, $i14);
    call {:si_unique_call 1308} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_12504;

  corral_source_split_12504:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const fb_set_user_cmap: ref;

axiom fb_set_user_cmap == $sub.ref(0, 539313);

procedure fb_set_user_cmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $CurrAddr, $M.16, $M.17, $M.19, $M.21, $M.70, $M.10, $M.18, $M.72, $M.11, $M.46, $M.71, $M.12, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.13, assertsPassed, $M.62, $M.64, $M.66, $M.68;



implementation fb_set_user_cmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i30: i32;
  var $i10: i32;
  var cmdloc_dummy_var_115: [ref]i8;
  var cmdloc_dummy_var_116: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_12510;

  corral_source_split_12510:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_12511;

  corral_source_split_12511:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_12512;

  corral_source_split_12512:
    assume {:verifier.code 0} true;
    $i5 := $mul.i32($i4, 2);
    call {:si_unique_call 1311} {:cexpr "size"} boogie_si_record_i32($i5);
    goto corral_source_split_12513;

  corral_source_split_12513:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_12514;

  corral_source_split_12514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_12516;

  corral_source_split_12516:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_12517;

  corral_source_split_12517:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_12518;

  corral_source_split_12518:
    assume {:verifier.code 0} true;
    $i9 := $ult.i32($i5, $i8);
    goto corral_source_split_12519;

  corral_source_split_12519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_12523;

  corral_source_split_12523:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_115 := $M.0;
    call {:si_unique_call 1312} cmdloc_dummy_var_116 := $memset.i8(cmdloc_dummy_var_115, $p11, 0, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_116;
    goto corral_source_split_12524;

  corral_source_split_12524:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_12525;

  corral_source_split_12525:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_12526;

  corral_source_split_12526:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12527;

  corral_source_split_12527:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_12528;

  corral_source_split_12528:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_12529;

  corral_source_split_12529:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_12530;

  corral_source_split_12530:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_12531;

  corral_source_split_12531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $i19 := fb_alloc_cmap_gfp($p2, $i13, $i18, 208);
    call {:si_unique_call 1314} {:cexpr "rc"} boogie_si_record_i32($i19);
    goto corral_source_split_12532;

  corral_source_split_12532:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_12533;

  corral_source_split_12533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12537;

  corral_source_split_12537:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_12538;

  corral_source_split_12538:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_12539;

  corral_source_split_12539:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12540;

  corral_source_split_12540:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_12541;

  corral_source_split_12541:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_12542;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i5);
    goto corral_source_split_12543;

  corral_source_split_12543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $i28 := copy_from_user($p23, $p26, $i27);
    call {:si_unique_call 1316} {:cexpr "tmp"} boogie_si_record_i64($i28);
    goto corral_source_split_12544;

  corral_source_split_12544:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_12545;

  corral_source_split_12545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    goto corral_source_split_12549;

  corral_source_split_12549:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12550;

  corral_source_split_12550:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_12551;

  corral_source_split_12551:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_12552;

  corral_source_split_12552:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12553;

  corral_source_split_12553:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_12554;

  corral_source_split_12554:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_12555;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i5);
    goto corral_source_split_12556;

  corral_source_split_12556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} $i38 := copy_from_user($p33, $p36, $i37);
    call {:si_unique_call 1318} {:cexpr "tmp___0"} boogie_si_record_i64($i38);
    goto corral_source_split_12557;

  corral_source_split_12557:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_12558;

  corral_source_split_12558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i39 == 1);
    goto corral_source_split_12565;

  corral_source_split_12565:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_12567;

  corral_source_split_12567:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_12568;

  corral_source_split_12568:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12569;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_12570;

  corral_source_split_12570:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_12571;

  corral_source_split_12571:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i5);
    goto corral_source_split_12572;

  corral_source_split_12572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $i47 := copy_from_user($p42, $p45, $i46);
    call {:si_unique_call 1321} {:cexpr "tmp___1"} boogie_si_record_i64($i47);
    goto corral_source_split_12573;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_12574;

  corral_source_split_12574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i48 == 1);
    goto corral_source_split_12578;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12579;

  corral_source_split_12579:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_12580;

  corral_source_split_12580:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_12581;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_12582;

  corral_source_split_12582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12597;

  corral_source_split_12597:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_12598;

  corral_source_split_12598:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12599;

  corral_source_split_12599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i63);
    goto corral_source_split_12600;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} $i65 := lock_fb_info($p1);
    call {:si_unique_call 1325} {:cexpr "tmp___3"} boogie_si_record_i32($i65);
    goto corral_source_split_12601;

  corral_source_split_12601:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 0);
    goto corral_source_split_12602;

  corral_source_split_12602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} $i67 := fb_set_cmap($p2, $p1);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 1327} {:cexpr "rc"} boogie_si_record_i32($i67);
    goto corral_source_split_12606;

  corral_source_split_12606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} unlock_fb_info($p1);
    goto corral_source_split_12607;

  corral_source_split_12607:
    assume {:verifier.code 0} true;
    $i30 := $i67;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_12560;

  corral_source_split_12560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} fb_dealloc_cmap($p2);
    goto corral_source_split_12561;

  corral_source_split_12561:
    assume {:verifier.code 0} true;
    $i10 := $i30;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_12521;

  corral_source_split_12521:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i66 == 1;
    goto corral_source_split_12604;

  corral_source_split_12604:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 19);
    goto $bb13;

  $bb18:
    assume $i52 == 1;
    goto corral_source_split_12584;

  corral_source_split_12584:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12585;

  corral_source_split_12585:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_12586;

  corral_source_split_12586:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_12587;

  corral_source_split_12587:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12588;

  corral_source_split_12588:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_12589;

  corral_source_split_12589:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_12590;

  corral_source_split_12590:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i5);
    goto corral_source_split_12591;

  corral_source_split_12591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $i60 := copy_from_user($p55, $p58, $i59);
    call {:si_unique_call 1323} {:cexpr "tmp___2"} boogie_si_record_i64($i60);
    goto corral_source_split_12592;

  corral_source_split_12592:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_12593;

  corral_source_split_12593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i61 == 1;
    goto corral_source_split_12595;

  corral_source_split_12595:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 14);
    goto $bb13;

  $bb16:
    assume $i48 == 1;
    goto corral_source_split_12576;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 14);
    goto $bb13;

  $bb14:
    assume $i39 == 1;
    goto corral_source_split_12563;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 14);
    goto $bb13;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_12547;

  corral_source_split_12547:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 14);
    goto $bb13;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_12535;

  corral_source_split_12535:
    assume {:verifier.code 0} true;
    $i10 := $i19;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 7);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const fb_cmap_to_user: ref;

axiom fb_cmap_to_user == $sub.ref(0, 540345);

procedure fb_cmap_to_user($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fb_cmap_to_user($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i12: i32;
  var $i13: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $p89: ref;
  var $i90: i64;
  var $i91: i64;
  var $i92: i1;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12609;

  corral_source_split_12609:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12610;

  corral_source_split_12610:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_12611;

  corral_source_split_12611:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12612;

  corral_source_split_12612:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_12613;

  corral_source_split_12613:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i3, $i5);
    goto corral_source_split_12614;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_12623;

  corral_source_split_12623:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12624;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_12625;

  corral_source_split_12625:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12626;

  corral_source_split_12626:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_12627;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i15, $i17);
    call {:si_unique_call 1330} {:cexpr "tooff"} boogie_si_record_i32($i18);
    assume {:verifier.code 0} true;
    $i12, $i13 := $i18, 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12629;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_12630;

  corral_source_split_12630:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_12631;

  corral_source_split_12631:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i20, $i12);
    call {:si_unique_call 1331} {:cexpr "size"} boogie_si_record_i32($i21);
    goto corral_source_split_12632;

  corral_source_split_12632:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_12633;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_12634;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i23, $i13);
    goto corral_source_split_12635;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, $i21);
    goto corral_source_split_12636;

  corral_source_split_12636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i21;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_12643;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    $i30 := $sle.i32($i29, 0);
    goto corral_source_split_12644;

  corral_source_split_12644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i32 := $mul.i32($i29, 2);
    call {:si_unique_call 1333} {:cexpr "size"} boogie_si_record_i32($i32);
    goto corral_source_split_12650;

  corral_source_split_12650:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12651;

  corral_source_split_12651:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_12652;

  corral_source_split_12652:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_12653;

  corral_source_split_12653:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i12);
    goto corral_source_split_12654;

  corral_source_split_12654:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p35, $mul.ref($i36, 1));
    goto corral_source_split_12655;

  corral_source_split_12655:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12656;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_12657;

  corral_source_split_12657:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_12658;

  corral_source_split_12658:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i13);
    goto corral_source_split_12659;

  corral_source_split_12659:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p40, $mul.ref($i41, 1));
    goto corral_source_split_12660;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i32);
    goto corral_source_split_12661;

  corral_source_split_12661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} $i44 := copy_to_user($p37, $p42, $i43);
    call {:si_unique_call 1335} {:cexpr "tmp"} boogie_si_record_i64($i44);
    goto corral_source_split_12662;

  corral_source_split_12662:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_12663;

  corral_source_split_12663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12667;

  corral_source_split_12667:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_12668;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_12669;

  corral_source_split_12669:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i12);
    goto corral_source_split_12670;

  corral_source_split_12670:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p48, $mul.ref($i49, 1));
    goto corral_source_split_12671;

  corral_source_split_12671:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12672;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_12673;

  corral_source_split_12673:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_12674;

  corral_source_split_12674:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i13);
    goto corral_source_split_12675;

  corral_source_split_12675:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p53, $mul.ref($i54, 1));
    goto corral_source_split_12676;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i32);
    goto corral_source_split_12677;

  corral_source_split_12677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} $i57 := copy_to_user($p50, $p55, $i56);
    call {:si_unique_call 1337} {:cexpr "tmp___0"} boogie_si_record_i64($i57);
    goto corral_source_split_12678;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_12679;

  corral_source_split_12679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12683;

  corral_source_split_12683:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_12684;

  corral_source_split_12684:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_12685;

  corral_source_split_12685:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i12);
    goto corral_source_split_12686;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p61, $mul.ref($i62, 1));
    goto corral_source_split_12687;

  corral_source_split_12687:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12688;

  corral_source_split_12688:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_12689;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_12690;

  corral_source_split_12690:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i13);
    goto corral_source_split_12691;

  corral_source_split_12691:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p66, $mul.ref($i67, 1));
    goto corral_source_split_12692;

  corral_source_split_12692:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i32);
    goto corral_source_split_12693;

  corral_source_split_12693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $i70 := copy_to_user($p63, $p68, $i69);
    call {:si_unique_call 1339} {:cexpr "tmp___1"} boogie_si_record_i64($i70);
    goto corral_source_split_12694;

  corral_source_split_12694:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_12695;

  corral_source_split_12695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12699;

  corral_source_split_12699:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_12700;

  corral_source_split_12700:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    goto corral_source_split_12701;

  corral_source_split_12701:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_12702;

  corral_source_split_12702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_12648;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb20:
    assume $i75 == 1;
    goto corral_source_split_12704;

  corral_source_split_12704:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12705;

  corral_source_split_12705:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_12706;

  corral_source_split_12706:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_12707;

  corral_source_split_12707:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_12708;

  corral_source_split_12708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb22;

  $bb23:
    assume $i79 == 1;
    goto corral_source_split_12710;

  corral_source_split_12710:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12711;

  corral_source_split_12711:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_12712;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_12713;

  corral_source_split_12713:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i12);
    goto corral_source_split_12714;

  corral_source_split_12714:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p82, $mul.ref($i83, 1));
    goto corral_source_split_12715;

  corral_source_split_12715:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12716;

  corral_source_split_12716:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_12717;

  corral_source_split_12717:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_12718;

  corral_source_split_12718:
    assume {:verifier.code 0} true;
    $i88 := $sext.i32.i64($i13);
    goto corral_source_split_12719;

  corral_source_split_12719:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p87, $mul.ref($i88, 1));
    goto corral_source_split_12720;

  corral_source_split_12720:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i32);
    goto corral_source_split_12721;

  corral_source_split_12721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} $i91 := copy_to_user($p84, $p89, $i90);
    call {:si_unique_call 1341} {:cexpr "tmp___2"} boogie_si_record_i64($i91);
    goto corral_source_split_12722;

  corral_source_split_12722:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_12723;

  corral_source_split_12723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i92 == 1;
    goto corral_source_split_12725;

  corral_source_split_12725:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 14);
    goto $bb9;

  $bb17:
    assume $i71 == 1;
    goto corral_source_split_12697;

  corral_source_split_12697:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 14);
    goto $bb9;

  $bb14:
    assume $i58 == 1;
    goto corral_source_split_12681;

  corral_source_split_12681:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 14);
    goto $bb9;

  $bb11:
    assume $i45 == 1;
    goto corral_source_split_12665;

  corral_source_split_12665:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 14);
    goto $bb9;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_12646;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb9;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_12638;

  corral_source_split_12638:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_12639;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_12640;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32($i27, $i13);
    call {:si_unique_call 1332} {:cexpr "size"} boogie_si_record_i32($i28);
    goto corral_source_split_12641;

  corral_source_split_12641:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_12616;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12617;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_12618;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12619;

  corral_source_split_12619:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_12620;

  corral_source_split_12620:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i8, $i10);
    call {:si_unique_call 1329} {:cexpr "fromoff"} boogie_si_record_i32($i11);
    goto corral_source_split_12621;

  corral_source_split_12621:
    assume {:verifier.code 0} true;
    $i12, $i13 := 0, $i11;
    goto $bb3;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 541377);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1342} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_12727;

  corral_source_split_12727:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1343} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1344} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_12728;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 542409);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12730;

  corral_source_split_12730:
    assume {:verifier.code 0} true;
    return;
}



const memcpy_toio: ref;

axiom memcpy_toio == $sub.ref(0, 543441);

procedure memcpy_toio($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation memcpy_toio($p0: ref, $p1: ref, $i2: i64)
{
  var cmdloc_dummy_var_117: [ref]i8;
  var cmdloc_dummy_var_118: [ref]i8;
  var cmdloc_dummy_var_119: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} {:cexpr "memcpy_toio:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_12732;

  corral_source_split_12732:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_117 := $M.0;
    cmdloc_dummy_var_118 := $M.0;
    call {:si_unique_call 1346} cmdloc_dummy_var_119 := $memcpy.i8(cmdloc_dummy_var_117, cmdloc_dummy_var_118, $p0, $p1, $i2, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_119;
    goto corral_source_split_12733;

  corral_source_split_12733:
    assume {:verifier.code 0} true;
    return;
}



const memcpy_fromio: ref;

axiom memcpy_fromio == $sub.ref(0, 544473);

procedure memcpy_fromio($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation memcpy_fromio($p0: ref, $p1: ref, $i2: i64)
{
  var cmdloc_dummy_var_120: [ref]i8;
  var cmdloc_dummy_var_121: [ref]i8;
  var cmdloc_dummy_var_122: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} {:cexpr "memcpy_fromio:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_12735;

  corral_source_split_12735:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_120 := $M.0;
    cmdloc_dummy_var_121 := $M.0;
    call {:si_unique_call 1348} cmdloc_dummy_var_122 := $memcpy.i8(cmdloc_dummy_var_120, cmdloc_dummy_var_121, $p0, $p1, $i2, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_122;
    goto corral_source_split_12736;

  corral_source_split_12736:
    assume {:verifier.code 0} true;
    return;
}



const fb_seq_start: ref;

axiom fb_seq_start == $sub.ref(0, 545505);

procedure fb_seq_start($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fb_seq_start($p0: ref, $p1: ref) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12738;

  corral_source_split_12738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} mutex_lock_nested(registration_lock, 0);
    goto corral_source_split_12739;

  corral_source_split_12739:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_12740;

  corral_source_split_12740:
    assume {:verifier.code 0} true;
    $i3 := $sle.i64($i2, 31);
    goto corral_source_split_12741;

  corral_source_split_12741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_12746;

  corral_source_split_12746:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12748;

  corral_source_split_12748:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_12743;

  corral_source_split_12743:
    assume {:verifier.code 0} true;
    goto corral_source_split_12744;

  corral_source_split_12744:
    assume {:verifier.code 0} true;
    $p5 := $p1;
    goto $bb3;
}



const fb_seq_stop: ref;

axiom fb_seq_stop == $sub.ref(0, 546537);

procedure fb_seq_stop($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation fb_seq_stop($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12750;

  corral_source_split_12750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} mutex_unlock(registration_lock);
    goto corral_source_split_12751;

  corral_source_split_12751:
    assume {:verifier.code 0} true;
    return;
}



const fb_seq_next: ref;

axiom fb_seq_next == $sub.ref(0, 547569);

procedure fb_seq_next($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fb_seq_next($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12753;

  corral_source_split_12753:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_12754;

  corral_source_split_12754:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 1);
    goto corral_source_split_12755;

  corral_source_split_12755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i4);
    goto corral_source_split_12756;

  corral_source_split_12756:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p2);
    goto corral_source_split_12757;

  corral_source_split_12757:
    assume {:verifier.code 0} true;
    $i6 := $sle.i64($i5, 31);
    goto corral_source_split_12758;

  corral_source_split_12758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_12763;

  corral_source_split_12763:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12765;

  corral_source_split_12765:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_12760;

  corral_source_split_12760:
    assume {:verifier.code 0} true;
    goto corral_source_split_12761;

  corral_source_split_12761:
    assume {:verifier.code 0} true;
    $p8 := $p2;
    goto $bb3;
}



const fb_seq_show: ref;

axiom fb_seq_show == $sub.ref(0, 548601);

procedure fb_seq_show($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fb_seq_show($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p13: ref;
  var $p14: ref;
  var vslice_dummy_var_165: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12767;

  corral_source_split_12767:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_12768;

  corral_source_split_12768:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_12769;

  corral_source_split_12769:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    call {:si_unique_call 1351} {:cexpr "i"} boogie_si_record_i32($i4);
    goto corral_source_split_12770;

  corral_source_split_12770:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_12771;

  corral_source_split_12771:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref($i5, 8));
    goto corral_source_split_12772;

  corral_source_split_12772:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.19, $p6);
    goto corral_source_split_12773;

  corral_source_split_12773:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_12774;

  corral_source_split_12774:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_12775;

  corral_source_split_12775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_12777;

  corral_source_split_12777:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_12778;

  corral_source_split_12778:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_12779;

  corral_source_split_12779:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_12780;

  corral_source_split_12780:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_12781;

  corral_source_split_12781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} vslice_dummy_var_165 := seq_printf.ref.ref.i32.ref($p0, .str.32, $i11, $p14);
    goto corral_source_split_12782;

  corral_source_split_12782:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const seq_printf: ref;

axiom seq_printf == $sub.ref(0, 549633);

procedure seq_printf.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12784;

  corral_source_split_12784:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1353} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1354} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_12785;

  corral_source_split_12785:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const show_bpp: ref;

axiom show_bpp == $sub.ref(0, 550665);

procedure show_bpp($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const store_bpp: ref;

axiom store_bpp == $sub.ref(0, 551697);

procedure store_bpp($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);



const show_blank: ref;

axiom show_blank == $sub.ref(0, 552729);

procedure show_blank($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const store_blank: ref;

axiom store_blank == $sub.ref(0, 553761);

procedure store_blank($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);



const show_console: ref;

axiom show_console == $sub.ref(0, 554793);

procedure show_console($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const store_console: ref;

axiom store_console == $sub.ref(0, 555825);

procedure store_console($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);



const show_cursor: ref;

axiom show_cursor == $sub.ref(0, 556857);

procedure show_cursor($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const store_cursor: ref;

axiom store_cursor == $sub.ref(0, 557889);

procedure store_cursor($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);



const show_mode: ref;

axiom show_mode == $sub.ref(0, 558921);

procedure show_mode($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const store_mode: ref;

axiom store_mode == $sub.ref(0, 559953);

procedure store_mode($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);



const show_modes: ref;

axiom show_modes == $sub.ref(0, 560985);

procedure show_modes($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const store_modes: ref;

axiom store_modes == $sub.ref(0, 562017);

procedure store_modes($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);



const show_pan: ref;

axiom show_pan == $sub.ref(0, 563049);

procedure show_pan($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const store_pan: ref;

axiom store_pan == $sub.ref(0, 564081);

procedure store_pan($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);



const show_virtual: ref;

axiom show_virtual == $sub.ref(0, 565113);

procedure show_virtual($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const store_virtual: ref;

axiom store_virtual == $sub.ref(0, 566145);

procedure store_virtual($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);



const show_name: ref;

axiom show_name == $sub.ref(0, 567177);

procedure show_name($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const show_stride: ref;

axiom show_stride == $sub.ref(0, 568209);

procedure show_stride($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const show_rotate: ref;

axiom show_rotate == $sub.ref(0, 569241);

procedure show_rotate($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const store_rotate: ref;

axiom store_rotate == $sub.ref(0, 570273);

procedure store_rotate($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);



const show_fbstate: ref;

axiom show_fbstate == $sub.ref(0, 571305);

procedure show_fbstate($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const store_fbstate: ref;

axiom store_fbstate == $sub.ref(0, 572337);

procedure store_fbstate($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);



const show_bl_curve: ref;

axiom show_bl_curve == $sub.ref(0, 573369);

procedure show_bl_curve($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const store_bl_curve: ref;

axiom store_bl_curve == $sub.ref(0, 574401);

procedure store_bl_curve($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 575433);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);



const sscanf: ref;

axiom sscanf == $sub.ref(0, 576465);

procedure sscanf.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref, p.5: ref, p.6: ref, p.7: ref, p.8: ref, p.9: ref) returns ($r: i32);



const simple_strtoul: ref;

axiom simple_strtoul == $sub.ref(0, 577497);

procedure simple_strtoul($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);



const activate: ref;

axiom activate == $sub.ref(0, 578529);

procedure activate($p0: ref, $p1: ref) returns ($r: i32);



const list_splice: ref;

axiom list_splice == $sub.ref(0, 579561);

procedure list_splice($p0: ref, $p1: ref);



const fb_new_modelist: ref;

axiom fb_new_modelist == $sub.ref(0, 580593);

procedure fb_new_modelist($p0: ref) returns ($r: i32);



const __list_splice: ref;

axiom __list_splice == $sub.ref(0, 581625);

procedure __list_splice($p0: ref, $p1: ref, $p2: ref);



const mode_string: ref;

axiom mode_string == $sub.ref(0, 582657);

procedure mode_string($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);



const fb_deferred_io_fault: ref;

axiom fb_deferred_io_fault == $sub.ref(0, 583689);

procedure fb_deferred_io_fault($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.46, $CurrAddr;



implementation fb_deferred_io_fault($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i13: i32;
  var vslice_dummy_var_166: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12787;

  corral_source_split_12787:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_12788;

  corral_source_split_12788:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_12789;

  corral_source_split_12789:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_12790;

  corral_source_split_12790:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_12791;

  corral_source_split_12791:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_12792;

  corral_source_split_12792:
    assume {:verifier.code 0} true;
    $i7 := $shl.i64($i6, 12);
    call {:si_unique_call 1355} {:cexpr "offset"} boogie_si_record_i64($i7);
    goto corral_source_split_12793;

  corral_source_split_12793:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(24, 1));
    goto corral_source_split_12794;

  corral_source_split_12794:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_12795;

  corral_source_split_12795:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    goto corral_source_split_12796;

  corral_source_split_12796:
    assume {:verifier.code 0} true;
    $i12 := $ule.i64($i11, $i7);
    goto corral_source_split_12797;

  corral_source_split_12797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $p14 := fb_deferred_io_page($p4, $i7);
    goto corral_source_split_12803;

  corral_source_split_12803:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_12804;

  corral_source_split_12804:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_12805;

  corral_source_split_12805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} get_page($p14);
    goto corral_source_split_12809;

  corral_source_split_12809:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_12810;

  corral_source_split_12810:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_12811;

  corral_source_split_12811:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_12812;

  corral_source_split_12812:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_12813;

  corral_source_split_12813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_12824;

  corral_source_split_12824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} vslice_dummy_var_166 := printk.ref(.str.77);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p14, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_12826;

  corral_source_split_12826:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_12827;

  corral_source_split_12827:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_12828;

  corral_source_split_12828:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_12829;

  corral_source_split_12829:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_12830;

  corral_source_split_12830:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    goto corral_source_split_12831;

  corral_source_split_12831:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_12832;

  corral_source_split_12832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 1360} {:cexpr "tmp"} boogie_si_record_i64($i35);
    goto corral_source_split_12833;

  corral_source_split_12833:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_12834;

  corral_source_split_12834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_12838;

  corral_source_split_12838:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_12839;

  corral_source_split_12839:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_12840;

  corral_source_split_12840:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_12841;

  corral_source_split_12841:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p41, $i38);
    goto corral_source_split_12842;

  corral_source_split_12842:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_12843;

  corral_source_split_12843:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p14);
    goto corral_source_split_12844;

  corral_source_split_12844:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12801;

  corral_source_split_12801:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb11:
    assume $i36 == 1;
    call {:si_unique_call 1361} devirtbounce.9(0, .str.18, 62, 12);
    goto corral_source_split_12836;

  corral_source_split_12836:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call fb_deferred_io_fault_loop_$bb13();
    goto $bb13_last;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_12815;

  corral_source_split_12815:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_12816;

  corral_source_split_12816:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_12817;

  corral_source_split_12817:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 504)), $mul.ref(496, 1));
    goto corral_source_split_12818;

  corral_source_split_12818:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_12819;

  corral_source_split_12819:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p14, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_12820;

  corral_source_split_12820:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_12821;

  corral_source_split_12821:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p24);
    goto corral_source_split_12822;

  corral_source_split_12822:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_12807;

  corral_source_split_12807:
    assume {:verifier.code 0} true;
    $i13 := 2;
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_12799;

  corral_source_split_12799:
    assume {:verifier.code 0} true;
    $i13 := 2;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto $bb13_dummy;
}



const fb_deferred_io_mkwrite: ref;

axiom fb_deferred_io_mkwrite == $sub.ref(0, 584721);

procedure fb_deferred_io_mkwrite($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $CurrAddr, $M.46, $M.62, $M.64, $M.66, $M.68;



implementation fb_deferred_io_mkwrite($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $i38: i32;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p34: ref;
  var $p63: ref;
  var $p33: ref;
  var $p52: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12846;

  corral_source_split_12846:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_12847;

  corral_source_split_12847:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_12848;

  corral_source_split_12848:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_12849;

  corral_source_split_12849:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_12850;

  corral_source_split_12850:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_12851;

  corral_source_split_12851:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1608)), $mul.ref(1496, 1));
    goto corral_source_split_12852;

  corral_source_split_12852:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_12853;

  corral_source_split_12853:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_12854;

  corral_source_split_12854:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_12855;

  corral_source_split_12855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} vslice_dummy_var_167 := file_update_time($p10);
    goto corral_source_split_12856;

  corral_source_split_12856:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_12857;

  corral_source_split_12857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} mutex_lock_nested($p12, 0);
    goto corral_source_split_12858;

  corral_source_split_12858:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_12859;

  corral_source_split_12859:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_12860;

  corral_source_split_12860:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_12861;

  corral_source_split_12861:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_12862;

  corral_source_split_12862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} lock_page($p3);
    goto corral_source_split_12873;

  corral_source_split_12873:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_12874;

  corral_source_split_12874:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_12875;

  corral_source_split_12875:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_12876;

  corral_source_split_12876:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref($sub.ref(0, 32), 64));
    goto corral_source_split_12877;

  corral_source_split_12877:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p25, $mul.ref($sub.ref(0, 32), 64)), $mul.ref(32, 1));
    goto corral_source_split_12878;

  corral_source_split_12878:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_12879;

  corral_source_split_12879:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_12880;

  corral_source_split_12880:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p8, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_12881;

  corral_source_split_12881:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_12882;

  corral_source_split_12882:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i29, $i31);
    goto corral_source_split_12883;

  corral_source_split_12883:
    assume {:verifier.code 0} true;
    $p33 := $p26;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p52 := $p33;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_12917;

  corral_source_split_12917:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_12918;

  corral_source_split_12918:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_12919;

  corral_source_split_12919:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p52, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_12920;

  corral_source_split_12920:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_12921;

  corral_source_split_12921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} list_add_tail($p65, $p67);
    goto corral_source_split_12922;

  corral_source_split_12922:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p8, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_12908;

  corral_source_split_12908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} mutex_unlock($p68);
    goto corral_source_split_12909;

  corral_source_split_12909:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p6, $mul.ref(0, 1608)), $mul.ref(1272, 1));
    goto corral_source_split_12910;

  corral_source_split_12910:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p8, $mul.ref(0, 200)), $mul.ref(0, 1));
    goto corral_source_split_12911;

  corral_source_split_12911:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.0, $p70);
    goto corral_source_split_12912;

  corral_source_split_12912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} vslice_dummy_var_168 := schedule_delayed_work($p69, $i71);
    goto corral_source_split_12913;

  corral_source_split_12913:
    assume {:verifier.code 0} true;
    $r := 512;
    return;

  $bb7:
    assume $i32 == 1;
    goto corral_source_split_12885;

  corral_source_split_12885:
    assume {:verifier.code 0} true;
    $p34 := $p26;
    goto $bb10;

  $bb10:
    call $i35, $i36, $i37, $i38, $i39, $i40, $i41, $p43, $p44, $i45, $p47, $p48, $i49, $i50, $p51, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $p60, $i61, $i62, $p34, $p63 := fb_deferred_io_mkwrite_loop_$bb10($p3, $i31, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $p43, $p44, $i45, $p47, $p48, $i49, $i50, $p51, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $p60, $i61, $i62, $p34, $p63);
    goto $bb10_last;

  corral_source_split_12887:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_12889;

  corral_source_split_12889:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p3);
    goto corral_source_split_12890;

  corral_source_split_12890:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i35, $i36);
    goto corral_source_split_12891;

  corral_source_split_12891:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i32($i37);
    goto corral_source_split_12892;

  corral_source_split_12892:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    goto corral_source_split_12893;

  corral_source_split_12893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 1369} {:cexpr "tmp___0"} boogie_si_record_i64($i40);
    goto corral_source_split_12894;

  corral_source_split_12894:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_12895;

  corral_source_split_12895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i41 == 1);
    goto corral_source_split_12899;

  corral_source_split_12899:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_12900;

  corral_source_split_12900:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_12901;

  corral_source_split_12901:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_12902;

  corral_source_split_12902:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_12903;

  corral_source_split_12903:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_12904;

  corral_source_split_12904:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_12905;

  corral_source_split_12905:
    assume {:verifier.code 0} true;
    $i50 := $ugt.i64($i45, $i49);
    goto corral_source_split_12906;

  corral_source_split_12906:
    assume {:verifier.code 0} true;
    $p51 := $p34;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p34, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_12924;

  corral_source_split_12924:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_12925;

  corral_source_split_12925:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12926;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_12927;

  corral_source_split_12927:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_12928;

  corral_source_split_12928:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref($sub.ref(0, 32), 64));
    goto corral_source_split_12929;

  corral_source_split_12929:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p57, $mul.ref($sub.ref(0, 32), 64)), $mul.ref(32, 1));
    goto corral_source_split_12930;

  corral_source_split_12930:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_12931;

  corral_source_split_12931:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_12932;

  corral_source_split_12932:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, $i31);
    goto corral_source_split_12933;

  corral_source_split_12933:
    assume {:verifier.code 0} true;
    $p63 := $p58;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_12935;

  corral_source_split_12935:
    assume {:verifier.code 0} true;
    $p33 := $p63;
    goto $bb9;

  $bb20:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $p34 := $p58;
    goto $bb20_dummy;

  $bb15:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_12915;

  corral_source_split_12915:
    assume {:verifier.code 0} true;
    $p52 := $p51;
    goto $bb17;

  $bb12:
    assume $i41 == 1;
    goto corral_source_split_12897;

  corral_source_split_12897:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_12864;

  corral_source_split_12864:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_12865;

  corral_source_split_12865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $i18 := list_empty($p17);
    call {:si_unique_call 1365} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_12866;

  corral_source_split_12866:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_12867;

  corral_source_split_12867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_12869;

  corral_source_split_12869:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_12870;

  corral_source_split_12870:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    call {:si_unique_call 1366} devirtbounce.7($p21, $p6);
    goto corral_source_split_12871;

  corral_source_split_12871:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb20_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_12887;
}



const file_update_time: ref;

axiom file_update_time == $sub.ref(0, 585753);

procedure file_update_time($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation file_update_time($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12937;

  corral_source_split_12937:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1373} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1374} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_12938;

  corral_source_split_12938:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 586785);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12940;

  corral_source_split_12940:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12941;

  corral_source_split_12941:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_12942;

  corral_source_split_12942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} __list_add($p0, $p3, $p1);
    goto corral_source_split_12943;

  corral_source_split_12943:
    assume {:verifier.code 0} true;
    return;
}



const get_page: ref;

axiom get_page == $sub.ref(0, 587817);

procedure get_page($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.46, $CurrAddr;



implementation get_page($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12945;

  corral_source_split_12945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $i1 := PageTail($p0);
    call {:si_unique_call 1377} {:cexpr "tmp___1"} boogie_si_record_i32($i1);
    goto corral_source_split_12946;

  corral_source_split_12946:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_12947;

  corral_source_split_12947:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_12948;

  corral_source_split_12948:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_12949;

  corral_source_split_12949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1379} {:cexpr "tmp___2"} boogie_si_record_i64($i5);
    goto corral_source_split_12950;

  corral_source_split_12950:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_12951;

  corral_source_split_12951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_12963;

  corral_source_split_12963:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_12964;

  corral_source_split_12964:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_12965;

  corral_source_split_12965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} $i17 := atomic_read($p16);
    call {:si_unique_call 1385} {:cexpr "tmp___3"} boogie_si_record_i32($i17);
    goto corral_source_split_12966;

  corral_source_split_12966:
    assume {:verifier.code 0} true;
    $i18 := $sle.i32($i17, 0);
    goto corral_source_split_12967;

  corral_source_split_12967:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_12968;

  corral_source_split_12968:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_12969;

  corral_source_split_12969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 1387} {:cexpr "tmp___4"} boogie_si_record_i64($i21);
    goto corral_source_split_12970;

  corral_source_split_12970:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_12971;

  corral_source_split_12971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_12976;

  corral_source_split_12976:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_12977;

  corral_source_split_12977:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_12978;

  corral_source_split_12978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} atomic_inc($p26);
    goto corral_source_split_12979;

  corral_source_split_12979:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_12973;

  corral_source_split_12973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} dump_page($p0, .str.78);
    call {:si_unique_call 1389} devirtbounce.9(0, .str.79, 543, 12);
    goto corral_source_split_12974;

  corral_source_split_12974:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call get_page_loop_$bb10();
    goto $bb10_last;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_12953;

  corral_source_split_12953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} $i7 := __get_page_tail($p0);
    goto corral_source_split_12954;

  corral_source_split_12954:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 1381} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_12955;

  corral_source_split_12955:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_12956;

  corral_source_split_12956:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i64($i9);
    goto corral_source_split_12957;

  corral_source_split_12957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} $i11 := ldv__builtin_expect($i10, 1);
    call {:si_unique_call 1383} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_12958;

  corral_source_split_12958:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_12959;

  corral_source_split_12959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_12961;

  corral_source_split_12961:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;
}



const PageTail: ref;

axiom PageTail == $sub.ref(0, 588849);

procedure PageTail($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation PageTail($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12981;

  corral_source_split_12981:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_12982;

  corral_source_split_12982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} $i2 := constant_test_bit(15, $p1);
    call {:si_unique_call 1392} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_12983;

  corral_source_split_12983:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __get_page_tail: ref;

axiom __get_page_tail == $sub.ref(0, 589881);

procedure __get_page_tail($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation __get_page_tail($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12985;

  corral_source_split_12985:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1393} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1394} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_12986;

  corral_source_split_12986:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 590913);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12988;

  corral_source_split_12988:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_12989;

  corral_source_split_12989:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_12990;

  corral_source_split_12990:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dump_page: ref;

axiom dump_page == $sub.ref(0, 591945);

procedure dump_page($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dump_page($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12992;

  corral_source_split_12992:
    assume {:verifier.code 0} true;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 592977);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_12994;

  corral_source_split_12994:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_12995;

  corral_source_split_12995:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_12996;

  corral_source_split_12996:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_12997;

  corral_source_split_12997:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_12998;

  corral_source_split_12998:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_12999;

  corral_source_split_12999:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_13000;

  corral_source_split_13000:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_13001;

  corral_source_split_13001:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_13002;

  corral_source_split_13002:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_13003;

  corral_source_split_13003:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const fb_deferred_io_set_page_dirty: ref;

axiom fb_deferred_io_set_page_dirty == $sub.ref(0, 594009);

procedure fb_deferred_io_set_page_dirty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fb_deferred_io_set_page_dirty($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13005;

  corral_source_split_13005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $i1 := PageDirty($p0);
    call {:si_unique_call 1397} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_13006;

  corral_source_split_13006:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_13007;

  corral_source_split_13007:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_13009;

  corral_source_split_13009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} SetPageDirty($p0);
    goto corral_source_split_13010;

  corral_source_split_13010:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const PageDirty: ref;

axiom PageDirty == $sub.ref(0, 595041);

procedure PageDirty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation PageDirty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13012;

  corral_source_split_13012:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_13013;

  corral_source_split_13013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} $i2 := constant_test_bit(4, $p1);
    call {:si_unique_call 1400} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_13014;

  corral_source_split_13014:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const SetPageDirty: ref;

axiom SetPageDirty == $sub.ref(0, 596073);

procedure SetPageDirty($p0: ref);
  free requires assertsPassed;



implementation SetPageDirty($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13016;

  corral_source_split_13016:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_13017;

  corral_source_split_13017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} set_bit(4, $p1);
    goto corral_source_split_13018;

  corral_source_split_13018:
    assume {:verifier.code 0} true;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 597105);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1403} devirtbounce.22(0, $p1, $i0, $p1);
    goto corral_source_split_13020;

  corral_source_split_13020:
    assume {:verifier.code 0} true;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 598137);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.76;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_123: [ref]i8;
  var cmdloc_dummy_var_124: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1405} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_13022;

  corral_source_split_13022:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_13023;

  corral_source_split_13023:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_123 := $M.76;
    call {:si_unique_call 1406} cmdloc_dummy_var_124 := $memset.i8(cmdloc_dummy_var_123, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.76 := cmdloc_dummy_var_124;
    goto corral_source_split_13024;

  corral_source_split_13024:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_file_operations_4: ref;

axiom ldv_file_operations_4 == $sub.ref(0, 599169);

procedure ldv_file_operations_4();
  free requires assertsPassed;
  modifies $M.77, $M.78, $M.0, $CurrAddr;



implementation ldv_file_operations_4()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13026;

  corral_source_split_13026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13027;

  corral_source_split_13027:
    assume {:verifier.code 0} true;
    goto corral_source_split_13028;

  corral_source_split_13028:
    assume {:verifier.code 0} true;
    $M.77 := $p0;
    goto corral_source_split_13029;

  corral_source_split_13029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13030;

  corral_source_split_13030:
    assume {:verifier.code 0} true;
    goto corral_source_split_13031;

  corral_source_split_13031:
    assume {:verifier.code 0} true;
    $M.78 := $p2;
    goto corral_source_split_13032;

  corral_source_split_13032:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 600201);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.76, $M.70, $M.79, $M.81, $M.82, $M.83, $M.84, $M.85, $M.87, $M.0, $M.89, $M.90, $M.91, $M.94, $M.19, $M.100, $M.21, $M.103, $M.106, $M.107, $M.108, $M.109, $M.110, $M.60, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.58, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.47, $M.204, $M.205, $M.206, $M.207, $M.208, $M.209, $M.210, $M.211, $M.212, $M.213, $M.214, $M.215, $M.216, $M.217, $M.218, $M.10, $M.20, $M.61, $M.66, $M.95, $M.65, $M.71, $M.92, $M.63, $M.86, $M.67, $M.78, $M.93, $M.68, $M.96, $M.77, $M.64, $M.88, $M.62, $M.72, $M.253, $M.254, $M.255, $M.48, $M.29, $M.324, $M.325, $M.326, $M.327, $M.328, $M.329, $M.330, $M.331, $M.332, $M.333, $M.334, $M.335, $M.336, $M.337, $M.338, $CurrAddr, $M.14, $M.15, $M.18, $M.11, $M.16, $M.17, $M.12, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, assertsPassed, $M.13, $M.46;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $i53: i32;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i1;
  var $i112: i32;
  var $i113: i32;
  var $p114: ref;
  var $i115: i64;
  var $i116: i1;
  var $i117: i32;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i135: i64;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $i140: i64;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $i145: i64;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $i150: i64;
  var $i151: i64;
  var $i152: i32;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i157: i64;
  var $i158: i64;
  var $i159: i32;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $i164: i32;
  var $i165: i64;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var $i171: i32;
  var $i172: i32;
  var $i173: i1;
  var $i174: i32;
  var $i175: i32;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $i184: i32;
  var $i185: i1;
  var $p186: ref;
  var $p187: ref;
  var $i189: i32;
  var $i190: i32;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $i194: i64;
  var $i195: i32;
  var $i197: i32;
  var $i198: i1;
  var $p199: ref;
  var $i200: i32;
  var $i201: i64;
  var $i203: i32;
  var $i204: i1;
  var $i205: i32;
  var $i206: i1;
  var $i207: i1;
  var $i208: i1;
  var $i209: i32;
  var $i210: i1;
  var $i211: i32;
  var $i212: i1;
  var $i213: i32;
  var $i214: i1;
  var $i215: i32;
  var $i216: i32;
  var $i217: i1;
  var $i218: i32;
  var $i219: i1;
  var $i220: i32;
  var $i221: i1;
  var $i222: i32;
  var $i223: i1;
  var $i224: i32;
  var $i225: i1;
  var $i226: i32;
  var $i227: i1;
  var $i228: i1;
  var $i229: i1;
  var $i230: i1;
  var $i231: i1;
  var $i232: i32;
  var $i233: i1;
  var $p234: ref;
  var $p235: ref;
  var $i237: i32;
  var $i238: i32;
  var $i239: i32;
  var $i240: i1;
  var $p241: ref;
  var $i242: i64;
  var $i244: i32;
  var $i245: i1;
  var $p246: ref;
  var $i247: i64;
  var $i248: i32;
  var $i250: i32;
  var $i251: i1;
  var $p252: ref;
  var $p253: ref;
  var $i254: i32;
  var $i255: i32;
  var $i256: i1;
  var $i257: i32;
  var $i258: i32;
  var vslice_dummy_var_169: ref;
  var vslice_dummy_var_170: ref;
  var vslice_dummy_var_171: ref;
  var vslice_dummy_var_172: ref;
  var vslice_dummy_var_173: ref;
  var vslice_dummy_var_174: ref;
  var vslice_dummy_var_175: ref;
  var vslice_dummy_var_176: ref;
  var vslice_dummy_var_177: ref;
  var vslice_dummy_var_178: ref;
  var vslice_dummy_var_179: ref;
  var vslice_dummy_var_180: ref;
  var vslice_dummy_var_181: ref;
  var vslice_dummy_var_182: ref;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i64;
  var vslice_dummy_var_185: i64;
  var vslice_dummy_var_186: i64;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i64;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i32;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i64;
  var vslice_dummy_var_194: i64;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i64;
  var vslice_dummy_var_197: i64;

  $bb0:
    call {:si_unique_call 1409} $initialize();
    goto corral_source_split_13034;

  corral_source_split_13034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} $p8 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $p10 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $p11 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $p12 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} $p13 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_13035;

  corral_source_split_13035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} $p14 := ldv_init_zalloc(1);
    goto corral_source_split_13036;

  corral_source_split_13036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} $p15 := ldv_init_zalloc(8);
    goto corral_source_split_13037;

  corral_source_split_13037:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_13038;

  corral_source_split_13038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} $p17 := ldv_init_zalloc(8);
    goto corral_source_split_13039;

  corral_source_split_13039:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_13040;

  corral_source_split_13040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $p19 := ldv_init_zalloc(1);
    goto corral_source_split_13041;

  corral_source_split_13041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} $p20 := ldv_init_zalloc(184);
    goto corral_source_split_13042;

  corral_source_split_13042:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_13043;

  corral_source_split_13043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} $p22 := ldv_init_zalloc(1);
    goto corral_source_split_13044;

  corral_source_split_13044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} $p23 := ldv_init_zalloc(8);
    goto corral_source_split_13045;

  corral_source_split_13045:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_13046;

  corral_source_split_13046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} ldv_initialize();
    goto corral_source_split_13047;

  corral_source_split_13047:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p0);
    goto corral_source_split_13048;

  corral_source_split_13048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} vslice_dummy_var_169 := ldv_memset($p25, 0, 8);
    goto corral_source_split_13049;

  corral_source_split_13049:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p1);
    goto corral_source_split_13050;

  corral_source_split_13050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} vslice_dummy_var_170 := ldv_memset($p27, 0, 4);
    goto corral_source_split_13051;

  corral_source_split_13051:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p2);
    goto corral_source_split_13052;

  corral_source_split_13052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} vslice_dummy_var_171 := ldv_memset($p29, 0, 8);
    goto corral_source_split_13053;

  corral_source_split_13053:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p3);
    goto corral_source_split_13054;

  corral_source_split_13054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} vslice_dummy_var_172 := ldv_memset($p31, 0, 8);
    goto corral_source_split_13055;

  corral_source_split_13055:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p4);
    goto corral_source_split_13056;

  corral_source_split_13056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} vslice_dummy_var_173 := ldv_memset($p33, 0, 4);
    goto corral_source_split_13057;

  corral_source_split_13057:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p5);
    goto corral_source_split_13058;

  corral_source_split_13058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} vslice_dummy_var_174 := ldv_memset($p35, 0, 8);
    goto corral_source_split_13059;

  corral_source_split_13059:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p6);
    goto corral_source_split_13060;

  corral_source_split_13060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} vslice_dummy_var_175 := ldv_memset($p37, 0, 8);
    goto corral_source_split_13061;

  corral_source_split_13061:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p7);
    goto corral_source_split_13062;

  corral_source_split_13062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} vslice_dummy_var_176 := ldv_memset($p39, 0, 8);
    goto corral_source_split_13063;

  corral_source_split_13063:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p8);
    goto corral_source_split_13064;

  corral_source_split_13064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} vslice_dummy_var_177 := ldv_memset($p41, 0, 4);
    goto corral_source_split_13065;

  corral_source_split_13065:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p9);
    goto corral_source_split_13066;

  corral_source_split_13066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} vslice_dummy_var_178 := ldv_memset($p43, 0, 8);
    goto corral_source_split_13067;

  corral_source_split_13067:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p10);
    goto corral_source_split_13068;

  corral_source_split_13068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} vslice_dummy_var_179 := ldv_memset($p45, 0, 4);
    goto corral_source_split_13069;

  corral_source_split_13069:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p11);
    goto corral_source_split_13070;

  corral_source_split_13070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} vslice_dummy_var_180 := ldv_memset($p47, 0, 8);
    goto corral_source_split_13071;

  corral_source_split_13071:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p12);
    goto corral_source_split_13072;

  corral_source_split_13072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} vslice_dummy_var_181 := ldv_memset($p49, 0, 8);
    goto corral_source_split_13073;

  corral_source_split_13073:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p13);
    goto corral_source_split_13074;

  corral_source_split_13074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} vslice_dummy_var_182 := ldv_memset($p51, 0, 4);
    goto corral_source_split_13075;

  corral_source_split_13075:
    assume {:verifier.code 0} true;
    $M.70 := 0;
    call {:si_unique_call 1447} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_13076;

  corral_source_split_13076:
    assume {:verifier.code 0} true;
    $M.79 := 0;
    call {:si_unique_call 1448} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_13077;

  corral_source_split_13077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} work_init_1();
    goto corral_source_split_13078;

  corral_source_split_13078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_13079;

  corral_source_split_13079:
    assume {:verifier.code 0} true;
    $M.81 := 0;
    call {:si_unique_call 1451} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_13080;

  corral_source_split_13080:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1452} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_13081;

  corral_source_split_13081:
    assume {:verifier.code 0} true;
    $M.83 := 0;
    call {:si_unique_call 1453} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_13082;

  corral_source_split_13082:
    assume {:verifier.code 0} true;
    $M.84 := 0;
    call {:si_unique_call 1454} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_13083;

  corral_source_split_13083:
    assume {:verifier.code 0} true;
    $M.85 := 0;
    call {:si_unique_call 1455} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_13084;

  corral_source_split_13084:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $p72, $p73, $p74, $p75, $i76, $i77, $i78, $i79, $p80, $i81, $i82, $i83, $i84, $i85, $i86, $p87, $p88, $i89, $i90, $i91, $i92, $p93, $p94, $i95, $i96, $i97, $i98, $p99, $p100, $p101, $i103, $i104, $p105, $p106, $p107, $p108, $p109, $i110, $i111, $i112, $i113, $p114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $p134, $i135, $i137, $i138, $p139, $i140, $i142, $i143, $p144, $i145, $i147, $i148, $p149, $i150, $i151, $i152, $i154, $i155, $p156, $i157, $i158, $i159, $i161, $i162, $p163, $i164, $i165, $i167, $i168, $p169, $p170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $p178, $i180, $i181, $p182, $i184, $i185, $p186, $p187, $i189, $i190, $i191, $i192, $p193, $i194, $i195, $i197, $i198, $p199, $i200, $i201, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $p234, $p235, $i237, $i238, $i239, $i240, $p241, $i242, $i244, $i245, $p246, $i247, $i248, $i250, $i251, $p252, $p253, $i254, $i255, $i256, $i257, $i258, vslice_dummy_var_183, vslice_dummy_var_184, vslice_dummy_var_185, vslice_dummy_var_186, vslice_dummy_var_187, vslice_dummy_var_188, vslice_dummy_var_189, vslice_dummy_var_190, vslice_dummy_var_191, vslice_dummy_var_192, vslice_dummy_var_193, vslice_dummy_var_194, vslice_dummy_var_195, vslice_dummy_var_196, vslice_dummy_var_197 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $p14, $p16, $p18, $p19, $p21, $p22, $p24, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $p72, $p73, $p74, $p75, $i76, $i77, $i78, $i79, $p80, $i81, $i82, $i83, $i84, $i85, $i86, $p87, $p88, $i89, $i90, $i91, $i92, $p93, $p94, $i95, $i96, $i97, $i98, $p99, $p100, $p101, $i103, $i104, $p105, $p106, $p107, $p108, $p109, $i110, $i111, $i112, $i113, $p114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $p134, $i135, $i137, $i138, $p139, $i140, $i142, $i143, $p144, $i145, $i147, $i148, $p149, $i150, $i151, $i152, $i154, $i155, $p156, $i157, $i158, $i159, $i161, $i162, $p163, $i164, $i165, $i167, $i168, $p169, $p170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $p178, $i180, $i181, $p182, $i184, $i185, $p186, $p187, $i189, $i190, $i191, $i192, $p193, $i194, $i195, $i197, $i198, $p199, $i200, $i201, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $p234, $p235, $i237, $i238, $i239, $i240, $p241, $i242, $i244, $i245, $p246, $i247, $i248, $i250, $i251, $p252, $p253, $i254, $i255, $i256, $i257, $i258, vslice_dummy_var_183, vslice_dummy_var_184, vslice_dummy_var_185, vslice_dummy_var_186, vslice_dummy_var_187, vslice_dummy_var_188, vslice_dummy_var_189, vslice_dummy_var_190, vslice_dummy_var_191, vslice_dummy_var_192, vslice_dummy_var_193, vslice_dummy_var_194, vslice_dummy_var_195, vslice_dummy_var_196, vslice_dummy_var_197);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i53, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i53, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i53, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} ldv_stop();
    goto corral_source_split_13450;

  corral_source_split_13450:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb65_dummy;

  $bb9:
    assume $i57 == 1;
    goto corral_source_split_13090;

  corral_source_split_13090:
    assume {:verifier.code 0} true;
    $i224 := $M.85;
    goto corral_source_split_13091;

  corral_source_split_13091:
    assume {:verifier.code 0} true;
    $i225 := $ne.i32($i224, 0);
    goto corral_source_split_13092;

  corral_source_split_13092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb169:
    assume $i225 == 1;
    goto corral_source_split_13394;

  corral_source_split_13394:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1528} $i226 := __VERIFIER_nondet_int();
    call {:si_unique_call 1529} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i226);
    call {:si_unique_call 1530} {:cexpr "tmp___10"} boogie_si_record_i32($i226);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $i227 := $slt.i32($i226, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    $i228 := $slt.i32($i226, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    $i229 := $eq.i32($i226, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    assume !($i229 == 1);
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} ldv_stop();
    goto corral_source_split_13448;

  corral_source_split_13448:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb176:
    assume $i229 == 1;
    goto corral_source_split_13400;

  corral_source_split_13400:
    assume {:verifier.code 0} true;
    $i250 := $M.85;
    goto corral_source_split_13401;

  corral_source_split_13401:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i250, 1);
    goto corral_source_split_13402;

  corral_source_split_13402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb193:
    assume $i251 == 1;
    goto corral_source_split_13434;

  corral_source_split_13434:
    assume {:verifier.code 0} true;
    $p252 := $M.92;
    goto corral_source_split_13435;

  corral_source_split_13435:
    assume {:verifier.code 0} true;
    $p253 := $M.93;
    goto corral_source_split_13436;

  corral_source_split_13436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} $i254 := proc_fb_open($p252, $p253);
    goto corral_source_split_13437;

  corral_source_split_13437:
    assume {:verifier.code 0} true;
    $M.94 := $i254;
    call {:si_unique_call 1539} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i254);
    goto corral_source_split_13438;

  corral_source_split_13438:
    assume {:verifier.code 0} true;
    $i255 := $M.94;
    goto corral_source_split_13439;

  corral_source_split_13439:
    assume {:verifier.code 0} true;
    $i256 := $eq.i32($i255, 0);
    goto corral_source_split_13440;

  corral_source_split_13440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb195:
    assume $i256 == 1;
    goto corral_source_split_13442;

  corral_source_split_13442:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1540} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_13443;

  corral_source_split_13443:
    assume {:verifier.code 0} true;
    $i257 := $M.81;
    goto corral_source_split_13444;

  corral_source_split_13444:
    assume {:verifier.code 0} true;
    $i258 := $add.i32($i257, 1);
    goto corral_source_split_13445;

  corral_source_split_13445:
    assume {:verifier.code 0} true;
    $M.81 := $i258;
    call {:si_unique_call 1541} {:cexpr "ref_cnt"} boogie_si_record_i32($i258);
    goto corral_source_split_13446;

  corral_source_split_13446:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb174:
    assume $i228 == 1;
    goto corral_source_split_13396;

  corral_source_split_13396:
    assume {:verifier.code 0} true;
    $i244 := $M.85;
    goto corral_source_split_13397;

  corral_source_split_13397:
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i244, 2);
    goto corral_source_split_13398;

  corral_source_split_13398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb190:
    assume $i245 == 1;
    goto corral_source_split_13427;

  corral_source_split_13427:
    assume {:verifier.code 0} true;
    $p246 := $M.93;
    goto corral_source_split_13428;

  corral_source_split_13428:
    assume {:verifier.code 0} true;
    $i247 := $load.i64($M.76, $p11);
    goto corral_source_split_13429;

  corral_source_split_13429:
    assume {:verifier.code 0} true;
    $i248 := $load.i32($M.76, $p13);
    goto corral_source_split_13430;

  corral_source_split_13430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} vslice_dummy_var_197 := seq_lseek($p246, $i247, $i248);
    goto corral_source_split_13431;

  corral_source_split_13431:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1537} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_13432;

  corral_source_split_13432:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb172:
    assume $i227 == 1;
    assume {:verifier.code 0} true;
    $i230 := $slt.i32($i226, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i230 == 1);
    goto corral_source_split_13404;

  corral_source_split_13404:
    assume {:verifier.code 0} true;
    $i239 := $M.85;
    goto corral_source_split_13405;

  corral_source_split_13405:
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i239, 2);
    goto corral_source_split_13406;

  corral_source_split_13406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb187:
    assume $i240 == 1;
    goto corral_source_split_13421;

  corral_source_split_13421:
    assume {:verifier.code 0} true;
    $p241 := $M.93;
    goto corral_source_split_13422;

  corral_source_split_13422:
    assume {:verifier.code 0} true;
    $i242 := $load.i64($M.76, $p12);
    goto corral_source_split_13423;

  corral_source_split_13423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} vslice_dummy_var_196 := seq_read($p241, $p22, $i242, $p24);
    goto corral_source_split_13424;

  corral_source_split_13424:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1535} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_13425;

  corral_source_split_13425:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb179:
    assume $i230 == 1;
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i226, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    assume !($i231 == 1);
    goto $bb178;

  $bb181:
    assume $i231 == 1;
    goto corral_source_split_13408;

  corral_source_split_13408:
    assume {:verifier.code 0} true;
    $i232 := $M.85;
    goto corral_source_split_13409;

  corral_source_split_13409:
    assume {:verifier.code 0} true;
    $i233 := $eq.i32($i232, 2);
    goto corral_source_split_13410;

  corral_source_split_13410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb183:
    assume $i233 == 1;
    goto corral_source_split_13412;

  corral_source_split_13412:
    assume {:verifier.code 0} true;
    $p234 := $M.92;
    goto corral_source_split_13413;

  corral_source_split_13413:
    assume {:verifier.code 0} true;
    $p235 := $M.93;
    goto corral_source_split_13414;

  corral_source_split_13414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} vslice_dummy_var_195 := ldv_seq_release_16($p234, $p235);
    goto corral_source_split_13415;

  corral_source_split_13415:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1532} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_13416;

  corral_source_split_13416:
    assume {:verifier.code 0} true;
    $i237 := $M.81;
    goto corral_source_split_13417;

  corral_source_split_13417:
    assume {:verifier.code 0} true;
    $i238 := $sub.i32($i237, 1);
    goto corral_source_split_13418;

  corral_source_split_13418:
    assume {:verifier.code 0} true;
    $M.81 := $i238;
    call {:si_unique_call 1533} {:cexpr "ref_cnt"} boogie_si_record_i32($i238);
    goto corral_source_split_13419;

  corral_source_split_13419:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb7:
    assume $i56 == 1;
    goto corral_source_split_13086;

  corral_source_split_13086:
    assume {:verifier.code 0} true;
    $i222 := $M.84;
    goto corral_source_split_13087;

  corral_source_split_13087:
    assume {:verifier.code 0} true;
    $i223 := $ne.i32($i222, 0);
    goto corral_source_split_13088;

  corral_source_split_13088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb166:
    assume $i223 == 1;
    goto corral_source_split_13391;

  corral_source_split_13391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} ldv_main_exported_2();
    goto corral_source_split_13392;

  corral_source_split_13392:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb5:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i53, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i58 == 1);
    goto corral_source_split_13098;

  corral_source_split_13098:
    assume {:verifier.code 0} true;
    $i220 := $M.83;
    goto corral_source_split_13099;

  corral_source_split_13099:
    assume {:verifier.code 0} true;
    $i221 := $ne.i32($i220, 0);
    goto corral_source_split_13100;

  corral_source_split_13100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb163:
    assume $i221 == 1;
    goto corral_source_split_13388;

  corral_source_split_13388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} ldv_main_exported_3();
    goto corral_source_split_13389;

  corral_source_split_13389:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb12:
    assume $i58 == 1;
    goto corral_source_split_13094;

  corral_source_split_13094:
    assume {:verifier.code 0} true;
    $i203 := $M.82;
    goto corral_source_split_13095;

  corral_source_split_13095:
    assume {:verifier.code 0} true;
    $i204 := $ne.i32($i203, 0);
    goto corral_source_split_13096;

  corral_source_split_13096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb133:
    assume $i204 == 1;
    goto corral_source_split_13348;

  corral_source_split_13348:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1512} $i205 := __VERIFIER_nondet_int();
    call {:si_unique_call 1513} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i205);
    call {:si_unique_call 1514} {:cexpr "tmp___9"} boogie_si_record_i32($i205);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i206 := $slt.i32($i205, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i205, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    assume !($i207 == 1);
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} ldv_stop();
    goto corral_source_split_13386;

  corral_source_split_13386:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb138:
    assume $i207 == 1;
    goto corral_source_split_13350;

  corral_source_split_13350:
    assume {:verifier.code 0} true;
    $i213 := $M.82;
    goto corral_source_split_13351;

  corral_source_split_13351:
    assume {:verifier.code 0} true;
    $i214 := $eq.i32($i213, 1);
    goto corral_source_split_13352;

  corral_source_split_13352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb151:
    assume $i214 == 1;
    goto corral_source_split_13368;

  corral_source_split_13368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} $i215 := fbmem_init();
    goto corral_source_split_13369;

  corral_source_split_13369:
    assume {:verifier.code 0} true;
    $M.91 := $i215;
    call {:si_unique_call 1519} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i215);
    goto corral_source_split_13370;

  corral_source_split_13370:
    assume {:verifier.code 0} true;
    $i216 := $M.91;
    goto corral_source_split_13371;

  corral_source_split_13371:
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i216, 0);
    goto corral_source_split_13372;

  corral_source_split_13372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $i218 := $M.91;
    goto corral_source_split_13380;

  corral_source_split_13380:
    assume {:verifier.code 0} true;
    $i219 := $ne.i32($i218, 0);
    goto corral_source_split_13381;

  corral_source_split_13381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb156:
    assume $i219 == 1;
    goto corral_source_split_13383;

  corral_source_split_13383:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 1524} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_13384;

  corral_source_split_13384:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} ldv_check_final_state();
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_13366;

  corral_source_split_13366:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb153:
    assume $i217 == 1;
    goto corral_source_split_13374;

  corral_source_split_13374:
    assume {:verifier.code 0} true;
    $M.82 := 3;
    call {:si_unique_call 1520} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_13375;

  corral_source_split_13375:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1521} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_13376;

  corral_source_split_13376:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1522} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_13377;

  corral_source_split_13377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} ldv_initialize_vm_operations_struct_3();
    goto corral_source_split_13378;

  corral_source_split_13378:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb136:
    assume $i206 == 1;
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i205, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    assume !($i208 == 1);
    goto $bb140;

  $bb141:
    assume $i208 == 1;
    goto corral_source_split_13354;

  corral_source_split_13354:
    assume {:verifier.code 0} true;
    $i209 := $M.82;
    goto corral_source_split_13355;

  corral_source_split_13355:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, 3);
    goto corral_source_split_13356;

  corral_source_split_13356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    assume !($i210 == 1);
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb143:
    assume $i210 == 1;
    goto corral_source_split_13358;

  corral_source_split_13358:
    assume {:verifier.code 0} true;
    $i211 := $M.81;
    goto corral_source_split_13359;

  corral_source_split_13359:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i211, 0);
    goto corral_source_split_13360;

  corral_source_split_13360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    assume !($i212 == 1);
    goto $bb145;

  $bb146:
    assume $i212 == 1;
    goto corral_source_split_13362;

  corral_source_split_13362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} fbmem_exit();
    goto corral_source_split_13363;

  corral_source_split_13363:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 1516} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_13364;

  corral_source_split_13364:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb3:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i53, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i53, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i60 == 1);
    goto corral_source_split_13106;

  corral_source_split_13106:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb16:
    assume $i60 == 1;
    goto corral_source_split_13102;

  corral_source_split_13102:
    assume {:verifier.code 0} true;
    $i119 := $M.79;
    goto corral_source_split_13103;

  corral_source_split_13103:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_13104;

  corral_source_split_13104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb66:
    assume $i120 == 1;
    goto corral_source_split_13211;

  corral_source_split_13211:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1481} $i121 := __VERIFIER_nondet_int();
    call {:si_unique_call 1482} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i121);
    call {:si_unique_call 1483} {:cexpr "tmp___8"} boogie_si_record_i32($i121);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i122 := $slt.i32($i121, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    $i123 := $slt.i32($i121, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i121, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    $i125 := $slt.i32($i121, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i121, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} ldv_stop();
    goto corral_source_split_13346;

  corral_source_split_13346:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb77:
    assume $i126 == 1;
    goto corral_source_split_13221;

  corral_source_split_13221:
    assume {:verifier.code 0} true;
    $i197 := $M.79;
    goto corral_source_split_13222;

  corral_source_split_13222:
    assume {:verifier.code 0} true;
    $i198 := $eq.i32($i197, 2);
    goto corral_source_split_13223;

  corral_source_split_13223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb127:
    assume $i198 == 1;
    goto corral_source_split_13339;

  corral_source_split_13339:
    assume {:verifier.code 0} true;
    $p199 := $M.78;
    goto corral_source_split_13340;

  corral_source_split_13340:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.76, $p4);
    goto corral_source_split_13341;

  corral_source_split_13341:
    assume {:verifier.code 0} true;
    $i201 := $load.i64($M.76, $p6);
    goto corral_source_split_13342;

  corral_source_split_13342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} vslice_dummy_var_194 := fb_ioctl($p199, $i200, $i201);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_13343;

  corral_source_split_13343:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 1510} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_13344;

  corral_source_split_13344:
    assume {:verifier.code 0} true;
    goto $bb129;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb75:
    assume $i125 == 1;
    goto corral_source_split_13217;

  corral_source_split_13217:
    assume {:verifier.code 0} true;
    $i191 := $M.79;
    goto corral_source_split_13218;

  corral_source_split_13218:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 2);
    goto corral_source_split_13219;

  corral_source_split_13219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb124:
    assume $i192 == 1;
    goto corral_source_split_13332;

  corral_source_split_13332:
    assume {:verifier.code 0} true;
    $p193 := $M.78;
    goto corral_source_split_13333;

  corral_source_split_13333:
    assume {:verifier.code 0} true;
    $i194 := $load.i64($M.76, $p2);
    goto corral_source_split_13334;

  corral_source_split_13334:
    assume {:verifier.code 0} true;
    $i195 := $load.i32($M.76, $p10);
    goto corral_source_split_13335;

  corral_source_split_13335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} vslice_dummy_var_193 := default_llseek($p193, $i194, $i195);
    goto corral_source_split_13336;

  corral_source_split_13336:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 1508} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_13337;

  corral_source_split_13337:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb73:
    assume $i124 == 1;
    goto corral_source_split_13213;

  corral_source_split_13213:
    assume {:verifier.code 0} true;
    $i184 := $M.79;
    goto corral_source_split_13214;

  corral_source_split_13214:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 2);
    goto corral_source_split_13215;

  corral_source_split_13215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb121:
    assume $i185 == 1;
    goto corral_source_split_13323;

  corral_source_split_13323:
    assume {:verifier.code 0} true;
    $p186 := $M.77;
    goto corral_source_split_13324;

  corral_source_split_13324:
    assume {:verifier.code 0} true;
    $p187 := $M.78;
    goto corral_source_split_13325;

  corral_source_split_13325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} vslice_dummy_var_192 := fb_release($p186, $p187);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_13326;

  corral_source_split_13326:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1505} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_13327;

  corral_source_split_13327:
    assume {:verifier.code 0} true;
    $i189 := $M.81;
    goto corral_source_split_13328;

  corral_source_split_13328:
    assume {:verifier.code 0} true;
    $i190 := $sub.i32($i189, 1);
    goto corral_source_split_13329;

  corral_source_split_13329:
    assume {:verifier.code 0} true;
    $M.81 := $i190;
    call {:si_unique_call 1506} {:cexpr "ref_cnt"} boogie_si_record_i32($i190);
    goto corral_source_split_13330;

  corral_source_split_13330:
    assume {:verifier.code 0} true;
    goto $bb123;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb71:
    assume $i123 == 1;
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i121, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i127 == 1);
    goto corral_source_split_13229;

  corral_source_split_13229:
    assume {:verifier.code 0} true;
    $i176 := $M.79;
    goto corral_source_split_13230;

  corral_source_split_13230:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 1);
    goto corral_source_split_13231;

  corral_source_split_13231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $i180 := $M.79;
    goto corral_source_split_13315;

  corral_source_split_13315:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 2);
    goto corral_source_split_13316;

  corral_source_split_13316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb118:
    assume $i181 == 1;
    goto corral_source_split_13318;

  corral_source_split_13318:
    assume {:verifier.code 0} true;
    $p182 := $M.78;
    goto corral_source_split_13319;

  corral_source_split_13319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} vslice_dummy_var_191 := fb_mmap($p182, $p21);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_13320;

  corral_source_split_13320:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 1503} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_13321;

  corral_source_split_13321:
    assume {:verifier.code 0} true;
    goto $bb120;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb115:
    assume $i177 == 1;
    goto corral_source_split_13310;

  corral_source_split_13310:
    assume {:verifier.code 0} true;
    $p178 := $M.78;
    goto corral_source_split_13311;

  corral_source_split_13311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} vslice_dummy_var_190 := fb_mmap($p178, $p21);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_13312;

  corral_source_split_13312:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1501} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_13313;

  corral_source_split_13313:
    assume {:verifier.code 0} true;
    goto $bb117;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb80:
    assume $i127 == 1;
    goto corral_source_split_13225;

  corral_source_split_13225:
    assume {:verifier.code 0} true;
    $i167 := $M.79;
    goto corral_source_split_13226;

  corral_source_split_13226:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 1);
    goto corral_source_split_13227;

  corral_source_split_13227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb109:
    assume $i168 == 1;
    goto corral_source_split_13296;

  corral_source_split_13296:
    assume {:verifier.code 0} true;
    $p169 := $M.77;
    goto corral_source_split_13297;

  corral_source_split_13297:
    assume {:verifier.code 0} true;
    $p170 := $M.78;
    goto corral_source_split_13298;

  corral_source_split_13298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} $i171 := fb_open($p169, $p170);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_13299;

  corral_source_split_13299:
    assume {:verifier.code 0} true;
    $M.90 := $i171;
    call {:si_unique_call 1497} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i171);
    goto corral_source_split_13300;

  corral_source_split_13300:
    assume {:verifier.code 0} true;
    $i172 := $M.90;
    goto corral_source_split_13301;

  corral_source_split_13301:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 0);
    goto corral_source_split_13302;

  corral_source_split_13302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb111:
    assume $i173 == 1;
    goto corral_source_split_13304;

  corral_source_split_13304:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 1498} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_13305;

  corral_source_split_13305:
    assume {:verifier.code 0} true;
    $i174 := $M.81;
    goto corral_source_split_13306;

  corral_source_split_13306:
    assume {:verifier.code 0} true;
    $i175 := $add.i32($i174, 1);
    goto corral_source_split_13307;

  corral_source_split_13307:
    assume {:verifier.code 0} true;
    $M.81 := $i175;
    call {:si_unique_call 1499} {:cexpr "ref_cnt"} boogie_si_record_i32($i175);
    goto corral_source_split_13308;

  corral_source_split_13308:
    assume {:verifier.code 0} true;
    goto $bb113;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb69:
    assume $i122 == 1;
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i121, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i121, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i129 == 1);
    goto corral_source_split_13237;

  corral_source_split_13237:
    assume {:verifier.code 0} true;
    $i161 := $M.79;
    goto corral_source_split_13238;

  corral_source_split_13238:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 2);
    goto corral_source_split_13239;

  corral_source_split_13239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb106:
    assume $i162 == 1;
    goto corral_source_split_13289;

  corral_source_split_13289:
    assume {:verifier.code 0} true;
    $p163 := $M.78;
    goto corral_source_split_13290;

  corral_source_split_13290:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.76, $p8);
    goto corral_source_split_13291;

  corral_source_split_13291:
    assume {:verifier.code 0} true;
    $i165 := $load.i64($M.76, $p7);
    goto corral_source_split_13292;

  corral_source_split_13292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} vslice_dummy_var_189 := fb_compat_ioctl($p163, $i164, $i165);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_13293;

  corral_source_split_13293:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 1495} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_13294;

  corral_source_split_13294:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb84:
    assume $i129 == 1;
    goto corral_source_split_13233;

  corral_source_split_13233:
    assume {:verifier.code 0} true;
    $i147 := $M.79;
    goto corral_source_split_13234;

  corral_source_split_13234:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 1);
    goto corral_source_split_13235;

  corral_source_split_13235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i154 := $M.79;
    goto corral_source_split_13278;

  corral_source_split_13278:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 2);
    goto corral_source_split_13279;

  corral_source_split_13279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb103:
    assume $i155 == 1;
    goto corral_source_split_13281;

  corral_source_split_13281:
    assume {:verifier.code 0} true;
    $p156 := $M.78;
    goto corral_source_split_13282;

  corral_source_split_13282:
    assume {:verifier.code 0} true;
    $i157 := $load.i64($M.76, $p5);
    goto corral_source_split_13283;

  corral_source_split_13283:
    assume {:verifier.code 0} true;
    $i158 := $load.i64($M.76, $p3);
    goto corral_source_split_13284;

  corral_source_split_13284:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.76, $p1);
    goto corral_source_split_13285;

  corral_source_split_13285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} vslice_dummy_var_188 := fb_deferred_io_fsync($p156, $i157, $i158, $i159);
    goto corral_source_split_13286;

  corral_source_split_13286:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 1493} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_13287;

  corral_source_split_13287:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb100:
    assume $i148 == 1;
    goto corral_source_split_13270;

  corral_source_split_13270:
    assume {:verifier.code 0} true;
    $p149 := $M.78;
    goto corral_source_split_13271;

  corral_source_split_13271:
    assume {:verifier.code 0} true;
    $i150 := $load.i64($M.76, $p5);
    goto corral_source_split_13272;

  corral_source_split_13272:
    assume {:verifier.code 0} true;
    $i151 := $load.i64($M.76, $p3);
    goto corral_source_split_13273;

  corral_source_split_13273:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.76, $p1);
    goto corral_source_split_13274;

  corral_source_split_13274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} vslice_dummy_var_187 := fb_deferred_io_fsync($p149, $i150, $i151, $i152);
    goto corral_source_split_13275;

  corral_source_split_13275:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1491} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_13276;

  corral_source_split_13276:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb82:
    assume $i128 == 1;
    assume {:verifier.code 0} true;
    $i130 := $slt.i32($i121, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i130 == 1);
    goto corral_source_split_13241;

  corral_source_split_13241:
    assume {:verifier.code 0} true;
    $i142 := $M.79;
    goto corral_source_split_13242;

  corral_source_split_13242:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 2);
    goto corral_source_split_13243;

  corral_source_split_13243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb97:
    assume $i143 == 1;
    goto corral_source_split_13264;

  corral_source_split_13264:
    assume {:verifier.code 0} true;
    $p144 := $M.78;
    goto corral_source_split_13265;

  corral_source_split_13265:
    assume {:verifier.code 0} true;
    $i145 := $load.i64($M.76, $p0);
    goto corral_source_split_13266;

  corral_source_split_13266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} vslice_dummy_var_186 := fb_read($p144, $p14, $i145, $p18);
    goto corral_source_split_13267;

  corral_source_split_13267:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 1489} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_13268;

  corral_source_split_13268:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb86:
    assume $i130 == 1;
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i121, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i131 == 1);
    goto $bb79;

  $bb88:
    assume $i131 == 1;
    goto corral_source_split_13245;

  corral_source_split_13245:
    assume {:verifier.code 0} true;
    $i132 := $M.79;
    goto corral_source_split_13246;

  corral_source_split_13246:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 1);
    goto corral_source_split_13247;

  corral_source_split_13247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i137 := $M.79;
    goto corral_source_split_13255;

  corral_source_split_13255:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 2);
    goto corral_source_split_13256;

  corral_source_split_13256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb93:
    assume $i138 == 1;
    goto corral_source_split_13258;

  corral_source_split_13258:
    assume {:verifier.code 0} true;
    $p139 := $M.78;
    goto corral_source_split_13259;

  corral_source_split_13259:
    assume {:verifier.code 0} true;
    $i140 := $load.i64($M.76, $p9);
    goto corral_source_split_13260;

  corral_source_split_13260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} vslice_dummy_var_185 := fb_write($p139, $p19, $i140, $p16);
    goto corral_source_split_13261;

  corral_source_split_13261:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 1487} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_13262;

  corral_source_split_13262:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb90:
    assume $i133 == 1;
    goto corral_source_split_13249;

  corral_source_split_13249:
    assume {:verifier.code 0} true;
    $p134 := $M.78;
    goto corral_source_split_13250;

  corral_source_split_13250:
    assume {:verifier.code 0} true;
    $i135 := $load.i64($M.76, $p9);
    goto corral_source_split_13251;

  corral_source_split_13251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} vslice_dummy_var_184 := fb_write($p134, $p19, $i135, $p16);
    goto corral_source_split_13252;

  corral_source_split_13252:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1485} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_13253;

  corral_source_split_13253:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb14:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i53, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb11;

  $bb18:
    assume $i61 == 1;
    goto corral_source_split_13108;

  corral_source_split_13108:
    assume {:verifier.code 0} true;
    $i62 := $M.70;
    goto corral_source_split_13109;

  corral_source_split_13109:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_13110;

  corral_source_split_13110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb20:
    assume $i63 == 1;
    goto corral_source_split_13112;

  corral_source_split_13112:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1459} $i64 := __VERIFIER_nondet_int();
    call {:si_unique_call 1460} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i64);
    call {:si_unique_call 1461} {:cexpr "tmp___7"} boogie_si_record_i32($i64);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i64, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i64, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i64, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} ldv_stop();
    goto corral_source_split_13209;

  corral_source_split_13209:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb27:
    assume $i67 == 1;
    goto corral_source_split_13118;

  corral_source_split_13118:
    assume {:verifier.code 0} true;
    $i103 := $M.70;
    goto corral_source_split_13119;

  corral_source_split_13119:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 3);
    goto corral_source_split_13120;

  corral_source_split_13120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb53:
    assume $i104 == 1;
    goto corral_source_split_13183;

  corral_source_split_13183:
    assume {:verifier.code 0} true;
    $p105 := $M.71;
    goto corral_source_split_13184;

  corral_source_split_13184:
    assume {:verifier.code 0} true;
    $p106 := $M.88;
    goto corral_source_split_13185;

  corral_source_split_13185:
    assume {:verifier.code 0} true;
    $p107 := $M.86;
    goto corral_source_split_13186;

  corral_source_split_13186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} $p108 := fb_seq_next($p105, $p106, $p107);
    goto corral_source_split_13187;

  corral_source_split_13187:
    assume {:verifier.code 0} true;
    $M.89 := $p108;
    goto corral_source_split_13188;

  corral_source_split_13188:
    assume {:verifier.code 0} true;
    $p109 := $M.89;
    goto corral_source_split_13189;

  corral_source_split_13189:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p109);
    goto corral_source_split_13190;

  corral_source_split_13190:
    assume {:verifier.code 0} true;
    $i111 := $eq.i64($i110, 0);
    goto corral_source_split_13191;

  corral_source_split_13191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p114 := $M.89;
    goto corral_source_split_13199;

  corral_source_split_13199:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p114);
    goto corral_source_split_13200;

  corral_source_split_13200:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i115, 0);
    goto corral_source_split_13201;

  corral_source_split_13201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb58:
    assume $i116 == 1;
    goto corral_source_split_13203;

  corral_source_split_13203:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1478} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_13204;

  corral_source_split_13204:
    assume {:verifier.code 0} true;
    $i117 := $M.81;
    goto corral_source_split_13205;

  corral_source_split_13205:
    assume {:verifier.code 0} true;
    $i118 := $add.i32($i117, 1);
    goto corral_source_split_13206;

  corral_source_split_13206:
    assume {:verifier.code 0} true;
    $M.81 := $i118;
    call {:si_unique_call 1479} {:cexpr "ref_cnt"} boogie_si_record_i32($i118);
    goto corral_source_split_13207;

  corral_source_split_13207:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb55:
    assume $i111 == 1;
    goto corral_source_split_13193;

  corral_source_split_13193:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1476} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_13194;

  corral_source_split_13194:
    assume {:verifier.code 0} true;
    $i112 := $M.81;
    goto corral_source_split_13195;

  corral_source_split_13195:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i112, 1);
    goto corral_source_split_13196;

  corral_source_split_13196:
    assume {:verifier.code 0} true;
    $M.81 := $i113;
    call {:si_unique_call 1477} {:cexpr "ref_cnt"} boogie_si_record_i32($i113);
    goto corral_source_split_13197;

  corral_source_split_13197:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb25:
    assume $i66 == 1;
    goto corral_source_split_13114;

  corral_source_split_13114:
    assume {:verifier.code 0} true;
    $i97 := $M.70;
    goto corral_source_split_13115;

  corral_source_split_13115:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 3);
    goto corral_source_split_13116;

  corral_source_split_13116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb50:
    assume $i98 == 1;
    goto corral_source_split_13176;

  corral_source_split_13176:
    assume {:verifier.code 0} true;
    $p99 := $M.71;
    goto corral_source_split_13177;

  corral_source_split_13177:
    assume {:verifier.code 0} true;
    $p100 := $M.86;
    goto corral_source_split_13178;

  corral_source_split_13178:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_13179;

  corral_source_split_13179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} vslice_dummy_var_183 := fb_seq_show($p99, $p101);
    goto corral_source_split_13180;

  corral_source_split_13180:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1474} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_13181;

  corral_source_split_13181:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb23:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i64, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i68 == 1);
    goto corral_source_split_13122;

  corral_source_split_13122:
    assume {:verifier.code 0} true;
    $i85 := $M.70;
    goto corral_source_split_13123;

  corral_source_split_13123:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 3);
    goto corral_source_split_13124;

  corral_source_split_13124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i91 := $M.70;
    goto corral_source_split_13164;

  corral_source_split_13164:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 2);
    goto corral_source_split_13165;

  corral_source_split_13165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb47:
    assume $i92 == 1;
    goto corral_source_split_13167;

  corral_source_split_13167:
    assume {:verifier.code 0} true;
    $p93 := $M.71;
    goto corral_source_split_13168;

  corral_source_split_13168:
    assume {:verifier.code 0} true;
    $p94 := $M.88;
    goto corral_source_split_13169;

  corral_source_split_13169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} fb_seq_stop($p93, $p94);
    goto corral_source_split_13170;

  corral_source_split_13170:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1471} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_13171;

  corral_source_split_13171:
    assume {:verifier.code 0} true;
    $i95 := $M.81;
    goto corral_source_split_13172;

  corral_source_split_13172:
    assume {:verifier.code 0} true;
    $i96 := $sub.i32($i95, 1);
    goto corral_source_split_13173;

  corral_source_split_13173:
    assume {:verifier.code 0} true;
    $M.81 := $i96;
    call {:si_unique_call 1472} {:cexpr "ref_cnt"} boogie_si_record_i32($i96);
    goto corral_source_split_13174;

  corral_source_split_13174:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i86 == 1;
    goto corral_source_split_13155;

  corral_source_split_13155:
    assume {:verifier.code 0} true;
    $p87 := $M.71;
    goto corral_source_split_13156;

  corral_source_split_13156:
    assume {:verifier.code 0} true;
    $p88 := $M.88;
    goto corral_source_split_13157;

  corral_source_split_13157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} fb_seq_stop($p87, $p88);
    goto corral_source_split_13158;

  corral_source_split_13158:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1468} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_13159;

  corral_source_split_13159:
    assume {:verifier.code 0} true;
    $i89 := $M.81;
    goto corral_source_split_13160;

  corral_source_split_13160:
    assume {:verifier.code 0} true;
    $i90 := $sub.i32($i89, 1);
    goto corral_source_split_13161;

  corral_source_split_13161:
    assume {:verifier.code 0} true;
    $M.81 := $i90;
    call {:si_unique_call 1469} {:cexpr "ref_cnt"} boogie_si_record_i32($i90);
    goto corral_source_split_13162;

  corral_source_split_13162:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb30:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i64, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb29;

  $bb32:
    assume $i69 == 1;
    goto corral_source_split_13126;

  corral_source_split_13126:
    assume {:verifier.code 0} true;
    $i70 := $M.70;
    goto corral_source_split_13127;

  corral_source_split_13127:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 1);
    goto corral_source_split_13128;

  corral_source_split_13128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb34:
    assume $i71 == 1;
    goto corral_source_split_13130;

  corral_source_split_13130:
    assume {:verifier.code 0} true;
    $p72 := $M.71;
    goto corral_source_split_13131;

  corral_source_split_13131:
    assume {:verifier.code 0} true;
    $p73 := $M.86;
    goto corral_source_split_13132;

  corral_source_split_13132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} $p74 := fb_seq_start($p72, $p73);
    goto corral_source_split_13133;

  corral_source_split_13133:
    assume {:verifier.code 0} true;
    $M.87 := $p74;
    goto corral_source_split_13134;

  corral_source_split_13134:
    assume {:verifier.code 0} true;
    $p75 := $M.87;
    goto corral_source_split_13135;

  corral_source_split_13135:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_13136;

  corral_source_split_13136:
    assume {:verifier.code 0} true;
    $i77 := $eq.i64($i76, 0);
    goto corral_source_split_13137;

  corral_source_split_13137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p80 := $M.87;
    goto corral_source_split_13145;

  corral_source_split_13145:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_13146;

  corral_source_split_13146:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_13147;

  corral_source_split_13147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb39:
    assume $i82 == 1;
    goto corral_source_split_13149;

  corral_source_split_13149:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1465} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_13150;

  corral_source_split_13150:
    assume {:verifier.code 0} true;
    $i83 := $M.81;
    goto corral_source_split_13151;

  corral_source_split_13151:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i83, 1);
    goto corral_source_split_13152;

  corral_source_split_13152:
    assume {:verifier.code 0} true;
    $M.81 := $i84;
    call {:si_unique_call 1466} {:cexpr "ref_cnt"} boogie_si_record_i32($i84);
    goto corral_source_split_13153;

  corral_source_split_13153:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i77 == 1;
    goto corral_source_split_13139;

  corral_source_split_13139:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1463} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_13140;

  corral_source_split_13140:
    assume {:verifier.code 0} true;
    $i78 := $M.81;
    goto corral_source_split_13141;

  corral_source_split_13141:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, 1);
    goto corral_source_split_13142;

  corral_source_split_13142:
    assume {:verifier.code 0} true;
    $M.81 := $i79;
    call {:si_unique_call 1464} {:cexpr "ref_cnt"} boogie_si_record_i32($i79);
    goto corral_source_split_13143;

  corral_source_split_13143:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb65_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1456} $i53 := __VERIFIER_nondet_int();
    call {:si_unique_call 1457} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i53);
    call {:si_unique_call 1458} {:cexpr "tmp___6"} boogie_si_record_i32($i53);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 601233);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13452;

  corral_source_split_13452:
    assume {:verifier.code 0} true;
    return;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 602265);

procedure work_init_1();
  free requires assertsPassed;
  modifies $M.61, $M.63, $M.65, $M.67;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13454;

  corral_source_split_13454:
    assume {:verifier.code 0} true;
    $M.61 := 0;
    call {:si_unique_call 1544} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_13455;

  corral_source_split_13455:
    assume {:verifier.code 0} true;
    $M.63 := 0;
    call {:si_unique_call 1545} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_13456;

  corral_source_split_13456:
    assume {:verifier.code 0} true;
    $M.65 := 0;
    call {:si_unique_call 1546} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_13457;

  corral_source_split_13457:
    assume {:verifier.code 0} true;
    $M.67 := 0;
    call {:si_unique_call 1547} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_13458;

  corral_source_split_13458:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 603297);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13460;

  corral_source_split_13460:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const fbmem_exit: ref;

axiom fbmem_exit == $sub.ref(0, 604329);

procedure fbmem_exit();
  free requires assertsPassed;
  modifies $M.79;



implementation fbmem_exit()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13462;

  corral_source_split_13462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} remove_proc_entry(.str.1, $0.ref);
    goto corral_source_split_13463;

  corral_source_split_13463:
    assume {:verifier.code 0} true;
    $p0 := $M.20;
    goto corral_source_split_13464;

  corral_source_split_13464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} class_destroy($p0);
    goto corral_source_split_13465;

  corral_source_split_13465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} ldv_unregister_chrdev_15(29, .str.1);
    goto corral_source_split_13466;

  corral_source_split_13466:
    assume {:verifier.code 0} true;
    return;
}



const fbmem_init: ref;

axiom fbmem_init == $sub.ref(0, 605361);

procedure fbmem_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.79, $M.77, $M.78, $CurrAddr, $M.0;



implementation fbmem_init() returns ($r: i32)
{
  var $p0: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var vslice_dummy_var_198: ref;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_13468;

  corral_source_split_13468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} vslice_dummy_var_198 := proc_create(.str.1, 0, $0.ref, fb_proc_fops);
    goto corral_source_split_13469;

  corral_source_split_13469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} $i2 := ldv_register_chrdev_14(29, .str.1, fb_fops);
    call {:si_unique_call 1554} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_13470;

  corral_source_split_13470:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_13471;

  corral_source_split_13471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} $p5 := __class_create(__this_module, .str.35, $p0);
    goto corral_source_split_13476;

  corral_source_split_13476:
    assume {:verifier.code 0} true;
    $M.20 := $p5;
    goto corral_source_split_13477;

  corral_source_split_13477:
    assume {:verifier.code 0} true;
    $p6 := $M.20;
    goto corral_source_split_13478;

  corral_source_split_13478:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_13479;

  corral_source_split_13479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} $i8 := IS_ERR($p7);
    goto corral_source_split_13480;

  corral_source_split_13480:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 1558} {:cexpr "tmp___2"} boogie_si_record_i8($i9);
    goto corral_source_split_13481;

  corral_source_split_13481:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_13482;

  corral_source_split_13482:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_13484;

  corral_source_split_13484:
    assume {:verifier.code 0} true;
    $p11 := $M.20;
    goto corral_source_split_13485;

  corral_source_split_13485:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_13486;

  corral_source_split_13486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} $i13 := PTR_ERR($p12);
    call {:si_unique_call 1560} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_13487;

  corral_source_split_13487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} vslice_dummy_var_200 := printk.ref.i64(.str.36, $i13);
    goto corral_source_split_13488;

  corral_source_split_13488:
    assume {:verifier.code 0} true;
    $M.20 := $0.ref;
    goto corral_source_split_13489;

  corral_source_split_13489:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_13473;

  corral_source_split_13473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} vslice_dummy_var_199 := printk.ref.i32(.str.34, 29);
    goto corral_source_split_13474;

  corral_source_split_13474:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_initialize_vm_operations_struct_3: ref;

axiom ldv_initialize_vm_operations_struct_3 == $sub.ref(0, 606393);

procedure ldv_initialize_vm_operations_struct_3();
  free requires assertsPassed;
  modifies $M.95, $M.96, $M.0, $CurrAddr;



implementation ldv_initialize_vm_operations_struct_3()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13491;

  corral_source_split_13491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} $p0 := ldv_init_zalloc(56);
    goto corral_source_split_13492;

  corral_source_split_13492:
    assume {:verifier.code 0} true;
    goto corral_source_split_13493;

  corral_source_split_13493:
    assume {:verifier.code 0} true;
    $M.95 := $p0;
    goto corral_source_split_13494;

  corral_source_split_13494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} $p2 := ldv_init_zalloc(184);
    goto corral_source_split_13495;

  corral_source_split_13495:
    assume {:verifier.code 0} true;
    goto corral_source_split_13496;

  corral_source_split_13496:
    assume {:verifier.code 0} true;
    $M.96 := $p2;
    goto corral_source_split_13497;

  corral_source_split_13497:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_3: ref;

axiom ldv_main_exported_3 == $sub.ref(0, 607425);

procedure ldv_main_exported_3();
  free requires assertsPassed;
  modifies $M.0, $M.83, $M.81, $M.11, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.46, $CurrAddr, $M.62, $M.64, $M.66, $M.68;



implementation ldv_main_exported_3()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i21: i32;
  var $i22: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i29: i32;
  var $i30: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13499;

  corral_source_split_13499:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1564} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1565} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1566} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} ldv_stop();
    goto corral_source_split_13552;

  corral_source_split_13552:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_13505;

  corral_source_split_13505:
    assume {:verifier.code 0} true;
    $i26 := $M.83;
    goto corral_source_split_13506;

  corral_source_split_13506:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_13507;

  corral_source_split_13507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i27 == 1;
    goto corral_source_split_13545;

  corral_source_split_13545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} vslice_dummy_var_205 := ldv_probe_3();
    goto corral_source_split_13546;

  corral_source_split_13546:
    assume {:verifier.code 0} true;
    $M.83 := 2;
    call {:si_unique_call 1577} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_13547;

  corral_source_split_13547:
    assume {:verifier.code 0} true;
    $i29 := $M.81;
    goto corral_source_split_13548;

  corral_source_split_13548:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 1);
    goto corral_source_split_13549;

  corral_source_split_13549:
    assume {:verifier.code 0} true;
    $M.81 := $i30;
    call {:si_unique_call 1578} {:cexpr "ref_cnt"} boogie_si_record_i32($i30);
    goto corral_source_split_13550;

  corral_source_split_13550:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_13501;

  corral_source_split_13501:
    assume {:verifier.code 0} true;
    $i21 := $M.83;
    goto corral_source_split_13502;

  corral_source_split_13502:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_13503;

  corral_source_split_13503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i22 == 1;
    goto corral_source_split_13538;

  corral_source_split_13538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} vslice_dummy_var_204 := ldv_release_3();
    goto corral_source_split_13539;

  corral_source_split_13539:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1574} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_13540;

  corral_source_split_13540:
    assume {:verifier.code 0} true;
    $i24 := $M.81;
    goto corral_source_split_13541;

  corral_source_split_13541:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i24, 1);
    goto corral_source_split_13542;

  corral_source_split_13542:
    assume {:verifier.code 0} true;
    $M.81 := $i25;
    call {:si_unique_call 1575} {:cexpr "ref_cnt"} boogie_si_record_i32($i25);
    goto corral_source_split_13543;

  corral_source_split_13543:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_13509;

  corral_source_split_13509:
    assume {:verifier.code 0} true;
    $i16 := $M.83;
    goto corral_source_split_13510;

  corral_source_split_13510:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_13511;

  corral_source_split_13511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i17 == 1;
    goto corral_source_split_13532;

  corral_source_split_13532:
    assume {:verifier.code 0} true;
    $p18 := $M.96;
    goto corral_source_split_13533;

  corral_source_split_13533:
    assume {:verifier.code 0} true;
    $p19 := $M.95;
    goto corral_source_split_13534;

  corral_source_split_13534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} vslice_dummy_var_203 := fb_deferred_io_mkwrite($p18, $p19);
    goto corral_source_split_13535;

  corral_source_split_13535:
    assume {:verifier.code 0} true;
    $M.83 := 2;
    call {:si_unique_call 1572} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_13536;

  corral_source_split_13536:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_13513;

  corral_source_split_13513:
    assume {:verifier.code 0} true;
    $i6 := $M.83;
    goto corral_source_split_13514;

  corral_source_split_13514:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_13515;

  corral_source_split_13515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i11 := $M.83;
    goto corral_source_split_13523;

  corral_source_split_13523:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_13524;

  corral_source_split_13524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i12 == 1;
    goto corral_source_split_13526;

  corral_source_split_13526:
    assume {:verifier.code 0} true;
    $p13 := $M.96;
    goto corral_source_split_13527;

  corral_source_split_13527:
    assume {:verifier.code 0} true;
    $p14 := $M.95;
    goto corral_source_split_13528;

  corral_source_split_13528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} vslice_dummy_var_202 := fb_deferred_io_fault($p13, $p14);
    goto corral_source_split_13529;

  corral_source_split_13529:
    assume {:verifier.code 0} true;
    $M.83 := 2;
    call {:si_unique_call 1570} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_13530;

  corral_source_split_13530:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_13517;

  corral_source_split_13517:
    assume {:verifier.code 0} true;
    $p8 := $M.96;
    goto corral_source_split_13518;

  corral_source_split_13518:
    assume {:verifier.code 0} true;
    $p9 := $M.95;
    goto corral_source_split_13519;

  corral_source_split_13519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} vslice_dummy_var_201 := fb_deferred_io_fault($p8, $p9);
    goto corral_source_split_13520;

  corral_source_split_13520:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1568} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_13521;

  corral_source_split_13521:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const ldv_main_exported_2: ref;

axiom ldv_main_exported_2 == $sub.ref(0, 608457);

procedure ldv_main_exported_2();
  free requires assertsPassed;
  modifies $M.84, $M.0, $CurrAddr;



implementation ldv_main_exported_2()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var vslice_dummy_var_206: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13554;

  corral_source_split_13554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} $p0 := ldv_init_zalloc(64);
    goto corral_source_split_13555;

  corral_source_split_13555:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_13556;

  corral_source_split_13556:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1581} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1582} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1583} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} ldv_stop();
    goto corral_source_split_13566;

  corral_source_split_13566:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i3 == 1;
    goto corral_source_split_13558;

  corral_source_split_13558:
    assume {:verifier.code 0} true;
    $i4 := $M.84;
    goto corral_source_split_13559;

  corral_source_split_13559:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_13560;

  corral_source_split_13560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_13562;

  corral_source_split_13562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} vslice_dummy_var_206 := fb_deferred_io_set_page_dirty($p1);
    goto corral_source_split_13563;

  corral_source_split_13563:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1585} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_13564;

  corral_source_split_13564:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_seq_release_16: ref;

axiom ldv_seq_release_16 == $sub.ref(0, 609489);

procedure ldv_seq_release_16($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.70;



implementation ldv_seq_release_16($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13568;

  corral_source_split_13568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} $i2 := seq_release($p0, $p1);
    call {:si_unique_call 1588} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_13569;

  corral_source_split_13569:
    assume {:verifier.code 0} true;
    $M.70 := 0;
    call {:si_unique_call 1589} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_13570;

  corral_source_split_13570:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 610521);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13572;

  corral_source_split_13572:
    assume {:verifier.code 0} true;
    $i0 := $M.72;
    goto corral_source_split_13573;

  corral_source_split_13573:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_13574;

  corral_source_split_13574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_13576;

  corral_source_split_13576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} ldv_error();
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_13577;

  corral_source_split_13577:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const ldv_release_3: ref;

axiom ldv_release_3 == $sub.ref(0, 611553);

procedure ldv_release_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13579;

  corral_source_split_13579:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1591} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1592} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_13580;

  corral_source_split_13580:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_3: ref;

axiom ldv_probe_3 == $sub.ref(0, 612585);

procedure ldv_probe_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13582;

  corral_source_split_13582:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1593} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1594} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_13583;

  corral_source_split_13583:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const proc_create: ref;

axiom proc_create == $sub.ref(0, 613617);

procedure proc_create($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_create($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $i4: i32;
  var $i5: i16;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} {:cexpr "proc_create:arg:mode"} boogie_si_record_i16($i1);
    goto corral_source_split_13585;

  corral_source_split_13585:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i1);
    goto corral_source_split_13586;

  corral_source_split_13586:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_13587;

  corral_source_split_13587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} $p6 := proc_create_data($p0, $i5, $p2, $p3, $0.ref);
    goto corral_source_split_13588;

  corral_source_split_13588:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ldv_register_chrdev_14: ref;

axiom ldv_register_chrdev_14 == $sub.ref(0, 614649);

procedure ldv_register_chrdev_14($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.79, $M.77, $M.78, $M.0, $CurrAddr;



implementation ldv_register_chrdev_14($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} {:cexpr "ldv_register_chrdev_14:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_13590;

  corral_source_split_13590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} $i3 := register_chrdev($i0, $p1, $p2);
    call {:si_unique_call 1599} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_13591;

  corral_source_split_13591:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1600} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_13592;

  corral_source_split_13592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} ldv_file_operations_4();
    goto corral_source_split_13593;

  corral_source_split_13593:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __class_create: ref;

axiom __class_create == $sub.ref(0, 615681);

procedure __class_create($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __class_create($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13595;

  corral_source_split_13595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} $p3 := external_alloc();
    goto corral_source_split_13596;

  corral_source_split_13596:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_13597;

  corral_source_split_13597:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const register_chrdev: ref;

axiom register_chrdev == $sub.ref(0, 616713);

procedure register_chrdev($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_chrdev($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} {:cexpr "register_chrdev:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_13599;

  corral_source_split_13599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} $i3 := __register_chrdev($i0, 0, 256, $p1, $p2);
    call {:si_unique_call 1605} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_13600;

  corral_source_split_13600:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __register_chrdev: ref;

axiom __register_chrdev == $sub.ref(0, 617745);

procedure __register_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __register_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1606} {:cexpr "__register_chrdev:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1607} {:cexpr "__register_chrdev:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1608} {:cexpr "__register_chrdev:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_13602;

  corral_source_split_13602:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1609} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1610} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_13603;

  corral_source_split_13603:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const proc_create_data: ref;

axiom proc_create_data == $sub.ref(0, 618777);

procedure proc_create_data($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_create_data($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} {:cexpr "proc_create_data:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_13605;

  corral_source_split_13605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} $p5 := external_alloc();
    goto corral_source_split_13606;

  corral_source_split_13606:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_13607;

  corral_source_split_13607:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const remove_proc_entry: ref;

axiom remove_proc_entry == $sub.ref(0, 619809);

procedure remove_proc_entry($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation remove_proc_entry($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13609;

  corral_source_split_13609:
    assume {:verifier.code 0} true;
    return;
}



const class_destroy: ref;

axiom class_destroy == $sub.ref(0, 620841);

procedure class_destroy($p0: ref);
  free requires assertsPassed;



implementation class_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13611;

  corral_source_split_13611:
    assume {:verifier.code 0} true;
    return;
}



const ldv_unregister_chrdev_15: ref;

axiom ldv_unregister_chrdev_15 == $sub.ref(0, 621873);

procedure ldv_unregister_chrdev_15($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.79;



implementation ldv_unregister_chrdev_15($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} {:cexpr "ldv_unregister_chrdev_15:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_13613;

  corral_source_split_13613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} unregister_chrdev($i0, $p1);
    goto corral_source_split_13614;

  corral_source_split_13614:
    assume {:verifier.code 0} true;
    $M.79 := 0;
    call {:si_unique_call 1615} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_13615;

  corral_source_split_13615:
    assume {:verifier.code 0} true;
    return;
}



const unregister_chrdev: ref;

axiom unregister_chrdev == $sub.ref(0, 622905);

procedure unregister_chrdev($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation unregister_chrdev($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} {:cexpr "unregister_chrdev:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_13617;

  corral_source_split_13617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} __unregister_chrdev($i0, 0, 256, $p1);
    goto corral_source_split_13618;

  corral_source_split_13618:
    assume {:verifier.code 0} true;
    return;
}



const __unregister_chrdev: ref;

axiom __unregister_chrdev == $sub.ref(0, 623937);

procedure __unregister_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __unregister_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} {:cexpr "__unregister_chrdev:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1619} {:cexpr "__unregister_chrdev:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1620} {:cexpr "__unregister_chrdev:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_13620;

  corral_source_split_13620:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 624969);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1621} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_13622;

  corral_source_split_13622:
    assume {:verifier.code 1} true;
    goto corral_source_split_13623;

  corral_source_split_13623:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_13624;

  corral_source_split_13624:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 626001);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 627033);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 628065);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13626;

  corral_source_split_13626:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_13627;

  corral_source_split_13627:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 629097);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 630129);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 631161);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 632193);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 633225);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 634257);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 635289);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 636321);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 637353);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 638385);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13629;

  corral_source_split_13629:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1622} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1623} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1624} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_13630;

  corral_source_split_13630:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_13631;

  corral_source_split_13631:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_13635;

  corral_source_split_13635:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_13636;

  corral_source_split_13636:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1625} __VERIFIER_assume($i4);
    goto corral_source_split_13637;

  corral_source_split_13637:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_13633;

  corral_source_split_13633:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 639417);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 640449);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 641481);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 642513);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 643545);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13639;

  corral_source_split_13639:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1626} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1627} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1628} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_13640;

  corral_source_split_13640:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_13641;

  corral_source_split_13641:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_13645;

  corral_source_split_13645:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_13646;

  corral_source_split_13646:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1629} __VERIFIER_assume($i4);
    goto corral_source_split_13647;

  corral_source_split_13647:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_13643;

  corral_source_split_13643:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 644577);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 645609);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 646641);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 647673);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 648705);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13649;

  corral_source_split_13649:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1630} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1631} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1632} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_13650;

  corral_source_split_13650:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1633} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1634} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1635} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_13651;

  corral_source_split_13651:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1636} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1637} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1638} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_13652;

  corral_source_split_13652:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_13653;

  corral_source_split_13653:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_13658;

  corral_source_split_13658:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_13659;

  corral_source_split_13659:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1639} __VERIFIER_assume($i7);
    goto corral_source_split_13660;

  corral_source_split_13660:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_13661;

  corral_source_split_13661:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_13667;

  corral_source_split_13667:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_13668;

  corral_source_split_13668:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1640} __VERIFIER_assume($i11);
    goto corral_source_split_13669;

  corral_source_split_13669:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_13665;

  corral_source_split_13665:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_13655;

  corral_source_split_13655:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_13656;

  corral_source_split_13656:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_13663;

  corral_source_split_13663:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 649737);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 650769);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 651801);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 652833);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 653865);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 654897);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 655929);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 656961);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 657993);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13671;

  corral_source_split_13671:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1641} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1642} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_13672;

  corral_source_split_13672:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_13673;

  corral_source_split_13673:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1643} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_13674;

  corral_source_split_13674:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_13675;

  corral_source_split_13675:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_13676;

  corral_source_split_13676:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_13677;

  corral_source_split_13677:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_13684;

  corral_source_split_13684:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_13685;

  corral_source_split_13685:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_13686;

  corral_source_split_13686:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_13687;

  corral_source_split_13687:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_13679;

  corral_source_split_13679:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_13680;

  corral_source_split_13680:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1644} __VERIFIER_assume($i10);
    goto corral_source_split_13681;

  corral_source_split_13681:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_13682;

  corral_source_split_13682:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 659025);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13689;

  corral_source_split_13689:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1645} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1646} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1647} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_13690;

  corral_source_split_13690:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 660057);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13692;

  corral_source_split_13692:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1648} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1649} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_13693;

  corral_source_split_13693:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 661089);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 662121);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1650} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1651} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 663153);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 664185);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13695;

  corral_source_split_13695:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_13696;

  corral_source_split_13696:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 665217);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_125: [ref]i8;
  var cmdloc_dummy_var_126: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1652} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1653} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_13698;

  corral_source_split_13698:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1654} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1655} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_13699;

  corral_source_split_13699:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_13700;

  corral_source_split_13700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_13704;

  corral_source_split_13704:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_13705;

  corral_source_split_13705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} $p6 := malloc($i5);
    goto corral_source_split_13706;

  corral_source_split_13706:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_13707;

  corral_source_split_13707:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_125 := $M.0;
    call {:si_unique_call 1657} cmdloc_dummy_var_126 := $memset.i8(cmdloc_dummy_var_125, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_126;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13709;

  corral_source_split_13709:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_13702;

  corral_source_split_13702:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 666249);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 667281);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.19, $M.100, $M.21, $M.103, $M.106, $M.107, $M.108, $M.0, $M.109, $M.110, $M.60, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.58, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.47, $M.204, $M.205, $M.206, $M.207, $M.208, $M.209, $M.210, $M.211, $M.212, $M.213, $M.214, $M.215, $M.216, $M.217, $M.218, $M.90, $M.91, $M.87, $M.94, $M.89, $M.10, $M.20, $M.79, $M.61, $M.81, $M.83, $M.66, $M.95, $M.65, $M.71, $M.92, $M.84, $M.63, $M.86, $M.85, $M.82, $M.70, $M.67, $M.78, $M.93, $M.68, $M.96, $M.77, $M.64, $M.88, $M.62, $M.72, $M.253, $M.254, $M.255, $M.48, $M.29, $M.324, $M.325, $M.326, $M.327, $M.328, $M.329, $M.330, $M.331, $M.332, $M.333, $M.334, $M.335, $M.336, $M.337, $M.338;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1658} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.19 := $store.ref($M.19, registered_fb, $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(1, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(2, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(3, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(4, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(5, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(6, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(7, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(8, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(9, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(10, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(11, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(12, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(13, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(14, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(15, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(16, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(17, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(18, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(19, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(20, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(21, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(22, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(23, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(24, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(25, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(26, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(27, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(28, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(29, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(30, 8)), $0.ref);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(31, 8)), $0.ref);
    $M.100 := $store.i8($M.100, __kstrtab_registered_fb, 114);
    $M.100 := $store.i8($M.100, $add.ref($add.ref(__kstrtab_registered_fb, $mul.ref(0, 14)), $mul.ref(1, 1)), 101);
    $M.100 := $store.i8($M.100, $add.ref($add.ref(__kstrtab_registered_fb, $mul.ref(0, 14)), $mul.ref(2, 1)), 103);
    $M.100 := $store.i8($M.100, $add.ref($add.ref(__kstrtab_registered_fb, $mul.ref(0, 14)), $mul.ref(3, 1)), 105);
    $M.100 := $store.i8($M.100, $add.ref($add.ref(__kstrtab_registered_fb, $mul.ref(0, 14)), $mul.ref(4, 1)), 115);
    $M.100 := $store.i8($M.100, $add.ref($add.ref(__kstrtab_registered_fb, $mul.ref(0, 14)), $mul.ref(5, 1)), 116);
    $M.100 := $store.i8($M.100, $add.ref($add.ref(__kstrtab_registered_fb, $mul.ref(0, 14)), $mul.ref(6, 1)), 101);
    $M.100 := $store.i8($M.100, $add.ref($add.ref(__kstrtab_registered_fb, $mul.ref(0, 14)), $mul.ref(7, 1)), 114);
    $M.100 := $store.i8($M.100, $add.ref($add.ref(__kstrtab_registered_fb, $mul.ref(0, 14)), $mul.ref(8, 1)), 101);
    $M.100 := $store.i8($M.100, $add.ref($add.ref(__kstrtab_registered_fb, $mul.ref(0, 14)), $mul.ref(9, 1)), 100);
    $M.100 := $store.i8($M.100, $add.ref($add.ref(__kstrtab_registered_fb, $mul.ref(0, 14)), $mul.ref(10, 1)), 95);
    $M.100 := $store.i8($M.100, $add.ref($add.ref(__kstrtab_registered_fb, $mul.ref(0, 14)), $mul.ref(11, 1)), 102);
    $M.100 := $store.i8($M.100, $add.ref($add.ref(__kstrtab_registered_fb, $mul.ref(0, 14)), $mul.ref(12, 1)), 98);
    $M.100 := $store.i8($M.100, $add.ref($add.ref(__kstrtab_registered_fb, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.21 := 0;
    call {:si_unique_call 1659} {:cexpr "num_registered_fb"} boogie_si_record_i32(0);
    $M.103 := $store.i8($M.103, __kstrtab_num_registered_fb, 110);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_num_registered_fb, $mul.ref(0, 18)), $mul.ref(1, 1)), 117);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_num_registered_fb, $mul.ref(0, 18)), $mul.ref(2, 1)), 109);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_num_registered_fb, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_num_registered_fb, $mul.ref(0, 18)), $mul.ref(4, 1)), 114);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_num_registered_fb, $mul.ref(0, 18)), $mul.ref(5, 1)), 101);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_num_registered_fb, $mul.ref(0, 18)), $mul.ref(6, 1)), 103);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_num_registered_fb, $mul.ref(0, 18)), $mul.ref(7, 1)), 105);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_num_registered_fb, $mul.ref(0, 18)), $mul.ref(8, 1)), 115);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_num_registered_fb, $mul.ref(0, 18)), $mul.ref(9, 1)), 116);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_num_registered_fb, $mul.ref(0, 18)), $mul.ref(10, 1)), 101);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_num_registered_fb, $mul.ref(0, 18)), $mul.ref(11, 1)), 114);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_num_registered_fb, $mul.ref(0, 18)), $mul.ref(12, 1)), 101);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_num_registered_fb, $mul.ref(0, 18)), $mul.ref(13, 1)), 100);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_num_registered_fb, $mul.ref(0, 18)), $mul.ref(14, 1)), 95);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_num_registered_fb, $mul.ref(0, 18)), $mul.ref(15, 1)), 102);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_num_registered_fb, $mul.ref(0, 18)), $mul.ref(16, 1)), 98);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_num_registered_fb, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.106 := $store.i8($M.106, __kstrtab_lock_fb_info, 108);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(__kstrtab_lock_fb_info, $mul.ref(0, 13)), $mul.ref(1, 1)), 111);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(__kstrtab_lock_fb_info, $mul.ref(0, 13)), $mul.ref(2, 1)), 99);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(__kstrtab_lock_fb_info, $mul.ref(0, 13)), $mul.ref(3, 1)), 107);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(__kstrtab_lock_fb_info, $mul.ref(0, 13)), $mul.ref(4, 1)), 95);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(__kstrtab_lock_fb_info, $mul.ref(0, 13)), $mul.ref(5, 1)), 102);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(__kstrtab_lock_fb_info, $mul.ref(0, 13)), $mul.ref(6, 1)), 98);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(__kstrtab_lock_fb_info, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(__kstrtab_lock_fb_info, $mul.ref(0, 13)), $mul.ref(8, 1)), 105);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(__kstrtab_lock_fb_info, $mul.ref(0, 13)), $mul.ref(9, 1)), 110);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(__kstrtab_lock_fb_info, $mul.ref(0, 13)), $mul.ref(10, 1)), 102);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(__kstrtab_lock_fb_info, $mul.ref(0, 13)), $mul.ref(11, 1)), 111);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(__kstrtab_lock_fb_info, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.107 := $store.i8($M.107, __kstrtab_fb_deferred_io_cleanup, 102);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_fb_deferred_io_cleanup, $mul.ref(0, 23)), $mul.ref(1, 1)), 98);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_fb_deferred_io_cleanup, $mul.ref(0, 23)), $mul.ref(2, 1)), 95);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_fb_deferred_io_cleanup, $mul.ref(0, 23)), $mul.ref(3, 1)), 100);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_fb_deferred_io_cleanup, $mul.ref(0, 23)), $mul.ref(4, 1)), 101);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_fb_deferred_io_cleanup, $mul.ref(0, 23)), $mul.ref(5, 1)), 102);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_fb_deferred_io_cleanup, $mul.ref(0, 23)), $mul.ref(6, 1)), 101);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_fb_deferred_io_cleanup, $mul.ref(0, 23)), $mul.ref(7, 1)), 114);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_fb_deferred_io_cleanup, $mul.ref(0, 23)), $mul.ref(8, 1)), 114);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_fb_deferred_io_cleanup, $mul.ref(0, 23)), $mul.ref(9, 1)), 101);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_fb_deferred_io_cleanup, $mul.ref(0, 23)), $mul.ref(10, 1)), 100);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_fb_deferred_io_cleanup, $mul.ref(0, 23)), $mul.ref(11, 1)), 95);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_fb_deferred_io_cleanup, $mul.ref(0, 23)), $mul.ref(12, 1)), 105);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_fb_deferred_io_cleanup, $mul.ref(0, 23)), $mul.ref(13, 1)), 111);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_fb_deferred_io_cleanup, $mul.ref(0, 23)), $mul.ref(14, 1)), 95);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_fb_deferred_io_cleanup, $mul.ref(0, 23)), $mul.ref(15, 1)), 99);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_fb_deferred_io_cleanup, $mul.ref(0, 23)), $mul.ref(16, 1)), 108);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_fb_deferred_io_cleanup, $mul.ref(0, 23)), $mul.ref(17, 1)), 101);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_fb_deferred_io_cleanup, $mul.ref(0, 23)), $mul.ref(18, 1)), 97);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_fb_deferred_io_cleanup, $mul.ref(0, 23)), $mul.ref(19, 1)), 110);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_fb_deferred_io_cleanup, $mul.ref(0, 23)), $mul.ref(20, 1)), 117);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_fb_deferred_io_cleanup, $mul.ref(0, 23)), $mul.ref(21, 1)), 112);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_fb_deferred_io_cleanup, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.108 := $store.i8($M.108, __kstrtab_fb_deferred_io_open, 102);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_fb_deferred_io_open, $mul.ref(0, 20)), $mul.ref(1, 1)), 98);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_fb_deferred_io_open, $mul.ref(0, 20)), $mul.ref(2, 1)), 95);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_fb_deferred_io_open, $mul.ref(0, 20)), $mul.ref(3, 1)), 100);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_fb_deferred_io_open, $mul.ref(0, 20)), $mul.ref(4, 1)), 101);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_fb_deferred_io_open, $mul.ref(0, 20)), $mul.ref(5, 1)), 102);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_fb_deferred_io_open, $mul.ref(0, 20)), $mul.ref(6, 1)), 101);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_fb_deferred_io_open, $mul.ref(0, 20)), $mul.ref(7, 1)), 114);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_fb_deferred_io_open, $mul.ref(0, 20)), $mul.ref(8, 1)), 114);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_fb_deferred_io_open, $mul.ref(0, 20)), $mul.ref(9, 1)), 101);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_fb_deferred_io_open, $mul.ref(0, 20)), $mul.ref(10, 1)), 100);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_fb_deferred_io_open, $mul.ref(0, 20)), $mul.ref(11, 1)), 95);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_fb_deferred_io_open, $mul.ref(0, 20)), $mul.ref(12, 1)), 105);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_fb_deferred_io_open, $mul.ref(0, 20)), $mul.ref(13, 1)), 111);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_fb_deferred_io_open, $mul.ref(0, 20)), $mul.ref(14, 1)), 95);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_fb_deferred_io_open, $mul.ref(0, 20)), $mul.ref(15, 1)), 111);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_fb_deferred_io_open, $mul.ref(0, 20)), $mul.ref(16, 1)), 112);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_fb_deferred_io_open, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_fb_deferred_io_open, $mul.ref(0, 20)), $mul.ref(18, 1)), 110);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_fb_deferred_io_open, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.ref($M.0, fb_deferred_io_aops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_aops, $mul.ref(0, 152)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_aops, $mul.ref(0, 152)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_aops, $mul.ref(0, 152)), $mul.ref(24, 1)), fb_deferred_io_set_page_dirty);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_aops, $mul.ref(0, 152)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_aops, $mul.ref(0, 152)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_aops, $mul.ref(0, 152)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_aops, $mul.ref(0, 152)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_aops, $mul.ref(0, 152)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_aops, $mul.ref(0, 152)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_aops, $mul.ref(0, 152)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_aops, $mul.ref(0, 152)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_aops, $mul.ref(0, 152)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_aops, $mul.ref(0, 152)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_aops, $mul.ref(0, 152)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_aops, $mul.ref(0, 152)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_aops, $mul.ref(0, 152)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_aops, $mul.ref(0, 152)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_aops, $mul.ref(0, 152)), $mul.ref(144, 1)), $0.ref);
    $M.109 := $store.i8($M.109, __kstrtab_fb_deferred_io_init, 102);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_fb_deferred_io_init, $mul.ref(0, 20)), $mul.ref(1, 1)), 98);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_fb_deferred_io_init, $mul.ref(0, 20)), $mul.ref(2, 1)), 95);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_fb_deferred_io_init, $mul.ref(0, 20)), $mul.ref(3, 1)), 100);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_fb_deferred_io_init, $mul.ref(0, 20)), $mul.ref(4, 1)), 101);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_fb_deferred_io_init, $mul.ref(0, 20)), $mul.ref(5, 1)), 102);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_fb_deferred_io_init, $mul.ref(0, 20)), $mul.ref(6, 1)), 101);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_fb_deferred_io_init, $mul.ref(0, 20)), $mul.ref(7, 1)), 114);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_fb_deferred_io_init, $mul.ref(0, 20)), $mul.ref(8, 1)), 114);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_fb_deferred_io_init, $mul.ref(0, 20)), $mul.ref(9, 1)), 101);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_fb_deferred_io_init, $mul.ref(0, 20)), $mul.ref(10, 1)), 100);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_fb_deferred_io_init, $mul.ref(0, 20)), $mul.ref(11, 1)), 95);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_fb_deferred_io_init, $mul.ref(0, 20)), $mul.ref(12, 1)), 105);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_fb_deferred_io_init, $mul.ref(0, 20)), $mul.ref(13, 1)), 111);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_fb_deferred_io_init, $mul.ref(0, 20)), $mul.ref(14, 1)), 95);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_fb_deferred_io_init, $mul.ref(0, 20)), $mul.ref(15, 1)), 105);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_fb_deferred_io_init, $mul.ref(0, 20)), $mul.ref(16, 1)), 110);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_fb_deferred_io_init, $mul.ref(0, 20)), $mul.ref(17, 1)), 105);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_fb_deferred_io_init, $mul.ref(0, 20)), $mul.ref(18, 1)), 116);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_fb_deferred_io_init, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.ref($M.0, fb_deferred_io_vm_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_vm_ops, $mul.ref(0, 88)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_vm_ops, $mul.ref(0, 88)), $mul.ref(16, 1)), fb_deferred_io_fault);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_vm_ops, $mul.ref(0, 88)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_vm_ops, $mul.ref(0, 88)), $mul.ref(32, 1)), fb_deferred_io_mkwrite);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_vm_ops, $mul.ref(0, 88)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_vm_ops, $mul.ref(0, 88)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_vm_ops, $mul.ref(0, 88)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_vm_ops, $mul.ref(0, 88)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_vm_ops, $mul.ref(0, 88)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fb_deferred_io_vm_ops, $mul.ref(0, 88)), $mul.ref(80, 1)), $0.ref);
    $M.110 := $store.i8($M.110, __kstrtab_fb_deferred_io_fsync, 102);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_fb_deferred_io_fsync, $mul.ref(0, 21)), $mul.ref(1, 1)), 98);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_fb_deferred_io_fsync, $mul.ref(0, 21)), $mul.ref(2, 1)), 95);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_fb_deferred_io_fsync, $mul.ref(0, 21)), $mul.ref(3, 1)), 100);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_fb_deferred_io_fsync, $mul.ref(0, 21)), $mul.ref(4, 1)), 101);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_fb_deferred_io_fsync, $mul.ref(0, 21)), $mul.ref(5, 1)), 102);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_fb_deferred_io_fsync, $mul.ref(0, 21)), $mul.ref(6, 1)), 101);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_fb_deferred_io_fsync, $mul.ref(0, 21)), $mul.ref(7, 1)), 114);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_fb_deferred_io_fsync, $mul.ref(0, 21)), $mul.ref(8, 1)), 114);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_fb_deferred_io_fsync, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_fb_deferred_io_fsync, $mul.ref(0, 21)), $mul.ref(10, 1)), 100);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_fb_deferred_io_fsync, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_fb_deferred_io_fsync, $mul.ref(0, 21)), $mul.ref(12, 1)), 105);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_fb_deferred_io_fsync, $mul.ref(0, 21)), $mul.ref(13, 1)), 111);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_fb_deferred_io_fsync, $mul.ref(0, 21)), $mul.ref(14, 1)), 95);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_fb_deferred_io_fsync, $mul.ref(0, 21)), $mul.ref(15, 1)), 102);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_fb_deferred_io_fsync, $mul.ref(0, 21)), $mul.ref(16, 1)), 115);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_fb_deferred_io_fsync, $mul.ref(0, 21)), $mul.ref(17, 1)), 121);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_fb_deferred_io_fsync, $mul.ref(0, 21)), $mul.ref(18, 1)), 110);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_fb_deferred_io_fsync, $mul.ref(0, 21)), $mul.ref(19, 1)), 99);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_fb_deferred_io_fsync, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.60 := $store.i8($M.60, fb_cvt_vbi_tab, 4);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(fb_cvt_vbi_tab, $mul.ref(0, 8)), $mul.ref(1, 1)), 5);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(fb_cvt_vbi_tab, $mul.ref(0, 8)), $mul.ref(2, 1)), 6);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(fb_cvt_vbi_tab, $mul.ref(0, 8)), $mul.ref(3, 1)), 7);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(fb_cvt_vbi_tab, $mul.ref(0, 8)), $mul.ref(4, 1)), 7);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(fb_cvt_vbi_tab, $mul.ref(0, 8)), $mul.ref(5, 1)), 8);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(fb_cvt_vbi_tab, $mul.ref(0, 8)), $mul.ref(6, 1)), 9);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(fb_cvt_vbi_tab, $mul.ref(0, 8)), $mul.ref(7, 1)), 10);
    $M.111 := $store.i8($M.111, __kstrtab_fb_find_mode_cvt, 102);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_fb_find_mode_cvt, $mul.ref(0, 17)), $mul.ref(1, 1)), 98);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_fb_find_mode_cvt, $mul.ref(0, 17)), $mul.ref(2, 1)), 95);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_fb_find_mode_cvt, $mul.ref(0, 17)), $mul.ref(3, 1)), 102);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_fb_find_mode_cvt, $mul.ref(0, 17)), $mul.ref(4, 1)), 105);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_fb_find_mode_cvt, $mul.ref(0, 17)), $mul.ref(5, 1)), 110);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_fb_find_mode_cvt, $mul.ref(0, 17)), $mul.ref(6, 1)), 100);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_fb_find_mode_cvt, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_fb_find_mode_cvt, $mul.ref(0, 17)), $mul.ref(8, 1)), 109);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_fb_find_mode_cvt, $mul.ref(0, 17)), $mul.ref(9, 1)), 111);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_fb_find_mode_cvt, $mul.ref(0, 17)), $mul.ref(10, 1)), 100);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_fb_find_mode_cvt, $mul.ref(0, 17)), $mul.ref(11, 1)), 101);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_fb_find_mode_cvt, $mul.ref(0, 17)), $mul.ref(12, 1)), 95);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_fb_find_mode_cvt, $mul.ref(0, 17)), $mul.ref(13, 1)), 99);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_fb_find_mode_cvt, $mul.ref(0, 17)), $mul.ref(14, 1)), 118);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_fb_find_mode_cvt, $mul.ref(0, 17)), $mul.ref(15, 1)), 116);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_fb_find_mode_cvt, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.112 := $store.i8($M.112, __kstrtab_fb_find_mode, 102);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_fb_find_mode, $mul.ref(0, 13)), $mul.ref(1, 1)), 98);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_fb_find_mode, $mul.ref(0, 13)), $mul.ref(2, 1)), 95);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_fb_find_mode, $mul.ref(0, 13)), $mul.ref(3, 1)), 102);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_fb_find_mode, $mul.ref(0, 13)), $mul.ref(4, 1)), 105);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_fb_find_mode, $mul.ref(0, 13)), $mul.ref(5, 1)), 110);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_fb_find_mode, $mul.ref(0, 13)), $mul.ref(6, 1)), 100);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_fb_find_mode, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_fb_find_mode, $mul.ref(0, 13)), $mul.ref(8, 1)), 109);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_fb_find_mode, $mul.ref(0, 13)), $mul.ref(9, 1)), 111);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_fb_find_mode, $mul.ref(0, 13)), $mul.ref(10, 1)), 100);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_fb_find_mode, $mul.ref(0, 13)), $mul.ref(11, 1)), 101);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_fb_find_mode, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, __kstrtab_fb_videomode_to_modelist, 102);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(1, 1)), 98);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(2, 1)), 95);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(3, 1)), 118);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(4, 1)), 105);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(5, 1)), 100);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(6, 1)), 101);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(7, 1)), 111);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(8, 1)), 109);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(9, 1)), 111);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(10, 1)), 100);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(11, 1)), 101);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(12, 1)), 95);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(13, 1)), 116);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(14, 1)), 111);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(15, 1)), 95);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(16, 1)), 109);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(17, 1)), 111);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(18, 1)), 100);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(19, 1)), 101);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(20, 1)), 108);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(21, 1)), 105);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(22, 1)), 115);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(23, 1)), 116);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_fb_videomode_to_modelist, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.114 := $store.i8($M.114, __kstrtab_fb_find_nearest_mode, 102);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_fb_find_nearest_mode, $mul.ref(0, 21)), $mul.ref(1, 1)), 98);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_fb_find_nearest_mode, $mul.ref(0, 21)), $mul.ref(2, 1)), 95);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_fb_find_nearest_mode, $mul.ref(0, 21)), $mul.ref(3, 1)), 102);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_fb_find_nearest_mode, $mul.ref(0, 21)), $mul.ref(4, 1)), 105);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_fb_find_nearest_mode, $mul.ref(0, 21)), $mul.ref(5, 1)), 110);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_fb_find_nearest_mode, $mul.ref(0, 21)), $mul.ref(6, 1)), 100);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_fb_find_nearest_mode, $mul.ref(0, 21)), $mul.ref(7, 1)), 95);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_fb_find_nearest_mode, $mul.ref(0, 21)), $mul.ref(8, 1)), 110);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_fb_find_nearest_mode, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_fb_find_nearest_mode, $mul.ref(0, 21)), $mul.ref(10, 1)), 97);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_fb_find_nearest_mode, $mul.ref(0, 21)), $mul.ref(11, 1)), 114);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_fb_find_nearest_mode, $mul.ref(0, 21)), $mul.ref(12, 1)), 101);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_fb_find_nearest_mode, $mul.ref(0, 21)), $mul.ref(13, 1)), 115);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_fb_find_nearest_mode, $mul.ref(0, 21)), $mul.ref(14, 1)), 116);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_fb_find_nearest_mode, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_fb_find_nearest_mode, $mul.ref(0, 21)), $mul.ref(16, 1)), 109);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_fb_find_nearest_mode, $mul.ref(0, 21)), $mul.ref(17, 1)), 111);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_fb_find_nearest_mode, $mul.ref(0, 21)), $mul.ref(18, 1)), 100);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_fb_find_nearest_mode, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_fb_find_nearest_mode, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.115 := $store.i8($M.115, __kstrtab_fb_find_best_mode, 102);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_fb_find_best_mode, $mul.ref(0, 18)), $mul.ref(1, 1)), 98);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_fb_find_best_mode, $mul.ref(0, 18)), $mul.ref(2, 1)), 95);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_fb_find_best_mode, $mul.ref(0, 18)), $mul.ref(3, 1)), 102);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_fb_find_best_mode, $mul.ref(0, 18)), $mul.ref(4, 1)), 105);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_fb_find_best_mode, $mul.ref(0, 18)), $mul.ref(5, 1)), 110);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_fb_find_best_mode, $mul.ref(0, 18)), $mul.ref(6, 1)), 100);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_fb_find_best_mode, $mul.ref(0, 18)), $mul.ref(7, 1)), 95);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_fb_find_best_mode, $mul.ref(0, 18)), $mul.ref(8, 1)), 98);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_fb_find_best_mode, $mul.ref(0, 18)), $mul.ref(9, 1)), 101);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_fb_find_best_mode, $mul.ref(0, 18)), $mul.ref(10, 1)), 115);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_fb_find_best_mode, $mul.ref(0, 18)), $mul.ref(11, 1)), 116);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_fb_find_best_mode, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_fb_find_best_mode, $mul.ref(0, 18)), $mul.ref(13, 1)), 109);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_fb_find_best_mode, $mul.ref(0, 18)), $mul.ref(14, 1)), 111);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_fb_find_best_mode, $mul.ref(0, 18)), $mul.ref(15, 1)), 100);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_fb_find_best_mode, $mul.ref(0, 18)), $mul.ref(16, 1)), 101);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_fb_find_best_mode, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.116 := $store.i8($M.116, __kstrtab_fb_match_mode, 102);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_fb_match_mode, $mul.ref(0, 14)), $mul.ref(1, 1)), 98);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_fb_match_mode, $mul.ref(0, 14)), $mul.ref(2, 1)), 95);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_fb_match_mode, $mul.ref(0, 14)), $mul.ref(3, 1)), 109);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_fb_match_mode, $mul.ref(0, 14)), $mul.ref(4, 1)), 97);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_fb_match_mode, $mul.ref(0, 14)), $mul.ref(5, 1)), 116);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_fb_match_mode, $mul.ref(0, 14)), $mul.ref(6, 1)), 99);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_fb_match_mode, $mul.ref(0, 14)), $mul.ref(7, 1)), 104);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_fb_match_mode, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_fb_match_mode, $mul.ref(0, 14)), $mul.ref(9, 1)), 109);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_fb_match_mode, $mul.ref(0, 14)), $mul.ref(10, 1)), 111);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_fb_match_mode, $mul.ref(0, 14)), $mul.ref(11, 1)), 100);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_fb_match_mode, $mul.ref(0, 14)), $mul.ref(12, 1)), 101);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_fb_match_mode, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.117 := $store.i8($M.117, __kstrtab_fb_add_videomode, 102);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_fb_add_videomode, $mul.ref(0, 17)), $mul.ref(1, 1)), 98);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_fb_add_videomode, $mul.ref(0, 17)), $mul.ref(2, 1)), 95);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_fb_add_videomode, $mul.ref(0, 17)), $mul.ref(3, 1)), 97);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_fb_add_videomode, $mul.ref(0, 17)), $mul.ref(4, 1)), 100);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_fb_add_videomode, $mul.ref(0, 17)), $mul.ref(5, 1)), 100);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_fb_add_videomode, $mul.ref(0, 17)), $mul.ref(6, 1)), 95);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_fb_add_videomode, $mul.ref(0, 17)), $mul.ref(7, 1)), 118);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_fb_add_videomode, $mul.ref(0, 17)), $mul.ref(8, 1)), 105);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_fb_add_videomode, $mul.ref(0, 17)), $mul.ref(9, 1)), 100);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_fb_add_videomode, $mul.ref(0, 17)), $mul.ref(10, 1)), 101);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_fb_add_videomode, $mul.ref(0, 17)), $mul.ref(11, 1)), 111);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_fb_add_videomode, $mul.ref(0, 17)), $mul.ref(12, 1)), 109);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_fb_add_videomode, $mul.ref(0, 17)), $mul.ref(13, 1)), 111);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_fb_add_videomode, $mul.ref(0, 17)), $mul.ref(14, 1)), 100);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_fb_add_videomode, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_fb_add_videomode, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.118 := $store.i8($M.118, __kstrtab_fb_mode_is_equal, 102);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_fb_mode_is_equal, $mul.ref(0, 17)), $mul.ref(1, 1)), 98);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_fb_mode_is_equal, $mul.ref(0, 17)), $mul.ref(2, 1)), 95);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_fb_mode_is_equal, $mul.ref(0, 17)), $mul.ref(3, 1)), 109);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_fb_mode_is_equal, $mul.ref(0, 17)), $mul.ref(4, 1)), 111);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_fb_mode_is_equal, $mul.ref(0, 17)), $mul.ref(5, 1)), 100);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_fb_mode_is_equal, $mul.ref(0, 17)), $mul.ref(6, 1)), 101);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_fb_mode_is_equal, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_fb_mode_is_equal, $mul.ref(0, 17)), $mul.ref(8, 1)), 105);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_fb_mode_is_equal, $mul.ref(0, 17)), $mul.ref(9, 1)), 115);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_fb_mode_is_equal, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_fb_mode_is_equal, $mul.ref(0, 17)), $mul.ref(11, 1)), 101);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_fb_mode_is_equal, $mul.ref(0, 17)), $mul.ref(12, 1)), 113);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_fb_mode_is_equal, $mul.ref(0, 17)), $mul.ref(13, 1)), 117);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_fb_mode_is_equal, $mul.ref(0, 17)), $mul.ref(14, 1)), 97);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_fb_mode_is_equal, $mul.ref(0, 17)), $mul.ref(15, 1)), 108);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_fb_mode_is_equal, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.119 := $store.i8($M.119, __kstrtab_fb_var_to_videomode, 102);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_fb_var_to_videomode, $mul.ref(0, 20)), $mul.ref(1, 1)), 98);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_fb_var_to_videomode, $mul.ref(0, 20)), $mul.ref(2, 1)), 95);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_fb_var_to_videomode, $mul.ref(0, 20)), $mul.ref(3, 1)), 118);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_fb_var_to_videomode, $mul.ref(0, 20)), $mul.ref(4, 1)), 97);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_fb_var_to_videomode, $mul.ref(0, 20)), $mul.ref(5, 1)), 114);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_fb_var_to_videomode, $mul.ref(0, 20)), $mul.ref(6, 1)), 95);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_fb_var_to_videomode, $mul.ref(0, 20)), $mul.ref(7, 1)), 116);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_fb_var_to_videomode, $mul.ref(0, 20)), $mul.ref(8, 1)), 111);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_fb_var_to_videomode, $mul.ref(0, 20)), $mul.ref(9, 1)), 95);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_fb_var_to_videomode, $mul.ref(0, 20)), $mul.ref(10, 1)), 118);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_fb_var_to_videomode, $mul.ref(0, 20)), $mul.ref(11, 1)), 105);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_fb_var_to_videomode, $mul.ref(0, 20)), $mul.ref(12, 1)), 100);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_fb_var_to_videomode, $mul.ref(0, 20)), $mul.ref(13, 1)), 101);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_fb_var_to_videomode, $mul.ref(0, 20)), $mul.ref(14, 1)), 111);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_fb_var_to_videomode, $mul.ref(0, 20)), $mul.ref(15, 1)), 109);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_fb_var_to_videomode, $mul.ref(0, 20)), $mul.ref(16, 1)), 111);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_fb_var_to_videomode, $mul.ref(0, 20)), $mul.ref(17, 1)), 100);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_fb_var_to_videomode, $mul.ref(0, 20)), $mul.ref(18, 1)), 101);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(__kstrtab_fb_var_to_videomode, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.120 := $store.i8($M.120, __kstrtab_fb_videomode_to_var, 102);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_fb_videomode_to_var, $mul.ref(0, 20)), $mul.ref(1, 1)), 98);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_fb_videomode_to_var, $mul.ref(0, 20)), $mul.ref(2, 1)), 95);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_fb_videomode_to_var, $mul.ref(0, 20)), $mul.ref(3, 1)), 118);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_fb_videomode_to_var, $mul.ref(0, 20)), $mul.ref(4, 1)), 105);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_fb_videomode_to_var, $mul.ref(0, 20)), $mul.ref(5, 1)), 100);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_fb_videomode_to_var, $mul.ref(0, 20)), $mul.ref(6, 1)), 101);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_fb_videomode_to_var, $mul.ref(0, 20)), $mul.ref(7, 1)), 111);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_fb_videomode_to_var, $mul.ref(0, 20)), $mul.ref(8, 1)), 109);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_fb_videomode_to_var, $mul.ref(0, 20)), $mul.ref(9, 1)), 111);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_fb_videomode_to_var, $mul.ref(0, 20)), $mul.ref(10, 1)), 100);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_fb_videomode_to_var, $mul.ref(0, 20)), $mul.ref(11, 1)), 101);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_fb_videomode_to_var, $mul.ref(0, 20)), $mul.ref(12, 1)), 95);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_fb_videomode_to_var, $mul.ref(0, 20)), $mul.ref(13, 1)), 116);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_fb_videomode_to_var, $mul.ref(0, 20)), $mul.ref(14, 1)), 111);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_fb_videomode_to_var, $mul.ref(0, 20)), $mul.ref(15, 1)), 95);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_fb_videomode_to_var, $mul.ref(0, 20)), $mul.ref(16, 1)), 118);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_fb_videomode_to_var, $mul.ref(0, 20)), $mul.ref(17, 1)), 97);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_fb_videomode_to_var, $mul.ref(0, 20)), $mul.ref(18, 1)), 114);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(__kstrtab_fb_videomode_to_var, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.121 := $store.i8($M.121, __kstrtab_fb_find_best_display, 102);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_fb_find_best_display, $mul.ref(0, 21)), $mul.ref(1, 1)), 98);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_fb_find_best_display, $mul.ref(0, 21)), $mul.ref(2, 1)), 95);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_fb_find_best_display, $mul.ref(0, 21)), $mul.ref(3, 1)), 102);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_fb_find_best_display, $mul.ref(0, 21)), $mul.ref(4, 1)), 105);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_fb_find_best_display, $mul.ref(0, 21)), $mul.ref(5, 1)), 110);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_fb_find_best_display, $mul.ref(0, 21)), $mul.ref(6, 1)), 100);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_fb_find_best_display, $mul.ref(0, 21)), $mul.ref(7, 1)), 95);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_fb_find_best_display, $mul.ref(0, 21)), $mul.ref(8, 1)), 98);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_fb_find_best_display, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_fb_find_best_display, $mul.ref(0, 21)), $mul.ref(10, 1)), 115);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_fb_find_best_display, $mul.ref(0, 21)), $mul.ref(11, 1)), 116);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_fb_find_best_display, $mul.ref(0, 21)), $mul.ref(12, 1)), 95);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_fb_find_best_display, $mul.ref(0, 21)), $mul.ref(13, 1)), 100);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_fb_find_best_display, $mul.ref(0, 21)), $mul.ref(14, 1)), 105);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_fb_find_best_display, $mul.ref(0, 21)), $mul.ref(15, 1)), 115);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_fb_find_best_display, $mul.ref(0, 21)), $mul.ref(16, 1)), 112);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_fb_find_best_display, $mul.ref(0, 21)), $mul.ref(17, 1)), 108);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_fb_find_best_display, $mul.ref(0, 21)), $mul.ref(18, 1)), 97);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_fb_find_best_display, $mul.ref(0, 21)), $mul.ref(19, 1)), 121);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_fb_find_best_display, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.122 := $store.i8($M.122, __kstrtab_fb_destroy_modelist, 102);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_fb_destroy_modelist, $mul.ref(0, 20)), $mul.ref(1, 1)), 98);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_fb_destroy_modelist, $mul.ref(0, 20)), $mul.ref(2, 1)), 95);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_fb_destroy_modelist, $mul.ref(0, 20)), $mul.ref(3, 1)), 100);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_fb_destroy_modelist, $mul.ref(0, 20)), $mul.ref(4, 1)), 101);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_fb_destroy_modelist, $mul.ref(0, 20)), $mul.ref(5, 1)), 115);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_fb_destroy_modelist, $mul.ref(0, 20)), $mul.ref(6, 1)), 116);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_fb_destroy_modelist, $mul.ref(0, 20)), $mul.ref(7, 1)), 114);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_fb_destroy_modelist, $mul.ref(0, 20)), $mul.ref(8, 1)), 111);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_fb_destroy_modelist, $mul.ref(0, 20)), $mul.ref(9, 1)), 121);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_fb_destroy_modelist, $mul.ref(0, 20)), $mul.ref(10, 1)), 95);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_fb_destroy_modelist, $mul.ref(0, 20)), $mul.ref(11, 1)), 109);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_fb_destroy_modelist, $mul.ref(0, 20)), $mul.ref(12, 1)), 111);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_fb_destroy_modelist, $mul.ref(0, 20)), $mul.ref(13, 1)), 100);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_fb_destroy_modelist, $mul.ref(0, 20)), $mul.ref(14, 1)), 101);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_fb_destroy_modelist, $mul.ref(0, 20)), $mul.ref(15, 1)), 108);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_fb_destroy_modelist, $mul.ref(0, 20)), $mul.ref(16, 1)), 105);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_fb_destroy_modelist, $mul.ref(0, 20)), $mul.ref(17, 1)), 115);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_fb_destroy_modelist, $mul.ref(0, 20)), $mul.ref(18, 1)), 116);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_fb_destroy_modelist, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.58 := $store.ref($M.58, modedb, $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(0, 64)), $mul.ref(8, 1)), 70);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(0, 64)), $mul.ref(12, 1)), 640);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(0, 64)), $mul.ref(16, 1)), 400);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(0, 64)), $mul.ref(20, 1)), 39721);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(0, 64)), $mul.ref(24, 1)), 40);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(0, 64)), $mul.ref(28, 1)), 24);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(0, 64)), $mul.ref(32, 1)), 39);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(0, 64)), $mul.ref(36, 1)), 9);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(0, 64)), $mul.ref(40, 1)), 96);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(0, 64)), $mul.ref(44, 1)), 2);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(0, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(0, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(0, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(1, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(1, 64)), $mul.ref(8, 1)), 60);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(1, 64)), $mul.ref(12, 1)), 640);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(1, 64)), $mul.ref(16, 1)), 480);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(1, 64)), $mul.ref(20, 1)), 39721);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(1, 64)), $mul.ref(24, 1)), 40);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(1, 64)), $mul.ref(28, 1)), 24);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(1, 64)), $mul.ref(32, 1)), 32);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(1, 64)), $mul.ref(36, 1)), 11);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(1, 64)), $mul.ref(40, 1)), 96);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(1, 64)), $mul.ref(44, 1)), 2);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(1, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(1, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(1, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(2, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(2, 64)), $mul.ref(8, 1)), 56);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(2, 64)), $mul.ref(12, 1)), 800);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(2, 64)), $mul.ref(16, 1)), 600);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(2, 64)), $mul.ref(20, 1)), 27777);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(2, 64)), $mul.ref(24, 1)), 128);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(2, 64)), $mul.ref(28, 1)), 24);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(2, 64)), $mul.ref(32, 1)), 22);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(2, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(2, 64)), $mul.ref(40, 1)), 72);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(2, 64)), $mul.ref(44, 1)), 2);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(2, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(2, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(2, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(3, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(3, 64)), $mul.ref(8, 1)), 87);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(3, 64)), $mul.ref(12, 1)), 1024);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(3, 64)), $mul.ref(16, 1)), 768);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(3, 64)), $mul.ref(20, 1)), 22271);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(3, 64)), $mul.ref(24, 1)), 56);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(3, 64)), $mul.ref(28, 1)), 24);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(3, 64)), $mul.ref(32, 1)), 33);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(3, 64)), $mul.ref(36, 1)), 8);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(3, 64)), $mul.ref(40, 1)), 160);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(3, 64)), $mul.ref(44, 1)), 8);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(3, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(3, 64)), $mul.ref(52, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(3, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(4, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(4, 64)), $mul.ref(8, 1)), 85);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(4, 64)), $mul.ref(12, 1)), 640);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(4, 64)), $mul.ref(16, 1)), 400);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(4, 64)), $mul.ref(20, 1)), 31746);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(4, 64)), $mul.ref(24, 1)), 96);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(4, 64)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(4, 64)), $mul.ref(32, 1)), 41);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(4, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(4, 64)), $mul.ref(40, 1)), 64);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(4, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(4, 64)), $mul.ref(48, 1)), 2);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(4, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(4, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(5, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(5, 64)), $mul.ref(8, 1)), 72);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(5, 64)), $mul.ref(12, 1)), 640);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(5, 64)), $mul.ref(16, 1)), 480);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(5, 64)), $mul.ref(20, 1)), 31746);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(5, 64)), $mul.ref(24, 1)), 144);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(5, 64)), $mul.ref(28, 1)), 40);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(5, 64)), $mul.ref(32, 1)), 30);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(5, 64)), $mul.ref(36, 1)), 8);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(5, 64)), $mul.ref(40, 1)), 40);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(5, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(5, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(5, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(5, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(6, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(6, 64)), $mul.ref(8, 1)), 75);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(6, 64)), $mul.ref(12, 1)), 640);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(6, 64)), $mul.ref(16, 1)), 480);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(6, 64)), $mul.ref(20, 1)), 31746);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(6, 64)), $mul.ref(24, 1)), 120);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(6, 64)), $mul.ref(28, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(6, 64)), $mul.ref(32, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(6, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(6, 64)), $mul.ref(40, 1)), 64);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(6, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(6, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(6, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(6, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(7, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(7, 64)), $mul.ref(8, 1)), 60);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(7, 64)), $mul.ref(12, 1)), 800);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(7, 64)), $mul.ref(16, 1)), 600);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(7, 64)), $mul.ref(20, 1)), 25000);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(7, 64)), $mul.ref(24, 1)), 88);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(7, 64)), $mul.ref(28, 1)), 40);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(7, 64)), $mul.ref(32, 1)), 23);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(7, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(7, 64)), $mul.ref(40, 1)), 128);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(7, 64)), $mul.ref(44, 1)), 4);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(7, 64)), $mul.ref(48, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(7, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(7, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(8, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(8, 64)), $mul.ref(8, 1)), 85);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(8, 64)), $mul.ref(12, 1)), 640);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(8, 64)), $mul.ref(16, 1)), 480);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(8, 64)), $mul.ref(20, 1)), 27777);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(8, 64)), $mul.ref(24, 1)), 80);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(8, 64)), $mul.ref(28, 1)), 56);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(8, 64)), $mul.ref(32, 1)), 25);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(8, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(8, 64)), $mul.ref(40, 1)), 56);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(8, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(8, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(8, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(8, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(9, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(9, 64)), $mul.ref(8, 1)), 89);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(9, 64)), $mul.ref(12, 1)), 1152);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(9, 64)), $mul.ref(16, 1)), 864);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(9, 64)), $mul.ref(20, 1)), 15384);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(9, 64)), $mul.ref(24, 1)), 96);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(9, 64)), $mul.ref(28, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(9, 64)), $mul.ref(32, 1)), 110);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(9, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(9, 64)), $mul.ref(40, 1)), 216);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(9, 64)), $mul.ref(44, 1)), 10);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(9, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(9, 64)), $mul.ref(52, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(9, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(10, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(10, 64)), $mul.ref(8, 1)), 72);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(10, 64)), $mul.ref(12, 1)), 800);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(10, 64)), $mul.ref(16, 1)), 600);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(10, 64)), $mul.ref(20, 1)), 20000);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(10, 64)), $mul.ref(24, 1)), 64);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(10, 64)), $mul.ref(28, 1)), 56);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(10, 64)), $mul.ref(32, 1)), 23);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(10, 64)), $mul.ref(36, 1)), 37);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(10, 64)), $mul.ref(40, 1)), 120);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(10, 64)), $mul.ref(44, 1)), 6);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(10, 64)), $mul.ref(48, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(10, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(10, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(11, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(11, 64)), $mul.ref(8, 1)), 60);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(11, 64)), $mul.ref(12, 1)), 1024);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(11, 64)), $mul.ref(16, 1)), 768);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(11, 64)), $mul.ref(20, 1)), 15384);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(11, 64)), $mul.ref(24, 1)), 168);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(11, 64)), $mul.ref(28, 1)), 8);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(11, 64)), $mul.ref(32, 1)), 29);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(11, 64)), $mul.ref(36, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(11, 64)), $mul.ref(40, 1)), 144);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(11, 64)), $mul.ref(44, 1)), 6);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(11, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(11, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(11, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(12, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(12, 64)), $mul.ref(8, 1)), 100);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(12, 64)), $mul.ref(12, 1)), 640);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(12, 64)), $mul.ref(16, 1)), 480);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(12, 64)), $mul.ref(20, 1)), 21834);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(12, 64)), $mul.ref(24, 1)), 96);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(12, 64)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(12, 64)), $mul.ref(32, 1)), 36);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(12, 64)), $mul.ref(36, 1)), 8);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(12, 64)), $mul.ref(40, 1)), 96);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(12, 64)), $mul.ref(44, 1)), 6);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(12, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(12, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(12, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(13, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(13, 64)), $mul.ref(8, 1)), 60);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(13, 64)), $mul.ref(12, 1)), 1152);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(13, 64)), $mul.ref(16, 1)), 864);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(13, 64)), $mul.ref(20, 1)), 11123);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(13, 64)), $mul.ref(24, 1)), 208);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(13, 64)), $mul.ref(28, 1)), 64);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(13, 64)), $mul.ref(32, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(13, 64)), $mul.ref(36, 1)), 4);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(13, 64)), $mul.ref(40, 1)), 256);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(13, 64)), $mul.ref(44, 1)), 8);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(13, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(13, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(13, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(14, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(14, 64)), $mul.ref(8, 1)), 85);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(14, 64)), $mul.ref(12, 1)), 800);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(14, 64)), $mul.ref(16, 1)), 600);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(14, 64)), $mul.ref(20, 1)), 16460);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(14, 64)), $mul.ref(24, 1)), 160);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(14, 64)), $mul.ref(28, 1)), 64);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(14, 64)), $mul.ref(32, 1)), 36);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(14, 64)), $mul.ref(36, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(14, 64)), $mul.ref(40, 1)), 64);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(14, 64)), $mul.ref(44, 1)), 5);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(14, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(14, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(14, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(15, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(15, 64)), $mul.ref(8, 1)), 70);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(15, 64)), $mul.ref(12, 1)), 1024);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(15, 64)), $mul.ref(16, 1)), 768);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(15, 64)), $mul.ref(20, 1)), 13333);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(15, 64)), $mul.ref(24, 1)), 144);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(15, 64)), $mul.ref(28, 1)), 24);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(15, 64)), $mul.ref(32, 1)), 29);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(15, 64)), $mul.ref(36, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(15, 64)), $mul.ref(40, 1)), 136);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(15, 64)), $mul.ref(44, 1)), 6);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(15, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(15, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(15, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(16, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(16, 64)), $mul.ref(8, 1)), 87);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(16, 64)), $mul.ref(12, 1)), 1280);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(16, 64)), $mul.ref(16, 1)), 1024);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(16, 64)), $mul.ref(20, 1)), 12500);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(16, 64)), $mul.ref(24, 1)), 56);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(16, 64)), $mul.ref(28, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(16, 64)), $mul.ref(32, 1)), 128);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(16, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(16, 64)), $mul.ref(40, 1)), 216);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(16, 64)), $mul.ref(44, 1)), 12);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(16, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(16, 64)), $mul.ref(52, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(16, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(17, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(17, 64)), $mul.ref(8, 1)), 100);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(17, 64)), $mul.ref(12, 1)), 800);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(17, 64)), $mul.ref(16, 1)), 600);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(17, 64)), $mul.ref(20, 1)), 14357);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(17, 64)), $mul.ref(24, 1)), 160);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(17, 64)), $mul.ref(28, 1)), 64);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(17, 64)), $mul.ref(32, 1)), 30);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(17, 64)), $mul.ref(36, 1)), 4);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(17, 64)), $mul.ref(40, 1)), 64);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(17, 64)), $mul.ref(44, 1)), 6);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(17, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(17, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(17, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(18, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(18, 64)), $mul.ref(8, 1)), 76);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(18, 64)), $mul.ref(12, 1)), 1024);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(18, 64)), $mul.ref(16, 1)), 768);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(18, 64)), $mul.ref(20, 1)), 11764);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(18, 64)), $mul.ref(24, 1)), 208);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(18, 64)), $mul.ref(28, 1)), 8);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(18, 64)), $mul.ref(32, 1)), 36);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(18, 64)), $mul.ref(36, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(18, 64)), $mul.ref(40, 1)), 120);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(18, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(18, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(18, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(18, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(19, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(19, 64)), $mul.ref(8, 1)), 70);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(19, 64)), $mul.ref(12, 1)), 1152);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(19, 64)), $mul.ref(16, 1)), 864);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(19, 64)), $mul.ref(20, 1)), 10869);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(19, 64)), $mul.ref(24, 1)), 106);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(19, 64)), $mul.ref(28, 1)), 56);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(19, 64)), $mul.ref(32, 1)), 20);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(19, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(19, 64)), $mul.ref(40, 1)), 160);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(19, 64)), $mul.ref(44, 1)), 10);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(19, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(19, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(19, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(20, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(20, 64)), $mul.ref(8, 1)), 61);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(20, 64)), $mul.ref(12, 1)), 1280);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(20, 64)), $mul.ref(16, 1)), 1024);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(20, 64)), $mul.ref(20, 1)), 9090);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(20, 64)), $mul.ref(24, 1)), 200);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(20, 64)), $mul.ref(28, 1)), 48);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(20, 64)), $mul.ref(32, 1)), 26);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(20, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(20, 64)), $mul.ref(40, 1)), 184);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(20, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(20, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(20, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(20, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(21, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(21, 64)), $mul.ref(8, 1)), 60);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(21, 64)), $mul.ref(12, 1)), 1400);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(21, 64)), $mul.ref(16, 1)), 1050);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(21, 64)), $mul.ref(20, 1)), 9259);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(21, 64)), $mul.ref(24, 1)), 136);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(21, 64)), $mul.ref(28, 1)), 40);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(21, 64)), $mul.ref(32, 1)), 13);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(21, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(21, 64)), $mul.ref(40, 1)), 112);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(21, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(21, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(21, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(21, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(22, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(22, 64)), $mul.ref(8, 1)), 75);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(22, 64)), $mul.ref(12, 1)), 1400);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(22, 64)), $mul.ref(16, 1)), 1050);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(22, 64)), $mul.ref(20, 1)), 7190);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(22, 64)), $mul.ref(24, 1)), 120);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(22, 64)), $mul.ref(28, 1)), 56);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(22, 64)), $mul.ref(32, 1)), 23);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(22, 64)), $mul.ref(36, 1)), 10);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(22, 64)), $mul.ref(40, 1)), 112);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(22, 64)), $mul.ref(44, 1)), 13);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(22, 64)), $mul.ref(48, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(22, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(22, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(23, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(23, 64)), $mul.ref(8, 1)), 60);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(23, 64)), $mul.ref(12, 1)), 1400);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(23, 64)), $mul.ref(16, 1)), 1050);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(23, 64)), $mul.ref(20, 1)), 9259);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(23, 64)), $mul.ref(24, 1)), 128);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(23, 64)), $mul.ref(28, 1)), 40);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(23, 64)), $mul.ref(32, 1)), 12);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(23, 64)), $mul.ref(36, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(23, 64)), $mul.ref(40, 1)), 112);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(23, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(23, 64)), $mul.ref(48, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(23, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(23, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(24, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(24, 64)), $mul.ref(8, 1)), 85);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(24, 64)), $mul.ref(12, 1)), 1024);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(24, 64)), $mul.ref(16, 1)), 768);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(24, 64)), $mul.ref(20, 1)), 10111);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(24, 64)), $mul.ref(24, 1)), 192);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(24, 64)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(24, 64)), $mul.ref(32, 1)), 34);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(24, 64)), $mul.ref(36, 1)), 14);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(24, 64)), $mul.ref(40, 1)), 160);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(24, 64)), $mul.ref(44, 1)), 6);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(24, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(24, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(24, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(25, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(25, 64)), $mul.ref(8, 1)), 78);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(25, 64)), $mul.ref(12, 1)), 1152);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(25, 64)), $mul.ref(16, 1)), 864);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(25, 64)), $mul.ref(20, 1)), 9090);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(25, 64)), $mul.ref(24, 1)), 228);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(25, 64)), $mul.ref(28, 1)), 88);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(25, 64)), $mul.ref(32, 1)), 32);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(25, 64)), $mul.ref(36, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(25, 64)), $mul.ref(40, 1)), 84);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(25, 64)), $mul.ref(44, 1)), 12);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(25, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(25, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(25, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(26, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(26, 64)), $mul.ref(8, 1)), 70);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(26, 64)), $mul.ref(12, 1)), 1280);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(26, 64)), $mul.ref(16, 1)), 1024);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(26, 64)), $mul.ref(20, 1)), 7905);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(26, 64)), $mul.ref(24, 1)), 224);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(26, 64)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(26, 64)), $mul.ref(32, 1)), 28);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(26, 64)), $mul.ref(36, 1)), 8);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(26, 64)), $mul.ref(40, 1)), 160);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(26, 64)), $mul.ref(44, 1)), 8);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(26, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(26, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(26, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(27, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(27, 64)), $mul.ref(8, 1)), 60);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(27, 64)), $mul.ref(12, 1)), 1600);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(27, 64)), $mul.ref(16, 1)), 1200);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(27, 64)), $mul.ref(20, 1)), 6172);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(27, 64)), $mul.ref(24, 1)), 304);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(27, 64)), $mul.ref(28, 1)), 64);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(27, 64)), $mul.ref(32, 1)), 46);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(27, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(27, 64)), $mul.ref(40, 1)), 192);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(27, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(27, 64)), $mul.ref(48, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(27, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(27, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(28, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(28, 64)), $mul.ref(8, 1)), 84);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(28, 64)), $mul.ref(12, 1)), 1152);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(28, 64)), $mul.ref(16, 1)), 864);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(28, 64)), $mul.ref(20, 1)), 7407);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(28, 64)), $mul.ref(24, 1)), 184);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(28, 64)), $mul.ref(28, 1)), 312);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(28, 64)), $mul.ref(32, 1)), 32);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(28, 64)), $mul.ref(36, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(28, 64)), $mul.ref(40, 1)), 128);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(28, 64)), $mul.ref(44, 1)), 12);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(28, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(28, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(28, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(29, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(29, 64)), $mul.ref(8, 1)), 74);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(29, 64)), $mul.ref(12, 1)), 1280);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(29, 64)), $mul.ref(16, 1)), 1024);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(29, 64)), $mul.ref(20, 1)), 7407);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(29, 64)), $mul.ref(24, 1)), 256);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(29, 64)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(29, 64)), $mul.ref(32, 1)), 34);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(29, 64)), $mul.ref(36, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(29, 64)), $mul.ref(40, 1)), 144);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(29, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(29, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(29, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(29, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(30, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(30, 64)), $mul.ref(8, 1)), 100);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(30, 64)), $mul.ref(12, 1)), 1024);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(30, 64)), $mul.ref(16, 1)), 768);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(30, 64)), $mul.ref(20, 1)), 8658);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(30, 64)), $mul.ref(24, 1)), 192);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(30, 64)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(30, 64)), $mul.ref(32, 1)), 21);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(30, 64)), $mul.ref(36, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(30, 64)), $mul.ref(40, 1)), 192);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(30, 64)), $mul.ref(44, 1)), 10);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(30, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(30, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(30, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(31, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(31, 64)), $mul.ref(8, 1)), 76);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(31, 64)), $mul.ref(12, 1)), 1280);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(31, 64)), $mul.ref(16, 1)), 1024);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(31, 64)), $mul.ref(20, 1)), 7407);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(31, 64)), $mul.ref(24, 1)), 248);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(31, 64)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(31, 64)), $mul.ref(32, 1)), 34);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(31, 64)), $mul.ref(36, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(31, 64)), $mul.ref(40, 1)), 104);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(31, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(31, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(31, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(31, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(32, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(32, 64)), $mul.ref(8, 1)), 70);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(32, 64)), $mul.ref(12, 1)), 1600);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(32, 64)), $mul.ref(16, 1)), 1200);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(32, 64)), $mul.ref(20, 1)), 5291);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(32, 64)), $mul.ref(24, 1)), 304);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(32, 64)), $mul.ref(28, 1)), 64);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(32, 64)), $mul.ref(32, 1)), 46);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(32, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(32, 64)), $mul.ref(40, 1)), 192);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(32, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(32, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(32, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(32, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(33, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(33, 64)), $mul.ref(8, 1)), 100);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(33, 64)), $mul.ref(12, 1)), 1152);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(33, 64)), $mul.ref(16, 1)), 864);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(33, 64)), $mul.ref(20, 1)), 7264);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(33, 64)), $mul.ref(24, 1)), 224);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(33, 64)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(33, 64)), $mul.ref(32, 1)), 17);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(33, 64)), $mul.ref(36, 1)), 2);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(33, 64)), $mul.ref(40, 1)), 128);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(33, 64)), $mul.ref(44, 1)), 19);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(33, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(33, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(33, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(34, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(34, 64)), $mul.ref(8, 1)), 85);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(34, 64)), $mul.ref(12, 1)), 1280);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(34, 64)), $mul.ref(16, 1)), 1024);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(34, 64)), $mul.ref(20, 1)), 6349);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(34, 64)), $mul.ref(24, 1)), 224);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(34, 64)), $mul.ref(28, 1)), 64);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(34, 64)), $mul.ref(32, 1)), 44);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(34, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(34, 64)), $mul.ref(40, 1)), 160);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(34, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(34, 64)), $mul.ref(48, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(34, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(34, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(35, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(35, 64)), $mul.ref(8, 1)), 75);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(35, 64)), $mul.ref(12, 1)), 1600);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(35, 64)), $mul.ref(16, 1)), 1200);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(35, 64)), $mul.ref(20, 1)), 4938);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(35, 64)), $mul.ref(24, 1)), 304);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(35, 64)), $mul.ref(28, 1)), 64);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(35, 64)), $mul.ref(32, 1)), 46);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(35, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(35, 64)), $mul.ref(40, 1)), 192);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(35, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(35, 64)), $mul.ref(48, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(35, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(35, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(36, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(36, 64)), $mul.ref(8, 1)), 60);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(36, 64)), $mul.ref(12, 1)), 1680);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(36, 64)), $mul.ref(16, 1)), 1050);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(36, 64)), $mul.ref(20, 1)), 6848);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(36, 64)), $mul.ref(24, 1)), 280);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(36, 64)), $mul.ref(28, 1)), 104);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(36, 64)), $mul.ref(32, 1)), 30);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(36, 64)), $mul.ref(36, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(36, 64)), $mul.ref(40, 1)), 176);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(36, 64)), $mul.ref(44, 1)), 6);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(36, 64)), $mul.ref(48, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(36, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(36, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(37, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(37, 64)), $mul.ref(8, 1)), 85);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(37, 64)), $mul.ref(12, 1)), 1600);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(37, 64)), $mul.ref(16, 1)), 1200);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(37, 64)), $mul.ref(20, 1)), 4545);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(37, 64)), $mul.ref(24, 1)), 272);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(37, 64)), $mul.ref(28, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(37, 64)), $mul.ref(32, 1)), 37);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(37, 64)), $mul.ref(36, 1)), 4);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(37, 64)), $mul.ref(40, 1)), 192);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(37, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(37, 64)), $mul.ref(48, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(37, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(37, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(38, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(38, 64)), $mul.ref(8, 1)), 100);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(38, 64)), $mul.ref(12, 1)), 1280);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(38, 64)), $mul.ref(16, 1)), 1024);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(38, 64)), $mul.ref(20, 1)), 5502);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(38, 64)), $mul.ref(24, 1)), 256);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(38, 64)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(38, 64)), $mul.ref(32, 1)), 26);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(38, 64)), $mul.ref(36, 1)), 7);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(38, 64)), $mul.ref(40, 1)), 128);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(38, 64)), $mul.ref(44, 1)), 15);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(38, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(38, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(38, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(39, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(39, 64)), $mul.ref(8, 1)), 64);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(39, 64)), $mul.ref(12, 1)), 1800);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(39, 64)), $mul.ref(16, 1)), 1440);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(39, 64)), $mul.ref(20, 1)), 4347);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(39, 64)), $mul.ref(24, 1)), 304);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(39, 64)), $mul.ref(28, 1)), 96);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(39, 64)), $mul.ref(32, 1)), 46);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(39, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(39, 64)), $mul.ref(40, 1)), 192);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(39, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(39, 64)), $mul.ref(48, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(39, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(39, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(40, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(40, 64)), $mul.ref(8, 1)), 70);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(40, 64)), $mul.ref(12, 1)), 1800);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(40, 64)), $mul.ref(16, 1)), 1440);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(40, 64)), $mul.ref(20, 1)), 4000);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(40, 64)), $mul.ref(24, 1)), 304);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(40, 64)), $mul.ref(28, 1)), 96);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(40, 64)), $mul.ref(32, 1)), 46);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(40, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(40, 64)), $mul.ref(40, 1)), 192);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(40, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(40, 64)), $mul.ref(48, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(40, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(40, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(41, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(41, 64)), $mul.ref(8, 1)), 78);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(41, 64)), $mul.ref(12, 1)), 512);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(41, 64)), $mul.ref(16, 1)), 384);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(41, 64)), $mul.ref(20, 1)), 49603);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(41, 64)), $mul.ref(24, 1)), 48);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(41, 64)), $mul.ref(28, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(41, 64)), $mul.ref(32, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(41, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(41, 64)), $mul.ref(40, 1)), 64);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(41, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(41, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(41, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(41, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(42, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(42, 64)), $mul.ref(8, 1)), 85);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(42, 64)), $mul.ref(12, 1)), 512);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(42, 64)), $mul.ref(16, 1)), 384);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(42, 64)), $mul.ref(20, 1)), 45454);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(42, 64)), $mul.ref(24, 1)), 48);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(42, 64)), $mul.ref(28, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(42, 64)), $mul.ref(32, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(42, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(42, 64)), $mul.ref(40, 1)), 64);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(42, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(42, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(42, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(42, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(43, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(43, 64)), $mul.ref(8, 1)), 70);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(43, 64)), $mul.ref(12, 1)), 320);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(43, 64)), $mul.ref(16, 1)), 200);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(43, 64)), $mul.ref(20, 1)), 79440);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(43, 64)), $mul.ref(24, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(43, 64)), $mul.ref(28, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(43, 64)), $mul.ref(32, 1)), 20);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(43, 64)), $mul.ref(36, 1)), 4);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(43, 64)), $mul.ref(40, 1)), 48);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(43, 64)), $mul.ref(44, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(43, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(43, 64)), $mul.ref(52, 1)), 2);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(43, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(44, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(44, 64)), $mul.ref(8, 1)), 60);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(44, 64)), $mul.ref(12, 1)), 320);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(44, 64)), $mul.ref(16, 1)), 240);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(44, 64)), $mul.ref(20, 1)), 79440);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(44, 64)), $mul.ref(24, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(44, 64)), $mul.ref(28, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(44, 64)), $mul.ref(32, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(44, 64)), $mul.ref(36, 1)), 5);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(44, 64)), $mul.ref(40, 1)), 48);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(44, 64)), $mul.ref(44, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(44, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(44, 64)), $mul.ref(52, 1)), 2);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(44, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(45, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(45, 64)), $mul.ref(8, 1)), 72);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(45, 64)), $mul.ref(12, 1)), 320);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(45, 64)), $mul.ref(16, 1)), 240);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(45, 64)), $mul.ref(20, 1)), 63492);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(45, 64)), $mul.ref(24, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(45, 64)), $mul.ref(28, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(45, 64)), $mul.ref(32, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(45, 64)), $mul.ref(36, 1)), 4);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(45, 64)), $mul.ref(40, 1)), 48);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(45, 64)), $mul.ref(44, 1)), 2);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(45, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(45, 64)), $mul.ref(52, 1)), 2);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(45, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(46, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(46, 64)), $mul.ref(8, 1)), 56);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(46, 64)), $mul.ref(12, 1)), 400);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(46, 64)), $mul.ref(16, 1)), 300);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(46, 64)), $mul.ref(20, 1)), 55555);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(46, 64)), $mul.ref(24, 1)), 64);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(46, 64)), $mul.ref(28, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(46, 64)), $mul.ref(32, 1)), 10);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(46, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(46, 64)), $mul.ref(40, 1)), 32);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(46, 64)), $mul.ref(44, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(46, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(46, 64)), $mul.ref(52, 1)), 2);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(46, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(47, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(47, 64)), $mul.ref(8, 1)), 60);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(47, 64)), $mul.ref(12, 1)), 400);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(47, 64)), $mul.ref(16, 1)), 300);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(47, 64)), $mul.ref(20, 1)), 50000);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(47, 64)), $mul.ref(24, 1)), 48);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(47, 64)), $mul.ref(28, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(47, 64)), $mul.ref(32, 1)), 11);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(47, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(47, 64)), $mul.ref(40, 1)), 64);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(47, 64)), $mul.ref(44, 1)), 2);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(47, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(47, 64)), $mul.ref(52, 1)), 2);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(47, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(48, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(48, 64)), $mul.ref(8, 1)), 72);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(48, 64)), $mul.ref(12, 1)), 400);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(48, 64)), $mul.ref(16, 1)), 300);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(48, 64)), $mul.ref(20, 1)), 40000);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(48, 64)), $mul.ref(24, 1)), 32);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(48, 64)), $mul.ref(28, 1)), 24);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(48, 64)), $mul.ref(32, 1)), 11);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(48, 64)), $mul.ref(36, 1)), 19);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(48, 64)), $mul.ref(40, 1)), 64);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(48, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(48, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(48, 64)), $mul.ref(52, 1)), 2);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(48, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(49, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(49, 64)), $mul.ref(8, 1)), 56);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(49, 64)), $mul.ref(12, 1)), 480);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(49, 64)), $mul.ref(16, 1)), 300);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(49, 64)), $mul.ref(20, 1)), 46176);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(49, 64)), $mul.ref(24, 1)), 80);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(49, 64)), $mul.ref(28, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(49, 64)), $mul.ref(32, 1)), 10);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(49, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(49, 64)), $mul.ref(40, 1)), 40);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(49, 64)), $mul.ref(44, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(49, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(49, 64)), $mul.ref(52, 1)), 2);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(49, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(50, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(50, 64)), $mul.ref(8, 1)), 60);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(50, 64)), $mul.ref(12, 1)), 480);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(50, 64)), $mul.ref(16, 1)), 300);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(50, 64)), $mul.ref(20, 1)), 41858);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(50, 64)), $mul.ref(24, 1)), 56);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(50, 64)), $mul.ref(28, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(50, 64)), $mul.ref(32, 1)), 11);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(50, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(50, 64)), $mul.ref(40, 1)), 80);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(50, 64)), $mul.ref(44, 1)), 2);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(50, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(50, 64)), $mul.ref(52, 1)), 2);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(50, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(51, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(51, 64)), $mul.ref(8, 1)), 63);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(51, 64)), $mul.ref(12, 1)), 480);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(51, 64)), $mul.ref(16, 1)), 300);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(51, 64)), $mul.ref(20, 1)), 40000);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(51, 64)), $mul.ref(24, 1)), 56);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(51, 64)), $mul.ref(28, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(51, 64)), $mul.ref(32, 1)), 11);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(51, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(51, 64)), $mul.ref(40, 1)), 80);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(51, 64)), $mul.ref(44, 1)), 2);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(51, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(51, 64)), $mul.ref(52, 1)), 2);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(51, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(52, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(52, 64)), $mul.ref(8, 1)), 72);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(52, 64)), $mul.ref(12, 1)), 480);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(52, 64)), $mul.ref(16, 1)), 300);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(52, 64)), $mul.ref(20, 1)), 33386);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(52, 64)), $mul.ref(24, 1)), 40);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(52, 64)), $mul.ref(28, 1)), 24);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(52, 64)), $mul.ref(32, 1)), 11);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(52, 64)), $mul.ref(36, 1)), 19);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(52, 64)), $mul.ref(40, 1)), 80);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(52, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(52, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(52, 64)), $mul.ref(52, 1)), 2);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(52, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(53, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(53, 64)), $mul.ref(8, 1)), 60);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(53, 64)), $mul.ref(12, 1)), 1920);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(53, 64)), $mul.ref(16, 1)), 1200);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(53, 64)), $mul.ref(20, 1)), 5177);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(53, 64)), $mul.ref(24, 1)), 128);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(53, 64)), $mul.ref(28, 1)), 336);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(53, 64)), $mul.ref(32, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(53, 64)), $mul.ref(36, 1)), 38);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(53, 64)), $mul.ref(40, 1)), 208);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(53, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(53, 64)), $mul.ref(48, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(53, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(53, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(54, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(54, 64)), $mul.ref(8, 1)), 60);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(54, 64)), $mul.ref(12, 1)), 1152);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(54, 64)), $mul.ref(16, 1)), 768);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(54, 64)), $mul.ref(20, 1)), 14047);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(54, 64)), $mul.ref(24, 1)), 158);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(54, 64)), $mul.ref(28, 1)), 26);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(54, 64)), $mul.ref(32, 1)), 29);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(54, 64)), $mul.ref(36, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(54, 64)), $mul.ref(40, 1)), 136);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(54, 64)), $mul.ref(44, 1)), 6);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(54, 64)), $mul.ref(48, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(54, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(54, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(55, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(55, 64)), $mul.ref(8, 1)), 60);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(55, 64)), $mul.ref(12, 1)), 1366);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(55, 64)), $mul.ref(16, 1)), 768);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(55, 64)), $mul.ref(20, 1)), 13806);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(55, 64)), $mul.ref(24, 1)), 120);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(55, 64)), $mul.ref(28, 1)), 10);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(55, 64)), $mul.ref(32, 1)), 14);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(55, 64)), $mul.ref(36, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(55, 64)), $mul.ref(40, 1)), 32);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(55, 64)), $mul.ref(44, 1)), 5);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(55, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(55, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(55, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(56, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(56, 64)), $mul.ref(8, 1)), 60);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(56, 64)), $mul.ref(12, 1)), 1280);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(56, 64)), $mul.ref(16, 1)), 800);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(56, 64)), $mul.ref(20, 1)), 12048);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(56, 64)), $mul.ref(24, 1)), 200);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(56, 64)), $mul.ref(28, 1)), 64);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(56, 64)), $mul.ref(32, 1)), 24);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(56, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(56, 64)), $mul.ref(40, 1)), 136);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(56, 64)), $mul.ref(44, 1)), 3);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(56, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(56, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(56, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(57, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(57, 64)), $mul.ref(8, 1)), 50);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(57, 64)), $mul.ref(12, 1)), 720);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(57, 64)), $mul.ref(16, 1)), 576);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(57, 64)), $mul.ref(20, 1)), 74074);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(57, 64)), $mul.ref(24, 1)), 64);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(57, 64)), $mul.ref(28, 1)), 16);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(57, 64)), $mul.ref(32, 1)), 39);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(57, 64)), $mul.ref(36, 1)), 5);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(57, 64)), $mul.ref(40, 1)), 64);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(57, 64)), $mul.ref(44, 1)), 5);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(57, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(57, 64)), $mul.ref(52, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(57, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(58, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(58, 64)), $mul.ref(8, 1)), 50);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(58, 64)), $mul.ref(12, 1)), 800);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(58, 64)), $mul.ref(16, 1)), 520);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(58, 64)), $mul.ref(20, 1)), 58823);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(58, 64)), $mul.ref(24, 1)), 144);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(58, 64)), $mul.ref(28, 1)), 64);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(58, 64)), $mul.ref(32, 1)), 72);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(58, 64)), $mul.ref(36, 1)), 28);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(58, 64)), $mul.ref(40, 1)), 80);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(58, 64)), $mul.ref(44, 1)), 5);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(58, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(58, 64)), $mul.ref(52, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(58, 64)), $mul.ref(56, 1)), 0);
    $M.58 := $store.ref($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(59, 64)), $mul.ref(0, 1)), $0.ref);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(59, 64)), $mul.ref(8, 1)), 60);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(59, 64)), $mul.ref(12, 1)), 864);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(59, 64)), $mul.ref(16, 1)), 480);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(59, 64)), $mul.ref(20, 1)), 27777);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(59, 64)), $mul.ref(24, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(59, 64)), $mul.ref(28, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(59, 64)), $mul.ref(32, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(59, 64)), $mul.ref(36, 1)), 1);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(59, 64)), $mul.ref(40, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(59, 64)), $mul.ref(44, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(59, 64)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(59, 64)), $mul.ref(52, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(modedb, $mul.ref(0, 3840)), $mul.ref(59, 64)), $mul.ref(56, 1)), 0);
    $M.123 := $store.i8($M.123, __kstrtab_dmt_modes, 100);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_dmt_modes, $mul.ref(0, 10)), $mul.ref(1, 1)), 109);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_dmt_modes, $mul.ref(0, 10)), $mul.ref(2, 1)), 116);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_dmt_modes, $mul.ref(0, 10)), $mul.ref(3, 1)), 95);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_dmt_modes, $mul.ref(0, 10)), $mul.ref(4, 1)), 109);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_dmt_modes, $mul.ref(0, 10)), $mul.ref(5, 1)), 111);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_dmt_modes, $mul.ref(0, 10)), $mul.ref(6, 1)), 100);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_dmt_modes, $mul.ref(0, 10)), $mul.ref(7, 1)), 101);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_dmt_modes, $mul.ref(0, 10)), $mul.ref(8, 1)), 115);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_dmt_modes, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.124 := $store.i8($M.124, __kstrtab_vesa_modes, 118);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_vesa_modes, $mul.ref(0, 11)), $mul.ref(1, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_vesa_modes, $mul.ref(0, 11)), $mul.ref(2, 1)), 115);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_vesa_modes, $mul.ref(0, 11)), $mul.ref(3, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_vesa_modes, $mul.ref(0, 11)), $mul.ref(4, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_vesa_modes, $mul.ref(0, 11)), $mul.ref(5, 1)), 109);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_vesa_modes, $mul.ref(0, 11)), $mul.ref(6, 1)), 111);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_vesa_modes, $mul.ref(0, 11)), $mul.ref(7, 1)), 100);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_vesa_modes, $mul.ref(0, 11)), $mul.ref(8, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_vesa_modes, $mul.ref(0, 11)), $mul.ref(9, 1)), 115);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_vesa_modes, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, __kstrtab_fb_bl_default_curve, 102);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_fb_bl_default_curve, $mul.ref(0, 20)), $mul.ref(1, 1)), 98);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_fb_bl_default_curve, $mul.ref(0, 20)), $mul.ref(2, 1)), 95);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_fb_bl_default_curve, $mul.ref(0, 20)), $mul.ref(3, 1)), 98);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_fb_bl_default_curve, $mul.ref(0, 20)), $mul.ref(4, 1)), 108);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_fb_bl_default_curve, $mul.ref(0, 20)), $mul.ref(5, 1)), 95);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_fb_bl_default_curve, $mul.ref(0, 20)), $mul.ref(6, 1)), 100);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_fb_bl_default_curve, $mul.ref(0, 20)), $mul.ref(7, 1)), 101);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_fb_bl_default_curve, $mul.ref(0, 20)), $mul.ref(8, 1)), 102);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_fb_bl_default_curve, $mul.ref(0, 20)), $mul.ref(9, 1)), 97);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_fb_bl_default_curve, $mul.ref(0, 20)), $mul.ref(10, 1)), 117);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_fb_bl_default_curve, $mul.ref(0, 20)), $mul.ref(11, 1)), 108);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_fb_bl_default_curve, $mul.ref(0, 20)), $mul.ref(12, 1)), 116);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_fb_bl_default_curve, $mul.ref(0, 20)), $mul.ref(13, 1)), 95);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_fb_bl_default_curve, $mul.ref(0, 20)), $mul.ref(14, 1)), 99);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_fb_bl_default_curve, $mul.ref(0, 20)), $mul.ref(15, 1)), 117);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_fb_bl_default_curve, $mul.ref(0, 20)), $mul.ref(16, 1)), 114);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_fb_bl_default_curve, $mul.ref(0, 20)), $mul.ref(17, 1)), 118);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_fb_bl_default_curve, $mul.ref(0, 20)), $mul.ref(18, 1)), 101);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_fb_bl_default_curve, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.126 := $store.ref($M.126, device_attrs, .str.46);
    $M.126 := $store.i16($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(0, 48)), $mul.ref(32, 1)), show_bpp);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(0, 48)), $mul.ref(40, 1)), store_bpp);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.47);
    $M.126 := $store.i16($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(1, 48)), $mul.ref(32, 1)), show_blank);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(1, 48)), $mul.ref(40, 1)), store_blank);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.48);
    $M.126 := $store.i16($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(2, 48)), $mul.ref(32, 1)), show_console);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(2, 48)), $mul.ref(40, 1)), store_console);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.49);
    $M.126 := $store.i16($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(3, 48)), $mul.ref(32, 1)), show_cursor);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(3, 48)), $mul.ref(40, 1)), store_cursor);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.50);
    $M.126 := $store.i16($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(4, 48)), $mul.ref(32, 1)), show_mode);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(4, 48)), $mul.ref(40, 1)), store_mode);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.51);
    $M.126 := $store.i16($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(5, 48)), $mul.ref(32, 1)), show_modes);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(5, 48)), $mul.ref(40, 1)), store_modes);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.52);
    $M.126 := $store.i16($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(6, 48)), $mul.ref(32, 1)), show_pan);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(6, 48)), $mul.ref(40, 1)), store_pan);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.53);
    $M.126 := $store.i16($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(7, 48)), $mul.ref(32, 1)), show_virtual);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(7, 48)), $mul.ref(40, 1)), store_virtual);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.54);
    $M.126 := $store.i16($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(8, 48)), $mul.ref(32, 1)), show_name);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(8, 48)), $mul.ref(40, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.55);
    $M.126 := $store.i16($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(9, 48)), $mul.ref(32, 1)), show_stride);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(9, 48)), $mul.ref(40, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.56);
    $M.126 := $store.i16($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(10, 48)), $mul.ref(32, 1)), show_rotate);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(10, 48)), $mul.ref(40, 1)), store_rotate);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.57);
    $M.126 := $store.i16($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(11, 48)), $mul.ref(32, 1)), show_fbstate);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(11, 48)), $mul.ref(40, 1)), store_fbstate);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.58);
    $M.126 := $store.i16($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(12, 48)), $mul.ref(32, 1)), show_bl_curve);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(12, 48)), $mul.ref(40, 1)), store_bl_curve);
    $M.127 := $store.i8($M.127, __kstrtab_framebuffer_release, 102);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_framebuffer_release, $mul.ref(0, 20)), $mul.ref(1, 1)), 114);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_framebuffer_release, $mul.ref(0, 20)), $mul.ref(2, 1)), 97);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_framebuffer_release, $mul.ref(0, 20)), $mul.ref(3, 1)), 109);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_framebuffer_release, $mul.ref(0, 20)), $mul.ref(4, 1)), 101);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_framebuffer_release, $mul.ref(0, 20)), $mul.ref(5, 1)), 98);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_framebuffer_release, $mul.ref(0, 20)), $mul.ref(6, 1)), 117);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_framebuffer_release, $mul.ref(0, 20)), $mul.ref(7, 1)), 102);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_framebuffer_release, $mul.ref(0, 20)), $mul.ref(8, 1)), 102);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_framebuffer_release, $mul.ref(0, 20)), $mul.ref(9, 1)), 101);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_framebuffer_release, $mul.ref(0, 20)), $mul.ref(10, 1)), 114);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_framebuffer_release, $mul.ref(0, 20)), $mul.ref(11, 1)), 95);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_framebuffer_release, $mul.ref(0, 20)), $mul.ref(12, 1)), 114);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_framebuffer_release, $mul.ref(0, 20)), $mul.ref(13, 1)), 101);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_framebuffer_release, $mul.ref(0, 20)), $mul.ref(14, 1)), 108);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_framebuffer_release, $mul.ref(0, 20)), $mul.ref(15, 1)), 101);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_framebuffer_release, $mul.ref(0, 20)), $mul.ref(16, 1)), 97);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_framebuffer_release, $mul.ref(0, 20)), $mul.ref(17, 1)), 115);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_framebuffer_release, $mul.ref(0, 20)), $mul.ref(18, 1)), 101);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_framebuffer_release, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.128 := $store.i8($M.128, __kstrtab_framebuffer_alloc, 102);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_framebuffer_alloc, $mul.ref(0, 18)), $mul.ref(1, 1)), 114);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_framebuffer_alloc, $mul.ref(0, 18)), $mul.ref(2, 1)), 97);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_framebuffer_alloc, $mul.ref(0, 18)), $mul.ref(3, 1)), 109);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_framebuffer_alloc, $mul.ref(0, 18)), $mul.ref(4, 1)), 101);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_framebuffer_alloc, $mul.ref(0, 18)), $mul.ref(5, 1)), 98);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_framebuffer_alloc, $mul.ref(0, 18)), $mul.ref(6, 1)), 117);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_framebuffer_alloc, $mul.ref(0, 18)), $mul.ref(7, 1)), 102);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_framebuffer_alloc, $mul.ref(0, 18)), $mul.ref(8, 1)), 102);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_framebuffer_alloc, $mul.ref(0, 18)), $mul.ref(9, 1)), 101);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_framebuffer_alloc, $mul.ref(0, 18)), $mul.ref(10, 1)), 114);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_framebuffer_alloc, $mul.ref(0, 18)), $mul.ref(11, 1)), 95);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_framebuffer_alloc, $mul.ref(0, 18)), $mul.ref(12, 1)), 97);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_framebuffer_alloc, $mul.ref(0, 18)), $mul.ref(13, 1)), 108);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_framebuffer_alloc, $mul.ref(0, 18)), $mul.ref(14, 1)), 108);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_framebuffer_alloc, $mul.ref(0, 18)), $mul.ref(15, 1)), 111);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_framebuffer_alloc, $mul.ref(0, 18)), $mul.ref(16, 1)), 99);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_framebuffer_alloc, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.129 := $store.i8($M.129, __kstrtab_fb_invert_cmaps, 102);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_fb_invert_cmaps, $mul.ref(0, 16)), $mul.ref(1, 1)), 98);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_fb_invert_cmaps, $mul.ref(0, 16)), $mul.ref(2, 1)), 95);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_fb_invert_cmaps, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_fb_invert_cmaps, $mul.ref(0, 16)), $mul.ref(4, 1)), 110);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_fb_invert_cmaps, $mul.ref(0, 16)), $mul.ref(5, 1)), 118);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_fb_invert_cmaps, $mul.ref(0, 16)), $mul.ref(6, 1)), 101);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_fb_invert_cmaps, $mul.ref(0, 16)), $mul.ref(7, 1)), 114);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_fb_invert_cmaps, $mul.ref(0, 16)), $mul.ref(8, 1)), 116);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_fb_invert_cmaps, $mul.ref(0, 16)), $mul.ref(9, 1)), 95);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_fb_invert_cmaps, $mul.ref(0, 16)), $mul.ref(10, 1)), 99);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_fb_invert_cmaps, $mul.ref(0, 16)), $mul.ref(11, 1)), 109);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_fb_invert_cmaps, $mul.ref(0, 16)), $mul.ref(12, 1)), 97);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_fb_invert_cmaps, $mul.ref(0, 16)), $mul.ref(13, 1)), 112);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_fb_invert_cmaps, $mul.ref(0, 16)), $mul.ref(14, 1)), 115);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_fb_invert_cmaps, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.130 := $store.i8($M.130, __kstrtab_fb_default_cmap, 102);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_fb_default_cmap, $mul.ref(0, 16)), $mul.ref(1, 1)), 98);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_fb_default_cmap, $mul.ref(0, 16)), $mul.ref(2, 1)), 95);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_fb_default_cmap, $mul.ref(0, 16)), $mul.ref(3, 1)), 100);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_fb_default_cmap, $mul.ref(0, 16)), $mul.ref(4, 1)), 101);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_fb_default_cmap, $mul.ref(0, 16)), $mul.ref(5, 1)), 102);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_fb_default_cmap, $mul.ref(0, 16)), $mul.ref(6, 1)), 97);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_fb_default_cmap, $mul.ref(0, 16)), $mul.ref(7, 1)), 117);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_fb_default_cmap, $mul.ref(0, 16)), $mul.ref(8, 1)), 108);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_fb_default_cmap, $mul.ref(0, 16)), $mul.ref(9, 1)), 116);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_fb_default_cmap, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_fb_default_cmap, $mul.ref(0, 16)), $mul.ref(11, 1)), 99);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_fb_default_cmap, $mul.ref(0, 16)), $mul.ref(12, 1)), 109);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_fb_default_cmap, $mul.ref(0, 16)), $mul.ref(13, 1)), 97);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_fb_default_cmap, $mul.ref(0, 16)), $mul.ref(14, 1)), 112);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_fb_default_cmap, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.131 := $store.i8($M.131, __kstrtab_fb_set_cmap, 102);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_fb_set_cmap, $mul.ref(0, 12)), $mul.ref(1, 1)), 98);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_fb_set_cmap, $mul.ref(0, 12)), $mul.ref(2, 1)), 95);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_fb_set_cmap, $mul.ref(0, 12)), $mul.ref(3, 1)), 115);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_fb_set_cmap, $mul.ref(0, 12)), $mul.ref(4, 1)), 101);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_fb_set_cmap, $mul.ref(0, 12)), $mul.ref(5, 1)), 116);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_fb_set_cmap, $mul.ref(0, 12)), $mul.ref(6, 1)), 95);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_fb_set_cmap, $mul.ref(0, 12)), $mul.ref(7, 1)), 99);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_fb_set_cmap, $mul.ref(0, 12)), $mul.ref(8, 1)), 109);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_fb_set_cmap, $mul.ref(0, 12)), $mul.ref(9, 1)), 97);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_fb_set_cmap, $mul.ref(0, 12)), $mul.ref(10, 1)), 112);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_fb_set_cmap, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.132 := $store.i8($M.132, __kstrtab_fb_copy_cmap, 102);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_fb_copy_cmap, $mul.ref(0, 13)), $mul.ref(1, 1)), 98);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_fb_copy_cmap, $mul.ref(0, 13)), $mul.ref(2, 1)), 95);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_fb_copy_cmap, $mul.ref(0, 13)), $mul.ref(3, 1)), 99);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_fb_copy_cmap, $mul.ref(0, 13)), $mul.ref(4, 1)), 111);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_fb_copy_cmap, $mul.ref(0, 13)), $mul.ref(5, 1)), 112);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_fb_copy_cmap, $mul.ref(0, 13)), $mul.ref(6, 1)), 121);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_fb_copy_cmap, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_fb_copy_cmap, $mul.ref(0, 13)), $mul.ref(8, 1)), 99);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_fb_copy_cmap, $mul.ref(0, 13)), $mul.ref(9, 1)), 109);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_fb_copy_cmap, $mul.ref(0, 13)), $mul.ref(10, 1)), 97);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_fb_copy_cmap, $mul.ref(0, 13)), $mul.ref(11, 1)), 112);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_fb_copy_cmap, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.133 := $store.i8($M.133, __kstrtab_fb_dealloc_cmap, 102);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_fb_dealloc_cmap, $mul.ref(0, 16)), $mul.ref(1, 1)), 98);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_fb_dealloc_cmap, $mul.ref(0, 16)), $mul.ref(2, 1)), 95);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_fb_dealloc_cmap, $mul.ref(0, 16)), $mul.ref(3, 1)), 100);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_fb_dealloc_cmap, $mul.ref(0, 16)), $mul.ref(4, 1)), 101);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_fb_dealloc_cmap, $mul.ref(0, 16)), $mul.ref(5, 1)), 97);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_fb_dealloc_cmap, $mul.ref(0, 16)), $mul.ref(6, 1)), 108);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_fb_dealloc_cmap, $mul.ref(0, 16)), $mul.ref(7, 1)), 108);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_fb_dealloc_cmap, $mul.ref(0, 16)), $mul.ref(8, 1)), 111);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_fb_dealloc_cmap, $mul.ref(0, 16)), $mul.ref(9, 1)), 99);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_fb_dealloc_cmap, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_fb_dealloc_cmap, $mul.ref(0, 16)), $mul.ref(11, 1)), 99);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_fb_dealloc_cmap, $mul.ref(0, 16)), $mul.ref(12, 1)), 109);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_fb_dealloc_cmap, $mul.ref(0, 16)), $mul.ref(13, 1)), 97);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_fb_dealloc_cmap, $mul.ref(0, 16)), $mul.ref(14, 1)), 112);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_fb_dealloc_cmap, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.134 := $store.i8($M.134, __kstrtab_fb_alloc_cmap, 102);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_fb_alloc_cmap, $mul.ref(0, 14)), $mul.ref(1, 1)), 98);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_fb_alloc_cmap, $mul.ref(0, 14)), $mul.ref(2, 1)), 95);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_fb_alloc_cmap, $mul.ref(0, 14)), $mul.ref(3, 1)), 97);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_fb_alloc_cmap, $mul.ref(0, 14)), $mul.ref(4, 1)), 108);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_fb_alloc_cmap, $mul.ref(0, 14)), $mul.ref(5, 1)), 108);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_fb_alloc_cmap, $mul.ref(0, 14)), $mul.ref(6, 1)), 111);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_fb_alloc_cmap, $mul.ref(0, 14)), $mul.ref(7, 1)), 99);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_fb_alloc_cmap, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_fb_alloc_cmap, $mul.ref(0, 14)), $mul.ref(9, 1)), 99);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_fb_alloc_cmap, $mul.ref(0, 14)), $mul.ref(10, 1)), 109);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_fb_alloc_cmap, $mul.ref(0, 14)), $mul.ref(11, 1)), 97);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_fb_alloc_cmap, $mul.ref(0, 14)), $mul.ref(12, 1)), 112);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab_fb_alloc_cmap, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i16($M.0, blue16, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue16, $mul.ref(0, 32)), $mul.ref(1, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue16, $mul.ref(0, 32)), $mul.ref(2, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue16, $mul.ref(0, 32)), $mul.ref(3, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue16, $mul.ref(0, 32)), $mul.ref(4, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue16, $mul.ref(0, 32)), $mul.ref(5, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue16, $mul.ref(0, 32)), $mul.ref(6, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue16, $mul.ref(0, 32)), $mul.ref(7, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue16, $mul.ref(0, 32)), $mul.ref(8, 2)), 21845);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue16, $mul.ref(0, 32)), $mul.ref(9, 2)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue16, $mul.ref(0, 32)), $mul.ref(10, 2)), 21845);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue16, $mul.ref(0, 32)), $mul.ref(11, 2)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue16, $mul.ref(0, 32)), $mul.ref(12, 2)), 21845);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue16, $mul.ref(0, 32)), $mul.ref(13, 2)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue16, $mul.ref(0, 32)), $mul.ref(14, 2)), 21845);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue16, $mul.ref(0, 32)), $mul.ref(15, 2)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, green16, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green16, $mul.ref(0, 32)), $mul.ref(1, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green16, $mul.ref(0, 32)), $mul.ref(2, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green16, $mul.ref(0, 32)), $mul.ref(3, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green16, $mul.ref(0, 32)), $mul.ref(4, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green16, $mul.ref(0, 32)), $mul.ref(5, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green16, $mul.ref(0, 32)), $mul.ref(6, 2)), 21845);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green16, $mul.ref(0, 32)), $mul.ref(7, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green16, $mul.ref(0, 32)), $mul.ref(8, 2)), 21845);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green16, $mul.ref(0, 32)), $mul.ref(9, 2)), 21845);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green16, $mul.ref(0, 32)), $mul.ref(10, 2)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green16, $mul.ref(0, 32)), $mul.ref(11, 2)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green16, $mul.ref(0, 32)), $mul.ref(12, 2)), 21845);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green16, $mul.ref(0, 32)), $mul.ref(13, 2)), 21845);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green16, $mul.ref(0, 32)), $mul.ref(14, 2)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green16, $mul.ref(0, 32)), $mul.ref(15, 2)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, red16, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red16, $mul.ref(0, 32)), $mul.ref(1, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red16, $mul.ref(0, 32)), $mul.ref(2, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red16, $mul.ref(0, 32)), $mul.ref(3, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red16, $mul.ref(0, 32)), $mul.ref(4, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red16, $mul.ref(0, 32)), $mul.ref(5, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red16, $mul.ref(0, 32)), $mul.ref(6, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red16, $mul.ref(0, 32)), $mul.ref(7, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red16, $mul.ref(0, 32)), $mul.ref(8, 2)), 21845);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red16, $mul.ref(0, 32)), $mul.ref(9, 2)), 21845);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red16, $mul.ref(0, 32)), $mul.ref(10, 2)), 21845);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red16, $mul.ref(0, 32)), $mul.ref(11, 2)), 21845);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red16, $mul.ref(0, 32)), $mul.ref(12, 2)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red16, $mul.ref(0, 32)), $mul.ref(13, 2)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red16, $mul.ref(0, 32)), $mul.ref(14, 2)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red16, $mul.ref(0, 32)), $mul.ref(15, 2)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, blue8, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue8, $mul.ref(0, 16)), $mul.ref(1, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue8, $mul.ref(0, 16)), $mul.ref(2, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue8, $mul.ref(0, 16)), $mul.ref(3, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue8, $mul.ref(0, 16)), $mul.ref(4, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue8, $mul.ref(0, 16)), $mul.ref(5, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue8, $mul.ref(0, 16)), $mul.ref(6, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue8, $mul.ref(0, 16)), $mul.ref(7, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, green8, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green8, $mul.ref(0, 16)), $mul.ref(1, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green8, $mul.ref(0, 16)), $mul.ref(2, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green8, $mul.ref(0, 16)), $mul.ref(3, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green8, $mul.ref(0, 16)), $mul.ref(4, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green8, $mul.ref(0, 16)), $mul.ref(5, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green8, $mul.ref(0, 16)), $mul.ref(6, 2)), 21845);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green8, $mul.ref(0, 16)), $mul.ref(7, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, red8, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red8, $mul.ref(0, 16)), $mul.ref(1, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red8, $mul.ref(0, 16)), $mul.ref(2, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red8, $mul.ref(0, 16)), $mul.ref(3, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red8, $mul.ref(0, 16)), $mul.ref(4, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red8, $mul.ref(0, 16)), $mul.ref(5, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red8, $mul.ref(0, 16)), $mul.ref(6, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red8, $mul.ref(0, 16)), $mul.ref(7, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, blue4, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue4, $mul.ref(0, 8)), $mul.ref(1, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue4, $mul.ref(0, 8)), $mul.ref(2, 2)), 21845);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue4, $mul.ref(0, 8)), $mul.ref(3, 2)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, green4, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green4, $mul.ref(0, 8)), $mul.ref(1, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green4, $mul.ref(0, 8)), $mul.ref(2, 2)), 21845);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green4, $mul.ref(0, 8)), $mul.ref(3, 2)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, red4, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red4, $mul.ref(0, 8)), $mul.ref(1, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red4, $mul.ref(0, 8)), $mul.ref(2, 2)), 21845);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red4, $mul.ref(0, 8)), $mul.ref(3, 2)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, blue2, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(blue2, $mul.ref(0, 4)), $mul.ref(1, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, green2, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(green2, $mul.ref(0, 4)), $mul.ref(1, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i16($M.0, red2, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(red2, $mul.ref(0, 4)), $mul.ref(1, 2)), $sub.i16(0, 21846));
    $M.0 := $store.i32($M.0, default_16_colors, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(default_16_colors, $mul.ref(0, 40)), $mul.ref(4, 1)), 16);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(default_16_colors, $mul.ref(0, 40)), $mul.ref(8, 1)), red16);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(default_16_colors, $mul.ref(0, 40)), $mul.ref(16, 1)), green16);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(default_16_colors, $mul.ref(0, 40)), $mul.ref(24, 1)), blue16);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(default_16_colors, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i32($M.0, default_8_colors, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(default_8_colors, $mul.ref(0, 40)), $mul.ref(4, 1)), 8);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(default_8_colors, $mul.ref(0, 40)), $mul.ref(8, 1)), red8);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(default_8_colors, $mul.ref(0, 40)), $mul.ref(16, 1)), green8);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(default_8_colors, $mul.ref(0, 40)), $mul.ref(24, 1)), blue8);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(default_8_colors, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i32($M.0, default_4_colors, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(default_4_colors, $mul.ref(0, 40)), $mul.ref(4, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(default_4_colors, $mul.ref(0, 40)), $mul.ref(8, 1)), red4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(default_4_colors, $mul.ref(0, 40)), $mul.ref(16, 1)), green4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(default_4_colors, $mul.ref(0, 40)), $mul.ref(24, 1)), blue4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(default_4_colors, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i32($M.0, default_2_colors, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(default_2_colors, $mul.ref(0, 40)), $mul.ref(4, 1)), 2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(default_2_colors, $mul.ref(0, 40)), $mul.ref(8, 1)), red2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(default_2_colors, $mul.ref(0, 40)), $mul.ref(16, 1)), green2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(default_2_colors, $mul.ref(0, 40)), $mul.ref(24, 1)), blue2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(default_2_colors, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.135 := $store.i8($M.135, __kstrtab_fb_destroy_modedb, 102);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fb_destroy_modedb, $mul.ref(0, 18)), $mul.ref(1, 1)), 98);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fb_destroy_modedb, $mul.ref(0, 18)), $mul.ref(2, 1)), 95);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fb_destroy_modedb, $mul.ref(0, 18)), $mul.ref(3, 1)), 100);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fb_destroy_modedb, $mul.ref(0, 18)), $mul.ref(4, 1)), 101);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fb_destroy_modedb, $mul.ref(0, 18)), $mul.ref(5, 1)), 115);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fb_destroy_modedb, $mul.ref(0, 18)), $mul.ref(6, 1)), 116);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fb_destroy_modedb, $mul.ref(0, 18)), $mul.ref(7, 1)), 114);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fb_destroy_modedb, $mul.ref(0, 18)), $mul.ref(8, 1)), 111);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fb_destroy_modedb, $mul.ref(0, 18)), $mul.ref(9, 1)), 121);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fb_destroy_modedb, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fb_destroy_modedb, $mul.ref(0, 18)), $mul.ref(11, 1)), 109);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fb_destroy_modedb, $mul.ref(0, 18)), $mul.ref(12, 1)), 111);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fb_destroy_modedb, $mul.ref(0, 18)), $mul.ref(13, 1)), 100);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fb_destroy_modedb, $mul.ref(0, 18)), $mul.ref(14, 1)), 101);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fb_destroy_modedb, $mul.ref(0, 18)), $mul.ref(15, 1)), 100);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fb_destroy_modedb, $mul.ref(0, 18)), $mul.ref(16, 1)), 98);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fb_destroy_modedb, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.136 := $store.i8($M.136, __kstrtab_fb_validate_mode, 102);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_fb_validate_mode, $mul.ref(0, 17)), $mul.ref(1, 1)), 98);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_fb_validate_mode, $mul.ref(0, 17)), $mul.ref(2, 1)), 95);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_fb_validate_mode, $mul.ref(0, 17)), $mul.ref(3, 1)), 118);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_fb_validate_mode, $mul.ref(0, 17)), $mul.ref(4, 1)), 97);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_fb_validate_mode, $mul.ref(0, 17)), $mul.ref(5, 1)), 108);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_fb_validate_mode, $mul.ref(0, 17)), $mul.ref(6, 1)), 105);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_fb_validate_mode, $mul.ref(0, 17)), $mul.ref(7, 1)), 100);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_fb_validate_mode, $mul.ref(0, 17)), $mul.ref(8, 1)), 97);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_fb_validate_mode, $mul.ref(0, 17)), $mul.ref(9, 1)), 116);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_fb_validate_mode, $mul.ref(0, 17)), $mul.ref(10, 1)), 101);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_fb_validate_mode, $mul.ref(0, 17)), $mul.ref(11, 1)), 95);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_fb_validate_mode, $mul.ref(0, 17)), $mul.ref(12, 1)), 109);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_fb_validate_mode, $mul.ref(0, 17)), $mul.ref(13, 1)), 111);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_fb_validate_mode, $mul.ref(0, 17)), $mul.ref(14, 1)), 100);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_fb_validate_mode, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_fb_validate_mode, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.137 := $store.i8($M.137, __kstrtab_fb_get_mode, 102);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_fb_get_mode, $mul.ref(0, 12)), $mul.ref(1, 1)), 98);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_fb_get_mode, $mul.ref(0, 12)), $mul.ref(2, 1)), 95);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_fb_get_mode, $mul.ref(0, 12)), $mul.ref(3, 1)), 103);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_fb_get_mode, $mul.ref(0, 12)), $mul.ref(4, 1)), 101);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_fb_get_mode, $mul.ref(0, 12)), $mul.ref(5, 1)), 116);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_fb_get_mode, $mul.ref(0, 12)), $mul.ref(6, 1)), 95);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_fb_get_mode, $mul.ref(0, 12)), $mul.ref(7, 1)), 109);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_fb_get_mode, $mul.ref(0, 12)), $mul.ref(8, 1)), 111);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_fb_get_mode, $mul.ref(0, 12)), $mul.ref(9, 1)), 100);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_fb_get_mode, $mul.ref(0, 12)), $mul.ref(10, 1)), 101);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_fb_get_mode, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.138 := $store.i8($M.138, __kstrtab_fb_edid_add_monspecs, 102);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_fb_edid_add_monspecs, $mul.ref(0, 21)), $mul.ref(1, 1)), 98);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_fb_edid_add_monspecs, $mul.ref(0, 21)), $mul.ref(2, 1)), 95);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_fb_edid_add_monspecs, $mul.ref(0, 21)), $mul.ref(3, 1)), 101);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_fb_edid_add_monspecs, $mul.ref(0, 21)), $mul.ref(4, 1)), 100);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_fb_edid_add_monspecs, $mul.ref(0, 21)), $mul.ref(5, 1)), 105);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_fb_edid_add_monspecs, $mul.ref(0, 21)), $mul.ref(6, 1)), 100);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_fb_edid_add_monspecs, $mul.ref(0, 21)), $mul.ref(7, 1)), 95);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_fb_edid_add_monspecs, $mul.ref(0, 21)), $mul.ref(8, 1)), 97);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_fb_edid_add_monspecs, $mul.ref(0, 21)), $mul.ref(9, 1)), 100);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_fb_edid_add_monspecs, $mul.ref(0, 21)), $mul.ref(10, 1)), 100);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_fb_edid_add_monspecs, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_fb_edid_add_monspecs, $mul.ref(0, 21)), $mul.ref(12, 1)), 109);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_fb_edid_add_monspecs, $mul.ref(0, 21)), $mul.ref(13, 1)), 111);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_fb_edid_add_monspecs, $mul.ref(0, 21)), $mul.ref(14, 1)), 110);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_fb_edid_add_monspecs, $mul.ref(0, 21)), $mul.ref(15, 1)), 115);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_fb_edid_add_monspecs, $mul.ref(0, 21)), $mul.ref(16, 1)), 112);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_fb_edid_add_monspecs, $mul.ref(0, 21)), $mul.ref(17, 1)), 101);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_fb_edid_add_monspecs, $mul.ref(0, 21)), $mul.ref(18, 1)), 99);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_fb_edid_add_monspecs, $mul.ref(0, 21)), $mul.ref(19, 1)), 115);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_fb_edid_add_monspecs, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.139 := $store.i8($M.139, __kstrtab_fb_edid_to_monspecs, 102);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_fb_edid_to_monspecs, $mul.ref(0, 20)), $mul.ref(1, 1)), 98);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_fb_edid_to_monspecs, $mul.ref(0, 20)), $mul.ref(2, 1)), 95);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_fb_edid_to_monspecs, $mul.ref(0, 20)), $mul.ref(3, 1)), 101);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_fb_edid_to_monspecs, $mul.ref(0, 20)), $mul.ref(4, 1)), 100);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_fb_edid_to_monspecs, $mul.ref(0, 20)), $mul.ref(5, 1)), 105);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_fb_edid_to_monspecs, $mul.ref(0, 20)), $mul.ref(6, 1)), 100);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_fb_edid_to_monspecs, $mul.ref(0, 20)), $mul.ref(7, 1)), 95);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_fb_edid_to_monspecs, $mul.ref(0, 20)), $mul.ref(8, 1)), 116);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_fb_edid_to_monspecs, $mul.ref(0, 20)), $mul.ref(9, 1)), 111);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_fb_edid_to_monspecs, $mul.ref(0, 20)), $mul.ref(10, 1)), 95);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_fb_edid_to_monspecs, $mul.ref(0, 20)), $mul.ref(11, 1)), 109);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_fb_edid_to_monspecs, $mul.ref(0, 20)), $mul.ref(12, 1)), 111);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_fb_edid_to_monspecs, $mul.ref(0, 20)), $mul.ref(13, 1)), 110);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_fb_edid_to_monspecs, $mul.ref(0, 20)), $mul.ref(14, 1)), 115);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_fb_edid_to_monspecs, $mul.ref(0, 20)), $mul.ref(15, 1)), 112);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_fb_edid_to_monspecs, $mul.ref(0, 20)), $mul.ref(16, 1)), 101);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_fb_edid_to_monspecs, $mul.ref(0, 20)), $mul.ref(17, 1)), 99);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_fb_edid_to_monspecs, $mul.ref(0, 20)), $mul.ref(18, 1)), 115);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_fb_edid_to_monspecs, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.140 := $store.i8($M.140, __kstrtab_fb_parse_edid, 102);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_fb_parse_edid, $mul.ref(0, 14)), $mul.ref(1, 1)), 98);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_fb_parse_edid, $mul.ref(0, 14)), $mul.ref(2, 1)), 95);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_fb_parse_edid, $mul.ref(0, 14)), $mul.ref(3, 1)), 112);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_fb_parse_edid, $mul.ref(0, 14)), $mul.ref(4, 1)), 97);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_fb_parse_edid, $mul.ref(0, 14)), $mul.ref(5, 1)), 114);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_fb_parse_edid, $mul.ref(0, 14)), $mul.ref(6, 1)), 115);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_fb_parse_edid, $mul.ref(0, 14)), $mul.ref(7, 1)), 101);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_fb_parse_edid, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_fb_parse_edid, $mul.ref(0, 14)), $mul.ref(9, 1)), 101);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_fb_parse_edid, $mul.ref(0, 14)), $mul.ref(10, 1)), 100);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_fb_parse_edid, $mul.ref(0, 14)), $mul.ref(11, 1)), 105);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_fb_parse_edid, $mul.ref(0, 14)), $mul.ref(12, 1)), 100);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_fb_parse_edid, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.141 := $store.i8($M.141, __kstrtab_fb_firmware_edid, 102);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_fb_firmware_edid, $mul.ref(0, 17)), $mul.ref(1, 1)), 98);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_fb_firmware_edid, $mul.ref(0, 17)), $mul.ref(2, 1)), 95);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_fb_firmware_edid, $mul.ref(0, 17)), $mul.ref(3, 1)), 102);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_fb_firmware_edid, $mul.ref(0, 17)), $mul.ref(4, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_fb_firmware_edid, $mul.ref(0, 17)), $mul.ref(5, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_fb_firmware_edid, $mul.ref(0, 17)), $mul.ref(6, 1)), 109);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_fb_firmware_edid, $mul.ref(0, 17)), $mul.ref(7, 1)), 119);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_fb_firmware_edid, $mul.ref(0, 17)), $mul.ref(8, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_fb_firmware_edid, $mul.ref(0, 17)), $mul.ref(9, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_fb_firmware_edid, $mul.ref(0, 17)), $mul.ref(10, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_fb_firmware_edid, $mul.ref(0, 17)), $mul.ref(11, 1)), 95);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_fb_firmware_edid, $mul.ref(0, 17)), $mul.ref(12, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_fb_firmware_edid, $mul.ref(0, 17)), $mul.ref(13, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_fb_firmware_edid, $mul.ref(0, 17)), $mul.ref(14, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_fb_firmware_edid, $mul.ref(0, 17)), $mul.ref(15, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_fb_firmware_edid, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.142 := $store.i8($M.142, __kstrtab_of_get_fb_videomode, 111);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_of_get_fb_videomode, $mul.ref(0, 20)), $mul.ref(1, 1)), 102);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_of_get_fb_videomode, $mul.ref(0, 20)), $mul.ref(2, 1)), 95);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_of_get_fb_videomode, $mul.ref(0, 20)), $mul.ref(3, 1)), 103);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_of_get_fb_videomode, $mul.ref(0, 20)), $mul.ref(4, 1)), 101);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_of_get_fb_videomode, $mul.ref(0, 20)), $mul.ref(5, 1)), 116);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_of_get_fb_videomode, $mul.ref(0, 20)), $mul.ref(6, 1)), 95);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_of_get_fb_videomode, $mul.ref(0, 20)), $mul.ref(7, 1)), 102);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_of_get_fb_videomode, $mul.ref(0, 20)), $mul.ref(8, 1)), 98);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_of_get_fb_videomode, $mul.ref(0, 20)), $mul.ref(9, 1)), 95);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_of_get_fb_videomode, $mul.ref(0, 20)), $mul.ref(10, 1)), 118);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_of_get_fb_videomode, $mul.ref(0, 20)), $mul.ref(11, 1)), 105);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_of_get_fb_videomode, $mul.ref(0, 20)), $mul.ref(12, 1)), 100);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_of_get_fb_videomode, $mul.ref(0, 20)), $mul.ref(13, 1)), 101);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_of_get_fb_videomode, $mul.ref(0, 20)), $mul.ref(14, 1)), 111);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_of_get_fb_videomode, $mul.ref(0, 20)), $mul.ref(15, 1)), 109);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_of_get_fb_videomode, $mul.ref(0, 20)), $mul.ref(16, 1)), 111);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_of_get_fb_videomode, $mul.ref(0, 20)), $mul.ref(17, 1)), 100);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_of_get_fb_videomode, $mul.ref(0, 20)), $mul.ref(18, 1)), 101);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_of_get_fb_videomode, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.143 := $store.i8($M.143, __kstrtab_fb_videomode_from_videomode, 102);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(1, 1)), 98);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(2, 1)), 95);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(3, 1)), 118);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(4, 1)), 105);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(5, 1)), 100);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(6, 1)), 101);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(7, 1)), 111);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(8, 1)), 109);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(9, 1)), 111);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(10, 1)), 100);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(11, 1)), 101);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(12, 1)), 95);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(13, 1)), 102);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(14, 1)), 114);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(15, 1)), 111);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(16, 1)), 109);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(17, 1)), 95);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(18, 1)), 118);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(19, 1)), 105);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(20, 1)), 100);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(21, 1)), 101);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(22, 1)), 111);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(23, 1)), 109);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(24, 1)), 111);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(25, 1)), 100);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(26, 1)), 101);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fb_videomode_from_videomode, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, edid_v1_header, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(edid_v1_header, $mul.ref(0, 8)), $mul.ref(1, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(edid_v1_header, $mul.ref(0, 8)), $mul.ref(2, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(edid_v1_header, $mul.ref(0, 8)), $mul.ref(3, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(edid_v1_header, $mul.ref(0, 8)), $mul.ref(4, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(edid_v1_header, $mul.ref(0, 8)), $mul.ref(5, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(edid_v1_header, $mul.ref(0, 8)), $mul.ref(6, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(edid_v1_header, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.47 := $store.i8($M.47, brokendb, 68);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(brokendb, $mul.ref(0, 36)), $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(1, 1)), 69);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(brokendb, $mul.ref(0, 36)), $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(2, 1)), 67);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(brokendb, $mul.ref(0, 36)), $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(brokendb, $mul.ref(0, 36)), $mul.ref(0, 12)), $mul.ref(4, 1)), 1850);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(brokendb, $mul.ref(0, 36)), $mul.ref(0, 12)), $mul.ref(8, 1)), 1);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(brokendb, $mul.ref(0, 36)), $mul.ref(1, 12)), $mul.ref(0, 1)), $mul.ref(0, 1)), 86);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(brokendb, $mul.ref(0, 36)), $mul.ref(1, 12)), $mul.ref(0, 1)), $mul.ref(1, 1)), 83);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(brokendb, $mul.ref(0, 36)), $mul.ref(1, 12)), $mul.ref(0, 1)), $mul.ref(2, 1)), 67);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(brokendb, $mul.ref(0, 36)), $mul.ref(1, 12)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(brokendb, $mul.ref(0, 36)), $mul.ref(1, 12)), $mul.ref(4, 1)), 23108);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(brokendb, $mul.ref(0, 36)), $mul.ref(1, 12)), $mul.ref(8, 1)), 2);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(brokendb, $mul.ref(0, 36)), $mul.ref(2, 12)), $mul.ref(0, 1)), $mul.ref(0, 1)), 83);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(brokendb, $mul.ref(0, 36)), $mul.ref(2, 12)), $mul.ref(0, 1)), $mul.ref(1, 1)), 72);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(brokendb, $mul.ref(0, 36)), $mul.ref(2, 12)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(brokendb, $mul.ref(0, 36)), $mul.ref(2, 12)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(brokendb, $mul.ref(0, 36)), $mul.ref(2, 12)), $mul.ref(4, 1)), 5006);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(brokendb, $mul.ref(0, 36)), $mul.ref(2, 12)), $mul.ref(8, 1)), 3);
    $M.204 := $store.i8($M.204, __kstrtab_fb_set_suspend, 102);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(__kstrtab_fb_set_suspend, $mul.ref(0, 15)), $mul.ref(1, 1)), 98);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(__kstrtab_fb_set_suspend, $mul.ref(0, 15)), $mul.ref(2, 1)), 95);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(__kstrtab_fb_set_suspend, $mul.ref(0, 15)), $mul.ref(3, 1)), 115);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(__kstrtab_fb_set_suspend, $mul.ref(0, 15)), $mul.ref(4, 1)), 101);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(__kstrtab_fb_set_suspend, $mul.ref(0, 15)), $mul.ref(5, 1)), 116);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(__kstrtab_fb_set_suspend, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(__kstrtab_fb_set_suspend, $mul.ref(0, 15)), $mul.ref(7, 1)), 115);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(__kstrtab_fb_set_suspend, $mul.ref(0, 15)), $mul.ref(8, 1)), 117);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(__kstrtab_fb_set_suspend, $mul.ref(0, 15)), $mul.ref(9, 1)), 115);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(__kstrtab_fb_set_suspend, $mul.ref(0, 15)), $mul.ref(10, 1)), 112);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(__kstrtab_fb_set_suspend, $mul.ref(0, 15)), $mul.ref(11, 1)), 101);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(__kstrtab_fb_set_suspend, $mul.ref(0, 15)), $mul.ref(12, 1)), 110);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(__kstrtab_fb_set_suspend, $mul.ref(0, 15)), $mul.ref(13, 1)), 100);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(__kstrtab_fb_set_suspend, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.205 := $store.i8($M.205, __kstrtab_unregister_framebuffer, 117);
    $M.205 := $store.i8($M.205, $add.ref($add.ref(__kstrtab_unregister_framebuffer, $mul.ref(0, 23)), $mul.ref(1, 1)), 110);
    $M.205 := $store.i8($M.205, $add.ref($add.ref(__kstrtab_unregister_framebuffer, $mul.ref(0, 23)), $mul.ref(2, 1)), 114);
    $M.205 := $store.i8($M.205, $add.ref($add.ref(__kstrtab_unregister_framebuffer, $mul.ref(0, 23)), $mul.ref(3, 1)), 101);
    $M.205 := $store.i8($M.205, $add.ref($add.ref(__kstrtab_unregister_framebuffer, $mul.ref(0, 23)), $mul.ref(4, 1)), 103);
    $M.205 := $store.i8($M.205, $add.ref($add.ref(__kstrtab_unregister_framebuffer, $mul.ref(0, 23)), $mul.ref(5, 1)), 105);
    $M.205 := $store.i8($M.205, $add.ref($add.ref(__kstrtab_unregister_framebuffer, $mul.ref(0, 23)), $mul.ref(6, 1)), 115);
    $M.205 := $store.i8($M.205, $add.ref($add.ref(__kstrtab_unregister_framebuffer, $mul.ref(0, 23)), $mul.ref(7, 1)), 116);
    $M.205 := $store.i8($M.205, $add.ref($add.ref(__kstrtab_unregister_framebuffer, $mul.ref(0, 23)), $mul.ref(8, 1)), 101);
    $M.205 := $store.i8($M.205, $add.ref($add.ref(__kstrtab_unregister_framebuffer, $mul.ref(0, 23)), $mul.ref(9, 1)), 114);
    $M.205 := $store.i8($M.205, $add.ref($add.ref(__kstrtab_unregister_framebuffer, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.205 := $store.i8($M.205, $add.ref($add.ref(__kstrtab_unregister_framebuffer, $mul.ref(0, 23)), $mul.ref(11, 1)), 102);
    $M.205 := $store.i8($M.205, $add.ref($add.ref(__kstrtab_unregister_framebuffer, $mul.ref(0, 23)), $mul.ref(12, 1)), 114);
    $M.205 := $store.i8($M.205, $add.ref($add.ref(__kstrtab_unregister_framebuffer, $mul.ref(0, 23)), $mul.ref(13, 1)), 97);
    $M.205 := $store.i8($M.205, $add.ref($add.ref(__kstrtab_unregister_framebuffer, $mul.ref(0, 23)), $mul.ref(14, 1)), 109);
    $M.205 := $store.i8($M.205, $add.ref($add.ref(__kstrtab_unregister_framebuffer, $mul.ref(0, 23)), $mul.ref(15, 1)), 101);
    $M.205 := $store.i8($M.205, $add.ref($add.ref(__kstrtab_unregister_framebuffer, $mul.ref(0, 23)), $mul.ref(16, 1)), 98);
    $M.205 := $store.i8($M.205, $add.ref($add.ref(__kstrtab_unregister_framebuffer, $mul.ref(0, 23)), $mul.ref(17, 1)), 117);
    $M.205 := $store.i8($M.205, $add.ref($add.ref(__kstrtab_unregister_framebuffer, $mul.ref(0, 23)), $mul.ref(18, 1)), 102);
    $M.205 := $store.i8($M.205, $add.ref($add.ref(__kstrtab_unregister_framebuffer, $mul.ref(0, 23)), $mul.ref(19, 1)), 102);
    $M.205 := $store.i8($M.205, $add.ref($add.ref(__kstrtab_unregister_framebuffer, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.205 := $store.i8($M.205, $add.ref($add.ref(__kstrtab_unregister_framebuffer, $mul.ref(0, 23)), $mul.ref(21, 1)), 114);
    $M.205 := $store.i8($M.205, $add.ref($add.ref(__kstrtab_unregister_framebuffer, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.206 := $store.i8($M.206, __kstrtab_register_framebuffer, 114);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_register_framebuffer, $mul.ref(0, 21)), $mul.ref(1, 1)), 101);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_register_framebuffer, $mul.ref(0, 21)), $mul.ref(2, 1)), 103);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_register_framebuffer, $mul.ref(0, 21)), $mul.ref(3, 1)), 105);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_register_framebuffer, $mul.ref(0, 21)), $mul.ref(4, 1)), 115);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_register_framebuffer, $mul.ref(0, 21)), $mul.ref(5, 1)), 116);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_register_framebuffer, $mul.ref(0, 21)), $mul.ref(6, 1)), 101);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_register_framebuffer, $mul.ref(0, 21)), $mul.ref(7, 1)), 114);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_register_framebuffer, $mul.ref(0, 21)), $mul.ref(8, 1)), 95);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_register_framebuffer, $mul.ref(0, 21)), $mul.ref(9, 1)), 102);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_register_framebuffer, $mul.ref(0, 21)), $mul.ref(10, 1)), 114);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_register_framebuffer, $mul.ref(0, 21)), $mul.ref(11, 1)), 97);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_register_framebuffer, $mul.ref(0, 21)), $mul.ref(12, 1)), 109);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_register_framebuffer, $mul.ref(0, 21)), $mul.ref(13, 1)), 101);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_register_framebuffer, $mul.ref(0, 21)), $mul.ref(14, 1)), 98);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_register_framebuffer, $mul.ref(0, 21)), $mul.ref(15, 1)), 117);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_register_framebuffer, $mul.ref(0, 21)), $mul.ref(16, 1)), 102);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_register_framebuffer, $mul.ref(0, 21)), $mul.ref(17, 1)), 102);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_register_framebuffer, $mul.ref(0, 21)), $mul.ref(18, 1)), 101);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_register_framebuffer, $mul.ref(0, 21)), $mul.ref(19, 1)), 114);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_register_framebuffer, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.207 := $store.i8($M.207, __kstrtab_remove_conflicting_framebuffers, 114);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(1, 1)), 101);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(2, 1)), 109);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(3, 1)), 111);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(4, 1)), 118);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(5, 1)), 101);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(6, 1)), 95);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(7, 1)), 99);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(8, 1)), 111);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(9, 1)), 110);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(10, 1)), 102);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(11, 1)), 108);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(12, 1)), 105);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(13, 1)), 99);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(14, 1)), 116);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(15, 1)), 105);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(16, 1)), 110);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(17, 1)), 103);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(18, 1)), 95);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(19, 1)), 102);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(20, 1)), 114);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(21, 1)), 97);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(22, 1)), 109);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(23, 1)), 101);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(24, 1)), 98);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(25, 1)), 117);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(26, 1)), 102);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(27, 1)), 102);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(28, 1)), 101);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(29, 1)), 114);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(30, 1)), 115);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_remove_conflicting_framebuffers, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, registration_lock, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(registration_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(registration_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(registration_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(registration_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(registration_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(registration_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(registration_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(registration_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.22);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(registration_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(registration_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(registration_lock, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(registration_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(registration_lock, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(registration_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(registration_lock, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(registration_lock, $mul.ref(0, 160)), $mul.ref(104, 1)), registration_lock);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(registration_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(registration_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(registration_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(registration_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.23);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(registration_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(registration_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.208 := $store.i8($M.208, __kstrtab_unlink_framebuffer, 117);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_unlink_framebuffer, $mul.ref(0, 19)), $mul.ref(1, 1)), 110);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_unlink_framebuffer, $mul.ref(0, 19)), $mul.ref(2, 1)), 108);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_unlink_framebuffer, $mul.ref(0, 19)), $mul.ref(3, 1)), 105);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_unlink_framebuffer, $mul.ref(0, 19)), $mul.ref(4, 1)), 110);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_unlink_framebuffer, $mul.ref(0, 19)), $mul.ref(5, 1)), 107);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_unlink_framebuffer, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_unlink_framebuffer, $mul.ref(0, 19)), $mul.ref(7, 1)), 102);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_unlink_framebuffer, $mul.ref(0, 19)), $mul.ref(8, 1)), 114);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_unlink_framebuffer, $mul.ref(0, 19)), $mul.ref(9, 1)), 97);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_unlink_framebuffer, $mul.ref(0, 19)), $mul.ref(10, 1)), 109);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_unlink_framebuffer, $mul.ref(0, 19)), $mul.ref(11, 1)), 101);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_unlink_framebuffer, $mul.ref(0, 19)), $mul.ref(12, 1)), 98);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_unlink_framebuffer, $mul.ref(0, 19)), $mul.ref(13, 1)), 117);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_unlink_framebuffer, $mul.ref(0, 19)), $mul.ref(14, 1)), 102);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_unlink_framebuffer, $mul.ref(0, 19)), $mul.ref(15, 1)), 102);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_unlink_framebuffer, $mul.ref(0, 19)), $mul.ref(16, 1)), 101);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_unlink_framebuffer, $mul.ref(0, 19)), $mul.ref(17, 1)), 114);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_unlink_framebuffer, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.209 := $store.i8($M.209, __kstrtab_fb_class, 102);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_fb_class, $mul.ref(0, 9)), $mul.ref(1, 1)), 98);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_fb_class, $mul.ref(0, 9)), $mul.ref(2, 1)), 95);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_fb_class, $mul.ref(0, 9)), $mul.ref(3, 1)), 99);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_fb_class, $mul.ref(0, 9)), $mul.ref(4, 1)), 108);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_fb_class, $mul.ref(0, 9)), $mul.ref(5, 1)), 97);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_fb_class, $mul.ref(0, 9)), $mul.ref(6, 1)), 115);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_fb_class, $mul.ref(0, 9)), $mul.ref(7, 1)), 115);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_fb_class, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.210 := $store.i8($M.210, __kstrtab_fb_blank, 102);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_fb_blank, $mul.ref(0, 9)), $mul.ref(1, 1)), 98);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_fb_blank, $mul.ref(0, 9)), $mul.ref(2, 1)), 95);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_fb_blank, $mul.ref(0, 9)), $mul.ref(3, 1)), 98);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_fb_blank, $mul.ref(0, 9)), $mul.ref(4, 1)), 108);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_fb_blank, $mul.ref(0, 9)), $mul.ref(5, 1)), 97);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_fb_blank, $mul.ref(0, 9)), $mul.ref(6, 1)), 110);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_fb_blank, $mul.ref(0, 9)), $mul.ref(7, 1)), 107);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_fb_blank, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.211 := $store.i8($M.211, __kstrtab_fb_set_var, 102);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_fb_set_var, $mul.ref(0, 11)), $mul.ref(1, 1)), 98);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_fb_set_var, $mul.ref(0, 11)), $mul.ref(2, 1)), 95);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_fb_set_var, $mul.ref(0, 11)), $mul.ref(3, 1)), 115);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_fb_set_var, $mul.ref(0, 11)), $mul.ref(4, 1)), 101);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_fb_set_var, $mul.ref(0, 11)), $mul.ref(5, 1)), 116);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_fb_set_var, $mul.ref(0, 11)), $mul.ref(6, 1)), 95);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_fb_set_var, $mul.ref(0, 11)), $mul.ref(7, 1)), 118);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_fb_set_var, $mul.ref(0, 11)), $mul.ref(8, 1)), 97);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_fb_set_var, $mul.ref(0, 11)), $mul.ref(9, 1)), 114);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_fb_set_var, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.212 := $store.i8($M.212, __kstrtab_fb_pan_display, 102);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_fb_pan_display, $mul.ref(0, 15)), $mul.ref(1, 1)), 98);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_fb_pan_display, $mul.ref(0, 15)), $mul.ref(2, 1)), 95);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_fb_pan_display, $mul.ref(0, 15)), $mul.ref(3, 1)), 112);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_fb_pan_display, $mul.ref(0, 15)), $mul.ref(4, 1)), 97);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_fb_pan_display, $mul.ref(0, 15)), $mul.ref(5, 1)), 110);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_fb_pan_display, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_fb_pan_display, $mul.ref(0, 15)), $mul.ref(7, 1)), 100);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_fb_pan_display, $mul.ref(0, 15)), $mul.ref(8, 1)), 105);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_fb_pan_display, $mul.ref(0, 15)), $mul.ref(9, 1)), 115);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_fb_pan_display, $mul.ref(0, 15)), $mul.ref(10, 1)), 112);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_fb_pan_display, $mul.ref(0, 15)), $mul.ref(11, 1)), 108);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_fb_pan_display, $mul.ref(0, 15)), $mul.ref(12, 1)), 97);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_fb_pan_display, $mul.ref(0, 15)), $mul.ref(13, 1)), 121);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_fb_pan_display, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.213 := $store.i8($M.213, __kstrtab_fb_show_logo, 102);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(__kstrtab_fb_show_logo, $mul.ref(0, 13)), $mul.ref(1, 1)), 98);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(__kstrtab_fb_show_logo, $mul.ref(0, 13)), $mul.ref(2, 1)), 95);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(__kstrtab_fb_show_logo, $mul.ref(0, 13)), $mul.ref(3, 1)), 115);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(__kstrtab_fb_show_logo, $mul.ref(0, 13)), $mul.ref(4, 1)), 104);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(__kstrtab_fb_show_logo, $mul.ref(0, 13)), $mul.ref(5, 1)), 111);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(__kstrtab_fb_show_logo, $mul.ref(0, 13)), $mul.ref(6, 1)), 119);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(__kstrtab_fb_show_logo, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(__kstrtab_fb_show_logo, $mul.ref(0, 13)), $mul.ref(8, 1)), 108);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(__kstrtab_fb_show_logo, $mul.ref(0, 13)), $mul.ref(9, 1)), 111);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(__kstrtab_fb_show_logo, $mul.ref(0, 13)), $mul.ref(10, 1)), 103);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(__kstrtab_fb_show_logo, $mul.ref(0, 13)), $mul.ref(11, 1)), 111);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(__kstrtab_fb_show_logo, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.214 := $store.i8($M.214, __kstrtab_fb_prepare_logo, 102);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_fb_prepare_logo, $mul.ref(0, 16)), $mul.ref(1, 1)), 98);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_fb_prepare_logo, $mul.ref(0, 16)), $mul.ref(2, 1)), 95);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_fb_prepare_logo, $mul.ref(0, 16)), $mul.ref(3, 1)), 112);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_fb_prepare_logo, $mul.ref(0, 16)), $mul.ref(4, 1)), 114);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_fb_prepare_logo, $mul.ref(0, 16)), $mul.ref(5, 1)), 101);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_fb_prepare_logo, $mul.ref(0, 16)), $mul.ref(6, 1)), 112);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_fb_prepare_logo, $mul.ref(0, 16)), $mul.ref(7, 1)), 97);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_fb_prepare_logo, $mul.ref(0, 16)), $mul.ref(8, 1)), 114);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_fb_prepare_logo, $mul.ref(0, 16)), $mul.ref(9, 1)), 101);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_fb_prepare_logo, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_fb_prepare_logo, $mul.ref(0, 16)), $mul.ref(11, 1)), 108);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_fb_prepare_logo, $mul.ref(0, 16)), $mul.ref(12, 1)), 111);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_fb_prepare_logo, $mul.ref(0, 16)), $mul.ref(13, 1)), 103);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_fb_prepare_logo, $mul.ref(0, 16)), $mul.ref(14, 1)), 111);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_fb_prepare_logo, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.215 := $store.i8($M.215, __kstrtab_fb_get_buffer_offset, 102);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_fb_get_buffer_offset, $mul.ref(0, 21)), $mul.ref(1, 1)), 98);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_fb_get_buffer_offset, $mul.ref(0, 21)), $mul.ref(2, 1)), 95);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_fb_get_buffer_offset, $mul.ref(0, 21)), $mul.ref(3, 1)), 103);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_fb_get_buffer_offset, $mul.ref(0, 21)), $mul.ref(4, 1)), 101);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_fb_get_buffer_offset, $mul.ref(0, 21)), $mul.ref(5, 1)), 116);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_fb_get_buffer_offset, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_fb_get_buffer_offset, $mul.ref(0, 21)), $mul.ref(7, 1)), 98);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_fb_get_buffer_offset, $mul.ref(0, 21)), $mul.ref(8, 1)), 117);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_fb_get_buffer_offset, $mul.ref(0, 21)), $mul.ref(9, 1)), 102);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_fb_get_buffer_offset, $mul.ref(0, 21)), $mul.ref(10, 1)), 102);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_fb_get_buffer_offset, $mul.ref(0, 21)), $mul.ref(11, 1)), 101);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_fb_get_buffer_offset, $mul.ref(0, 21)), $mul.ref(12, 1)), 114);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_fb_get_buffer_offset, $mul.ref(0, 21)), $mul.ref(13, 1)), 95);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_fb_get_buffer_offset, $mul.ref(0, 21)), $mul.ref(14, 1)), 111);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_fb_get_buffer_offset, $mul.ref(0, 21)), $mul.ref(15, 1)), 102);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_fb_get_buffer_offset, $mul.ref(0, 21)), $mul.ref(16, 1)), 102);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_fb_get_buffer_offset, $mul.ref(0, 21)), $mul.ref(17, 1)), 115);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_fb_get_buffer_offset, $mul.ref(0, 21)), $mul.ref(18, 1)), 101);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_fb_get_buffer_offset, $mul.ref(0, 21)), $mul.ref(19, 1)), 116);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_fb_get_buffer_offset, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.216 := $store.i8($M.216, __kstrtab_fb_pad_unaligned_buffer, 102);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(1, 1)), 98);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(2, 1)), 95);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(3, 1)), 112);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(4, 1)), 97);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(5, 1)), 100);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(6, 1)), 95);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(7, 1)), 117);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(8, 1)), 110);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(9, 1)), 97);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(10, 1)), 108);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(11, 1)), 105);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(12, 1)), 103);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(13, 1)), 110);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(14, 1)), 101);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(15, 1)), 100);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(16, 1)), 95);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(17, 1)), 98);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(18, 1)), 117);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(19, 1)), 102);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(20, 1)), 102);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(21, 1)), 101);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(22, 1)), 114);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_fb_pad_unaligned_buffer, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.217 := $store.i8($M.217, __kstrtab_fb_pad_aligned_buffer, 102);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_fb_pad_aligned_buffer, $mul.ref(0, 22)), $mul.ref(1, 1)), 98);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_fb_pad_aligned_buffer, $mul.ref(0, 22)), $mul.ref(2, 1)), 95);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_fb_pad_aligned_buffer, $mul.ref(0, 22)), $mul.ref(3, 1)), 112);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_fb_pad_aligned_buffer, $mul.ref(0, 22)), $mul.ref(4, 1)), 97);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_fb_pad_aligned_buffer, $mul.ref(0, 22)), $mul.ref(5, 1)), 100);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_fb_pad_aligned_buffer, $mul.ref(0, 22)), $mul.ref(6, 1)), 95);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_fb_pad_aligned_buffer, $mul.ref(0, 22)), $mul.ref(7, 1)), 97);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_fb_pad_aligned_buffer, $mul.ref(0, 22)), $mul.ref(8, 1)), 108);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_fb_pad_aligned_buffer, $mul.ref(0, 22)), $mul.ref(9, 1)), 105);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_fb_pad_aligned_buffer, $mul.ref(0, 22)), $mul.ref(10, 1)), 103);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_fb_pad_aligned_buffer, $mul.ref(0, 22)), $mul.ref(11, 1)), 110);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_fb_pad_aligned_buffer, $mul.ref(0, 22)), $mul.ref(12, 1)), 101);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_fb_pad_aligned_buffer, $mul.ref(0, 22)), $mul.ref(13, 1)), 100);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_fb_pad_aligned_buffer, $mul.ref(0, 22)), $mul.ref(14, 1)), 95);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_fb_pad_aligned_buffer, $mul.ref(0, 22)), $mul.ref(15, 1)), 98);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_fb_pad_aligned_buffer, $mul.ref(0, 22)), $mul.ref(16, 1)), 117);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_fb_pad_aligned_buffer, $mul.ref(0, 22)), $mul.ref(17, 1)), 102);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_fb_pad_aligned_buffer, $mul.ref(0, 22)), $mul.ref(18, 1)), 102);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_fb_pad_aligned_buffer, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_fb_pad_aligned_buffer, $mul.ref(0, 22)), $mul.ref(20, 1)), 114);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_fb_pad_aligned_buffer, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.218 := $store.i8($M.218, __kstrtab_fb_get_color_depth, 102);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_fb_get_color_depth, $mul.ref(0, 19)), $mul.ref(1, 1)), 98);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_fb_get_color_depth, $mul.ref(0, 19)), $mul.ref(2, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_fb_get_color_depth, $mul.ref(0, 19)), $mul.ref(3, 1)), 103);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_fb_get_color_depth, $mul.ref(0, 19)), $mul.ref(4, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_fb_get_color_depth, $mul.ref(0, 19)), $mul.ref(5, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_fb_get_color_depth, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_fb_get_color_depth, $mul.ref(0, 19)), $mul.ref(7, 1)), 99);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_fb_get_color_depth, $mul.ref(0, 19)), $mul.ref(8, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_fb_get_color_depth, $mul.ref(0, 19)), $mul.ref(9, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_fb_get_color_depth, $mul.ref(0, 19)), $mul.ref(10, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_fb_get_color_depth, $mul.ref(0, 19)), $mul.ref(11, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_fb_get_color_depth, $mul.ref(0, 19)), $mul.ref(12, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_fb_get_color_depth, $mul.ref(0, 19)), $mul.ref(13, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_fb_get_color_depth, $mul.ref(0, 19)), $mul.ref(14, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_fb_get_color_depth, $mul.ref(0, 19)), $mul.ref(15, 1)), 112);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_fb_get_color_depth, $mul.ref(0, 19)), $mul.ref(16, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_fb_get_color_depth, $mul.ref(0, 19)), $mul.ref(17, 1)), 104);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_fb_get_color_depth, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.90 := 0;
    call {:si_unique_call 1660} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.91 := 0;
    call {:si_unique_call 1661} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.87 := $0.ref;
    $M.94 := 0;
    call {:si_unique_call 1662} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.89 := $0.ref;
    $M.10 := $store.i32($M.10, fb_logo, 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref(fb_logo, $mul.ref(0, 24)), $mul.ref(4, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref(fb_logo, $mul.ref(0, 24)), $mul.ref(8, 1)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref(fb_logo, $mul.ref(0, 24)), $mul.ref(12, 1)), 0);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(fb_logo, $mul.ref(0, 24)), $mul.ref(16, 1)), $0.ref);
    $M.20 := $0.ref;
    $M.79 := 0;
    call {:si_unique_call 1663} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    call {:si_unique_call 1664} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 1665} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 1666} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.83 := 0;
    call {:si_unique_call 1667} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.66 := $0.ref;
    $M.95 := $0.ref;
    $M.65 := 0;
    call {:si_unique_call 1668} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    $M.71 := $0.ref;
    $M.92 := $0.ref;
    $M.84 := 0;
    call {:si_unique_call 1669} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.63 := 0;
    call {:si_unique_call 1670} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    $M.86 := $0.ref;
    $M.85 := 0;
    call {:si_unique_call 1671} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.82 := 0;
    call {:si_unique_call 1672} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.70 := 0;
    call {:si_unique_call 1673} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.67 := 0;
    call {:si_unique_call 1674} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.78 := $0.ref;
    $M.93 := $0.ref;
    $M.68 := $0.ref;
    $M.96 := $0.ref;
    $M.77 := $0.ref;
    $M.64 := $0.ref;
    $M.88 := $0.ref;
    $M.62 := $0.ref;
    $M.72 := 1;
    call {:si_unique_call 1675} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32(1);
    $M.253 := $store.i32($M.253, dmt_modes, 1);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(0, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(0, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(0, 24)), $mul.ref(16, 1)), vesa_modes);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(1, 24)), $mul.ref(0, 1)), 2);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(1, 24)), $mul.ref(4, 1)), 12569);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(1, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(1, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(64, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(2, 24)), $mul.ref(0, 1)), 3);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(2, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(2, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(2, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(128, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(3, 24)), $mul.ref(0, 1)), 4);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(3, 24)), $mul.ref(4, 1)), 12608);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(3, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(3, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(192, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(4, 24)), $mul.ref(0, 1)), 5);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(4, 24)), $mul.ref(4, 1)), 12620);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(4, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(4, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(256, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(5, 24)), $mul.ref(0, 1)), 6);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(5, 24)), $mul.ref(4, 1)), 12623);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(5, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(5, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(320, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(6, 24)), $mul.ref(0, 1)), 7);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(6, 24)), $mul.ref(4, 1)), 12633);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(6, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(6, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(384, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(7, 24)), $mul.ref(0, 1)), 8);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(7, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(7, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(7, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(448, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(8, 24)), $mul.ref(0, 1)), 9);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(8, 24)), $mul.ref(4, 1)), 17728);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(8, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(8, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(512, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(9, 24)), $mul.ref(0, 1)), 10);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(9, 24)), $mul.ref(4, 1)), 17740);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(9, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(9, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(576, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(10, 24)), $mul.ref(0, 1)), 11);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(10, 24)), $mul.ref(4, 1)), 17743);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(10, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(10, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(640, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(11, 24)), $mul.ref(0, 1)), 12);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(11, 24)), $mul.ref(4, 1)), 17753);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(11, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(11, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(704, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(12, 24)), $mul.ref(0, 1)), 13);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(12, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(12, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(12, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(13, 24)), $mul.ref(0, 1)), 14);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(13, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(13, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(13, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(14, 24)), $mul.ref(0, 1)), 15);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(14, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(14, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(14, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(768, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(15, 24)), $mul.ref(0, 1)), 16);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(15, 24)), $mul.ref(4, 1)), 24896);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(15, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(15, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(832, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(16, 24)), $mul.ref(0, 1)), 17);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(16, 24)), $mul.ref(4, 1)), 24906);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(16, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(16, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(896, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(17, 24)), $mul.ref(0, 1)), 18);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(17, 24)), $mul.ref(4, 1)), 24911);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(17, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(17, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(960, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(18, 24)), $mul.ref(0, 1)), 19);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(18, 24)), $mul.ref(4, 1)), 24921);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(18, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(18, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(1024, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(19, 24)), $mul.ref(0, 1)), 20);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(19, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(19, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(19, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(20, 24)), $mul.ref(0, 1)), 21);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(20, 24)), $mul.ref(4, 1)), 29007);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(20, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(20, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(1088, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(21, 24)), $mul.ref(0, 1)), 22);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(21, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(21, 24)), $mul.ref(8, 1)), 8330273);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(21, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(22, 24)), $mul.ref(0, 1)), 23);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(22, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(22, 24)), $mul.ref(8, 1)), 8330280);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(22, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(23, 24)), $mul.ref(0, 1)), 24);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(23, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(23, 24)), $mul.ref(8, 1)), 8330308);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(23, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(24, 24)), $mul.ref(0, 1)), 25);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(24, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(24, 24)), $mul.ref(8, 1)), 8330338);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(24, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(25, 24)), $mul.ref(0, 1)), 26);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(25, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(25, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(25, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(26, 24)), $mul.ref(0, 1)), 27);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(26, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(26, 24)), $mul.ref(8, 1)), 9377825);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(26, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(27, 24)), $mul.ref(0, 1)), 28);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(27, 24)), $mul.ref(4, 1)), 33024);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(27, 24)), $mul.ref(8, 1)), 9377832);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(27, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(28, 24)), $mul.ref(0, 1)), 29);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(28, 24)), $mul.ref(4, 1)), 33039);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(28, 24)), $mul.ref(8, 1)), 9377860);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(28, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(29, 24)), $mul.ref(0, 1)), 30);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(29, 24)), $mul.ref(4, 1)), 33049);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(29, 24)), $mul.ref(8, 1)), 9377890);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(29, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(30, 24)), $mul.ref(0, 1)), 31);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(30, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(30, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(30, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(31, 24)), $mul.ref(0, 1)), 32);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(31, 24)), $mul.ref(4, 1)), 33088);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(31, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(31, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(1152, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(32, 24)), $mul.ref(0, 1)), 33);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(32, 24)), $mul.ref(4, 1)), 33113);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(32, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(32, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(1216, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(33, 24)), $mul.ref(0, 1)), 34);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(33, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(33, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(33, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(34, 24)), $mul.ref(0, 1)), 35);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(34, 24)), $mul.ref(4, 1)), 33152);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(34, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(34, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(1280, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(35, 24)), $mul.ref(0, 1)), 36);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(35, 24)), $mul.ref(4, 1)), 33167);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(35, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(35, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(1344, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(36, 24)), $mul.ref(0, 1)), 37);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(36, 24)), $mul.ref(4, 1)), 33177);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(36, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(36, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(1408, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(37, 24)), $mul.ref(0, 1)), 38);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(37, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(37, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(37, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(38, 24)), $mul.ref(0, 1)), 39);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(38, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(38, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(38, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(39, 24)), $mul.ref(0, 1)), 40);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(39, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(39, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(39, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(40, 24)), $mul.ref(0, 1)), 41);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(40, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(40, 24)), $mul.ref(8, 1)), 794657);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(40, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(41, 24)), $mul.ref(0, 1)), 42);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(41, 24)), $mul.ref(4, 1)), 36928);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(41, 24)), $mul.ref(8, 1)), 794664);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(41, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(42, 24)), $mul.ref(0, 1)), 43);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(42, 24)), $mul.ref(4, 1)), 36943);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(42, 24)), $mul.ref(8, 1)), 794692);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(42, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(43, 24)), $mul.ref(0, 1)), 44);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(43, 24)), $mul.ref(4, 1)), 36953);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(43, 24)), $mul.ref(8, 1)), 794722);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(43, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(44, 24)), $mul.ref(0, 1)), 45);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(44, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(44, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(44, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(45, 24)), $mul.ref(0, 1)), 46);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(45, 24)), $mul.ref(4, 1)), 38144);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(45, 24)), $mul.ref(8, 1)), 12654625);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(45, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(46, 24)), $mul.ref(0, 1)), 47);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(46, 24)), $mul.ref(4, 1)), 38144);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(46, 24)), $mul.ref(8, 1)), 12654632);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(46, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(47, 24)), $mul.ref(0, 1)), 48);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(47, 24)), $mul.ref(4, 1)), 38159);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(47, 24)), $mul.ref(8, 1)), 12654660);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(47, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(48, 24)), $mul.ref(0, 1)), 49);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(48, 24)), $mul.ref(4, 1)), 38169);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(48, 24)), $mul.ref(8, 1)), 12654696);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(48, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(49, 24)), $mul.ref(0, 1)), 50);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(49, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(49, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(49, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(50, 24)), $mul.ref(0, 1)), 51);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(50, 24)), $mul.ref(4, 1)), 43328);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(50, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(50, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(1472, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(51, 24)), $mul.ref(0, 1)), 52);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(51, 24)), $mul.ref(4, 1)), 43333);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(51, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(51, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(1536, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(52, 24)), $mul.ref(0, 1)), 53);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(52, 24)), $mul.ref(4, 1)), 43338);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(52, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(52, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(1600, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(53, 24)), $mul.ref(0, 1)), 54);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(53, 24)), $mul.ref(4, 1)), 43343);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(53, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(53, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(1664, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(54, 24)), $mul.ref(0, 1)), 55);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(54, 24)), $mul.ref(4, 1)), 43353);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(54, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(54, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(1728, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(55, 24)), $mul.ref(0, 1)), 56);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(55, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(55, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(55, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(56, 24)), $mul.ref(0, 1)), 57);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(56, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(56, 24)), $mul.ref(8, 1)), 796705);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(56, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(57, 24)), $mul.ref(0, 1)), 58);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(57, 24)), $mul.ref(4, 1)), 45824);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(57, 24)), $mul.ref(8, 1)), 796712);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(57, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(58, 24)), $mul.ref(0, 1)), 59);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(58, 24)), $mul.ref(4, 1)), 45839);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(58, 24)), $mul.ref(8, 1)), 796740);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(58, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(59, 24)), $mul.ref(0, 1)), 60);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(59, 24)), $mul.ref(4, 1)), 45849);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(59, 24)), $mul.ref(8, 1)), 796776);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(59, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(60, 24)), $mul.ref(0, 1)), 61);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(60, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(60, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(60, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(61, 24)), $mul.ref(0, 1)), 62);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(61, 24)), $mul.ref(4, 1)), 49472);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(61, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(61, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(1792, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(62, 24)), $mul.ref(0, 1)), 63);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(62, 24)), $mul.ref(4, 1)), 49487);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(62, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(62, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(1856, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(63, 24)), $mul.ref(0, 1)), 64);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(63, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(63, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(63, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(64, 24)), $mul.ref(0, 1)), 65);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(64, 24)), $mul.ref(4, 1)), 51520);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(64, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(64, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(1920, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(65, 24)), $mul.ref(0, 1)), 66);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(65, 24)), $mul.ref(4, 1)), 51535);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(65, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(65, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(1984, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(66, 24)), $mul.ref(0, 1)), 67);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(66, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(66, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(66, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(67, 24)), $mul.ref(0, 1)), 68);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(67, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(67, 24)), $mul.ref(8, 1)), 5711905);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(67, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(2176, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(68, 24)), $mul.ref(0, 1)), 69);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(68, 24)), $mul.ref(4, 1)), 53504);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(68, 24)), $mul.ref(8, 1)), 5711912);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(68, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(2240, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(69, 24)), $mul.ref(0, 1)), 70);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(69, 24)), $mul.ref(4, 1)), 53519);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(69, 24)), $mul.ref(8, 1)), 5711940);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(69, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(2304, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(70, 24)), $mul.ref(0, 1)), 71);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(70, 24)), $mul.ref(4, 1)), 53529);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(70, 24)), $mul.ref(8, 1)), 5711970);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(70, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(2368, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(71, 24)), $mul.ref(0, 1)), 72);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(71, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(71, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(71, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(72, 24)), $mul.ref(0, 1)), 73);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(72, 24)), $mul.ref(4, 1)), 53568);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(72, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(72, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(2048, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(73, 24)), $mul.ref(0, 1)), 74);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(73, 24)), $mul.ref(4, 1)), 53583);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(73, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(73, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(2112, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(74, 24)), $mul.ref(0, 1)), 75);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(74, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(74, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(74, 24)), $mul.ref(16, 1)), $0.ref);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(75, 24)), $mul.ref(0, 1)), 76);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(75, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(75, 24)), $mul.ref(8, 1)), 2045985);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(75, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(2432, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(76, 24)), $mul.ref(0, 1)), 77);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(76, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(76, 24)), $mul.ref(8, 1)), 2045992);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(76, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(2496, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(77, 24)), $mul.ref(0, 1)), 78);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(77, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(77, 24)), $mul.ref(8, 1)), 2046020);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(77, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(2560, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(78, 24)), $mul.ref(0, 1)), 79);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(78, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(78, 24)), $mul.ref(8, 1)), 2046050);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(78, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(2624, 1)));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(79, 24)), $mul.ref(0, 1)), 80);
    $M.254 := $store.i32($M.254, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(79, 24)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(79, 24)), $mul.ref(8, 1)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref($add.ref(dmt_modes, $mul.ref(0, 1920)), $mul.ref(79, 24)), $mul.ref(16, 1)), $add.ref(vesa_modes, $mul.ref(2688, 1)));
    $M.0 := $store.ref($M.0, vesa_modes, $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(0, 64)), $mul.ref(8, 1)), 85);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(0, 64)), $mul.ref(12, 1)), 640);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(0, 64)), $mul.ref(16, 1)), 350);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(0, 64)), $mul.ref(20, 1)), 31746);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(0, 64)), $mul.ref(24, 1)), 96);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(0, 64)), $mul.ref(28, 1)), 32);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(0, 64)), $mul.ref(32, 1)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(0, 64)), $mul.ref(36, 1)), 32);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(0, 64)), $mul.ref(40, 1)), 64);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(0, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(0, 64)), $mul.ref(48, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(0, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(0, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(1, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(1, 64)), $mul.ref(8, 1)), 85);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(1, 64)), $mul.ref(12, 1)), 640);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(1, 64)), $mul.ref(16, 1)), 400);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(1, 64)), $mul.ref(20, 1)), 31746);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(1, 64)), $mul.ref(24, 1)), 96);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(1, 64)), $mul.ref(28, 1)), 32);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(1, 64)), $mul.ref(32, 1)), 41);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(1, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(1, 64)), $mul.ref(40, 1)), 64);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(1, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(1, 64)), $mul.ref(48, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(1, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(1, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(2, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(2, 64)), $mul.ref(8, 1)), 85);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(2, 64)), $mul.ref(12, 1)), 721);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(2, 64)), $mul.ref(16, 1)), 400);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(2, 64)), $mul.ref(20, 1)), 28169);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(2, 64)), $mul.ref(24, 1)), 108);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(2, 64)), $mul.ref(28, 1)), 36);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(2, 64)), $mul.ref(32, 1)), 42);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(2, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(2, 64)), $mul.ref(40, 1)), 72);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(2, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(2, 64)), $mul.ref(48, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(2, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(2, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(3, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(3, 64)), $mul.ref(8, 1)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(3, 64)), $mul.ref(12, 1)), 640);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(3, 64)), $mul.ref(16, 1)), 480);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(3, 64)), $mul.ref(20, 1)), 39682);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(3, 64)), $mul.ref(24, 1)), 48);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(3, 64)), $mul.ref(28, 1)), 16);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(3, 64)), $mul.ref(32, 1)), 33);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(3, 64)), $mul.ref(36, 1)), 10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(3, 64)), $mul.ref(40, 1)), 96);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(3, 64)), $mul.ref(44, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(3, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(3, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(3, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(4, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(4, 64)), $mul.ref(8, 1)), 72);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(4, 64)), $mul.ref(12, 1)), 640);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(4, 64)), $mul.ref(16, 1)), 480);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(4, 64)), $mul.ref(20, 1)), 31746);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(4, 64)), $mul.ref(24, 1)), 128);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(4, 64)), $mul.ref(28, 1)), 24);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(4, 64)), $mul.ref(32, 1)), 29);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(4, 64)), $mul.ref(36, 1)), 9);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(4, 64)), $mul.ref(40, 1)), 40);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(4, 64)), $mul.ref(44, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(4, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(4, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(4, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(5, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(5, 64)), $mul.ref(8, 1)), 75);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(5, 64)), $mul.ref(12, 1)), 640);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(5, 64)), $mul.ref(16, 1)), 480);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(5, 64)), $mul.ref(20, 1)), 31746);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(5, 64)), $mul.ref(24, 1)), 120);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(5, 64)), $mul.ref(28, 1)), 16);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(5, 64)), $mul.ref(32, 1)), 16);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(5, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(5, 64)), $mul.ref(40, 1)), 64);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(5, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(5, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(5, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(5, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(6, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(6, 64)), $mul.ref(8, 1)), 85);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(6, 64)), $mul.ref(12, 1)), 640);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(6, 64)), $mul.ref(16, 1)), 480);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(6, 64)), $mul.ref(20, 1)), 27777);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(6, 64)), $mul.ref(24, 1)), 80);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(6, 64)), $mul.ref(28, 1)), 56);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(6, 64)), $mul.ref(32, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(6, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(6, 64)), $mul.ref(40, 1)), 56);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(6, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(6, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(6, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(6, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(7, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(7, 64)), $mul.ref(8, 1)), 56);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(7, 64)), $mul.ref(12, 1)), 800);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(7, 64)), $mul.ref(16, 1)), 600);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(7, 64)), $mul.ref(20, 1)), 27777);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(7, 64)), $mul.ref(24, 1)), 128);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(7, 64)), $mul.ref(28, 1)), 24);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(7, 64)), $mul.ref(32, 1)), 22);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(7, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(7, 64)), $mul.ref(40, 1)), 72);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(7, 64)), $mul.ref(44, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(7, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(7, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(7, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(8, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(8, 64)), $mul.ref(8, 1)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(8, 64)), $mul.ref(12, 1)), 800);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(8, 64)), $mul.ref(16, 1)), 600);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(8, 64)), $mul.ref(20, 1)), 25000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(8, 64)), $mul.ref(24, 1)), 88);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(8, 64)), $mul.ref(28, 1)), 40);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(8, 64)), $mul.ref(32, 1)), 23);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(8, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(8, 64)), $mul.ref(40, 1)), 128);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(8, 64)), $mul.ref(44, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(8, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(8, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(8, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(9, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(9, 64)), $mul.ref(8, 1)), 72);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(9, 64)), $mul.ref(12, 1)), 800);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(9, 64)), $mul.ref(16, 1)), 600);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(9, 64)), $mul.ref(20, 1)), 20000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(9, 64)), $mul.ref(24, 1)), 64);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(9, 64)), $mul.ref(28, 1)), 56);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(9, 64)), $mul.ref(32, 1)), 23);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(9, 64)), $mul.ref(36, 1)), 37);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(9, 64)), $mul.ref(40, 1)), 120);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(9, 64)), $mul.ref(44, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(9, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(9, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(9, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(10, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(10, 64)), $mul.ref(8, 1)), 75);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(10, 64)), $mul.ref(12, 1)), 800);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(10, 64)), $mul.ref(16, 1)), 600);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(10, 64)), $mul.ref(20, 1)), 20202);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(10, 64)), $mul.ref(24, 1)), 160);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(10, 64)), $mul.ref(28, 1)), 16);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(10, 64)), $mul.ref(32, 1)), 21);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(10, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(10, 64)), $mul.ref(40, 1)), 80);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(10, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(10, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(10, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(10, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(11, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(11, 64)), $mul.ref(8, 1)), 85);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(11, 64)), $mul.ref(12, 1)), 800);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(11, 64)), $mul.ref(16, 1)), 600);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(11, 64)), $mul.ref(20, 1)), 17761);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(11, 64)), $mul.ref(24, 1)), 152);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(11, 64)), $mul.ref(28, 1)), 32);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(11, 64)), $mul.ref(32, 1)), 27);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(11, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(11, 64)), $mul.ref(40, 1)), 64);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(11, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(11, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(11, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(11, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(12, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(12, 64)), $mul.ref(8, 1)), 43);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(12, 64)), $mul.ref(12, 1)), 1024);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(12, 64)), $mul.ref(16, 1)), 768);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(12, 64)), $mul.ref(20, 1)), 22271);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(12, 64)), $mul.ref(24, 1)), 56);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(12, 64)), $mul.ref(28, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(12, 64)), $mul.ref(32, 1)), 41);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(12, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(12, 64)), $mul.ref(40, 1)), 176);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(12, 64)), $mul.ref(44, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(12, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(12, 64)), $mul.ref(52, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(12, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(13, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(13, 64)), $mul.ref(8, 1)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(13, 64)), $mul.ref(12, 1)), 1024);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(13, 64)), $mul.ref(16, 1)), 768);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(13, 64)), $mul.ref(20, 1)), 15384);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(13, 64)), $mul.ref(24, 1)), 160);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(13, 64)), $mul.ref(28, 1)), 24);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(13, 64)), $mul.ref(32, 1)), 29);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(13, 64)), $mul.ref(36, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(13, 64)), $mul.ref(40, 1)), 136);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(13, 64)), $mul.ref(44, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(13, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(13, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(13, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(14, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(14, 64)), $mul.ref(8, 1)), 70);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(14, 64)), $mul.ref(12, 1)), 1024);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(14, 64)), $mul.ref(16, 1)), 768);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(14, 64)), $mul.ref(20, 1)), 13333);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(14, 64)), $mul.ref(24, 1)), 144);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(14, 64)), $mul.ref(28, 1)), 24);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(14, 64)), $mul.ref(32, 1)), 29);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(14, 64)), $mul.ref(36, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(14, 64)), $mul.ref(40, 1)), 136);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(14, 64)), $mul.ref(44, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(14, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(14, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(14, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(15, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(15, 64)), $mul.ref(8, 1)), 75);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(15, 64)), $mul.ref(12, 1)), 1024);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(15, 64)), $mul.ref(16, 1)), 768);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(15, 64)), $mul.ref(20, 1)), 12690);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(15, 64)), $mul.ref(24, 1)), 176);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(15, 64)), $mul.ref(28, 1)), 16);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(15, 64)), $mul.ref(32, 1)), 28);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(15, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(15, 64)), $mul.ref(40, 1)), 96);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(15, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(15, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(15, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(15, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(16, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(16, 64)), $mul.ref(8, 1)), 85);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(16, 64)), $mul.ref(12, 1)), 1024);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(16, 64)), $mul.ref(16, 1)), 768);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(16, 64)), $mul.ref(20, 1)), 10582);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(16, 64)), $mul.ref(24, 1)), 208);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(16, 64)), $mul.ref(28, 1)), 48);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(16, 64)), $mul.ref(32, 1)), 36);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(16, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(16, 64)), $mul.ref(40, 1)), 96);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(16, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(16, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(16, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(16, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(17, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(17, 64)), $mul.ref(8, 1)), 75);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(17, 64)), $mul.ref(12, 1)), 1152);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(17, 64)), $mul.ref(16, 1)), 864);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(17, 64)), $mul.ref(20, 1)), 9259);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(17, 64)), $mul.ref(24, 1)), 256);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(17, 64)), $mul.ref(28, 1)), 64);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(17, 64)), $mul.ref(32, 1)), 32);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(17, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(17, 64)), $mul.ref(40, 1)), 128);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(17, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(17, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(17, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(17, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(18, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(18, 64)), $mul.ref(8, 1)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(18, 64)), $mul.ref(12, 1)), 1280);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(18, 64)), $mul.ref(16, 1)), 960);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(18, 64)), $mul.ref(20, 1)), 9259);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(18, 64)), $mul.ref(24, 1)), 312);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(18, 64)), $mul.ref(28, 1)), 96);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(18, 64)), $mul.ref(32, 1)), 36);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(18, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(18, 64)), $mul.ref(40, 1)), 112);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(18, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(18, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(18, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(18, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(19, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(19, 64)), $mul.ref(8, 1)), 85);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(19, 64)), $mul.ref(12, 1)), 1280);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(19, 64)), $mul.ref(16, 1)), 960);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(19, 64)), $mul.ref(20, 1)), 6734);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(19, 64)), $mul.ref(24, 1)), 224);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(19, 64)), $mul.ref(28, 1)), 64);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(19, 64)), $mul.ref(32, 1)), 47);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(19, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(19, 64)), $mul.ref(40, 1)), 160);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(19, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(19, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(19, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(19, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(20, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(20, 64)), $mul.ref(8, 1)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(20, 64)), $mul.ref(12, 1)), 1280);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(20, 64)), $mul.ref(16, 1)), 1024);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(20, 64)), $mul.ref(20, 1)), 9259);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(20, 64)), $mul.ref(24, 1)), 248);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(20, 64)), $mul.ref(28, 1)), 48);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(20, 64)), $mul.ref(32, 1)), 38);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(20, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(20, 64)), $mul.ref(40, 1)), 112);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(20, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(20, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(20, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(20, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(21, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(21, 64)), $mul.ref(8, 1)), 75);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(21, 64)), $mul.ref(12, 1)), 1280);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(21, 64)), $mul.ref(16, 1)), 1024);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(21, 64)), $mul.ref(20, 1)), 7407);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(21, 64)), $mul.ref(24, 1)), 248);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(21, 64)), $mul.ref(28, 1)), 16);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(21, 64)), $mul.ref(32, 1)), 38);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(21, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(21, 64)), $mul.ref(40, 1)), 144);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(21, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(21, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(21, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(21, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(22, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(22, 64)), $mul.ref(8, 1)), 85);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(22, 64)), $mul.ref(12, 1)), 1280);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(22, 64)), $mul.ref(16, 1)), 1024);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(22, 64)), $mul.ref(20, 1)), 6349);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(22, 64)), $mul.ref(24, 1)), 224);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(22, 64)), $mul.ref(28, 1)), 64);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(22, 64)), $mul.ref(32, 1)), 44);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(22, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(22, 64)), $mul.ref(40, 1)), 160);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(22, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(22, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(22, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(22, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(23, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(23, 64)), $mul.ref(8, 1)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(23, 64)), $mul.ref(12, 1)), 1600);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(23, 64)), $mul.ref(16, 1)), 1200);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(23, 64)), $mul.ref(20, 1)), 6172);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(23, 64)), $mul.ref(24, 1)), 304);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(23, 64)), $mul.ref(28, 1)), 64);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(23, 64)), $mul.ref(32, 1)), 46);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(23, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(23, 64)), $mul.ref(40, 1)), 192);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(23, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(23, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(23, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(23, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(24, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(24, 64)), $mul.ref(8, 1)), 65);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(24, 64)), $mul.ref(12, 1)), 1600);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(24, 64)), $mul.ref(16, 1)), 1200);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(24, 64)), $mul.ref(20, 1)), 5698);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(24, 64)), $mul.ref(24, 1)), 304);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(24, 64)), $mul.ref(28, 1)), 64);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(24, 64)), $mul.ref(32, 1)), 46);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(24, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(24, 64)), $mul.ref(40, 1)), 192);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(24, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(24, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(24, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(24, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(25, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(25, 64)), $mul.ref(8, 1)), 70);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(25, 64)), $mul.ref(12, 1)), 1600);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(25, 64)), $mul.ref(16, 1)), 1200);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(25, 64)), $mul.ref(20, 1)), 5291);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(25, 64)), $mul.ref(24, 1)), 304);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(25, 64)), $mul.ref(28, 1)), 64);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(25, 64)), $mul.ref(32, 1)), 46);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(25, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(25, 64)), $mul.ref(40, 1)), 192);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(25, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(25, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(25, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(25, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(26, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(26, 64)), $mul.ref(8, 1)), 75);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(26, 64)), $mul.ref(12, 1)), 1600);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(26, 64)), $mul.ref(16, 1)), 1200);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(26, 64)), $mul.ref(20, 1)), 4938);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(26, 64)), $mul.ref(24, 1)), 304);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(26, 64)), $mul.ref(28, 1)), 64);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(26, 64)), $mul.ref(32, 1)), 46);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(26, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(26, 64)), $mul.ref(40, 1)), 192);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(26, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(26, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(26, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(26, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(27, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(27, 64)), $mul.ref(8, 1)), 85);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(27, 64)), $mul.ref(12, 1)), 1600);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(27, 64)), $mul.ref(16, 1)), 1200);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(27, 64)), $mul.ref(20, 1)), 4357);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(27, 64)), $mul.ref(24, 1)), 304);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(27, 64)), $mul.ref(28, 1)), 64);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(27, 64)), $mul.ref(32, 1)), 46);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(27, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(27, 64)), $mul.ref(40, 1)), 192);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(27, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(27, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(27, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(27, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(28, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(28, 64)), $mul.ref(8, 1)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(28, 64)), $mul.ref(12, 1)), 1792);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(28, 64)), $mul.ref(16, 1)), 1344);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(28, 64)), $mul.ref(20, 1)), 4882);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(28, 64)), $mul.ref(24, 1)), 328);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(28, 64)), $mul.ref(28, 1)), 128);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(28, 64)), $mul.ref(32, 1)), 46);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(28, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(28, 64)), $mul.ref(40, 1)), 200);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(28, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(28, 64)), $mul.ref(48, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(28, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(28, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(29, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(29, 64)), $mul.ref(8, 1)), 75);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(29, 64)), $mul.ref(12, 1)), 1792);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(29, 64)), $mul.ref(16, 1)), 1344);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(29, 64)), $mul.ref(20, 1)), 3831);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(29, 64)), $mul.ref(24, 1)), 352);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(29, 64)), $mul.ref(28, 1)), 96);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(29, 64)), $mul.ref(32, 1)), 69);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(29, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(29, 64)), $mul.ref(40, 1)), 216);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(29, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(29, 64)), $mul.ref(48, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(29, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(29, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(30, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(30, 64)), $mul.ref(8, 1)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(30, 64)), $mul.ref(12, 1)), 1856);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(30, 64)), $mul.ref(16, 1)), 1392);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(30, 64)), $mul.ref(20, 1)), 4580);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(30, 64)), $mul.ref(24, 1)), 352);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(30, 64)), $mul.ref(28, 1)), 96);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(30, 64)), $mul.ref(32, 1)), 43);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(30, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(30, 64)), $mul.ref(40, 1)), 224);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(30, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(30, 64)), $mul.ref(48, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(30, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(30, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(31, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(31, 64)), $mul.ref(8, 1)), 75);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(31, 64)), $mul.ref(12, 1)), 1856);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(31, 64)), $mul.ref(16, 1)), 1392);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(31, 64)), $mul.ref(20, 1)), 3472);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(31, 64)), $mul.ref(24, 1)), 352);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(31, 64)), $mul.ref(28, 1)), 128);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(31, 64)), $mul.ref(32, 1)), 104);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(31, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(31, 64)), $mul.ref(40, 1)), 224);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(31, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(31, 64)), $mul.ref(48, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(31, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(31, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(32, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(32, 64)), $mul.ref(8, 1)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(32, 64)), $mul.ref(12, 1)), 1920);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(32, 64)), $mul.ref(16, 1)), 1440);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(32, 64)), $mul.ref(20, 1)), 4273);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(32, 64)), $mul.ref(24, 1)), 344);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(32, 64)), $mul.ref(28, 1)), 128);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(32, 64)), $mul.ref(32, 1)), 56);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(32, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(32, 64)), $mul.ref(40, 1)), 200);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(32, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(32, 64)), $mul.ref(48, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(32, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(32, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(33, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(33, 64)), $mul.ref(8, 1)), 75);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(33, 64)), $mul.ref(12, 1)), 1920);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(33, 64)), $mul.ref(16, 1)), 1440);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(33, 64)), $mul.ref(20, 1)), 3367);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(33, 64)), $mul.ref(24, 1)), 352);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(33, 64)), $mul.ref(28, 1)), 144);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(33, 64)), $mul.ref(32, 1)), 56);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(33, 64)), $mul.ref(36, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(33, 64)), $mul.ref(40, 1)), 224);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(33, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(33, 64)), $mul.ref(48, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(33, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(33, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(34, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(34, 64)), $mul.ref(8, 1)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(34, 64)), $mul.ref(12, 1)), 1920);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(34, 64)), $mul.ref(16, 1)), 1200);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(34, 64)), $mul.ref(20, 1)), 6493);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(34, 64)), $mul.ref(24, 1)), 80);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(34, 64)), $mul.ref(28, 1)), 48);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(34, 64)), $mul.ref(32, 1)), 26);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(34, 64)), $mul.ref(36, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(34, 64)), $mul.ref(40, 1)), 32);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(34, 64)), $mul.ref(44, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(34, 64)), $mul.ref(48, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(34, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(34, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(35, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(35, 64)), $mul.ref(8, 1)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(35, 64)), $mul.ref(12, 1)), 1920);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(35, 64)), $mul.ref(16, 1)), 1200);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(35, 64)), $mul.ref(20, 1)), 5174);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(35, 64)), $mul.ref(24, 1)), 336);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(35, 64)), $mul.ref(28, 1)), 136);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(35, 64)), $mul.ref(32, 1)), 36);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(35, 64)), $mul.ref(36, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(35, 64)), $mul.ref(40, 1)), 200);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(35, 64)), $mul.ref(44, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(35, 64)), $mul.ref(48, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(35, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(35, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(36, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(36, 64)), $mul.ref(8, 1)), 75);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(36, 64)), $mul.ref(12, 1)), 1920);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(36, 64)), $mul.ref(16, 1)), 1200);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(36, 64)), $mul.ref(20, 1)), 4077);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(36, 64)), $mul.ref(24, 1)), 344);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(36, 64)), $mul.ref(28, 1)), 136);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(36, 64)), $mul.ref(32, 1)), 46);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(36, 64)), $mul.ref(36, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(36, 64)), $mul.ref(40, 1)), 208);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(36, 64)), $mul.ref(44, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(36, 64)), $mul.ref(48, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(36, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(36, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(37, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(37, 64)), $mul.ref(8, 1)), 85);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(37, 64)), $mul.ref(12, 1)), 1920);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(37, 64)), $mul.ref(16, 1)), 1200);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(37, 64)), $mul.ref(20, 1)), 3555);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(37, 64)), $mul.ref(24, 1)), 352);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(37, 64)), $mul.ref(28, 1)), 144);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(37, 64)), $mul.ref(32, 1)), 53);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(37, 64)), $mul.ref(36, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(37, 64)), $mul.ref(40, 1)), 208);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(37, 64)), $mul.ref(44, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(37, 64)), $mul.ref(48, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(37, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(37, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(38, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(38, 64)), $mul.ref(8, 1)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(38, 64)), $mul.ref(12, 1)), 2560);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(38, 64)), $mul.ref(16, 1)), 1600);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(38, 64)), $mul.ref(20, 1)), 3724);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(38, 64)), $mul.ref(24, 1)), 80);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(38, 64)), $mul.ref(28, 1)), 48);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(38, 64)), $mul.ref(32, 1)), 37);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(38, 64)), $mul.ref(36, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(38, 64)), $mul.ref(40, 1)), 32);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(38, 64)), $mul.ref(44, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(38, 64)), $mul.ref(48, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(38, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(38, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(39, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(39, 64)), $mul.ref(8, 1)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(39, 64)), $mul.ref(12, 1)), 2560);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(39, 64)), $mul.ref(16, 1)), 1600);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(39, 64)), $mul.ref(20, 1)), 2869);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(39, 64)), $mul.ref(24, 1)), 472);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(39, 64)), $mul.ref(28, 1)), 192);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(39, 64)), $mul.ref(32, 1)), 49);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(39, 64)), $mul.ref(36, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(39, 64)), $mul.ref(40, 1)), 280);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(39, 64)), $mul.ref(44, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(39, 64)), $mul.ref(48, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(39, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(39, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(40, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(40, 64)), $mul.ref(8, 1)), 75);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(40, 64)), $mul.ref(12, 1)), 2560);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(40, 64)), $mul.ref(16, 1)), 1600);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(40, 64)), $mul.ref(20, 1)), 2256);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(40, 64)), $mul.ref(24, 1)), 488);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(40, 64)), $mul.ref(28, 1)), 208);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(40, 64)), $mul.ref(32, 1)), 63);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(40, 64)), $mul.ref(36, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(40, 64)), $mul.ref(40, 1)), 280);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(40, 64)), $mul.ref(44, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(40, 64)), $mul.ref(48, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(40, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(40, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(41, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(41, 64)), $mul.ref(8, 1)), 85);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(41, 64)), $mul.ref(12, 1)), 2560);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(41, 64)), $mul.ref(16, 1)), 1600);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(41, 64)), $mul.ref(20, 1)), 1979);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(41, 64)), $mul.ref(24, 1)), 488);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(41, 64)), $mul.ref(28, 1)), 208);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(41, 64)), $mul.ref(32, 1)), 73);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(41, 64)), $mul.ref(36, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(41, 64)), $mul.ref(40, 1)), 280);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(41, 64)), $mul.ref(44, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(41, 64)), $mul.ref(48, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(41, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(41, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(42, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(42, 64)), $mul.ref(8, 1)), 120);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(42, 64)), $mul.ref(12, 1)), 2560);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(42, 64)), $mul.ref(16, 1)), 1600);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(42, 64)), $mul.ref(20, 1)), 1809);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(42, 64)), $mul.ref(24, 1)), 80);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(42, 64)), $mul.ref(28, 1)), 48);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(42, 64)), $mul.ref(32, 1)), 85);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(42, 64)), $mul.ref(36, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(42, 64)), $mul.ref(40, 1)), 32);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(42, 64)), $mul.ref(44, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(42, 64)), $mul.ref(48, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(42, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vesa_modes, $mul.ref(0, 2752)), $mul.ref(42, 64)), $mul.ref(56, 1)), 4);
    $M.0 := $store.ref($M.0, cea_modes, $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(0, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(0, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(0, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(0, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(0, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(0, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(0, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(0, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(0, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(0, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(0, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(0, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(0, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(1, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(1, 64)), $mul.ref(8, 1)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(1, 64)), $mul.ref(12, 1)), 640);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(1, 64)), $mul.ref(16, 1)), 480);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(1, 64)), $mul.ref(20, 1)), 39722);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(1, 64)), $mul.ref(24, 1)), 48);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(1, 64)), $mul.ref(28, 1)), 16);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(1, 64)), $mul.ref(32, 1)), 33);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(1, 64)), $mul.ref(36, 1)), 10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(1, 64)), $mul.ref(40, 1)), 96);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(1, 64)), $mul.ref(44, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(1, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(1, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(1, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(2, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(2, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(2, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(2, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(2, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(2, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(2, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(2, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(2, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(2, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(2, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(2, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(2, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(2, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(3, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(3, 64)), $mul.ref(8, 1)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(3, 64)), $mul.ref(12, 1)), 720);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(3, 64)), $mul.ref(16, 1)), 480);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(3, 64)), $mul.ref(20, 1)), 37037);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(3, 64)), $mul.ref(24, 1)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(3, 64)), $mul.ref(28, 1)), 16);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(3, 64)), $mul.ref(32, 1)), 30);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(3, 64)), $mul.ref(36, 1)), 9);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(3, 64)), $mul.ref(40, 1)), 62);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(3, 64)), $mul.ref(44, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(3, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(3, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(3, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(4, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(4, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(4, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(4, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(4, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(4, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(4, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(4, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(4, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(4, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(4, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(4, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(4, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(4, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(5, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(5, 64)), $mul.ref(8, 1)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(5, 64)), $mul.ref(12, 1)), 1920);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(5, 64)), $mul.ref(16, 1)), 1080);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(5, 64)), $mul.ref(20, 1)), 13763);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(5, 64)), $mul.ref(24, 1)), 148);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(5, 64)), $mul.ref(28, 1)), 88);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(5, 64)), $mul.ref(32, 1)), 15);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(5, 64)), $mul.ref(36, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(5, 64)), $mul.ref(40, 1)), 44);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(5, 64)), $mul.ref(44, 1)), 5);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(5, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(5, 64)), $mul.ref(52, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(5, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(6, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(6, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(6, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(6, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(6, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(6, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(6, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(6, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(6, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(6, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(6, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(6, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(6, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(6, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(7, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(7, 64)), $mul.ref(8, 1)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(7, 64)), $mul.ref(12, 1)), 1440);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(7, 64)), $mul.ref(16, 1)), 480);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(7, 64)), $mul.ref(20, 1)), 18554);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(7, 64)), $mul.ref(24, 1)), 114);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(7, 64)), $mul.ref(28, 1)), 38);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(7, 64)), $mul.ref(32, 1)), 15);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(7, 64)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(7, 64)), $mul.ref(40, 1)), 124);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(7, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(7, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(7, 64)), $mul.ref(52, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(7, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(8, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(8, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(8, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(8, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(8, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(8, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(8, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(8, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(8, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(8, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(8, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(8, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(8, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(8, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(9, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(9, 64)), $mul.ref(8, 1)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(9, 64)), $mul.ref(12, 1)), 1440);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(9, 64)), $mul.ref(16, 1)), 240);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(9, 64)), $mul.ref(20, 1)), 18554);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(9, 64)), $mul.ref(24, 1)), 114);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(9, 64)), $mul.ref(28, 1)), 38);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(9, 64)), $mul.ref(32, 1)), 16);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(9, 64)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(9, 64)), $mul.ref(40, 1)), 124);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(9, 64)), $mul.ref(44, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(9, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(9, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(9, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(10, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(10, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(10, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(10, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(10, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(10, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(10, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(10, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(10, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(10, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(10, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(10, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(10, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(10, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(11, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(11, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(11, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(11, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(11, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(11, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(11, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(11, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(11, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(11, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(11, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(11, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(11, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(11, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(12, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(12, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(12, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(12, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(12, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(12, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(12, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(12, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(12, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(12, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(12, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(12, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(12, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(12, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(13, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(13, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(13, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(13, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(13, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(13, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(13, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(13, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(13, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(13, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(13, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(13, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(13, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(13, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(14, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(14, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(14, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(14, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(14, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(14, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(14, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(14, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(14, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(14, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(14, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(14, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(14, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(14, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(15, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(15, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(15, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(15, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(15, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(15, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(15, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(15, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(15, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(15, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(15, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(15, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(15, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(15, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(16, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(16, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(16, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(16, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(16, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(16, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(16, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(16, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(16, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(16, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(16, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(16, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(16, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(16, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(17, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(17, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(17, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(17, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(17, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(17, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(17, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(17, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(17, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(17, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(17, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(17, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(17, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(17, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(18, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(18, 64)), $mul.ref(8, 1)), 50);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(18, 64)), $mul.ref(12, 1)), 720);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(18, 64)), $mul.ref(16, 1)), 576);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(18, 64)), $mul.ref(20, 1)), 37037);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(18, 64)), $mul.ref(24, 1)), 68);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(18, 64)), $mul.ref(28, 1)), 12);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(18, 64)), $mul.ref(32, 1)), 39);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(18, 64)), $mul.ref(36, 1)), 5);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(18, 64)), $mul.ref(40, 1)), 64);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(18, 64)), $mul.ref(44, 1)), 5);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(18, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(18, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(18, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(19, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(19, 64)), $mul.ref(8, 1)), 50);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(19, 64)), $mul.ref(12, 1)), 1280);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(19, 64)), $mul.ref(16, 1)), 720);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(19, 64)), $mul.ref(20, 1)), 13468);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(19, 64)), $mul.ref(24, 1)), 220);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(19, 64)), $mul.ref(28, 1)), 440);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(19, 64)), $mul.ref(32, 1)), 20);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(19, 64)), $mul.ref(36, 1)), 5);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(19, 64)), $mul.ref(40, 1)), 40);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(19, 64)), $mul.ref(44, 1)), 5);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(19, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(19, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(19, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(20, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(20, 64)), $mul.ref(8, 1)), 50);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(20, 64)), $mul.ref(12, 1)), 1920);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(20, 64)), $mul.ref(16, 1)), 1080);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(20, 64)), $mul.ref(20, 1)), 13480);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(20, 64)), $mul.ref(24, 1)), 148);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(20, 64)), $mul.ref(28, 1)), 528);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(20, 64)), $mul.ref(32, 1)), 15);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(20, 64)), $mul.ref(36, 1)), 5);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(20, 64)), $mul.ref(40, 1)), 528);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(20, 64)), $mul.ref(44, 1)), 5);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(20, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(20, 64)), $mul.ref(52, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(20, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(21, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(21, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(21, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(21, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(21, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(21, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(21, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(21, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(21, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(21, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(21, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(21, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(21, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(21, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(22, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(22, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(22, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(22, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(22, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(22, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(22, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(22, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(22, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(22, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(22, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(22, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(22, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(22, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(23, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(23, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(23, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(23, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(23, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(23, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(23, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(23, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(23, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(23, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(23, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(23, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(23, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(23, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(24, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(24, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(24, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(24, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(24, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(24, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(24, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(24, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(24, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(24, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(24, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(24, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(24, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(24, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(25, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(25, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(25, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(25, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(25, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(25, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(25, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(25, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(25, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(25, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(25, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(25, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(25, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(25, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(26, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(26, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(26, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(26, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(26, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(26, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(26, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(26, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(26, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(26, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(26, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(26, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(26, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(26, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(27, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(27, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(27, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(27, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(27, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(27, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(27, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(27, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(27, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(27, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(27, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(27, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(27, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(27, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(28, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(28, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(28, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(28, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(28, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(28, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(28, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(28, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(28, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(28, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(28, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(28, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(28, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(28, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(29, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(29, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(29, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(29, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(29, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(29, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(29, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(29, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(29, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(29, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(29, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(29, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(29, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(29, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(30, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(30, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(30, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(30, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(30, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(30, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(30, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(30, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(30, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(30, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(30, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(30, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(30, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(30, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(31, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(31, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(31, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(31, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(31, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(31, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(31, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(31, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(31, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(31, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(31, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(31, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(31, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(31, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(32, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(32, 64)), $mul.ref(8, 1)), 24);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(32, 64)), $mul.ref(12, 1)), 1920);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(32, 64)), $mul.ref(16, 1)), 1080);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(32, 64)), $mul.ref(20, 1)), 13468);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(32, 64)), $mul.ref(24, 1)), 148);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(32, 64)), $mul.ref(28, 1)), 638);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(32, 64)), $mul.ref(32, 1)), 36);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(32, 64)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(32, 64)), $mul.ref(40, 1)), 44);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(32, 64)), $mul.ref(44, 1)), 5);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(32, 64)), $mul.ref(48, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(32, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(32, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(33, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(33, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(33, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(33, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(33, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(33, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(33, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(33, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(33, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(33, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(33, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(33, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(33, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(33, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(34, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(34, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(34, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(34, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(34, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(34, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(34, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(34, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(34, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(34, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(34, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(34, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(34, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(34, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(35, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(35, 64)), $mul.ref(8, 1)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(35, 64)), $mul.ref(12, 1)), 2880);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(35, 64)), $mul.ref(16, 1)), 480);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(35, 64)), $mul.ref(20, 1)), 9250);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(35, 64)), $mul.ref(24, 1)), 240);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(35, 64)), $mul.ref(28, 1)), 64);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(35, 64)), $mul.ref(32, 1)), 30);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(35, 64)), $mul.ref(36, 1)), 9);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(35, 64)), $mul.ref(40, 1)), 248);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(35, 64)), $mul.ref(44, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(35, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(35, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(35, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(36, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(36, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(36, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(36, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(36, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(36, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(36, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(36, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(36, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(36, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(36, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(36, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(36, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(36, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(37, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(37, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(37, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(37, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(37, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(37, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(37, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(37, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(37, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(37, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(37, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(37, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(37, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(37, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(38, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(38, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(38, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(38, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(38, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(38, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(38, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(38, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(38, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(38, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(38, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(38, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(38, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(38, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(39, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(39, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(39, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(39, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(39, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(39, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(39, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(39, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(39, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(39, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(39, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(39, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(39, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(39, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(40, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(40, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(40, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(40, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(40, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(40, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(40, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(40, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(40, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(40, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(40, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(40, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(40, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(40, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(41, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(41, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(41, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(41, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(41, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(41, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(41, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(41, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(41, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(41, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(41, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(41, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(41, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(41, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(42, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(42, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(42, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(42, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(42, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(42, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(42, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(42, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(42, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(42, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(42, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(42, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(42, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(42, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(43, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(43, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(43, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(43, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(43, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(43, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(43, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(43, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(43, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(43, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(43, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(43, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(43, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(43, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(44, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(44, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(44, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(44, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(44, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(44, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(44, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(44, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(44, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(44, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(44, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(44, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(44, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(44, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(45, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(45, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(45, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(45, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(45, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(45, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(45, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(45, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(45, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(45, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(45, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(45, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(45, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(45, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(46, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(46, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(46, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(46, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(46, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(46, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(46, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(46, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(46, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(46, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(46, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(46, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(46, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(46, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(47, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(47, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(47, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(47, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(47, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(47, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(47, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(47, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(47, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(47, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(47, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(47, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(47, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(47, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(48, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(48, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(48, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(48, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(48, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(48, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(48, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(48, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(48, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(48, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(48, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(48, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(48, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(48, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(49, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(49, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(49, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(49, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(49, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(49, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(49, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(49, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(49, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(49, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(49, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(49, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(49, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(49, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(50, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(50, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(50, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(50, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(50, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(50, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(50, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(50, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(50, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(50, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(50, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(50, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(50, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(50, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(51, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(51, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(51, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(51, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(51, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(51, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(51, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(51, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(51, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(51, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(51, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(51, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(51, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(51, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(52, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(52, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(52, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(52, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(52, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(52, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(52, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(52, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(52, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(52, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(52, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(52, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(52, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(52, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(53, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(53, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(53, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(53, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(53, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(53, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(53, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(53, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(53, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(53, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(53, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(53, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(53, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(53, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(54, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(54, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(54, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(54, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(54, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(54, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(54, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(54, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(54, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(54, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(54, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(54, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(54, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(54, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(55, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(55, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(55, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(55, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(55, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(55, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(55, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(55, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(55, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(55, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(55, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(55, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(55, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(55, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(56, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(56, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(56, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(56, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(56, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(56, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(56, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(56, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(56, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(56, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(56, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(56, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(56, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(56, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(57, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(57, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(57, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(57, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(57, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(57, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(57, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(57, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(57, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(57, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(57, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(57, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(57, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(57, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(58, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(58, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(58, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(58, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(58, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(58, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(58, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(58, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(58, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(58, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(58, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(58, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(58, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(58, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(59, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(59, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(59, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(59, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(59, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(59, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(59, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(59, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(59, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(59, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(59, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(59, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(59, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(59, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(60, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(60, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(60, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(60, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(60, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(60, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(60, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(60, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(60, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(60, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(60, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(60, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(60, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(60, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(61, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(61, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(61, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(61, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(61, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(61, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(61, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(61, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(61, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(61, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(61, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(61, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(61, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(61, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(62, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(62, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(62, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(62, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(62, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(62, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(62, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(62, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(62, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(62, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(62, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(62, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(62, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(62, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(63, 64)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(63, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(63, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(63, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(63, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(63, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(63, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(63, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(63, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(63, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(63, 64)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(63, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(63, 64)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(63, 64)), $mul.ref(56, 1)), 0);
    $M.29 := $store.i8($M.29, .str.42, 60);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.42, $mul.ref(0, 10)), $mul.ref(1, 1)), 110);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.42, $mul.ref(0, 10)), $mul.ref(2, 1)), 111);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.42, $mul.ref(0, 10)), $mul.ref(3, 1)), 45);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.42, $mul.ref(0, 10)), $mul.ref(4, 1)), 110);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.42, $mul.ref(0, 10)), $mul.ref(5, 1)), 111);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.42, $mul.ref(0, 10)), $mul.ref(6, 1)), 100);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.42, $mul.ref(0, 10)), $mul.ref(7, 1)), 101);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.42, $mul.ref(0, 10)), $mul.ref(8, 1)), 62);
    $M.29 := $store.i8($M.29, $add.ref($add.ref(.str.42, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.324 := $store.i8($M.324, .str.66, 102);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(1, 1)), 98);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(2, 1)), 99);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(3, 1)), 118);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(4, 1)), 116);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(5, 1)), 58);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(6, 1)), 32);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(7, 1)), 37);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(8, 1)), 100);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(9, 1)), 120);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(10, 1)), 37);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(11, 1)), 100);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(12, 1)), 64);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(13, 1)), 37);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(14, 1)), 100);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(15, 1)), 58);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(16, 1)), 32);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(17, 1)), 67);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(18, 1)), 86);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(19, 1)), 84);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(20, 1)), 32);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(21, 1)), 78);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(22, 1)), 97);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(23, 1)), 109);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(24, 1)), 101);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(25, 1)), 32);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(26, 1)), 45);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(27, 1)), 32);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.66, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.325 := $store.i8($M.325, .str.67, 78);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(1, 1)), 111);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(2, 1)), 116);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(3, 1)), 32);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(4, 1)), 97);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(5, 1)), 32);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(6, 1)), 67);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(7, 1)), 86);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(8, 1)), 84);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(9, 1)), 32);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(10, 1)), 115);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(11, 1)), 116);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(12, 1)), 97);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(13, 1)), 110);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(14, 1)), 100);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(15, 1)), 97);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(16, 1)), 114);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(17, 1)), 100);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(18, 1)), 32);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(19, 1)), 45);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(20, 1)), 32);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(21, 1)), 37);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(22, 1)), 100);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(23, 1)), 46);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(24, 1)), 37);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(25, 1)), 48);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(26, 1)), 51);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(27, 1)), 100);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(28, 1)), 32);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(29, 1)), 77);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(30, 1)), 101);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(31, 1)), 103);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(32, 1)), 97);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(33, 1)), 32);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(34, 1)), 80);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(35, 1)), 105);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(36, 1)), 120);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(37, 1)), 101);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(38, 1)), 108);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(39, 1)), 32);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(40, 1)), 73);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(41, 1)), 109);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(42, 1)), 97);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(43, 1)), 103);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(44, 1)), 101);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(45, 1)), 10);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.67, $mul.ref(0, 47)), $mul.ref(46, 1)), 0);
    $M.326 := $store.i8($M.326, .str.68, 37);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.68, $mul.ref(0, 3)), $mul.ref(1, 1)), 100);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.68, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.327 := $store.i8($M.327, .str.69, 46);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.69, $mul.ref(0, 7)), $mul.ref(1, 1)), 37);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.69, $mul.ref(0, 7)), $mul.ref(2, 1)), 48);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.69, $mul.ref(0, 7)), $mul.ref(3, 1)), 51);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.69, $mul.ref(0, 7)), $mul.ref(4, 1)), 100);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.69, $mul.ref(0, 7)), $mul.ref(5, 1)), 77);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.69, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.328 := $store.i8($M.328, .str.70, 51);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.70, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.329 := $store.i8($M.329, .str.71, 52);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.71, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.330 := $store.i8($M.330, .str.72, 57);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.72, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.331 := $store.i8($M.331, .str.73, 65);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.73, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.332 := $store.i8($M.332, .str.74, 45);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.74, $mul.ref(0, 3)), $mul.ref(1, 1)), 82);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.74, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, .str.22, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(16, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(17, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(18, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(20, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(22, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(23, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(24, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(25, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(26, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, .str.23, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(16, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.333 := $store.i8($M.333, .str.64, 37);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(1, 1)), 50);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(2, 1)), 104);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(3, 1)), 104);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(4, 1)), 120);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(5, 1)), 32);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(6, 1)), 37);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(7, 1)), 50);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(8, 1)), 104);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(9, 1)), 104);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(10, 1)), 120);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(11, 1)), 32);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(12, 1)), 37);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(13, 1)), 50);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(14, 1)), 104);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(15, 1)), 104);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(16, 1)), 120);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(17, 1)), 32);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(18, 1)), 37);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(19, 1)), 50);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(20, 1)), 104);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(21, 1)), 104);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(22, 1)), 120);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(23, 1)), 32);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(24, 1)), 37);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(25, 1)), 50);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(26, 1)), 104);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(27, 1)), 104);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(28, 1)), 120);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(29, 1)), 32);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(30, 1)), 37);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(31, 1)), 50);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(32, 1)), 104);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(33, 1)), 104);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(34, 1)), 120);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(35, 1)), 32);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(36, 1)), 37);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(37, 1)), 50);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(38, 1)), 104);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(39, 1)), 104);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(40, 1)), 120);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(41, 1)), 32);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(42, 1)), 37);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(43, 1)), 50);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(44, 1)), 104);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(45, 1)), 104);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(46, 1)), 120);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(47, 1)), 10);
    $M.333 := $store.i8($M.333, $add.ref($add.ref(.str.64, $mul.ref(0, 49)), $mul.ref(48, 1)), 0);
    $M.334 := $store.i8($M.334, .str.63, 37);
    $M.334 := $store.i8($M.334, $add.ref($add.ref(.str.63, $mul.ref(0, 6)), $mul.ref(1, 1)), 56);
    $M.334 := $store.i8($M.334, $add.ref($add.ref(.str.63, $mul.ref(0, 6)), $mul.ref(2, 1)), 112);
    $M.334 := $store.i8($M.334, $add.ref($add.ref(.str.63, $mul.ref(0, 6)), $mul.ref(3, 1)), 104);
    $M.334 := $store.i8($M.334, $add.ref($add.ref(.str.63, $mul.ref(0, 6)), $mul.ref(4, 1)), 10);
    $M.334 := $store.i8($M.334, $add.ref($add.ref(.str.63, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.335 := $store.i8($M.335, .str.59, 37);
    $M.335 := $store.i8($M.335, $add.ref($add.ref(.str.59, $mul.ref(0, 4)), $mul.ref(1, 1)), 100);
    $M.335 := $store.i8($M.335, $add.ref($add.ref(.str.59, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.335 := $store.i8($M.335, $add.ref($add.ref(.str.59, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.336 := $store.i8($M.336, .str.62, 37);
    $M.336 := $store.i8($M.336, $add.ref($add.ref(.str.62, $mul.ref(0, 4)), $mul.ref(1, 1)), 115);
    $M.336 := $store.i8($M.336, $add.ref($add.ref(.str.62, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.336 := $store.i8($M.336, $add.ref($add.ref(.str.62, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.337 := $store.i8($M.337, .str.61, 37);
    $M.337 := $store.i8($M.337, $add.ref($add.ref(.str.61, $mul.ref(0, 7)), $mul.ref(1, 1)), 100);
    $M.337 := $store.i8($M.337, $add.ref($add.ref(.str.61, $mul.ref(0, 7)), $mul.ref(2, 1)), 44);
    $M.337 := $store.i8($M.337, $add.ref($add.ref(.str.61, $mul.ref(0, 7)), $mul.ref(3, 1)), 37);
    $M.337 := $store.i8($M.337, $add.ref($add.ref(.str.61, $mul.ref(0, 7)), $mul.ref(4, 1)), 100);
    $M.337 := $store.i8($M.337, $add.ref($add.ref(.str.61, $mul.ref(0, 7)), $mul.ref(5, 1)), 10);
    $M.337 := $store.i8($M.337, $add.ref($add.ref(.str.61, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.338 := $store.i8($M.338, .str.60, 37);
    $M.338 := $store.i8($M.338, $add.ref($add.ref(.str.60, $mul.ref(0, 15)), $mul.ref(1, 1)), 99);
    $M.338 := $store.i8($M.338, $add.ref($add.ref(.str.60, $mul.ref(0, 15)), $mul.ref(2, 1)), 58);
    $M.338 := $store.i8($M.338, $add.ref($add.ref(.str.60, $mul.ref(0, 15)), $mul.ref(3, 1)), 37);
    $M.338 := $store.i8($M.338, $add.ref($add.ref(.str.60, $mul.ref(0, 15)), $mul.ref(4, 1)), 100);
    $M.338 := $store.i8($M.338, $add.ref($add.ref(.str.60, $mul.ref(0, 15)), $mul.ref(5, 1)), 120);
    $M.338 := $store.i8($M.338, $add.ref($add.ref(.str.60, $mul.ref(0, 15)), $mul.ref(6, 1)), 37);
    $M.338 := $store.i8($M.338, $add.ref($add.ref(.str.60, $mul.ref(0, 15)), $mul.ref(7, 1)), 100);
    $M.338 := $store.i8($M.338, $add.ref($add.ref(.str.60, $mul.ref(0, 15)), $mul.ref(8, 1)), 37);
    $M.338 := $store.i8($M.338, $add.ref($add.ref(.str.60, $mul.ref(0, 15)), $mul.ref(9, 1)), 99);
    $M.338 := $store.i8($M.338, $add.ref($add.ref(.str.60, $mul.ref(0, 15)), $mul.ref(10, 1)), 45);
    $M.338 := $store.i8($M.338, $add.ref($add.ref(.str.60, $mul.ref(0, 15)), $mul.ref(11, 1)), 37);
    $M.338 := $store.i8($M.338, $add.ref($add.ref(.str.60, $mul.ref(0, 15)), $mul.ref(12, 1)), 100);
    $M.338 := $store.i8($M.338, $add.ref($add.ref(.str.60, $mul.ref(0, 15)), $mul.ref(13, 1)), 10);
    $M.338 := $store.i8($M.338, $add.ref($add.ref(.str.60, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    call {:si_unique_call 1676} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 668313);

procedure devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.19, $M.21, $CurrAddr, $M.11, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.46;



implementation devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i13 := $eq.ref(fb_deferred_io_set_page_dirty, $p0);
    assume {:branchcond $i13} true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i13 == 1);
    $i12 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i12 == 1);
    $i11 := $eq.ref(unregister_framebuffer, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i11 == 1);
    $i10 := $eq.ref(register_framebuffer, $p0);
    assume {:branchcond $i10} true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i10 == 1);
    $i9 := $eq.ref(unlink_framebuffer, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i9 == 1);
    $i8 := $eq.ref(lock_fb_info, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    call {:si_unique_call 1677} $i1 := lock_fb_info(arg);
    $r := $i1;
    return;

  $bb3:
    assume $i9 == 1;
    call {:si_unique_call 1678} $i2 := unlink_framebuffer(arg);
    $r := $i2;
    return;

  $bb4:
    assume $i10 == 1;
    call {:si_unique_call 1679} $i3 := register_framebuffer(arg);
    $r := $i3;
    return;

  $bb5:
    assume $i11 == 1;
    call {:si_unique_call 1680} $i4 := unregister_framebuffer(arg);
    $r := $i4;
    return;

  $bb6:
    assume $i12 == 1;
    call {:si_unique_call 1681} $i5 := __builtinx_object_size();
    $r := $i5;
    return;

  $bb7:
    assume $i13 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1682} $i7 := fb_deferred_io_set_page_dirty($p6);
    $r := $i7;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 669345);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.46, $CurrAddr;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i15 := $eq.ref(fb_seq_stop, $p0);
    assume {:branchcond $i15} true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(fb_videomode_to_var, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i14 == 1);
    $i13 := $eq.ref(fb_edid_add_monspecs, $p0);
    assume {:branchcond $i13} true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i13 == 1);
    $i12 := $eq.ref(fb_edid_to_monspecs, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i12 == 1);
    $i11 := $eq.ref(fb_var_to_videomode, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1683} fb_var_to_videomode($p1, $p2);
    return;

  $bb3:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1684} fb_edid_to_monspecs($p3, $p4);
    return;

  $bb4:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1685} fb_edid_add_monspecs($p5, $p6);
    return;

  $bb5:
    assume $i14 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1686} fb_videomode_to_var($p7, $p8);
    return;

  $bb6:
    assume $i15 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1687} fb_seq_stop($p9, $p10);
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 670377);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.16, $M.17, $M.19, $M.21, $M.70, $M.10, $M.18, $M.72, $M.11, $CurrAddr, $M.46, $M.71, $M.12, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.13, assertsPassed, $M.62, $M.64, $M.66, $M.68;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i74 := $eq.ref(fb_deferred_io_mkwrite, $p0);
    assume true;
    goto $bb21, $bb41;

  $bb41:
    assume !($i74 == 1);
    $i73 := $eq.ref(fb_deferred_io_fault, $p0);
    assume true;
    goto $bb20, $bb40;

  $bb40:
    assume !($i73 == 1);
    $i72 := $eq.ref(fb_seq_show, $p0);
    assume {:branchcond $i72} true;
    goto $bb19, $bb39;

  $bb39:
    assume !($i72 == 1);
    $i71 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb18, $bb38;

  $bb38:
    assume !($i71 == 1);
    $i70 := $eq.ref(fb_release, $p0);
    assume true;
    goto $bb17, $bb37;

  $bb37:
    assume !($i70 == 1);
    $i69 := $eq.ref(fb_open, $p0);
    assume true;
    goto $bb16, $bb36;

  $bb36:
    assume !($i69 == 1);
    $i68 := $eq.ref(fb_mmap, $p0);
    assume true;
    goto $bb15, $bb35;

  $bb35:
    assume !($i68 == 1);
    $i67 := $eq.ref(seq_release, $p0);
    assume true;
    goto $bb14, $bb34;

  $bb34:
    assume !($i67 == 1);
    $i66 := $eq.ref(proc_fb_open, $p0);
    assume true;
    goto $bb13, $bb33;

  $bb33:
    assume !($i66 == 1);
    $i65 := $eq.ref(fb_deferred_io_mmap, $p0);
    assume true;
    goto $bb12, $bb32;

  $bb32:
    assume !($i65 == 1);
    $i64 := $eq.ref(fb_validate_mode, $p0);
    assume {:branchcond $i64} true;
    goto $bb11, $bb31;

  $bb31:
    assume !($i64 == 1);
    $i63 := $eq.ref(fb_parse_edid, $p0);
    assume true;
    goto $bb10, $bb30;

  $bb30:
    assume !($i63 == 1);
    $i62 := $eq.ref(fb_videomode_from_videomode, $p0);
    assume true;
    goto $bb9, $bb29;

  $bb29:
    assume !($i62 == 1);
    $i61 := $eq.ref(fb_add_videomode, $p0);
    assume true;
    goto $bb8, $bb28;

  $bb28:
    assume !($i61 == 1);
    $i60 := $eq.ref(fb_mode_is_equal, $p0);
    assume true;
    goto $bb7, $bb27;

  $bb27:
    assume !($i60 == 1);
    $i59 := $eq.ref(fb_set_var, $p0);
    assume true;
    goto $bb6, $bb26;

  $bb26:
    assume !($i59 == 1);
    $i58 := $eq.ref(fb_pan_display, $p0);
    assume true;
    goto $bb5, $bb25;

  $bb25:
    assume !($i58 == 1);
    $i57 := $eq.ref(fb_copy_cmap, $p0);
    assume true;
    goto $bb4, $bb24;

  $bb24:
    assume !($i57 == 1);
    $i56 := $eq.ref(fb_set_cmap, $p0);
    assume true;
    goto $bb3, $bb23;

  $bb23:
    assume !($i56 == 1);
    $i55 := $eq.ref(fb_get_color_depth, $p0);
    assume true;
    goto $bb2, $bb22;

  $bb22:
    assume !($i55 == 1);
    assume false;
    return;

  $bb2:
    assume $i55 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1688} $i3 := fb_get_color_depth($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i56 == 1;
    call {:si_unique_call 1689} $i4 := fb_set_cmap(arg, arg1);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    $r := $i4;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i57 == 1;
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1690} $i6 := fb_copy_cmap(arg, $p5);
    $r := $i6;
    return;

  $bb5:
    assume $i58 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1691} $i9 := fb_pan_display($p7, $p8);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    $r := $i9;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i59 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1692} $i12 := fb_set_var($p10, $p11);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    $r := $i12;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i60 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1693} $i15 := fb_mode_is_equal($p13, $p14);
    $r := $i15;
    return;

  $bb8:
    assume $i61 == 1;
    $p16 := $bitcast.ref.ref(arg);
    $p17 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1694} $i18 := fb_add_videomode($p16, $p17);
    $r := $i18;
    return;

  $bb9:
    assume $i62 == 1;
    $p19 := $bitcast.ref.ref(arg);
    $p20 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1695} $i21 := fb_videomode_from_videomode($p19, $p20);
    $r := $i21;
    return;

  $bb10:
    assume $i63 == 1;
    $p22 := $bitcast.ref.ref(arg);
    $p23 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1696} $i24 := fb_parse_edid($p22, $p23);
    $r := $i24;
    return;

  $bb11:
    assume $i64 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1697} $i26 := fb_validate_mode($p25, arg1);
    $r := $i26;
    return;

  $bb12:
    assume $i65 == 1;
    $p27 := $bitcast.ref.ref(arg);
    $p28 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1698} $i29 := fb_deferred_io_mmap($p27, $p28);
    $r := $i29;
    return;

  $bb13:
    assume $i66 == 1;
    $p30 := $bitcast.ref.ref(arg);
    $p31 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1699} $i32 := proc_fb_open($p30, $p31);
    $r := $i32;
    return;

  $bb14:
    assume $i67 == 1;
    $p33 := $bitcast.ref.ref(arg);
    $p34 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1700} $i35 := seq_release($p33, $p34);
    $r := $i35;
    return;

  $bb15:
    assume $i68 == 1;
    $p36 := $bitcast.ref.ref(arg);
    $p37 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1701} $i38 := fb_mmap($p36, $p37);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    $r := $i38;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i69 == 1;
    $p39 := $bitcast.ref.ref(arg);
    $p40 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1702} $i41 := fb_open($p39, $p40);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    $r := $i41;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i70 == 1;
    $p42 := $bitcast.ref.ref(arg);
    $p43 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1703} $i44 := fb_release($p42, $p43);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    $r := $i44;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i71 == 1;
    call {:si_unique_call 1704} $i45 := __builtinx_object_size();
    $r := $i45;
    return;

  $bb19:
    assume $i72 == 1;
    $p46 := $bitcast.ref.ref(arg);
    $p47 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1705} $i48 := fb_seq_show($p46, $p47);
    $r := $i48;
    return;

  $bb20:
    assume $i73 == 1;
    $p49 := $bitcast.ref.ref(arg);
    $p50 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1706} $i51 := fb_deferred_io_fault($p49, $p50);
    $r := $i51;
    return;

  $bb21:
    assume $i74 == 1;
    $p52 := $bitcast.ref.ref(arg);
    $p53 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1707} $i54 := fb_deferred_io_mkwrite($p52, $p53);
    $r := $i54;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 671409);

procedure devirtbounce.3(funcPtr: ref, arg: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1708} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 672441);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.16, $M.17, $M.19, $M.21, $M.70, $M.10, $M.18, $M.72, $M.11, $CurrAddr, $M.46, $M.71, $M.12, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.13, assertsPassed, $M.62, $M.64, $M.66, $M.68;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i74 := $eq.ref(fb_deferred_io_mkwrite, $p0);
    assume true;
    goto $bb21, $bb41;

  $bb41:
    assume !($i74 == 1);
    $i73 := $eq.ref(fb_deferred_io_fault, $p0);
    assume true;
    goto $bb20, $bb40;

  $bb40:
    assume !($i73 == 1);
    $i72 := $eq.ref(fb_seq_show, $p0);
    assume {:branchcond $i72} true;
    goto $bb19, $bb39;

  $bb39:
    assume !($i72 == 1);
    $i71 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb18, $bb38;

  $bb38:
    assume !($i71 == 1);
    $i70 := $eq.ref(fb_release, $p0);
    assume true;
    goto $bb17, $bb37;

  $bb37:
    assume !($i70 == 1);
    $i69 := $eq.ref(fb_open, $p0);
    assume true;
    goto $bb16, $bb36;

  $bb36:
    assume !($i69 == 1);
    $i68 := $eq.ref(fb_mmap, $p0);
    assume true;
    goto $bb15, $bb35;

  $bb35:
    assume !($i68 == 1);
    $i67 := $eq.ref(seq_release, $p0);
    assume true;
    goto $bb14, $bb34;

  $bb34:
    assume !($i67 == 1);
    $i66 := $eq.ref(proc_fb_open, $p0);
    assume true;
    goto $bb13, $bb33;

  $bb33:
    assume !($i66 == 1);
    $i65 := $eq.ref(fb_deferred_io_mmap, $p0);
    assume true;
    goto $bb12, $bb32;

  $bb32:
    assume !($i65 == 1);
    $i64 := $eq.ref(fb_validate_mode, $p0);
    assume {:branchcond $i64} true;
    goto $bb11, $bb31;

  $bb31:
    assume !($i64 == 1);
    $i63 := $eq.ref(fb_parse_edid, $p0);
    assume true;
    goto $bb10, $bb30;

  $bb30:
    assume !($i63 == 1);
    $i62 := $eq.ref(fb_videomode_from_videomode, $p0);
    assume true;
    goto $bb9, $bb29;

  $bb29:
    assume !($i62 == 1);
    $i61 := $eq.ref(fb_add_videomode, $p0);
    assume true;
    goto $bb8, $bb28;

  $bb28:
    assume !($i61 == 1);
    $i60 := $eq.ref(fb_mode_is_equal, $p0);
    assume true;
    goto $bb7, $bb27;

  $bb27:
    assume !($i60 == 1);
    $i59 := $eq.ref(fb_set_var, $p0);
    assume true;
    goto $bb6, $bb26;

  $bb26:
    assume !($i59 == 1);
    $i58 := $eq.ref(fb_pan_display, $p0);
    assume true;
    goto $bb5, $bb25;

  $bb25:
    assume !($i58 == 1);
    $i57 := $eq.ref(fb_copy_cmap, $p0);
    assume true;
    goto $bb4, $bb24;

  $bb24:
    assume !($i57 == 1);
    $i56 := $eq.ref(fb_set_cmap, $p0);
    assume true;
    goto $bb3, $bb23;

  $bb23:
    assume !($i56 == 1);
    $i55 := $eq.ref(fb_get_color_depth, $p0);
    assume true;
    goto $bb2, $bb22;

  $bb22:
    assume !($i55 == 1);
    assume false;
    return;

  $bb2:
    assume $i55 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1709} $i2 := fb_get_color_depth(arg, $p1);
    $r := $i2;
    return;

  $bb3:
    assume $i56 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1710} $i4 := fb_set_cmap($p3, arg1);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    $r := $i4;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i57 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1711} $i7 := fb_copy_cmap($p5, $p6);
    $r := $i7;
    return;

  $bb5:
    assume $i58 == 1;
    $p8 := $bitcast.ref.ref(arg);
    $p9 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1712} $i10 := fb_pan_display($p8, $p9);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    $r := $i10;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i59 == 1;
    $p11 := $bitcast.ref.ref(arg);
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1713} $i13 := fb_set_var($p11, $p12);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    $r := $i13;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i60 == 1;
    $p14 := $bitcast.ref.ref(arg);
    $p15 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1714} $i16 := fb_mode_is_equal($p14, $p15);
    $r := $i16;
    return;

  $bb8:
    assume $i61 == 1;
    $p17 := $bitcast.ref.ref(arg);
    $p18 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1715} $i19 := fb_add_videomode($p17, $p18);
    $r := $i19;
    return;

  $bb9:
    assume $i62 == 1;
    $p20 := $bitcast.ref.ref(arg);
    $p21 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1716} $i22 := fb_videomode_from_videomode($p20, $p21);
    $r := $i22;
    return;

  $bb10:
    assume $i63 == 1;
    $p23 := $bitcast.ref.ref(arg);
    $p24 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1717} $i25 := fb_parse_edid($p23, $p24);
    $r := $i25;
    return;

  $bb11:
    assume $i64 == 1;
    call {:si_unique_call 1718} $i26 := fb_validate_mode(arg, arg1);
    $r := $i26;
    return;

  $bb12:
    assume $i65 == 1;
    $p27 := $bitcast.ref.ref(arg);
    $p28 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1719} $i29 := fb_deferred_io_mmap($p27, $p28);
    $r := $i29;
    return;

  $bb13:
    assume $i66 == 1;
    $p30 := $bitcast.ref.ref(arg);
    $p31 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1720} $i32 := proc_fb_open($p30, $p31);
    $r := $i32;
    return;

  $bb14:
    assume $i67 == 1;
    $p33 := $bitcast.ref.ref(arg);
    $p34 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1721} $i35 := seq_release($p33, $p34);
    $r := $i35;
    return;

  $bb15:
    assume $i68 == 1;
    $p36 := $bitcast.ref.ref(arg);
    $p37 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1722} $i38 := fb_mmap($p36, $p37);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    $r := $i38;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i69 == 1;
    $p39 := $bitcast.ref.ref(arg);
    $p40 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1723} $i41 := fb_open($p39, $p40);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    $r := $i41;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i70 == 1;
    $p42 := $bitcast.ref.ref(arg);
    $p43 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1724} $i44 := fb_release($p42, $p43);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    $r := $i44;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i71 == 1;
    call {:si_unique_call 1725} $i45 := __builtinx_object_size();
    $r := $i45;
    return;

  $bb19:
    assume $i72 == 1;
    $p46 := $bitcast.ref.ref(arg);
    $p47 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1726} $i48 := fb_seq_show($p46, $p47);
    $r := $i48;
    return;

  $bb20:
    assume $i73 == 1;
    $p49 := $bitcast.ref.ref(arg);
    $p50 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1727} $i51 := fb_deferred_io_fault($p49, $p50);
    $r := $i51;
    return;

  $bb21:
    assume $i74 == 1;
    $p52 := $bitcast.ref.ref(arg);
    $p53 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1728} $i54 := fb_deferred_io_mkwrite($p52, $p53);
    $r := $i54;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 673473);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(fb_deferred_io_open, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    $p2 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 1729} fb_deferred_io_open(arg, $p1, $p2);
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 674505);

procedure devirtbounce.6(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1730} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 675537);

procedure devirtbounce.7(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $CurrAddr, $M.46;



implementation devirtbounce.7(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i11 := $eq.ref(fb_deferred_io_cleanup, $p0);
    assume true;
    goto $bb8, $bb15;

  $bb15:
    assume !($i11 == 1);
    $i10 := $eq.ref(fb_deferred_io_work, $p0);
    assume {:branchcond $i10} true;
    goto $bb7, $bb14;

  $bb14:
    assume !($i10 == 1);
    $i9 := $eq.ref(fb_deferred_io_init, $p0);
    assume true;
    goto $bb6, $bb13;

  $bb13:
    assume !($i9 == 1);
    $i8 := $eq.ref(framebuffer_release, $p0);
    assume true;
    goto $bb5, $bb12;

  $bb12:
    assume !($i8 == 1);
    $i7 := $eq.ref(fb_dealloc_cmap, $p0);
    assume {:branchcond $i7} true;
    goto $bb4, $bb11;

  $bb11:
    assume !($i7 == 1);
    $i6 := $eq.ref(fb_destroy_modedb, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb10;

  $bb10:
    assume !($i6 == 1);
    $i5 := $eq.ref(fb_destroy_modelist, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb9;

  $bb9:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1731} fb_destroy_modelist($p1);
    return;

  $bb3:
    assume $i6 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1732} fb_destroy_modedb($p2);
    return;

  $bb4:
    assume $i7 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1733} fb_dealloc_cmap($p3);
    return;

  $bb5:
    assume $i8 == 1;
    call {:si_unique_call 1734} framebuffer_release(arg);
    return;

  $bb6:
    assume $i9 == 1;
    call {:si_unique_call 1735} fb_deferred_io_init(arg);
    return;

  $bb7:
    assume $i10 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1736} fb_deferred_io_work($p4);
    return;

  $bb8:
    assume $i11 == 1;
    call {:si_unique_call 1737} fb_deferred_io_cleanup(arg);
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 676569);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(fb_deferred_io_open, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    $p3 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 1738} fb_deferred_io_open($p1, $p2, $p3);
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 677601);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 678633);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.46, $CurrAddr;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i15 := $eq.ref(fb_seq_stop, $p0);
    assume {:branchcond $i15} true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(fb_videomode_to_var, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i14 == 1);
    $i13 := $eq.ref(fb_edid_add_monspecs, $p0);
    assume {:branchcond $i13} true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i13 == 1);
    $i12 := $eq.ref(fb_edid_to_monspecs, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i12 == 1);
    $i11 := $eq.ref(fb_var_to_videomode, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1739} fb_var_to_videomode($p1, $p2);
    return;

  $bb3:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1740} fb_edid_to_monspecs($p3, $p4);
    return;

  $bb4:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1741} fb_edid_add_monspecs($p5, $p6);
    return;

  $bb5:
    assume $i14 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1742} fb_videomode_to_var($p7, $p8);
    return;

  $bb6:
    assume $i15 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1743} fb_seq_stop($p9, $p10);
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 679665);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 680697);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.19, $M.21, $CurrAddr, $M.11, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.46;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(fb_write, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i9 == 1);
    $i8 := $eq.ref(fb_read, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i8 == 1);
    $i7 := $eq.ref(seq_read, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1744} $i2 := seq_read($p1, arg1, arg2, arg3);
    $r := $i2;
    return;

  $bb3:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1745} $i4 := fb_read($p3, arg1, arg2, arg3);
    $r := $i4;
    return;

  $bb4:
    assume $i9 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1746} $i6 := fb_write($p5, arg1, arg2, arg3);
    $r := $i6;
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 681729);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: i32, arg2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: i32, arg2: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1747} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 682761);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.16, $M.17, $M.19, $M.21, $M.70, $M.10, $M.18, $M.72, $M.11, $CurrAddr, $M.46, $M.71, $M.12, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.13, assertsPassed, $M.62, $M.64, $M.66, $M.68;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i73 := $eq.ref(fb_deferred_io_mkwrite, $p0);
    assume true;
    goto $bb21, $bb41;

  $bb41:
    assume !($i73 == 1);
    $i72 := $eq.ref(fb_deferred_io_fault, $p0);
    assume {:branchcond $i72} true;
    goto $bb20, $bb40;

  $bb40:
    assume !($i72 == 1);
    $i71 := $eq.ref(fb_seq_show, $p0);
    assume true;
    goto $bb19, $bb39;

  $bb39:
    assume !($i71 == 1);
    $i70 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb18, $bb38;

  $bb38:
    assume !($i70 == 1);
    $i69 := $eq.ref(fb_release, $p0);
    assume true;
    goto $bb17, $bb37;

  $bb37:
    assume !($i69 == 1);
    $i68 := $eq.ref(fb_open, $p0);
    assume true;
    goto $bb16, $bb36;

  $bb36:
    assume !($i68 == 1);
    $i67 := $eq.ref(fb_mmap, $p0);
    assume true;
    goto $bb15, $bb35;

  $bb35:
    assume !($i67 == 1);
    $i66 := $eq.ref(seq_release, $p0);
    assume true;
    goto $bb14, $bb34;

  $bb34:
    assume !($i66 == 1);
    $i65 := $eq.ref(proc_fb_open, $p0);
    assume true;
    goto $bb13, $bb33;

  $bb33:
    assume !($i65 == 1);
    $i64 := $eq.ref(fb_deferred_io_mmap, $p0);
    assume {:branchcond $i64} true;
    goto $bb12, $bb32;

  $bb32:
    assume !($i64 == 1);
    $i63 := $eq.ref(fb_validate_mode, $p0);
    assume true;
    goto $bb11, $bb31;

  $bb31:
    assume !($i63 == 1);
    $i62 := $eq.ref(fb_parse_edid, $p0);
    assume true;
    goto $bb10, $bb30;

  $bb30:
    assume !($i62 == 1);
    $i61 := $eq.ref(fb_videomode_from_videomode, $p0);
    assume true;
    goto $bb9, $bb29;

  $bb29:
    assume !($i61 == 1);
    $i60 := $eq.ref(fb_add_videomode, $p0);
    assume true;
    goto $bb8, $bb28;

  $bb28:
    assume !($i60 == 1);
    $i59 := $eq.ref(fb_mode_is_equal, $p0);
    assume true;
    goto $bb7, $bb27;

  $bb27:
    assume !($i59 == 1);
    $i58 := $eq.ref(fb_set_var, $p0);
    assume true;
    goto $bb6, $bb26;

  $bb26:
    assume !($i58 == 1);
    $i57 := $eq.ref(fb_pan_display, $p0);
    assume true;
    goto $bb5, $bb25;

  $bb25:
    assume !($i57 == 1);
    $i56 := $eq.ref(fb_copy_cmap, $p0);
    assume true;
    goto $bb4, $bb24;

  $bb24:
    assume !($i56 == 1);
    $i55 := $eq.ref(fb_set_cmap, $p0);
    assume true;
    goto $bb3, $bb23;

  $bb23:
    assume !($i55 == 1);
    $i54 := $eq.ref(fb_get_color_depth, $p0);
    assume true;
    goto $bb2, $bb22;

  $bb22:
    assume !($i54 == 1);
    assume false;
    return;

  $bb2:
    assume $i54 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1748} $i3 := fb_get_color_depth($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i55 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1749} $i6 := fb_set_cmap($p4, $p5);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    $r := $i6;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i56 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1750} $i9 := fb_copy_cmap($p7, $p8);
    $r := $i9;
    return;

  $bb5:
    assume $i57 == 1;
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1751} $i11 := fb_pan_display(arg, $p10);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    $r := $i11;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i58 == 1;
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1752} $i13 := fb_set_var(arg, $p12);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    $r := $i13;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i59 == 1;
    $p14 := $bitcast.ref.ref(arg);
    $p15 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1753} $i16 := fb_mode_is_equal($p14, $p15);
    $r := $i16;
    return;

  $bb8:
    assume $i60 == 1;
    $p17 := $bitcast.ref.ref(arg);
    $p18 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1754} $i19 := fb_add_videomode($p17, $p18);
    $r := $i19;
    return;

  $bb9:
    assume $i61 == 1;
    $p20 := $bitcast.ref.ref(arg);
    $p21 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1755} $i22 := fb_videomode_from_videomode($p20, $p21);
    $r := $i22;
    return;

  $bb10:
    assume $i62 == 1;
    $p23 := $bitcast.ref.ref(arg);
    $p24 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1756} $i25 := fb_parse_edid($p23, $p24);
    $r := $i25;
    return;

  $bb11:
    assume $i63 == 1;
    $p26 := $bitcast.ref.ref(arg);
    $p27 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1757} $i28 := fb_validate_mode($p26, $p27);
    $r := $i28;
    return;

  $bb12:
    assume $i64 == 1;
    call {:si_unique_call 1758} $i29 := fb_deferred_io_mmap(arg, arg1);
    $r := $i29;
    return;

  $bb13:
    assume $i65 == 1;
    $p30 := $bitcast.ref.ref(arg);
    $p31 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1759} $i32 := proc_fb_open($p30, $p31);
    $r := $i32;
    return;

  $bb14:
    assume $i66 == 1;
    $p33 := $bitcast.ref.ref(arg);
    $p34 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1760} $i35 := seq_release($p33, $p34);
    $r := $i35;
    return;

  $bb15:
    assume $i67 == 1;
    $p36 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1761} $i37 := fb_mmap($p36, arg1);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    $r := $i37;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i68 == 1;
    $p38 := $bitcast.ref.ref(arg);
    $p39 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1762} $i40 := fb_open($p38, $p39);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    $r := $i40;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i69 == 1;
    $p41 := $bitcast.ref.ref(arg);
    $p42 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1763} $i43 := fb_release($p41, $p42);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    $r := $i43;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i70 == 1;
    call {:si_unique_call 1764} $i44 := __builtinx_object_size();
    $r := $i44;
    return;

  $bb19:
    assume $i71 == 1;
    $p45 := $bitcast.ref.ref(arg);
    $p46 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1765} $i47 := fb_seq_show($p45, $p46);
    $r := $i47;
    return;

  $bb20:
    assume $i72 == 1;
    $p48 := $bitcast.ref.ref(arg);
    $p49 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1766} $i50 := fb_deferred_io_fault($p48, $p49);
    $r := $i50;
    return;

  $bb21:
    assume $i73 == 1;
    $p51 := $bitcast.ref.ref(arg);
    $p52 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1767} $i53 := fb_deferred_io_mkwrite($p51, $p52);
    $r := $i53;
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 683793);

procedure devirtbounce.15(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.18, $M.14, $M.15, $M.12, $M.0, $M.13, $CurrAddr, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.46, $M.16, $M.17, $M.19, $M.21, $M.70, $M.72, $M.11, $M.71, $M.61, $M.63, $M.65, $M.67, assertsPassed, $M.62, $M.64, $M.66, $M.68;



implementation devirtbounce.15(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i8 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i8 == 1);
    $i7 := $eq.ref(fb_blank, $p0);
    assume {:branchcond $i7} true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i7 == 1);
    $i6 := $eq.ref(fb_show_logo, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i6 == 1);
    $i5 := $eq.ref(fb_prepare_logo, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    call {:si_unique_call 1768} $i1 := fb_prepare_logo(arg, arg1);
    $r := $i1;
    return;

  $bb3:
    assume $i6 == 1;
    call {:si_unique_call 1769} $i2 := fb_show_logo(arg, arg1);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    $r := $i2;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i7 == 1;
    call {:si_unique_call 1770} $i3 := fb_blank(arg, arg1);
    $r := $i3;
    return;

  $bb5:
    assume $i8 == 1;
    call {:si_unique_call 1771} $i4 := __builtinx_object_size();
    $r := $i4;
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 684825);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.46, $CurrAddr;



implementation devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i15 := $eq.ref(fb_seq_stop, $p0);
    assume {:branchcond $i15} true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(fb_videomode_to_var, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i14 == 1);
    $i13 := $eq.ref(fb_edid_add_monspecs, $p0);
    assume {:branchcond $i13} true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i13 == 1);
    $i12 := $eq.ref(fb_edid_to_monspecs, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i12 == 1);
    $i11 := $eq.ref(fb_var_to_videomode, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1772} fb_var_to_videomode($p1, $p2);
    return;

  $bb3:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1773} fb_edid_to_monspecs($p3, $p4);
    return;

  $bb4:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1774} fb_edid_add_monspecs($p5, $p6);
    return;

  $bb5:
    assume $i14 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1775} fb_videomode_to_var($p7, $p8);
    return;

  $bb6:
    assume $i15 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1776} fb_seq_stop($p9, $p10);
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 685857);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 686889);

procedure devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i20 := $eq.ref(fb_seq_start, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i20 == 1);
    $i19 := $eq.ref(fb_find_nearest_mode, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i19 == 1);
    $i18 := $eq.ref(fb_match_mode, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i18 == 1);
    $i17 := $eq.ref(fb_find_best_mode, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i17 == 1);
    $i16 := $eq.ref(fb_find_best_display, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume false;
    return;

  $bb2:
    assume $i16 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1777} $p3 := fb_find_best_display($p1, $p2);
    $r := $p3;
    return;

  $bb3:
    assume $i17 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1778} $p6 := fb_find_best_mode($p4, $p5);
    $r := $p6;
    return;

  $bb4:
    assume $i18 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1779} $p9 := fb_match_mode($p7, $p8);
    $r := $p9;
    return;

  $bb5:
    assume $i19 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1780} $p12 := fb_find_nearest_mode($p10, $p11);
    $r := $p12;
    return;

  $bb6:
    assume $i20 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1781} $p15 := fb_seq_start($p13, $p14);
    $r := $p15;
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 687921);

procedure devirtbounce.19(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.19(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1782} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 688953);

procedure devirtbounce.20(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.20(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1783} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.21: ref;

axiom devirtbounce.21 == $sub.ref(0, 689985);

procedure devirtbounce.21(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.21(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.22: ref;

axiom devirtbounce.22 == $sub.ref(0, 691017);

procedure devirtbounce.22(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.22(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.19, $M.100, $M.21, $M.103, $M.106, $M.107, $M.108, $M.0, $M.109, $M.110, $M.60, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.58, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.47, $M.204, $M.205, $M.206, $M.207, $M.208, $M.209, $M.210, $M.211, $M.212, $M.213, $M.214, $M.215, $M.216, $M.217, $M.218, $M.90, $M.91, $M.87, $M.94, $M.89, $M.10, $M.20, $M.79, $M.61, $M.81, $M.83, $M.66, $M.95, $M.65, $M.71, $M.92, $M.84, $M.63, $M.86, $M.85, $M.82, $M.70, $M.67, $M.78, $M.93, $M.68, $M.96, $M.77, $M.64, $M.88, $M.62, $M.72, $M.253, $M.254, $M.255, $M.48, $M.29, $M.324, $M.325, $M.326, $M.327, $M.328, $M.329, $M.330, $M.331, $M.332, $M.333, $M.334, $M.335, $M.336, $M.337, $M.338, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1784} __SMACK_static_init();
    call {:si_unique_call 1785} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.76, $M.70, $M.79, $M.81, $M.82, $M.83, $M.84, $M.85, $M.87, $M.0, $M.89, $M.90, $M.91, $M.94, $M.19, $M.100, $M.21, $M.103, $M.106, $M.107, $M.108, $M.109, $M.110, $M.60, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.58, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.47, $M.204, $M.205, $M.206, $M.207, $M.208, $M.209, $M.210, $M.211, $M.212, $M.213, $M.214, $M.215, $M.216, $M.217, $M.218, $M.10, $M.20, $M.61, $M.66, $M.95, $M.65, $M.71, $M.92, $M.63, $M.86, $M.67, $M.78, $M.93, $M.68, $M.96, $M.77, $M.64, $M.88, $M.62, $M.72, $M.253, $M.254, $M.255, $M.48, $M.29, $M.324, $M.325, $M.326, $M.327, $M.328, $M.329, $M.330, $M.331, $M.332, $M.333, $M.334, $M.335, $M.336, $M.337, $M.338, $CurrAddr, $M.14, $M.15, $M.18, $M.11, $M.16, $M.17, $M.12, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.13, $M.46;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation fb_set_logocmap_loop_$bb12(in_$p2: ref, in_$i26: i32, in_$i34: i8, in_$i35: i32, in_$i36: i32, in_$i37: i16, in_$i38: i32, in_$i39: i8, in_$i40: i16, in_$i41: i32, in_$i42: i32, in_$i43: i16, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i32, in_$i52: i16, in_$i53: i32, in_$p54: ref, in_$i55: i8, in_$i56: i16, in_$i57: i32, in_$i58: i32, in_$i59: i16, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$i65: i8, in_$i66: i32, in_$i67: i32, in_$i68: i16, in_$i69: i32, in_$p70: ref, in_$i71: i8, in_$i72: i16, in_$i73: i32, in_$i74: i32, in_$i75: i16, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$p32: ref, in_$i33: i32, in_$p83: ref) returns (out_$i34: i8, out_$i35: i32, out_$i36: i32, out_$i37: i16, out_$i38: i32, out_$i39: i8, out_$i40: i16, out_$i41: i32, out_$i42: i32, out_$i43: i16, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i32, out_$i52: i16, out_$i53: i32, out_$p54: ref, out_$i55: i8, out_$i56: i16, out_$i57: i32, out_$i58: i32, out_$i59: i16, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$i65: i8, out_$i66: i32, out_$i67: i32, out_$i68: i16, out_$i69: i32, out_$p70: ref, out_$i71: i8, out_$i72: i16, out_$i73: i32, out_$i74: i32, out_$i75: i16, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$p32: ref, out_$i33: i32, out_$p83: ref)
{

  entry:
    out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p32, out_$i33, out_$p83 := in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$p44, in_$p45, in_$i46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p60, in_$p61, in_$i62, in_$p63, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$p70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$p76, in_$p77, in_$i78, in_$p79, in_$p80, in_$i81, in_$i82, in_$p32, in_$i33, in_$p83;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_399;

  $bb14:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$p32, out_$i33 := out_$p80, out_$i81;
    goto $bb14_dummy;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    out_$p83 := out_$p80;
    assume true;
    goto $bb14;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(out_$i81, in_$i26);
    goto corral_source_split_452;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i32(out_$i33, 1);
    call {:si_unique_call 56} {:cexpr "j"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_451;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref(out_$p32, $mul.ref(3, 1));
    goto corral_source_split_450;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p79, out_$i75);
    goto corral_source_split_449;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref(out_$p77, $mul.ref(out_$i78, 2));
    goto corral_source_split_448;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    out_$i78 := $sext.i32.i64(out_$i33);
    goto corral_source_split_447;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.0, out_$p76);
    goto corral_source_split_446;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_445;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    out_$i75 := $trunc.i32.i16(out_$i74);
    goto corral_source_split_444;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    out_$i74 := $or.i32(out_$i69, out_$i73);
    goto corral_source_split_443;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i16.i32(out_$i72);
    goto corral_source_split_442;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i8.i16(out_$i71);
    goto corral_source_split_441;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i8($M.11, out_$p70);
    goto corral_source_split_440;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref(out_$p32, $mul.ref(2, 1));
    goto corral_source_split_439;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i16.i32(out_$i68);
    goto corral_source_split_438;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    out_$i68 := $trunc.i32.i16(out_$i67);
    goto corral_source_split_437;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    out_$i67 := $shl.i32(out_$i66, 8);
    goto corral_source_split_436;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    out_$i66 := $zext.i8.i32(out_$i65);
    goto corral_source_split_435;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i8($M.11, out_$p64);
    goto corral_source_split_434;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(out_$p32, $mul.ref(2, 1));
    goto corral_source_split_433;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p63, out_$i59);
    goto corral_source_split_432;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(out_$p61, $mul.ref(out_$i62, 2));
    goto corral_source_split_431;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i33);
    goto corral_source_split_430;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_429;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_428;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    out_$i59 := $trunc.i32.i16(out_$i58);
    goto corral_source_split_427;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    out_$i58 := $or.i32(out_$i53, out_$i57);
    goto corral_source_split_426;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i16.i32(out_$i56);
    goto corral_source_split_425;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i8.i16(out_$i55);
    goto corral_source_split_424;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i8($M.11, out_$p54);
    goto corral_source_split_423;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p32, $mul.ref(1, 1));
    goto corral_source_split_422;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    out_$i53 := $sext.i16.i32(out_$i52);
    goto corral_source_split_421;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    out_$i52 := $trunc.i32.i16(out_$i51);
    goto corral_source_split_420;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    out_$i51 := $shl.i32(out_$i50, 8);
    goto corral_source_split_419;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i8.i32(out_$i49);
    goto corral_source_split_418;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i8($M.11, out_$p48);
    goto corral_source_split_417;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(out_$p32, $mul.ref(1, 1));
    goto corral_source_split_416;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p47, out_$i43);
    goto corral_source_split_415;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref(out_$p45, $mul.ref(out_$i46, 2));
    goto corral_source_split_414;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    out_$i46 := $sext.i32.i64(out_$i33);
    goto corral_source_split_413;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_412;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_411;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    out_$i43 := $trunc.i32.i16(out_$i42);
    goto corral_source_split_410;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    out_$i42 := $or.i32(out_$i38, out_$i41);
    goto corral_source_split_409;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i16.i32(out_$i40);
    goto corral_source_split_408;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i16(out_$i39);
    goto corral_source_split_407;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.11, out_$p32);
    goto corral_source_split_406;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i16.i32(out_$i37);
    goto corral_source_split_405;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i32.i16(out_$i36);
    goto corral_source_split_404;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    out_$i36 := $shl.i32(out_$i35, 8);
    goto corral_source_split_403;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    goto corral_source_split_402;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.11, out_$p32);
    goto corral_source_split_401;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p32, out_$i33, out_$p83 := fb_set_logocmap_loop_$bb12(in_$p2, in_$i26, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p32, out_$i33, out_$p83);
    return;

  exit:
    return;
}



procedure fb_set_logocmap_loop_$bb12(in_$p2: ref, in_$i26: i32, in_$i34: i8, in_$i35: i32, in_$i36: i32, in_$i37: i16, in_$i38: i32, in_$i39: i8, in_$i40: i16, in_$i41: i32, in_$i42: i32, in_$i43: i16, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i32, in_$i52: i16, in_$i53: i32, in_$p54: ref, in_$i55: i8, in_$i56: i16, in_$i57: i32, in_$i58: i32, in_$i59: i16, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$i65: i8, in_$i66: i32, in_$i67: i32, in_$i68: i16, in_$i69: i32, in_$p70: ref, in_$i71: i8, in_$i72: i16, in_$i73: i32, in_$i74: i32, in_$i75: i16, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$p32: ref, in_$i33: i32, in_$p83: ref) returns (out_$i34: i8, out_$i35: i32, out_$i36: i32, out_$i37: i16, out_$i38: i32, out_$i39: i8, out_$i40: i16, out_$i41: i32, out_$i42: i32, out_$i43: i16, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i32, out_$i52: i16, out_$i53: i32, out_$p54: ref, out_$i55: i8, out_$i56: i16, out_$i57: i32, out_$i58: i32, out_$i59: i16, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$i65: i8, out_$i66: i32, out_$i67: i32, out_$i68: i16, out_$i69: i32, out_$p70: ref, out_$i71: i8, out_$i72: i16, out_$i73: i32, out_$i74: i32, out_$i75: i16, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$p32: ref, out_$i33: i32, out_$p83: ref);
  modifies $M.0;



implementation fb_set_logocmap_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p17: ref, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i32, in_$p28: ref, in_$p29: ref, in_$i30: i1, in_$i34: i8, in_$i35: i32, in_$i36: i32, in_$i37: i16, in_$i38: i32, in_$i39: i8, in_$i40: i16, in_$i41: i32, in_$i42: i32, in_$i43: i16, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i32, in_$i52: i16, in_$i53: i32, in_$p54: ref, in_$i55: i8, in_$i56: i16, in_$i57: i32, in_$i58: i32, in_$i59: i16, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$i65: i8, in_$i66: i32, in_$i67: i32, in_$i68: i16, in_$i69: i32, in_$p70: ref, in_$i71: i8, in_$i72: i16, in_$i73: i32, in_$i74: i32, in_$i75: i16, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$p32: ref, in_$i33: i32, in_$p83: ref, in_$p31: ref, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$p20: ref, in_$i21: i32, in_vslice_dummy_var_127: i32) returns (out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i32, out_$p28: ref, out_$p29: ref, out_$i30: i1, out_$i34: i8, out_$i35: i32, out_$i36: i32, out_$i37: i16, out_$i38: i32, out_$i39: i8, out_$i40: i16, out_$i41: i32, out_$i42: i32, out_$i43: i16, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i32, out_$i52: i16, out_$i53: i32, out_$p54: ref, out_$i55: i8, out_$i56: i16, out_$i57: i32, out_$i58: i32, out_$i59: i16, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$i65: i8, out_$i66: i32, out_$i67: i32, out_$i68: i16, out_$i69: i32, out_$p70: ref, out_$i71: i8, out_$i72: i16, out_$i73: i32, out_$i74: i32, out_$i75: i16, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$p32: ref, out_$i33: i32, out_$p83: ref, out_$p31: ref, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$p20: ref, out_$i21: i32, out_vslice_dummy_var_127: i32)
{

  entry:
    out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p32, out_$i33, out_$p83, out_$p31, out_$i85, out_$i86, out_$i87, out_$p20, out_$i21, out_vslice_dummy_var_127 := in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$p28, in_$p29, in_$i30, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$p44, in_$p45, in_$i46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p60, in_$p61, in_$i62, in_$p63, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$p70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$p76, in_$p77, in_$i78, in_$p79, in_$p80, in_$i81, in_$i82, in_$p32, in_$i33, in_$p83, in_$p31, in_$i85, in_$i86, in_$i87, in_$p20, in_$i21, in_vslice_dummy_var_127;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_380;

  $bb17:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$p20, out_$i21 := out_$p31, out_$i85;
    goto $bb17_dummy;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    out_$i87 := $ult.i32(out_$i85, out_$i86);
    goto corral_source_split_459;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i32($M.0, in_$p17);
    goto corral_source_split_458;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    out_$i85 := $add.i32(out_$i21, out_$i26);
    call {:si_unique_call 58} {:cexpr "i"} boogie_si_record_i32(out_$i85);
    goto corral_source_split_457;

  SeqInstr_9:
    goto corral_source_split_456;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} out_vslice_dummy_var_127 := fb_set_cmap(in_$p2, in_$p0);
    goto SeqInstr_8;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb11;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    out_$p31 := out_$p83;
    goto $bb11;

  $bb15:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_454;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    out_$p83 := out_$p80;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(out_$i81, out_$i26);
    goto corral_source_split_452;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i32(out_$i33, 1);
    call {:si_unique_call 56} {:cexpr "j"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_451;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref(out_$p32, $mul.ref(3, 1));
    goto corral_source_split_450;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p79, out_$i75);
    goto corral_source_split_449;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref(out_$p77, $mul.ref(out_$i78, 2));
    goto corral_source_split_448;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    out_$i78 := $sext.i32.i64(out_$i33);
    goto corral_source_split_447;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.0, out_$p76);
    goto corral_source_split_446;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_445;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    out_$i75 := $trunc.i32.i16(out_$i74);
    goto corral_source_split_444;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    out_$i74 := $or.i32(out_$i69, out_$i73);
    goto corral_source_split_443;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i16.i32(out_$i72);
    goto corral_source_split_442;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i8.i16(out_$i71);
    goto corral_source_split_441;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i8($M.11, out_$p70);
    goto corral_source_split_440;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref(out_$p32, $mul.ref(2, 1));
    goto corral_source_split_439;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i16.i32(out_$i68);
    goto corral_source_split_438;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    out_$i68 := $trunc.i32.i16(out_$i67);
    goto corral_source_split_437;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    out_$i67 := $shl.i32(out_$i66, 8);
    goto corral_source_split_436;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    out_$i66 := $zext.i8.i32(out_$i65);
    goto corral_source_split_435;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i8($M.11, out_$p64);
    goto corral_source_split_434;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(out_$p32, $mul.ref(2, 1));
    goto corral_source_split_433;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p63, out_$i59);
    goto corral_source_split_432;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(out_$p61, $mul.ref(out_$i62, 2));
    goto corral_source_split_431;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i33);
    goto corral_source_split_430;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_429;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_428;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    out_$i59 := $trunc.i32.i16(out_$i58);
    goto corral_source_split_427;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    out_$i58 := $or.i32(out_$i53, out_$i57);
    goto corral_source_split_426;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i16.i32(out_$i56);
    goto corral_source_split_425;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i8.i16(out_$i55);
    goto corral_source_split_424;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i8($M.11, out_$p54);
    goto corral_source_split_423;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p32, $mul.ref(1, 1));
    goto corral_source_split_422;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    out_$i53 := $sext.i16.i32(out_$i52);
    goto corral_source_split_421;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    out_$i52 := $trunc.i32.i16(out_$i51);
    goto corral_source_split_420;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    out_$i51 := $shl.i32(out_$i50, 8);
    goto corral_source_split_419;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i8.i32(out_$i49);
    goto corral_source_split_418;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i8($M.11, out_$p48);
    goto corral_source_split_417;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(out_$p32, $mul.ref(1, 1));
    goto corral_source_split_416;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p47, out_$i43);
    goto corral_source_split_415;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref(out_$p45, $mul.ref(out_$i46, 2));
    goto corral_source_split_414;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    out_$i46 := $sext.i32.i64(out_$i33);
    goto corral_source_split_413;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_412;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_411;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    out_$i43 := $trunc.i32.i16(out_$i42);
    goto corral_source_split_410;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    out_$i42 := $or.i32(out_$i38, out_$i41);
    goto corral_source_split_409;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i16.i32(out_$i40);
    goto corral_source_split_408;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i16(out_$i39);
    goto corral_source_split_407;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.11, out_$p32);
    goto corral_source_split_406;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i16.i32(out_$i37);
    goto corral_source_split_405;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i32.i16(out_$i36);
    goto corral_source_split_404;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    out_$i36 := $shl.i32(out_$i35, 8);
    goto corral_source_split_403;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    goto corral_source_split_402;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.11, out_$p32);
    goto corral_source_split_401;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    call out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p32, out_$i33, out_$p83 := fb_set_logocmap_loop_$bb12(in_$p2, out_$i26, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p32, out_$i33, out_$p83);
    goto $bb12_last;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_399;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    out_$p32, out_$i33 := out_$p20, 0;
    goto $bb12;

  $bb14:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$p32, out_$i33 := out_$p80, out_$i81;
    assume false;
    return;

  $bb9:
    assume out_$i30 == 1;
    goto corral_source_split_397;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    out_$p31 := out_$p20;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    out_$i30 := $slt.i32(0, out_$i26);
    goto corral_source_split_395;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p29, out_$i26);
    goto corral_source_split_394;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_393;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p28, out_$i27);
    goto corral_source_split_392;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_391;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i21, 32);
    goto corral_source_split_390;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_389;

  $bb7:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i26 := out_$i24;
    goto $bb8;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    out_$i26 := 16;
    goto $bb8;

  $bb6:
    assume out_$i25 == 1;
    goto corral_source_split_387;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    out_$i25 := $sgt.i32(out_$i24, 16);
    goto corral_source_split_385;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i23, out_$i21);
    call {:si_unique_call 55} {:cexpr "n"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_384;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, out_$p22);
    goto corral_source_split_383;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_382;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p32, out_$i33, out_$p83, out_$p31, out_$i85, out_$i86, out_$i87, out_$p20, out_$i21, out_vslice_dummy_var_127 := fb_set_logocmap_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$p17, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p32, out_$i33, out_$p83, out_$p31, out_$i85, out_$i86, out_$i87, out_$p20, out_$i21, out_vslice_dummy_var_127);
    return;

  exit:
    return;
}



procedure fb_set_logocmap_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p17: ref, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i32, in_$p28: ref, in_$p29: ref, in_$i30: i1, in_$i34: i8, in_$i35: i32, in_$i36: i32, in_$i37: i16, in_$i38: i32, in_$i39: i8, in_$i40: i16, in_$i41: i32, in_$i42: i32, in_$i43: i16, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i32, in_$i52: i16, in_$i53: i32, in_$p54: ref, in_$i55: i8, in_$i56: i16, in_$i57: i32, in_$i58: i32, in_$i59: i16, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$i65: i8, in_$i66: i32, in_$i67: i32, in_$i68: i16, in_$i69: i32, in_$p70: ref, in_$i71: i8, in_$i72: i16, in_$i73: i32, in_$i74: i32, in_$i75: i16, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$p32: ref, in_$i33: i32, in_$p83: ref, in_$p31: ref, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$p20: ref, in_$i21: i32, in_vslice_dummy_var_127: i32) returns (out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i32, out_$p28: ref, out_$p29: ref, out_$i30: i1, out_$i34: i8, out_$i35: i32, out_$i36: i32, out_$i37: i16, out_$i38: i32, out_$i39: i8, out_$i40: i16, out_$i41: i32, out_$i42: i32, out_$i43: i16, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i32, out_$i52: i16, out_$i53: i32, out_$p54: ref, out_$i55: i8, out_$i56: i16, out_$i57: i32, out_$i58: i32, out_$i59: i16, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$i65: i8, out_$i66: i32, out_$i67: i32, out_$i68: i16, out_$i69: i32, out_$p70: ref, out_$i71: i8, out_$i72: i16, out_$i73: i32, out_$i74: i32, out_$i75: i16, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$p32: ref, out_$i33: i32, out_$p83: ref, out_$p31: ref, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$p20: ref, out_$i21: i32, out_vslice_dummy_var_127: i32);
  modifies $M.0, $M.14, $M.15, $M.16, $M.17, $M.19, $M.21, $M.70, $M.10, $M.18, $M.72, $M.11, $CurrAddr, $M.46, $M.71, $M.12, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.13, assertsPassed, $M.62, $M.64, $M.66, $M.68;



implementation fb_set_logo_truepalette_loop_$bb13(in_$p2: ref, in_$i27: i8, in_$i40: i8, in_$i53: i8, in_$i63: i32, in_$i73: i32, in_$i83: i32, in_$p84: ref, in_$i89: i8, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$i93: i32, in_$p94: ref, in_$i95: i8, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$p100: ref, in_$i101: i8, in_$i102: i32, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i64, in_$i109: i64, in_$p110: ref, in_$p111: ref, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$p87: ref, in_$i88: i32) returns (out_$i89: i8, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$i93: i32, out_$p94: ref, out_$i95: i8, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$p100: ref, out_$i101: i8, out_$i102: i32, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i64, out_$i109: i64, out_$p110: ref, out_$p111: ref, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$p87: ref, out_$i88: i32)
{

  entry:
    out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p87, out_$i88 := in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$p94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$p100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$p110, in_$p111, in_$i112, in_$i113, in_$i114, in_$p87, in_$i88;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_553;

  $bb15:
    assume out_$i114 == 1;
    assume {:verifier.code 0} true;
    out_$p87, out_$i88 := out_$p111, out_$i112;
    goto $bb15_dummy;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    out_$i114 := $ult.i32(out_$i112, out_$i113);
    goto corral_source_split_581;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i32($M.0, in_$p84);
    goto corral_source_split_580;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    out_$i112 := $add.i32(out_$i88, 1);
    call {:si_unique_call 75} {:cexpr "i"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_579;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref(out_$p87, $mul.ref(3, 1));
    goto corral_source_split_578;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p110, out_$i107);
    goto corral_source_split_577;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref(in_$p2, $mul.ref(out_$i109, 4));
    goto corral_source_split_576;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    out_$i109 := $add.i64(out_$i108, 32);
    goto corral_source_split_575;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    out_$i108 := $sext.i32.i64(out_$i88);
    goto corral_source_split_574;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    out_$i107 := $or.i32(out_$i106, out_$i105);
    goto corral_source_split_573;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    out_$i106 := $or.i32(out_$i93, out_$i99);
    goto corral_source_split_572;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} out_$i105 := safe_shift(out_$i104, in_$i83);
    call {:si_unique_call 74} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_571;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    out_$i104 := $and.i32(out_$i102, out_$i103);
    goto corral_source_split_570;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i8.i32(in_$i53);
    goto corral_source_split_569;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.i8.i32(out_$i101);
    goto corral_source_split_568;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i8($M.11, out_$p100);
    goto corral_source_split_567;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref(out_$p87, $mul.ref(2, 1));
    goto corral_source_split_566;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} out_$i99 := safe_shift(out_$i98, in_$i73);
    call {:si_unique_call 72} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_565;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    out_$i98 := $and.i32(out_$i96, out_$i97);
    goto corral_source_split_564;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    out_$i97 := $zext.i8.i32(in_$i40);
    goto corral_source_split_563;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i8.i32(out_$i95);
    goto corral_source_split_562;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i8($M.11, out_$p94);
    goto corral_source_split_561;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref(out_$p87, $mul.ref(1, 1));
    goto corral_source_split_560;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} out_$i93 := safe_shift(out_$i92, in_$i63);
    call {:si_unique_call 70} {:cexpr "tmp"} boogie_si_record_i32(out_$i93);
    goto corral_source_split_559;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    out_$i92 := $and.i32(out_$i90, out_$i91);
    goto corral_source_split_558;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    out_$i91 := $zext.i8.i32(in_$i27);
    goto corral_source_split_557;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    out_$i90 := $zext.i8.i32(out_$i89);
    goto corral_source_split_556;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i8($M.11, out_$p87);
    goto corral_source_split_555;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p87, out_$i88 := fb_set_logo_truepalette_loop_$bb13(in_$p2, in_$i27, in_$i40, in_$i53, in_$i63, in_$i73, in_$i83, in_$p84, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p87, out_$i88);
    return;

  exit:
    return;
}



procedure fb_set_logo_truepalette_loop_$bb13(in_$p2: ref, in_$i27: i8, in_$i40: i8, in_$i53: i8, in_$i63: i32, in_$i73: i32, in_$i83: i32, in_$p84: ref, in_$i89: i8, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$i93: i32, in_$p94: ref, in_$i95: i8, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$p100: ref, in_$i101: i8, in_$i102: i32, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i64, in_$i109: i64, in_$p110: ref, in_$p111: ref, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$p87: ref, in_$i88: i32) returns (out_$i89: i8, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$i93: i32, out_$p94: ref, out_$i95: i8, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$p100: ref, out_$i101: i8, out_$i102: i32, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i64, out_$i109: i64, out_$p110: ref, out_$p111: ref, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$p87: ref, out_$i88: i32);
  modifies $M.0;



implementation fb_set_logo_directpalette_loop_$bb4(in_$p2: ref, in_$i6: i32, in_$i10: i32, in_$i14: i32, in_$p15: ref, in_$i20: i32, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i19: i32) returns (out_$i20: i32, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i19: i32)
{

  entry:
    out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i19 := in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i19;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_599;

  $bb6:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := out_$i27;
    goto $bb6_dummy;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    out_$i30 := $ult.i32(out_$i27, out_$i29);
    goto corral_source_split_612;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i28, 32);
    goto corral_source_split_611;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, in_$p15);
    goto corral_source_split_610;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i19, 1);
    call {:si_unique_call 79} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_609;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p26, out_$i24);
    goto corral_source_split_608;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(in_$p2, $mul.ref(out_$i25, 4));
    goto corral_source_split_607;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i19);
    goto corral_source_split_606;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    out_$i24 := $or.i32(out_$i22, out_$i23);
    goto corral_source_split_605;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    out_$i23 := $shl.i32(out_$i19, in_$i14);
    goto corral_source_split_604;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    out_$i22 := $or.i32(out_$i20, out_$i21);
    goto corral_source_split_603;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    out_$i21 := $shl.i32(out_$i19, in_$i10);
    goto corral_source_split_602;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i20 := $shl.i32(out_$i19, in_$i6);
    goto corral_source_split_601;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i19 := fb_set_logo_directpalette_loop_$bb4(in_$p2, in_$i6, in_$i10, in_$i14, in_$p15, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i19);
    return;

  exit:
    return;
}



procedure fb_set_logo_directpalette_loop_$bb4(in_$p2: ref, in_$i6: i32, in_$i10: i32, in_$i14: i32, in_$p15: ref, in_$i20: i32, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i19: i32) returns (out_$i20: i32, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i19: i32);
  modifies $M.0;



implementation fb_set_logo_loop_$bb33(in_$p1: ref, in_$p46: ref, in_$p54: ref, in_$i55: i8, in_$i56: i32, in_$i57: i32, in_$i58: i8, in_$i59: i32, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$i63: i64, in_$p64: ref, in_$i65: i8, in_$i66: i32, in_$i67: i32, in_$i68: i8, in_$i69: i32, in_$i70: i32, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$p75: ref, in_$p76: ref) returns (out_$p54: ref, out_$i55: i8, out_$i56: i32, out_$i57: i32, out_$i58: i8, out_$i59: i32, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$i63: i64, out_$p64: ref, out_$i65: i8, out_$i66: i32, out_$i67: i32, out_$i68: i8, out_$i69: i32, out_$i70: i32, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$p75: ref, out_$p76: ref)
{

  entry:
    out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p51, out_$p52, out_$i53, out_$p75, out_$p76 := in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$p71, in_$p72, in_$i73, in_$i74, in_$p51, in_$p52, in_$i53, in_$p75, in_$p76;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_672;

  $bb38:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$p51, out_$p52, out_$i53 := out_$p72, out_$p71, out_$i70;
    goto $bb38_dummy;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    out_$p75, out_$p76 := out_$p71, out_$p72;
    assume true;
    goto $bb38;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    out_$i74 := $ult.i32(out_$i70, out_$i73);
    goto corral_source_split_697;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.0, in_$p46);
    goto corral_source_split_696;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(out_$p51, $mul.ref(1, 1));
    goto corral_source_split_695;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_694;

  $bb36:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    out_$i70, out_$p71 := out_$i59, out_$p54;
    goto $bb37;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    out_$i70, out_$p71 := out_$i69, out_$p64;
    goto $bb37;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i32(out_$i59, 1);
    call {:si_unique_call 87} {:cexpr "j"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_692;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p54, out_$i68);
    goto corral_source_split_691;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    out_$i68 := $trunc.i32.i8(out_$i67);
    goto corral_source_split_690;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    out_$i67 := $and.i32(out_$i66, 15);
    goto corral_source_split_689;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    out_$i66 := $zext.i8.i32(out_$i65);
    goto corral_source_split_688;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i8($M.0, out_$p51);
    goto corral_source_split_687;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(out_$p52, $mul.ref(out_$i63, 1));
    goto corral_source_split_686;

  $bb35:
    assume out_$i62 == 1;
    out_$i63 := $add.i64(1, 1);
    goto corral_source_split_685;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    out_$i62 := $ult.i32(out_$i59, out_$i61);
    goto corral_source_split_683;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p60);
    goto corral_source_split_682;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_681;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i53, 1);
    call {:si_unique_call 86} {:cexpr "j"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_680;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p52, out_$i58);
    goto corral_source_split_679;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    out_$i58 := $trunc.i32.i8(out_$i57);
    goto corral_source_split_678;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    out_$i57 := $ashr.i32(out_$i56, 4);
    goto corral_source_split_677;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i8.i32(out_$i55);
    goto corral_source_split_676;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i8($M.0, out_$p51);
    goto corral_source_split_675;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p52, $mul.ref(1, 1));
    goto corral_source_split_674;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p51, out_$p52, out_$i53, out_$p75, out_$p76 := fb_set_logo_loop_$bb33(in_$p1, in_$p46, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p51, out_$p52, out_$i53, out_$p75, out_$p76);
    return;

  exit:
    return;
}



procedure fb_set_logo_loop_$bb33(in_$p1: ref, in_$p46: ref, in_$p54: ref, in_$i55: i8, in_$i56: i32, in_$i57: i32, in_$i58: i8, in_$i59: i32, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$i63: i64, in_$p64: ref, in_$i65: i8, in_$i66: i32, in_$i67: i32, in_$i68: i8, in_$i69: i32, in_$i70: i32, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$p75: ref, in_$p76: ref) returns (out_$p54: ref, out_$i55: i8, out_$i56: i32, out_$i57: i32, out_$i58: i8, out_$i59: i32, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$i63: i64, out_$p64: ref, out_$i65: i8, out_$i66: i32, out_$i67: i32, out_$i68: i8, out_$i69: i32, out_$i70: i32, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$p75: ref, out_$p76: ref);
  modifies $M.0;



implementation fb_set_logo_loop_$bb28(in_$p1: ref, in_$p40: ref, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p54: ref, in_$i55: i8, in_$i56: i32, in_$i57: i32, in_$i58: i8, in_$i59: i32, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$i63: i64, in_$p64: ref, in_$i65: i8, in_$i66: i32, in_$i67: i32, in_$i68: i8, in_$i69: i32, in_$i70: i32, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$p75: ref, in_$p76: ref, in_$p49: ref, in_$p50: ref, in_$i77: i32, in_$i78: i32, in_$i79: i1, in_$p43: ref, in_$p44: ref, in_$i45: i32) returns (out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p54: ref, out_$i55: i8, out_$i56: i32, out_$i57: i32, out_$i58: i8, out_$i59: i32, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$i63: i64, out_$p64: ref, out_$i65: i8, out_$i66: i32, out_$i67: i32, out_$i68: i8, out_$i69: i32, out_$i70: i32, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$p75: ref, out_$p76: ref, out_$p49: ref, out_$p50: ref, out_$i77: i32, out_$i78: i32, out_$i79: i1, out_$p43: ref, out_$p44: ref, out_$i45: i32)
{

  entry:
    out_$p46, out_$i47, out_$i48, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p51, out_$p52, out_$i53, out_$p75, out_$p76, out_$p49, out_$p50, out_$i77, out_$i78, out_$i79, out_$p43, out_$p44, out_$i45 := in_$p46, in_$i47, in_$i48, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$p71, in_$p72, in_$i73, in_$i74, in_$p51, in_$p52, in_$i53, in_$p75, in_$p76, in_$p49, in_$p50, in_$i77, in_$i78, in_$i79, in_$p43, in_$p44, in_$i45;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_664;

  $bb41:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$p43, out_$p44, out_$i45 := out_$p50, out_$p49, out_$i77;
    goto $bb41_dummy;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    out_$i79 := $ult.i32(out_$i77, out_$i78);
    goto corral_source_split_703;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.0, in_$p40);
    goto corral_source_split_702;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i77 := $add.i32(out_$i45, 1);
    call {:si_unique_call 88} {:cexpr "i"} boogie_si_record_i32(out_$i77);
    goto corral_source_split_701;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i48 == 1);
    goto $bb32;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    out_$p49, out_$p50 := out_$p75, out_$p76;
    goto $bb32;

  $bb39:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_699;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    out_$p75, out_$p76 := out_$p71, out_$p72;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    out_$i74 := $ult.i32(out_$i70, out_$i73);
    goto corral_source_split_697;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.0, out_$p46);
    goto corral_source_split_696;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(out_$p51, $mul.ref(1, 1));
    goto corral_source_split_695;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_694;

  $bb36:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    out_$i70, out_$p71 := out_$i59, out_$p54;
    goto $bb37;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    out_$i70, out_$p71 := out_$i69, out_$p64;
    goto $bb37;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i32(out_$i59, 1);
    call {:si_unique_call 87} {:cexpr "j"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_692;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p54, out_$i68);
    goto corral_source_split_691;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    out_$i68 := $trunc.i32.i8(out_$i67);
    goto corral_source_split_690;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    out_$i67 := $and.i32(out_$i66, 15);
    goto corral_source_split_689;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    out_$i66 := $zext.i8.i32(out_$i65);
    goto corral_source_split_688;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i8($M.0, out_$p51);
    goto corral_source_split_687;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(out_$p52, $mul.ref(out_$i63, 1));
    goto corral_source_split_686;

  $bb35:
    assume out_$i62 == 1;
    out_$i63 := $add.i64(1, 1);
    goto corral_source_split_685;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    out_$i62 := $ult.i32(out_$i59, out_$i61);
    goto corral_source_split_683;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p60);
    goto corral_source_split_682;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_681;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i53, 1);
    call {:si_unique_call 86} {:cexpr "j"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_680;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p52, out_$i58);
    goto corral_source_split_679;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    out_$i58 := $trunc.i32.i8(out_$i57);
    goto corral_source_split_678;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    out_$i57 := $ashr.i32(out_$i56, 4);
    goto corral_source_split_677;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i8.i32(out_$i55);
    goto corral_source_split_676;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i8($M.0, out_$p51);
    goto corral_source_split_675;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p52, $mul.ref(1, 1));
    goto corral_source_split_674;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    call out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p51, out_$p52, out_$i53, out_$p75, out_$p76 := fb_set_logo_loop_$bb33(in_$p1, out_$p46, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p51, out_$p52, out_$i53, out_$p75, out_$p76);
    goto $bb33_last;

  $bb33_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_672;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    out_$p51, out_$p52, out_$i53 := out_$p43, out_$p44, 0;
    goto $bb33;

  $bb38:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$p51, out_$p52, out_$i53 := out_$p72, out_$p71, out_$i70;
    assume false;
    return;

  $bb30:
    assume out_$i48 == 1;
    goto corral_source_split_670;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    out_$p49, out_$p50 := out_$p44, out_$p43;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    out_$i48 := $ult.i32(0, out_$i47);
    goto corral_source_split_668;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, out_$p46);
    goto corral_source_split_667;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_666;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb41_dummy:
    call {:si_unique_call 1} out_$p46, out_$i47, out_$i48, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p51, out_$p52, out_$i53, out_$p75, out_$p76, out_$p49, out_$p50, out_$i77, out_$i78, out_$i79, out_$p43, out_$p44, out_$i45 := fb_set_logo_loop_$bb28(in_$p1, in_$p40, out_$p46, out_$i47, out_$i48, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p51, out_$p52, out_$i53, out_$p75, out_$p76, out_$p49, out_$p50, out_$i77, out_$i78, out_$i79, out_$p43, out_$p44, out_$i45);
    return;

  exit:
    return;
}



procedure fb_set_logo_loop_$bb28(in_$p1: ref, in_$p40: ref, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p54: ref, in_$i55: i8, in_$i56: i32, in_$i57: i32, in_$i58: i8, in_$i59: i32, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$i63: i64, in_$p64: ref, in_$i65: i8, in_$i66: i32, in_$i67: i32, in_$i68: i8, in_$i69: i32, in_$i70: i32, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$p75: ref, in_$p76: ref, in_$p49: ref, in_$p50: ref, in_$i77: i32, in_$i78: i32, in_$i79: i1, in_$p43: ref, in_$p44: ref, in_$i45: i32) returns (out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p54: ref, out_$i55: i8, out_$i56: i32, out_$i57: i32, out_$i58: i8, out_$i59: i32, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$i63: i64, out_$p64: ref, out_$i65: i8, out_$i66: i32, out_$i67: i32, out_$i68: i8, out_$i69: i32, out_$i70: i32, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$p75: ref, out_$p76: ref, out_$p49: ref, out_$p50: ref, out_$i77: i32, out_$i78: i32, out_$i79: i1, out_$p43: ref, out_$p44: ref, out_$i45: i32);
  modifies $M.0;



implementation fb_set_logo_loop_$bb53(in_$i11: i8, in_$i36: i8, in_$p86: ref, in_$i94: i8, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i8, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$i105: i32, in_$i106: i8, in_$i107: i32, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$p91: ref, in_$p92: ref, in_$i93: i32, in_$p112: ref, in_$p114: ref, in_$i118: i64, in_$p119: ref, in_$i120: i32, in_$i121: i32, in_$i122: i32, in_$i123: i1, in_$i125: i32, in_$i124: i32, in_$i126: i8, in_$i127: i32, in_$i128: i64, in_$p129: ref, in_$i130: i32, in_$i131: i32, in_$i132: i32, in_$i133: i1, in_$i135: i32, in_$i134: i32, in_$i136: i8, in_$i137: i32, in_$i138: i64, in_$p139: ref, in_$i140: i32, in_$i141: i32, in_$i142: i32, in_$i143: i1, in_$i145: i32, in_$i144: i32, in_$i146: i8, in_$i147: i32, in_$i148: i64, in_$p149: ref, in_$i150: i32, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$i155: i32, in_$i154: i32, in_$i156: i8, in_$i157: i32, in_$i158: i64, in_$p159: ref, in_$i160: i32, in_$i161: i32, in_$i162: i32, in_$i163: i1, in_$i165: i32, in_$i164: i32, in_$i166: i8, in_$i167: i32, in_$i168: i64, in_$p169: ref, in_$i170: i32, in_$i171: i32, in_$i172: i32, in_$i173: i1, in_$i175: i32, in_$i174: i32, in_$i176: i8, in_$i177: i32, in_$i178: i64, in_$p113: ref, in_$i179: i32, in_$i180: i32, in_$i181: i1, in_$i183: i32, in_$i182: i32, in_$i184: i8, in_$i111: i32) returns (out_$i94: i8, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i8, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$i105: i32, out_$i106: i8, out_$i107: i32, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$p91: ref, out_$p92: ref, out_$i93: i32, out_$p112: ref, out_$p114: ref, out_$i118: i64, out_$p119: ref, out_$i120: i32, out_$i121: i32, out_$i122: i32, out_$i123: i1, out_$i125: i32, out_$i124: i32, out_$i126: i8, out_$i127: i32, out_$i128: i64, out_$p129: ref, out_$i130: i32, out_$i131: i32, out_$i132: i32, out_$i133: i1, out_$i135: i32, out_$i134: i32, out_$i136: i8, out_$i137: i32, out_$i138: i64, out_$p139: ref, out_$i140: i32, out_$i141: i32, out_$i142: i32, out_$i143: i1, out_$i145: i32, out_$i144: i32, out_$i146: i8, out_$i147: i32, out_$i148: i64, out_$p149: ref, out_$i150: i32, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$i155: i32, out_$i154: i32, out_$i156: i8, out_$i157: i32, out_$i158: i64, out_$p159: ref, out_$i160: i32, out_$i161: i32, out_$i162: i32, out_$i163: i1, out_$i165: i32, out_$i164: i32, out_$i166: i8, out_$i167: i32, out_$i168: i64, out_$p169: ref, out_$i170: i32, out_$i171: i32, out_$i172: i32, out_$i173: i1, out_$i175: i32, out_$i174: i32, out_$i176: i8, out_$i177: i32, out_$i178: i64, out_$p113: ref, out_$i179: i32, out_$i180: i32, out_$i181: i1, out_$i183: i32, out_$i182: i32, out_$i184: i8, out_$i111: i32)
{

  entry:
    out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p91, out_$p92, out_$i93, out_$p112, out_$p114, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i125, out_$i124, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i135, out_$i134, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i145, out_$i144, out_$i146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i155, out_$i154, out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i165, out_$i164, out_$i166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i175, out_$i174, out_$i176, out_$i177, out_$i178, out_$p113, out_$i179, out_$i180, out_$i181, out_$i183, out_$i182, out_$i184, out_$i111 := in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$p108, in_$i109, in_$i110, in_$p91, in_$p92, in_$i93, in_$p112, in_$p114, in_$i118, in_$p119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i125, in_$i124, in_$i126, in_$i127, in_$i128, in_$p129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i135, in_$i134, in_$i136, in_$i137, in_$i138, in_$p139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i145, in_$i144, in_$i146, in_$i147, in_$i148, in_$p149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i155, in_$i154, in_$i156, in_$i157, in_$i158, in_$p159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i165, in_$i164, in_$i166, in_$i167, in_$i168, in_$p169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i175, in_$i174, in_$i176, in_$i177, in_$i178, in_$p113, in_$i179, in_$i180, in_$i181, in_$i183, in_$i182, in_$i184, in_$i111;
    goto $bb53, exit;

  $bb53:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_717;

  $bb62:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$p91, out_$p92, out_$i93 := out_$p108, out_$p113, out_$i111;
    goto $bb62_dummy;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    out_$p112, out_$p114 := out_$p113, out_$p108;
    assume true;
    goto $bb62;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    out_$i110 := $ult.i32(out_$i111, out_$i109);
    goto corral_source_split_750;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i32($M.0, in_$p86);
    goto corral_source_split_749;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref(out_$p91, $mul.ref(1, 1));
    goto corral_source_split_748;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    out_$i111 := $add.i32(out_$i177, 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p169, out_$i184);
    goto corral_source_split_868;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    out_$i184 := $trunc.i32.i8(out_$i182);
    goto corral_source_split_867;

  $bb95:
    assume {:verifier.code 0} true;
    goto corral_source_split_866;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    out_$i182 := 0;
    goto $bb95;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    out_$i182 := out_$i183;
    goto $bb95;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    out_$i183 := $zext.i8.i32(in_$i36);
    goto corral_source_split_862;

  $bb93:
    assume out_$i181 == 1;
    goto corral_source_split_861;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    out_$i181 := $ne.i32(out_$i180, 0);
    goto corral_source_split_859;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    out_$i180 := $and.i32(out_$i179, 1);
    goto corral_source_split_858;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    out_$i179 := $zext.i8.i32(out_$i98);
    goto corral_source_split_857;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref(out_$p92, $mul.ref(out_$i178, 1));
    goto corral_source_split_856;

  $bb92:
    out_$i178 := $add.i64(out_$i168, 1);
    goto corral_source_split_855;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    out_$i177 := $add.i32(out_$i167, 1);
    goto corral_source_split_853;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p159, out_$i176);
    goto corral_source_split_852;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    out_$i176 := $trunc.i32.i8(out_$i174);
    goto corral_source_split_851;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_850;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    out_$i174 := 0;
    goto $bb91;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    out_$i174 := out_$i175;
    goto $bb91;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    out_$i175 := $zext.i8.i32(in_$i36);
    goto corral_source_split_846;

  $bb89:
    assume out_$i173 == 1;
    goto corral_source_split_845;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    out_$i173 := $ne.i32(out_$i172, 0);
    goto corral_source_split_843;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    out_$i172 := $and.i32(out_$i171, 1);
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    out_$i171 := $ashr.i32(out_$i170, 1);
    goto corral_source_split_841;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_$i170 := $zext.i8.i32(out_$i98);
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref(out_$p92, $mul.ref(out_$i168, 1));
    goto corral_source_split_839;

  $bb88:
    out_$i168 := $add.i64(out_$i158, 1);
    goto corral_source_split_838;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    out_$i167 := $add.i32(out_$i157, 1);
    goto corral_source_split_836;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p149, out_$i166);
    goto corral_source_split_835;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    out_$i166 := $trunc.i32.i8(out_$i164);
    goto corral_source_split_834;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_833;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    out_$i164 := 0;
    goto $bb87;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    out_$i164 := out_$i165;
    goto $bb87;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    out_$i165 := $zext.i8.i32(in_$i36);
    goto corral_source_split_829;

  $bb85:
    assume out_$i163 == 1;
    goto corral_source_split_828;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    out_$i163 := $ne.i32(out_$i162, 0);
    goto corral_source_split_826;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    out_$i162 := $and.i32(out_$i161, 1);
    goto corral_source_split_825;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    out_$i161 := $ashr.i32(out_$i160, 2);
    goto corral_source_split_824;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    out_$i160 := $zext.i8.i32(out_$i98);
    goto corral_source_split_823;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref(out_$p92, $mul.ref(out_$i158, 1));
    goto corral_source_split_822;

  $bb84:
    out_$i158 := $add.i64(out_$i148, 1);
    goto corral_source_split_821;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    out_$i157 := $add.i32(out_$i147, 1);
    goto corral_source_split_819;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p139, out_$i156);
    goto corral_source_split_818;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    out_$i156 := $trunc.i32.i8(out_$i154);
    goto corral_source_split_817;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_816;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    out_$i154 := 0;
    goto $bb83;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    out_$i154 := out_$i155;
    goto $bb83;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    out_$i155 := $zext.i8.i32(in_$i36);
    goto corral_source_split_812;

  $bb81:
    assume out_$i153 == 1;
    goto corral_source_split_811;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    out_$i153 := $ne.i32(out_$i152, 0);
    goto corral_source_split_809;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    out_$i152 := $and.i32(out_$i151, 1);
    goto corral_source_split_808;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    out_$i151 := $ashr.i32(out_$i150, 3);
    goto corral_source_split_807;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    out_$i150 := $zext.i8.i32(out_$i98);
    goto corral_source_split_806;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref(out_$p92, $mul.ref(out_$i148, 1));
    goto corral_source_split_805;

  $bb80:
    out_$i148 := $add.i64(out_$i138, 1);
    goto corral_source_split_804;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    out_$i147 := $add.i32(out_$i137, 1);
    goto corral_source_split_802;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p129, out_$i146);
    goto corral_source_split_801;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    out_$i146 := $trunc.i32.i8(out_$i144);
    goto corral_source_split_800;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_799;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    out_$i144 := 0;
    goto $bb79;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    out_$i144 := out_$i145;
    goto $bb79;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    out_$i145 := $zext.i8.i32(in_$i36);
    goto corral_source_split_795;

  $bb77:
    assume out_$i143 == 1;
    goto corral_source_split_794;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    out_$i143 := $ne.i32(out_$i142, 0);
    goto corral_source_split_792;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    out_$i142 := $and.i32(out_$i141, 1);
    goto corral_source_split_791;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    out_$i141 := $ashr.i32(out_$i140, 4);
    goto corral_source_split_790;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    out_$i140 := $zext.i8.i32(out_$i98);
    goto corral_source_split_789;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref(out_$p92, $mul.ref(out_$i138, 1));
    goto corral_source_split_788;

  $bb76:
    out_$i138 := $add.i64(out_$i128, 1);
    goto corral_source_split_787;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    out_$i137 := $add.i32(out_$i127, 1);
    goto corral_source_split_785;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p119, out_$i136);
    goto corral_source_split_784;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    out_$i136 := $trunc.i32.i8(out_$i134);
    goto corral_source_split_783;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_782;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    out_$i134 := 0;
    goto $bb75;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    out_$i134 := out_$i135;
    goto $bb75;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    out_$i135 := $zext.i8.i32(in_$i36);
    goto corral_source_split_778;

  $bb73:
    assume out_$i133 == 1;
    goto corral_source_split_777;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    out_$i133 := $ne.i32(out_$i132, 0);
    goto corral_source_split_775;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    out_$i132 := $and.i32(out_$i131, 1);
    goto corral_source_split_774;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    out_$i131 := $ashr.i32(out_$i130, 5);
    goto corral_source_split_773;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    out_$i130 := $zext.i8.i32(out_$i98);
    goto corral_source_split_772;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref(out_$p92, $mul.ref(out_$i128, 1));
    goto corral_source_split_771;

  $bb72:
    out_$i128 := $add.i64(out_$i118, 1);
    goto corral_source_split_770;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    out_$i127 := $add.i32(out_$i107, 1);
    goto corral_source_split_768;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p99, out_$i126);
    goto corral_source_split_767;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    out_$i126 := $trunc.i32.i8(out_$i124);
    goto corral_source_split_766;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_765;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    out_$i124 := 0;
    goto $bb71;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    out_$i124 := out_$i125;
    goto $bb71;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    out_$i125 := $zext.i8.i32(in_$i36);
    goto corral_source_split_761;

  $bb69:
    assume out_$i123 == 1;
    goto corral_source_split_760;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    out_$i123 := $ne.i32(out_$i122, 0);
    goto corral_source_split_746;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    out_$i122 := $and.i32(out_$i121, 1);
    goto corral_source_split_745;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    out_$i121 := $ashr.i32(out_$i120, 6);
    goto corral_source_split_744;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    out_$i120 := $zext.i8.i32(out_$i98);
    goto corral_source_split_743;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref(out_$p92, $mul.ref(out_$i118, 1));
    goto corral_source_split_742;

  $bb60:
    out_$i118 := $add.i64(1, 1);
    goto corral_source_split_741;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    out_$i107 := $add.i32(out_$i93, 1);
    call {:si_unique_call 90} {:cexpr "j"} boogie_si_record_i32(out_$i107);
    goto corral_source_split_739;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p92, out_$i106);
    goto corral_source_split_738;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    out_$i106 := $trunc.i32.i8(out_$i105);
    goto corral_source_split_737;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_736;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    out_$i105 := 0;
    goto $bb59;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    out_$i105 := out_$i104;
    goto $bb59;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i8.i32(in_$i36);
    goto corral_source_split_732;

  $bb57:
    assume out_$i103 == 1;
    goto corral_source_split_731;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i32(out_$i102, 0);
    goto corral_source_split_729;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    out_$i102 := $and.i32(out_$i101, 1);
    goto corral_source_split_728;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    out_$i101 := $ashr.i32(out_$i100, 7);
    goto corral_source_split_727;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    out_$i100 := $zext.i8.i32(out_$i98);
    goto corral_source_split_726;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref(out_$p92, $mul.ref(1, 1));
    goto corral_source_split_725;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    out_$i98 := $trunc.i32.i8(out_$i97);
    call {:si_unique_call 89} {:cexpr "d"} boogie_si_record_i8(out_$i98);
    goto corral_source_split_723;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    out_$i97 := $xor.i32(out_$i95, out_$i96);
    goto corral_source_split_722;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i8.i32(in_$i11);
    goto corral_source_split_721;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i8.i32(out_$i94);
    goto corral_source_split_720;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i8($M.0, out_$p91);
    goto corral_source_split_719;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb58:
    assume !(out_$i103 == 1);
    goto corral_source_split_734;

  $bb70:
    assume !(out_$i123 == 1);
    goto corral_source_split_763;

  $bb74:
    assume !(out_$i133 == 1);
    goto corral_source_split_780;

  $bb78:
    assume !(out_$i143 == 1);
    goto corral_source_split_797;

  $bb82:
    assume !(out_$i153 == 1);
    goto corral_source_split_814;

  $bb86:
    assume !(out_$i163 == 1);
    goto corral_source_split_831;

  $bb90:
    assume !(out_$i173 == 1);
    goto corral_source_split_848;

  $bb94:
    assume !(out_$i181 == 1);
    goto corral_source_split_864;

  $bb62_dummy:
    call {:si_unique_call 1} out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p91, out_$p92, out_$i93, out_$p112, out_$p114, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i125, out_$i124, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i135, out_$i134, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i145, out_$i144, out_$i146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i155, out_$i154, out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i165, out_$i164, out_$i166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i175, out_$i174, out_$i176, out_$i177, out_$i178, out_$p113, out_$i179, out_$i180, out_$i181, out_$i183, out_$i182, out_$i184, out_$i111 := fb_set_logo_loop_$bb53(in_$i11, in_$i36, in_$p86, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p91, out_$p92, out_$i93, out_$p112, out_$p114, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i125, out_$i124, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i135, out_$i134, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i145, out_$i144, out_$i146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i155, out_$i154, out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i165, out_$i164, out_$i166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i175, out_$i174, out_$i176, out_$i177, out_$i178, out_$p113, out_$i179, out_$i180, out_$i181, out_$i183, out_$i182, out_$i184, out_$i111);
    return;

  exit:
    return;
}



procedure fb_set_logo_loop_$bb53(in_$i11: i8, in_$i36: i8, in_$p86: ref, in_$i94: i8, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i8, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$i105: i32, in_$i106: i8, in_$i107: i32, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$p91: ref, in_$p92: ref, in_$i93: i32, in_$p112: ref, in_$p114: ref, in_$i118: i64, in_$p119: ref, in_$i120: i32, in_$i121: i32, in_$i122: i32, in_$i123: i1, in_$i125: i32, in_$i124: i32, in_$i126: i8, in_$i127: i32, in_$i128: i64, in_$p129: ref, in_$i130: i32, in_$i131: i32, in_$i132: i32, in_$i133: i1, in_$i135: i32, in_$i134: i32, in_$i136: i8, in_$i137: i32, in_$i138: i64, in_$p139: ref, in_$i140: i32, in_$i141: i32, in_$i142: i32, in_$i143: i1, in_$i145: i32, in_$i144: i32, in_$i146: i8, in_$i147: i32, in_$i148: i64, in_$p149: ref, in_$i150: i32, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$i155: i32, in_$i154: i32, in_$i156: i8, in_$i157: i32, in_$i158: i64, in_$p159: ref, in_$i160: i32, in_$i161: i32, in_$i162: i32, in_$i163: i1, in_$i165: i32, in_$i164: i32, in_$i166: i8, in_$i167: i32, in_$i168: i64, in_$p169: ref, in_$i170: i32, in_$i171: i32, in_$i172: i32, in_$i173: i1, in_$i175: i32, in_$i174: i32, in_$i176: i8, in_$i177: i32, in_$i178: i64, in_$p113: ref, in_$i179: i32, in_$i180: i32, in_$i181: i1, in_$i183: i32, in_$i182: i32, in_$i184: i8, in_$i111: i32) returns (out_$i94: i8, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i8, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$i105: i32, out_$i106: i8, out_$i107: i32, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$p91: ref, out_$p92: ref, out_$i93: i32, out_$p112: ref, out_$p114: ref, out_$i118: i64, out_$p119: ref, out_$i120: i32, out_$i121: i32, out_$i122: i32, out_$i123: i1, out_$i125: i32, out_$i124: i32, out_$i126: i8, out_$i127: i32, out_$i128: i64, out_$p129: ref, out_$i130: i32, out_$i131: i32, out_$i132: i32, out_$i133: i1, out_$i135: i32, out_$i134: i32, out_$i136: i8, out_$i137: i32, out_$i138: i64, out_$p139: ref, out_$i140: i32, out_$i141: i32, out_$i142: i32, out_$i143: i1, out_$i145: i32, out_$i144: i32, out_$i146: i8, out_$i147: i32, out_$i148: i64, out_$p149: ref, out_$i150: i32, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$i155: i32, out_$i154: i32, out_$i156: i8, out_$i157: i32, out_$i158: i64, out_$p159: ref, out_$i160: i32, out_$i161: i32, out_$i162: i32, out_$i163: i1, out_$i165: i32, out_$i164: i32, out_$i166: i8, out_$i167: i32, out_$i168: i64, out_$p169: ref, out_$i170: i32, out_$i171: i32, out_$i172: i32, out_$i173: i1, out_$i175: i32, out_$i174: i32, out_$i176: i8, out_$i177: i32, out_$i178: i64, out_$p113: ref, out_$i179: i32, out_$i180: i32, out_$i181: i1, out_$i183: i32, out_$i182: i32, out_$i184: i8, out_$i111: i32);
  modifies $M.0;



implementation fb_set_logo_loop_$bb48(in_$p1: ref, in_$i11: i8, in_$i36: i8, in_$p80: ref, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$i94: i8, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i8, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$i105: i32, in_$i106: i8, in_$i107: i32, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$p91: ref, in_$p92: ref, in_$i93: i32, in_$p112: ref, in_$p114: ref, in_$p89: ref, in_$p90: ref, in_$i115: i32, in_$i116: i32, in_$i117: i1, in_$p83: ref, in_$p84: ref, in_$i85: i32, in_$i118: i64, in_$p119: ref, in_$i120: i32, in_$i121: i32, in_$i122: i32, in_$i123: i1, in_$i125: i32, in_$i124: i32, in_$i126: i8, in_$i127: i32, in_$i128: i64, in_$p129: ref, in_$i130: i32, in_$i131: i32, in_$i132: i32, in_$i133: i1, in_$i135: i32, in_$i134: i32, in_$i136: i8, in_$i137: i32, in_$i138: i64, in_$p139: ref, in_$i140: i32, in_$i141: i32, in_$i142: i32, in_$i143: i1, in_$i145: i32, in_$i144: i32, in_$i146: i8, in_$i147: i32, in_$i148: i64, in_$p149: ref, in_$i150: i32, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$i155: i32, in_$i154: i32, in_$i156: i8, in_$i157: i32, in_$i158: i64, in_$p159: ref, in_$i160: i32, in_$i161: i32, in_$i162: i32, in_$i163: i1, in_$i165: i32, in_$i164: i32, in_$i166: i8, in_$i167: i32, in_$i168: i64, in_$p169: ref, in_$i170: i32, in_$i171: i32, in_$i172: i32, in_$i173: i1, in_$i175: i32, in_$i174: i32, in_$i176: i8, in_$i177: i32, in_$i178: i64, in_$p113: ref, in_$i179: i32, in_$i180: i32, in_$i181: i1, in_$i183: i32, in_$i182: i32, in_$i184: i8, in_$i111: i32) returns (out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$i94: i8, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i8, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$i105: i32, out_$i106: i8, out_$i107: i32, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$p91: ref, out_$p92: ref, out_$i93: i32, out_$p112: ref, out_$p114: ref, out_$p89: ref, out_$p90: ref, out_$i115: i32, out_$i116: i32, out_$i117: i1, out_$p83: ref, out_$p84: ref, out_$i85: i32, out_$i118: i64, out_$p119: ref, out_$i120: i32, out_$i121: i32, out_$i122: i32, out_$i123: i1, out_$i125: i32, out_$i124: i32, out_$i126: i8, out_$i127: i32, out_$i128: i64, out_$p129: ref, out_$i130: i32, out_$i131: i32, out_$i132: i32, out_$i133: i1, out_$i135: i32, out_$i134: i32, out_$i136: i8, out_$i137: i32, out_$i138: i64, out_$p139: ref, out_$i140: i32, out_$i141: i32, out_$i142: i32, out_$i143: i1, out_$i145: i32, out_$i144: i32, out_$i146: i8, out_$i147: i32, out_$i148: i64, out_$p149: ref, out_$i150: i32, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$i155: i32, out_$i154: i32, out_$i156: i8, out_$i157: i32, out_$i158: i64, out_$p159: ref, out_$i160: i32, out_$i161: i32, out_$i162: i32, out_$i163: i1, out_$i165: i32, out_$i164: i32, out_$i166: i8, out_$i167: i32, out_$i168: i64, out_$p169: ref, out_$i170: i32, out_$i171: i32, out_$i172: i32, out_$i173: i1, out_$i175: i32, out_$i174: i32, out_$i176: i8, out_$i177: i32, out_$i178: i64, out_$p113: ref, out_$i179: i32, out_$i180: i32, out_$i181: i1, out_$i183: i32, out_$i182: i32, out_$i184: i8, out_$i111: i32)
{

  entry:
    out_$p86, out_$i87, out_$i88, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p91, out_$p92, out_$i93, out_$p112, out_$p114, out_$p89, out_$p90, out_$i115, out_$i116, out_$i117, out_$p83, out_$p84, out_$i85, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i125, out_$i124, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i135, out_$i134, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i145, out_$i144, out_$i146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i155, out_$i154, out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i165, out_$i164, out_$i166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i175, out_$i174, out_$i176, out_$i177, out_$i178, out_$p113, out_$i179, out_$i180, out_$i181, out_$i183, out_$i182, out_$i184, out_$i111 := in_$p86, in_$i87, in_$i88, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$p108, in_$i109, in_$i110, in_$p91, in_$p92, in_$i93, in_$p112, in_$p114, in_$p89, in_$p90, in_$i115, in_$i116, in_$i117, in_$p83, in_$p84, in_$i85, in_$i118, in_$p119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i125, in_$i124, in_$i126, in_$i127, in_$i128, in_$p129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i135, in_$i134, in_$i136, in_$i137, in_$i138, in_$p139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i145, in_$i144, in_$i146, in_$i147, in_$i148, in_$p149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i155, in_$i154, in_$i156, in_$i157, in_$i158, in_$p159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i165, in_$i164, in_$i166, in_$i167, in_$i168, in_$p169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i175, in_$i174, in_$i176, in_$i177, in_$i178, in_$p113, in_$i179, in_$i180, in_$i181, in_$i183, in_$i182, in_$i184, in_$i111;
    goto $bb48, exit;

  $bb48:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_709;

  $bb65:
    assume out_$i117 == 1;
    assume {:verifier.code 0} true;
    out_$p83, out_$p84, out_$i85 := out_$p90, out_$p89, out_$i115;
    goto $bb65_dummy;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    out_$i117 := $ult.i32(out_$i115, out_$i116);
    goto corral_source_split_756;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i32($M.0, in_$p80);
    goto corral_source_split_755;

  $bb64:
    assume {:verifier.code 0} true;
    out_$i115 := $add.i32(out_$i85, 1);
    call {:si_unique_call 91} {:cexpr "i"} boogie_si_record_i32(out_$i115);
    goto corral_source_split_754;

  $bb52:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i88 == 1);
    goto $bb52;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    out_$p89, out_$p90 := out_$p112, out_$p114;
    goto $bb52;

  $bb63:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_752;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    out_$p112, out_$p114 := out_$p113, out_$p108;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    out_$i110 := $ult.i32(out_$i111, out_$i109);
    goto corral_source_split_750;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i32($M.0, out_$p86);
    goto corral_source_split_749;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref(out_$p91, $mul.ref(1, 1));
    goto corral_source_split_748;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    out_$i111 := $add.i32(out_$i177, 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p169, out_$i184);
    goto corral_source_split_868;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    out_$i184 := $trunc.i32.i8(out_$i182);
    goto corral_source_split_867;

  $bb95:
    assume {:verifier.code 0} true;
    goto corral_source_split_866;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    out_$i182 := 0;
    goto $bb95;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    out_$i182 := out_$i183;
    goto $bb95;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    out_$i183 := $zext.i8.i32(in_$i36);
    goto corral_source_split_862;

  $bb93:
    assume out_$i181 == 1;
    goto corral_source_split_861;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    out_$i181 := $ne.i32(out_$i180, 0);
    goto corral_source_split_859;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    out_$i180 := $and.i32(out_$i179, 1);
    goto corral_source_split_858;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    out_$i179 := $zext.i8.i32(out_$i98);
    goto corral_source_split_857;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref(out_$p92, $mul.ref(out_$i178, 1));
    goto corral_source_split_856;

  $bb92:
    out_$i178 := $add.i64(out_$i168, 1);
    goto corral_source_split_855;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    out_$i177 := $add.i32(out_$i167, 1);
    goto corral_source_split_853;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p159, out_$i176);
    goto corral_source_split_852;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    out_$i176 := $trunc.i32.i8(out_$i174);
    goto corral_source_split_851;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_850;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    out_$i174 := 0;
    goto $bb91;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    out_$i174 := out_$i175;
    goto $bb91;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    out_$i175 := $zext.i8.i32(in_$i36);
    goto corral_source_split_846;

  $bb89:
    assume out_$i173 == 1;
    goto corral_source_split_845;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    out_$i173 := $ne.i32(out_$i172, 0);
    goto corral_source_split_843;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    out_$i172 := $and.i32(out_$i171, 1);
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    out_$i171 := $ashr.i32(out_$i170, 1);
    goto corral_source_split_841;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_$i170 := $zext.i8.i32(out_$i98);
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref(out_$p92, $mul.ref(out_$i168, 1));
    goto corral_source_split_839;

  $bb88:
    out_$i168 := $add.i64(out_$i158, 1);
    goto corral_source_split_838;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    out_$i167 := $add.i32(out_$i157, 1);
    goto corral_source_split_836;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p149, out_$i166);
    goto corral_source_split_835;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    out_$i166 := $trunc.i32.i8(out_$i164);
    goto corral_source_split_834;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_833;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    out_$i164 := 0;
    goto $bb87;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    out_$i164 := out_$i165;
    goto $bb87;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    out_$i165 := $zext.i8.i32(in_$i36);
    goto corral_source_split_829;

  $bb85:
    assume out_$i163 == 1;
    goto corral_source_split_828;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    out_$i163 := $ne.i32(out_$i162, 0);
    goto corral_source_split_826;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    out_$i162 := $and.i32(out_$i161, 1);
    goto corral_source_split_825;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    out_$i161 := $ashr.i32(out_$i160, 2);
    goto corral_source_split_824;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    out_$i160 := $zext.i8.i32(out_$i98);
    goto corral_source_split_823;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref(out_$p92, $mul.ref(out_$i158, 1));
    goto corral_source_split_822;

  $bb84:
    out_$i158 := $add.i64(out_$i148, 1);
    goto corral_source_split_821;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    out_$i157 := $add.i32(out_$i147, 1);
    goto corral_source_split_819;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p139, out_$i156);
    goto corral_source_split_818;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    out_$i156 := $trunc.i32.i8(out_$i154);
    goto corral_source_split_817;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_816;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    out_$i154 := 0;
    goto $bb83;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    out_$i154 := out_$i155;
    goto $bb83;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    out_$i155 := $zext.i8.i32(in_$i36);
    goto corral_source_split_812;

  $bb81:
    assume out_$i153 == 1;
    goto corral_source_split_811;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    out_$i153 := $ne.i32(out_$i152, 0);
    goto corral_source_split_809;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    out_$i152 := $and.i32(out_$i151, 1);
    goto corral_source_split_808;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    out_$i151 := $ashr.i32(out_$i150, 3);
    goto corral_source_split_807;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    out_$i150 := $zext.i8.i32(out_$i98);
    goto corral_source_split_806;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref(out_$p92, $mul.ref(out_$i148, 1));
    goto corral_source_split_805;

  $bb80:
    out_$i148 := $add.i64(out_$i138, 1);
    goto corral_source_split_804;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    out_$i147 := $add.i32(out_$i137, 1);
    goto corral_source_split_802;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p129, out_$i146);
    goto corral_source_split_801;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    out_$i146 := $trunc.i32.i8(out_$i144);
    goto corral_source_split_800;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_799;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    out_$i144 := 0;
    goto $bb79;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    out_$i144 := out_$i145;
    goto $bb79;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    out_$i145 := $zext.i8.i32(in_$i36);
    goto corral_source_split_795;

  $bb77:
    assume out_$i143 == 1;
    goto corral_source_split_794;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    out_$i143 := $ne.i32(out_$i142, 0);
    goto corral_source_split_792;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    out_$i142 := $and.i32(out_$i141, 1);
    goto corral_source_split_791;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    out_$i141 := $ashr.i32(out_$i140, 4);
    goto corral_source_split_790;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    out_$i140 := $zext.i8.i32(out_$i98);
    goto corral_source_split_789;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref(out_$p92, $mul.ref(out_$i138, 1));
    goto corral_source_split_788;

  $bb76:
    out_$i138 := $add.i64(out_$i128, 1);
    goto corral_source_split_787;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    out_$i137 := $add.i32(out_$i127, 1);
    goto corral_source_split_785;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p119, out_$i136);
    goto corral_source_split_784;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    out_$i136 := $trunc.i32.i8(out_$i134);
    goto corral_source_split_783;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_782;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    out_$i134 := 0;
    goto $bb75;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    out_$i134 := out_$i135;
    goto $bb75;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    out_$i135 := $zext.i8.i32(in_$i36);
    goto corral_source_split_778;

  $bb73:
    assume out_$i133 == 1;
    goto corral_source_split_777;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    out_$i133 := $ne.i32(out_$i132, 0);
    goto corral_source_split_775;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    out_$i132 := $and.i32(out_$i131, 1);
    goto corral_source_split_774;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    out_$i131 := $ashr.i32(out_$i130, 5);
    goto corral_source_split_773;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    out_$i130 := $zext.i8.i32(out_$i98);
    goto corral_source_split_772;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref(out_$p92, $mul.ref(out_$i128, 1));
    goto corral_source_split_771;

  $bb72:
    out_$i128 := $add.i64(out_$i118, 1);
    goto corral_source_split_770;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    out_$i127 := $add.i32(out_$i107, 1);
    goto corral_source_split_768;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p99, out_$i126);
    goto corral_source_split_767;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    out_$i126 := $trunc.i32.i8(out_$i124);
    goto corral_source_split_766;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_765;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    out_$i124 := 0;
    goto $bb71;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    out_$i124 := out_$i125;
    goto $bb71;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    out_$i125 := $zext.i8.i32(in_$i36);
    goto corral_source_split_761;

  $bb69:
    assume out_$i123 == 1;
    goto corral_source_split_760;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    out_$i123 := $ne.i32(out_$i122, 0);
    goto corral_source_split_746;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    out_$i122 := $and.i32(out_$i121, 1);
    goto corral_source_split_745;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    out_$i121 := $ashr.i32(out_$i120, 6);
    goto corral_source_split_744;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    out_$i120 := $zext.i8.i32(out_$i98);
    goto corral_source_split_743;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref(out_$p92, $mul.ref(out_$i118, 1));
    goto corral_source_split_742;

  $bb60:
    out_$i118 := $add.i64(1, 1);
    goto corral_source_split_741;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    out_$i107 := $add.i32(out_$i93, 1);
    call {:si_unique_call 90} {:cexpr "j"} boogie_si_record_i32(out_$i107);
    goto corral_source_split_739;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p92, out_$i106);
    goto corral_source_split_738;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    out_$i106 := $trunc.i32.i8(out_$i105);
    goto corral_source_split_737;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_736;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    out_$i105 := 0;
    goto $bb59;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    out_$i105 := out_$i104;
    goto $bb59;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i8.i32(in_$i36);
    goto corral_source_split_732;

  $bb57:
    assume out_$i103 == 1;
    goto corral_source_split_731;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i32(out_$i102, 0);
    goto corral_source_split_729;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    out_$i102 := $and.i32(out_$i101, 1);
    goto corral_source_split_728;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    out_$i101 := $ashr.i32(out_$i100, 7);
    goto corral_source_split_727;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    out_$i100 := $zext.i8.i32(out_$i98);
    goto corral_source_split_726;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref(out_$p92, $mul.ref(1, 1));
    goto corral_source_split_725;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    out_$i98 := $trunc.i32.i8(out_$i97);
    call {:si_unique_call 89} {:cexpr "d"} boogie_si_record_i8(out_$i98);
    goto corral_source_split_723;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    out_$i97 := $xor.i32(out_$i95, out_$i96);
    goto corral_source_split_722;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i8.i32(in_$i11);
    goto corral_source_split_721;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i8.i32(out_$i94);
    goto corral_source_split_720;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i8($M.0, out_$p91);
    goto corral_source_split_719;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb53:
    call out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p91, out_$p92, out_$i93, out_$p112, out_$p114, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i125, out_$i124, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i135, out_$i134, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i145, out_$i144, out_$i146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i155, out_$i154, out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i165, out_$i164, out_$i166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i175, out_$i174, out_$i176, out_$i177, out_$i178, out_$p113, out_$i179, out_$i180, out_$i181, out_$i183, out_$i182, out_$i184, out_$i111 := fb_set_logo_loop_$bb53(in_$i11, in_$i36, out_$p86, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p91, out_$p92, out_$i93, out_$p112, out_$p114, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i125, out_$i124, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i135, out_$i134, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i145, out_$i144, out_$i146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i155, out_$i154, out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i165, out_$i164, out_$i166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i175, out_$i174, out_$i176, out_$i177, out_$i178, out_$p113, out_$i179, out_$i180, out_$i181, out_$i183, out_$i182, out_$i184, out_$i111);
    goto $bb53_last;

  $bb53_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_717;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    out_$p91, out_$p92, out_$i93 := out_$p83, out_$p84, 0;
    goto $bb53;

  $bb62:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$p91, out_$p92, out_$i93 := out_$p108, out_$p113, out_$i111;
    assume false;
    return;

  $bb50:
    assume out_$i88 == 1;
    goto corral_source_split_715;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    out_$p89, out_$p90 := out_$p84, out_$p83;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    out_$i88 := $ult.i32(0, out_$i87);
    goto corral_source_split_713;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.0, out_$p86);
    goto corral_source_split_712;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_711;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb58:
    assume !(out_$i103 == 1);
    goto corral_source_split_734;

  $bb70:
    assume !(out_$i123 == 1);
    goto corral_source_split_763;

  $bb74:
    assume !(out_$i133 == 1);
    goto corral_source_split_780;

  $bb78:
    assume !(out_$i143 == 1);
    goto corral_source_split_797;

  $bb82:
    assume !(out_$i153 == 1);
    goto corral_source_split_814;

  $bb86:
    assume !(out_$i163 == 1);
    goto corral_source_split_831;

  $bb90:
    assume !(out_$i173 == 1);
    goto corral_source_split_848;

  $bb94:
    assume !(out_$i181 == 1);
    goto corral_source_split_864;

  $bb65_dummy:
    call {:si_unique_call 1} out_$p86, out_$i87, out_$i88, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p91, out_$p92, out_$i93, out_$p112, out_$p114, out_$p89, out_$p90, out_$i115, out_$i116, out_$i117, out_$p83, out_$p84, out_$i85, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i125, out_$i124, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i135, out_$i134, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i145, out_$i144, out_$i146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i155, out_$i154, out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i165, out_$i164, out_$i166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i175, out_$i174, out_$i176, out_$i177, out_$i178, out_$p113, out_$i179, out_$i180, out_$i181, out_$i183, out_$i182, out_$i184, out_$i111 := fb_set_logo_loop_$bb48(in_$p1, in_$i11, in_$i36, in_$p80, out_$p86, out_$i87, out_$i88, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p91, out_$p92, out_$i93, out_$p112, out_$p114, out_$p89, out_$p90, out_$i115, out_$i116, out_$i117, out_$p83, out_$p84, out_$i85, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i125, out_$i124, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i135, out_$i134, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i145, out_$i144, out_$i146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i155, out_$i154, out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i165, out_$i164, out_$i166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i175, out_$i174, out_$i176, out_$i177, out_$i178, out_$p113, out_$i179, out_$i180, out_$i181, out_$i183, out_$i182, out_$i184, out_$i111);
    return;

  exit:
    return;
}



procedure fb_set_logo_loop_$bb48(in_$p1: ref, in_$i11: i8, in_$i36: i8, in_$p80: ref, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$i94: i8, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i8, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$i105: i32, in_$i106: i8, in_$i107: i32, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$p91: ref, in_$p92: ref, in_$i93: i32, in_$p112: ref, in_$p114: ref, in_$p89: ref, in_$p90: ref, in_$i115: i32, in_$i116: i32, in_$i117: i1, in_$p83: ref, in_$p84: ref, in_$i85: i32, in_$i118: i64, in_$p119: ref, in_$i120: i32, in_$i121: i32, in_$i122: i32, in_$i123: i1, in_$i125: i32, in_$i124: i32, in_$i126: i8, in_$i127: i32, in_$i128: i64, in_$p129: ref, in_$i130: i32, in_$i131: i32, in_$i132: i32, in_$i133: i1, in_$i135: i32, in_$i134: i32, in_$i136: i8, in_$i137: i32, in_$i138: i64, in_$p139: ref, in_$i140: i32, in_$i141: i32, in_$i142: i32, in_$i143: i1, in_$i145: i32, in_$i144: i32, in_$i146: i8, in_$i147: i32, in_$i148: i64, in_$p149: ref, in_$i150: i32, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$i155: i32, in_$i154: i32, in_$i156: i8, in_$i157: i32, in_$i158: i64, in_$p159: ref, in_$i160: i32, in_$i161: i32, in_$i162: i32, in_$i163: i1, in_$i165: i32, in_$i164: i32, in_$i166: i8, in_$i167: i32, in_$i168: i64, in_$p169: ref, in_$i170: i32, in_$i171: i32, in_$i172: i32, in_$i173: i1, in_$i175: i32, in_$i174: i32, in_$i176: i8, in_$i177: i32, in_$i178: i64, in_$p113: ref, in_$i179: i32, in_$i180: i32, in_$i181: i1, in_$i183: i32, in_$i182: i32, in_$i184: i8, in_$i111: i32) returns (out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$i94: i8, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i8, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$i105: i32, out_$i106: i8, out_$i107: i32, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$p91: ref, out_$p92: ref, out_$i93: i32, out_$p112: ref, out_$p114: ref, out_$p89: ref, out_$p90: ref, out_$i115: i32, out_$i116: i32, out_$i117: i1, out_$p83: ref, out_$p84: ref, out_$i85: i32, out_$i118: i64, out_$p119: ref, out_$i120: i32, out_$i121: i32, out_$i122: i32, out_$i123: i1, out_$i125: i32, out_$i124: i32, out_$i126: i8, out_$i127: i32, out_$i128: i64, out_$p129: ref, out_$i130: i32, out_$i131: i32, out_$i132: i32, out_$i133: i1, out_$i135: i32, out_$i134: i32, out_$i136: i8, out_$i137: i32, out_$i138: i64, out_$p139: ref, out_$i140: i32, out_$i141: i32, out_$i142: i32, out_$i143: i1, out_$i145: i32, out_$i144: i32, out_$i146: i8, out_$i147: i32, out_$i148: i64, out_$p149: ref, out_$i150: i32, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$i155: i32, out_$i154: i32, out_$i156: i8, out_$i157: i32, out_$i158: i64, out_$p159: ref, out_$i160: i32, out_$i161: i32, out_$i162: i32, out_$i163: i1, out_$i165: i32, out_$i164: i32, out_$i166: i8, out_$i167: i32, out_$i168: i64, out_$p169: ref, out_$i170: i32, out_$i171: i32, out_$i172: i32, out_$i173: i1, out_$i175: i32, out_$i174: i32, out_$i176: i8, out_$i177: i32, out_$i178: i64, out_$p113: ref, out_$i179: i32, out_$i180: i32, out_$i181: i1, out_$i183: i32, out_$i182: i32, out_$i184: i8, out_$i111: i32);
  modifies $M.0;



implementation fb_do_show_logo_loop_$bb43(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$i82: i32, in_$p83: ref, in_$i84: i32, in_$i85: i1, in_$i72: i32) returns (out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$i82: i32, out_$p83: ref, out_$i84: i32, out_$i85: i1, out_$i72: i32)
{

  entry:
    out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i72 := in_$p73, in_$p74, in_$p75, in_$p76, in_$p77, in_$i78, in_$p79, in_$i80, in_$i81, in_$i82, in_$p83, in_$i84, in_$i85, in_$i72;
    goto $bb43, exit;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_1086;

  $bb45:
    assume out_$i85 == 1;
    assume {:verifier.code 0} true;
    out_$i72 := out_$i84;
    goto $bb45_dummy;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    out_$i85 := $ult.i32(out_$i84, in_$i3);
    goto corral_source_split_1101;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    out_$i84 := $add.i32(out_$i72, 1);
    call {:si_unique_call 109} {:cexpr "x"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_1100;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, out_$p83, out_$i82);
    goto corral_source_split_1099;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_1098;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    out_$i82 := $sub.i32(out_$i81, 8);
    goto corral_source_split_1097;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    out_$i81 := $sub.i32(out_$i78, out_$i80);
    goto corral_source_split_1096;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.12, out_$p79);
    goto corral_source_split_1095;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_1094;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.12, out_$p77);
    goto corral_source_split_1093;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_1092;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.0, out_$p75);
    call {:si_unique_call 108} devirtbounce.1(out_$p76, in_$p0, in_$p1);
    goto corral_source_split_1091;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p74, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1090;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_1089;

  $bb44:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_1088;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb45_dummy:
    call {:si_unique_call 1} out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i72 := fb_do_show_logo_loop_$bb43(in_$p0, in_$p1, in_$i3, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i72);
    return;

  exit:
    return;
}



procedure fb_do_show_logo_loop_$bb43(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$i82: i32, in_$p83: ref, in_$i84: i32, in_$i85: i1, in_$i72: i32) returns (out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$i82: i32, out_$p83: ref, out_$i84: i32, out_$i85: i1, out_$i72: i32);
  modifies $M.12, $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.46, $CurrAddr;



implementation fb_do_show_logo_loop_$bb30(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$p46: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$p55: ref, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i48: i32, in_$i62: i32, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$p67: ref, in_$i68: i32, in_$i69: i1) returns (out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$p55: ref, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i48: i32, out_$i62: i32, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$p67: ref, out_$i68: i32, out_$i69: i1)
{

  entry:
    out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i48, out_$i62, out_$p63, out_$i64, out_$i65, out_$p67, out_$i68, out_$i69 := in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$i54, in_$p55, in_$i56, in_$i57, in_$i58, in_$p59, in_$i60, in_$i61, in_$i48, in_$i62, in_$p63, in_$i64, in_$i65, in_$p67, in_$i68, in_$i69;
    goto $bb30, exit;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_1051;

  $bb32:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$i48 := out_$i60;
    goto $bb32_dummy;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    out_$i61 := $ult.i32(out_$i60, in_$i3);
    goto corral_source_split_1073;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i32(out_$i48, 1);
    call {:si_unique_call 107} {:cexpr "x"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_1072;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, out_$p59, out_$i58);
    goto corral_source_split_1071;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_1070;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i32(out_$i57, 8);
    goto corral_source_split_1069;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i32(out_$i54, out_$i56);
    goto corral_source_split_1068;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.12, out_$p55);
    goto corral_source_split_1067;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_1066;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.12, out_$p53);
    goto corral_source_split_1065;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_1064;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    call {:si_unique_call 106} devirtbounce.1(out_$p52, in_$p0, in_$p1);
    goto corral_source_split_1063;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p50, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1062;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_1061;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_1060;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb34:
    assume out_$i69 == 1;
    goto corral_source_split_1077;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    out_$i69 := $ule.i32(out_$i65, out_$i68);
    goto corral_source_split_1058;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.0, out_$p67);
    goto corral_source_split_1057;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(4, 1));
    goto corral_source_split_1056;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i62, out_$i64);
    goto corral_source_split_1055;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.12, out_$p63);
    goto corral_source_split_1054;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_1053;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.12, in_$p46);
    goto corral_source_split_1052;

  $bb32_dummy:
    call {:si_unique_call 1} out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i48, out_$i62, out_$p63, out_$i64, out_$i65, out_$p67, out_$i68, out_$i69 := fb_do_show_logo_loop_$bb30(in_$p0, in_$p1, in_$i3, in_$p46, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i48, out_$i62, out_$p63, out_$i64, out_$i65, out_$p67, out_$i68, out_$i69);
    return;

  exit:
    return;
}



procedure fb_do_show_logo_loop_$bb30(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$p46: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$p55: ref, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i48: i32, in_$i62: i32, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$p67: ref, in_$i68: i32, in_$i69: i1) returns (out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$p55: ref, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i48: i32, out_$i62: i32, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$p67: ref, out_$i68: i32, out_$i69: i1);
  modifies $M.12, $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.46, $CurrAddr;



implementation fb_do_show_logo_loop_$bb19(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$i31: i32) returns (out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$i31: i32)
{

  entry:
    out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i31 := in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$i37, in_$p38, in_$i39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i44, in_$i31;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1023;

  $bb21:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i31 := out_$i43;
    goto $bb21_dummy;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    out_$i44 := $ult.i32(out_$i43, in_$i3);
    goto corral_source_split_1038;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i32(out_$i31, 1);
    call {:si_unique_call 105} {:cexpr "x"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_1037;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, out_$p42, out_$i41);
    goto corral_source_split_1036;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_1035;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    out_$i41 := $sub.i32(out_$i40, 8);
    goto corral_source_split_1034;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    out_$i40 := $sub.i32(out_$i37, out_$i39);
    goto corral_source_split_1033;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.12, out_$p38);
    goto corral_source_split_1032;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_1031;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.12, out_$p36);
    goto corral_source_split_1030;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_1029;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    call {:si_unique_call 104} devirtbounce.1(out_$p35, in_$p0, in_$p1);
    goto corral_source_split_1028;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p33, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1027;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_1026;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_1025;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i31 := fb_do_show_logo_loop_$bb19(in_$p0, in_$p1, in_$i3, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i31);
    return;

  exit:
    return;
}



procedure fb_do_show_logo_loop_$bb19(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$i31: i32) returns (out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$i31: i32);
  modifies $M.12, $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.46, $CurrAddr;



implementation fb_do_show_logo_loop_$bb6(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$p5: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i7: i32, in_$i21: i32, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$p26: ref, in_$i27: i32, in_$i28: i1) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i7: i32, out_$i21: i32, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$p26: ref, out_$i27: i32, out_$i28: i1)
{

  entry:
    out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i7, out_$i21, out_$p22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28 := in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$i13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p18, in_$i19, in_$i20, in_$i7, in_$i21, in_$p22, in_$i23, in_$i24, in_$p26, in_$i27, in_$i28;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_985;

  $bb8:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i19;
    goto $bb8_dummy;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    out_$i20 := $ult.i32(out_$i19, in_$i3);
    goto corral_source_split_1007;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i7, 1);
    call {:si_unique_call 103} {:cexpr "x"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_1006;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, out_$p18, out_$i17);
    goto corral_source_split_1005;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_1004;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i16, 8);
    goto corral_source_split_1003;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i13, out_$i15);
    goto corral_source_split_1002;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.12, out_$p14);
    goto corral_source_split_1001;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_1000;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.12, out_$p12);
    goto corral_source_split_999;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_998;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    call {:si_unique_call 102} devirtbounce.1(out_$p11, in_$p0, in_$p1);
    goto corral_source_split_997;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_996;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_995;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_994;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume out_$i28 == 1;
    goto corral_source_split_1011;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    out_$i28 := $ule.i32(out_$i24, out_$i27);
    goto corral_source_split_992;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_991;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(0, 1));
    goto corral_source_split_990;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i21, out_$i23);
    goto corral_source_split_989;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.12, out_$p22);
    goto corral_source_split_988;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_987;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.12, in_$p5);
    goto corral_source_split_986;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i7, out_$i21, out_$p22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28 := fb_do_show_logo_loop_$bb6(in_$p0, in_$p1, in_$i3, in_$p5, out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i7, out_$i21, out_$p22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28);
    return;

  exit:
    return;
}



procedure fb_do_show_logo_loop_$bb6(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$p5: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i7: i32, in_$i21: i32, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$p26: ref, in_$i27: i32, in_$i28: i1) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i7: i32, out_$i21: i32, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$p26: ref, out_$i27: i32, out_$i28: i1);
  modifies $M.12, $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.46, $CurrAddr;



implementation fb_rotate_logo_ud_loop_$bb4(in_$p13: ref, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$i10: i32, in_$p11: ref, in_$p12: ref) returns (out_$p13: ref, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$i10: i32, out_$p11: ref, out_$p12: ref)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i10, out_$p11, out_$p12 := in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i10, in_$p11, in_$p12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1115;

  $bb6:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i10, out_$p11, out_$p12 := out_$i16, out_$p14, out_$p13;
    goto $bb6_dummy;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i10, 0);
    goto corral_source_split_1122;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    out_$i16 := $sub.i32(out_$i10, 1);
    call {:si_unique_call 114} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_1121;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p12, out_$i15);
    goto corral_source_split_1120;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i8($M.0, out_$p11);
    goto corral_source_split_1119;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p11, $mul.ref(1, 1));
    goto corral_source_split_1118;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref(out_$p12, $mul.ref($sub.ref(0, 1), 1));
    goto corral_source_split_1117;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i10, out_$p11, out_$p12 := fb_rotate_logo_ud_loop_$bb4(out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i10, out_$p11, out_$p12);
    return;

  exit:
    return;
}



procedure fb_rotate_logo_ud_loop_$bb4(in_$p13: ref, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$i10: i32, in_$p11: ref, in_$p12: ref) returns (out_$p13: ref, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$i10: i32, out_$p11: ref, out_$p12: ref);
  modifies $M.0;



implementation fb_rotate_logo_cw_loop_$bb9(in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p10: ref, in_$i11: i32, in_$p21: ref, in_$i7: i32) returns (out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i64, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p10: ref, out_$i11: i32, out_$p21: ref)
{

  entry:
    out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p10, out_$i11, out_$p21 := in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$p18, in_$i19, in_$i20, in_$p10, in_$i11, in_$p21;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1138;

  $bb11:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$p10, out_$i11 := out_$p12, out_$i19;
    goto $bb11_dummy;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    out_$p21 := out_$p12;
    assume true;
    goto $bb11;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    out_$i20 := $ult.i32(out_$i19, in_$i2);
    goto corral_source_split_1149;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i11, 1);
    call {:si_unique_call 118} {:cexpr "j"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_1148;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p18, out_$i13);
    goto corral_source_split_1147;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(in_$p1, $mul.ref(out_$i17, 1));
    goto corral_source_split_1146;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i32.i64(out_$i16);
    goto corral_source_split_1145;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    out_$i16 := $sub.i32(out_$i15, in_$i7);
    goto corral_source_split_1144;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i14, in_$i4);
    goto corral_source_split_1143;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    out_$i14 := $mul.i32(in_$i3, out_$i11);
    goto corral_source_split_1142;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i8($M.0, out_$p10);
    goto corral_source_split_1141;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p10, $mul.ref(1, 1));
    goto corral_source_split_1140;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p10, out_$i11, out_$p21 := fb_rotate_logo_cw_loop_$bb9(in_$p1, in_$i2, in_$i3, in_$i4, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p10, out_$i11, out_$p21, in_$i7);
    return;

  exit:
    return;
}



procedure fb_rotate_logo_cw_loop_$bb9(in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p10: ref, in_$i11: i32, in_$p21: ref, in_$i7: i32) returns (out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i64, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p10: ref, out_$i11: i32, out_$p21: ref);
  modifies $M.0;



implementation fb_rotate_logo_cw_loop_$bb4(in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$i8: i1, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p10: ref, in_$i11: i32, in_$p21: ref, in_$p9: ref, in_$i22: i32, in_$i23: i1, in_$p6: ref, in_$i7: i32) returns (out_$i8: i1, out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i64, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p10: ref, out_$i11: i32, out_$p21: ref, out_$p9: ref, out_$i22: i32, out_$i23: i1, out_$p6: ref, out_$i7: i32)
{

  entry:
    out_$i8, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p10, out_$i11, out_$p21, out_$p9, out_$i22, out_$i23, out_$p6, out_$i7 := in_$i8, in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$p18, in_$i19, in_$i20, in_$p10, in_$i11, in_$p21, in_$p9, in_$i22, in_$i23, in_$p6, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1132;

  $bb14:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$p6, out_$i7 := out_$p9, out_$i22;
    goto $bb14_dummy;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    out_$i23 := $ult.i32(out_$i22, in_$i3);
    goto corral_source_split_1154;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i7, 1);
    call {:si_unique_call 119} {:cexpr "i"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_1153;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i8 == 1);
    goto $bb8;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    out_$p9 := out_$p21;
    goto $bb8;

  $bb12:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1151;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    out_$p21 := out_$p12;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    out_$i20 := $ult.i32(out_$i19, in_$i2);
    goto corral_source_split_1149;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i11, 1);
    call {:si_unique_call 118} {:cexpr "j"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_1148;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p18, out_$i13);
    goto corral_source_split_1147;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(in_$p1, $mul.ref(out_$i17, 1));
    goto corral_source_split_1146;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i32.i64(out_$i16);
    goto corral_source_split_1145;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    out_$i16 := $sub.i32(out_$i15, out_$i7);
    goto corral_source_split_1144;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i14, in_$i4);
    goto corral_source_split_1143;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    out_$i14 := $mul.i32(in_$i3, out_$i11);
    goto corral_source_split_1142;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i8($M.0, out_$p10);
    goto corral_source_split_1141;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p10, $mul.ref(1, 1));
    goto corral_source_split_1140;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p10, out_$i11, out_$p21 := fb_rotate_logo_cw_loop_$bb9(in_$p1, in_$i2, in_$i3, in_$i4, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p10, out_$i11, out_$p21, out_$i7);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1138;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    out_$p10, out_$i11 := out_$p6, 0;
    goto $bb9;

  $bb11:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$p10, out_$i11 := out_$p12, out_$i19;
    assume false;
    return;

  $bb6:
    assume out_$i8 == 1;
    goto corral_source_split_1136;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    out_$p9 := out_$p6;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $ult.i32(0, in_$i2);
    goto corral_source_split_1134;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i8, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p10, out_$i11, out_$p21, out_$p9, out_$i22, out_$i23, out_$p6, out_$i7 := fb_rotate_logo_cw_loop_$bb4(in_$p1, in_$i2, in_$i3, in_$i4, out_$i8, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p10, out_$i11, out_$p21, out_$p9, out_$i22, out_$i23, out_$p6, out_$i7);
    return;

  exit:
    return;
}



procedure fb_rotate_logo_cw_loop_$bb4(in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$i8: i1, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p10: ref, in_$i11: i32, in_$p21: ref, in_$p9: ref, in_$i22: i32, in_$i23: i1, in_$p6: ref, in_$i7: i32) returns (out_$i8: i1, out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i64, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p10: ref, out_$i11: i32, out_$p21: ref, out_$p9: ref, out_$i22: i32, out_$i23: i1, out_$p6: ref, out_$i7: i32);
  modifies $M.0;



implementation fb_rotate_logo_ccw_loop_$bb9(in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p10: ref, in_$i11: i32, in_$p21: ref, in_$i7: i32) returns (out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i64, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p10: ref, out_$i11: i32, out_$p21: ref)
{

  entry:
    out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p10, out_$i11, out_$p21 := in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$p18, in_$i19, in_$i20, in_$p10, in_$i11, in_$p21;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1170;

  $bb11:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$p10, out_$i11 := out_$p12, out_$i19;
    goto $bb11_dummy;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    out_$p21 := out_$p12;
    assume true;
    goto $bb11;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    out_$i20 := $ult.i32(out_$i19, in_$i2);
    goto corral_source_split_1181;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i11, 1);
    call {:si_unique_call 123} {:cexpr "j"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_1180;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p18, out_$i13);
    goto corral_source_split_1179;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(in_$p1, $mul.ref(out_$i17, 1));
    goto corral_source_split_1178;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i32.i64(out_$i16);
    goto corral_source_split_1177;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i15, in_$i7);
    goto corral_source_split_1176;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    out_$i15 := $mul.i32(out_$i14, in_$i3);
    goto corral_source_split_1175;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    out_$i14 := $sub.i32(in_$i4, out_$i11);
    goto corral_source_split_1174;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i8($M.0, out_$p10);
    goto corral_source_split_1173;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p10, $mul.ref(1, 1));
    goto corral_source_split_1172;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p10, out_$i11, out_$p21 := fb_rotate_logo_ccw_loop_$bb9(in_$p1, in_$i2, in_$i3, in_$i4, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p10, out_$i11, out_$p21, in_$i7);
    return;

  exit:
    return;
}



procedure fb_rotate_logo_ccw_loop_$bb9(in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p10: ref, in_$i11: i32, in_$p21: ref, in_$i7: i32) returns (out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i64, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p10: ref, out_$i11: i32, out_$p21: ref);
  modifies $M.0;



implementation fb_rotate_logo_ccw_loop_$bb4(in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$i8: i1, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p10: ref, in_$i11: i32, in_$p21: ref, in_$p9: ref, in_$i22: i32, in_$i23: i1, in_$p6: ref, in_$i7: i32) returns (out_$i8: i1, out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i64, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p10: ref, out_$i11: i32, out_$p21: ref, out_$p9: ref, out_$i22: i32, out_$i23: i1, out_$p6: ref, out_$i7: i32)
{

  entry:
    out_$i8, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p10, out_$i11, out_$p21, out_$p9, out_$i22, out_$i23, out_$p6, out_$i7 := in_$i8, in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$p18, in_$i19, in_$i20, in_$p10, in_$i11, in_$p21, in_$p9, in_$i22, in_$i23, in_$p6, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1164;

  $bb14:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$p6, out_$i7 := out_$p9, out_$i22;
    goto $bb14_dummy;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    out_$i23 := $ult.i32(out_$i22, in_$i3);
    goto corral_source_split_1186;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i7, 1);
    call {:si_unique_call 124} {:cexpr "i"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_1185;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i8 == 1);
    goto $bb8;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    out_$p9 := out_$p21;
    goto $bb8;

  $bb12:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1183;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    out_$p21 := out_$p12;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    out_$i20 := $ult.i32(out_$i19, in_$i2);
    goto corral_source_split_1181;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i11, 1);
    call {:si_unique_call 123} {:cexpr "j"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_1180;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p18, out_$i13);
    goto corral_source_split_1179;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(in_$p1, $mul.ref(out_$i17, 1));
    goto corral_source_split_1178;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i32.i64(out_$i16);
    goto corral_source_split_1177;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i15, out_$i7);
    goto corral_source_split_1176;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    out_$i15 := $mul.i32(out_$i14, in_$i3);
    goto corral_source_split_1175;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    out_$i14 := $sub.i32(in_$i4, out_$i11);
    goto corral_source_split_1174;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i8($M.0, out_$p10);
    goto corral_source_split_1173;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p10, $mul.ref(1, 1));
    goto corral_source_split_1172;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p10, out_$i11, out_$p21 := fb_rotate_logo_ccw_loop_$bb9(in_$p1, in_$i2, in_$i3, in_$i4, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p10, out_$i11, out_$p21, out_$i7);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1170;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    out_$p10, out_$i11 := out_$p6, 0;
    goto $bb9;

  $bb11:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$p10, out_$i11 := out_$p12, out_$i19;
    assume false;
    return;

  $bb6:
    assume out_$i8 == 1;
    goto corral_source_split_1168;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    out_$p9 := out_$p6;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $ult.i32(0, in_$i2);
    goto corral_source_split_1166;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i8, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p10, out_$i11, out_$p21, out_$p9, out_$i22, out_$i23, out_$p6, out_$i7 := fb_rotate_logo_ccw_loop_$bb4(in_$p1, in_$i2, in_$i3, in_$i4, out_$i8, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p10, out_$i11, out_$p21, out_$p9, out_$i22, out_$i23, out_$p6, out_$i7);
    return;

  exit:
    return;
}



procedure fb_rotate_logo_ccw_loop_$bb4(in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$i8: i1, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p10: ref, in_$i11: i32, in_$p21: ref, in_$p9: ref, in_$i22: i32, in_$i23: i1, in_$p6: ref, in_$i7: i32) returns (out_$i8: i1, out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i64, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p10: ref, out_$i11: i32, out_$p21: ref, out_$p9: ref, out_$i22: i32, out_$i23: i1, out_$p6: ref, out_$i7: i32);
  modifies $M.0;



implementation fb_set_cmap_loop_$bb17(in_$p1: ref, in_$p38: ref, in_$p48: ref, in_$i49: i16, in_$i50: i32, in_$p51: ref, in_$i52: i16, in_$i53: i32, in_$p54: ref, in_$i55: i16, in_$i56: i32, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$i60: i16, in_$i61: i32, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i41: i32, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$p45: ref, in_$p46: ref, in_$p47: ref) returns (out_$p48: ref, out_$i49: i16, out_$i50: i32, out_$p51: ref, out_$i52: i16, out_$i53: i32, out_$p54: ref, out_$i55: i16, out_$i56: i32, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$i60: i16, out_$i61: i32, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i41: i32, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$p45: ref, out_$p46: ref, out_$p47: ref)
{

  entry:
    out_$p48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47 := in_$p48, in_$i49, in_$i50, in_$p51, in_$i52, in_$i53, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$p59, in_$i60, in_$i61, in_$p62, in_$i63, in_$i64, in_$p65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i41, in_$p42, in_$i43, in_$i44, in_$p45, in_$p46, in_$p47;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1274;

  $bb26:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47 := out_$i63, out_$p62, out_$i71, out_$i64, out_$p48, out_$p51, out_$p54;
    goto $bb26_dummy;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    out_$i73 := $ult.i32(out_$i71, out_$i72);
    goto corral_source_split_1305;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i32($M.0, in_$p38);
    goto corral_source_split_1304;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i32(out_$i43, 1);
    call {:si_unique_call 148} {:cexpr "i"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_1303;

  $bb23:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i32(out_$i69, 0);
    goto corral_source_split_1299;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    call {:si_unique_call 146} out_$i69 := devirtbounce.3(out_$p68, out_$i44, out_$i50, out_$i53, out_$i56, out_$i63, in_$p1);
    call {:si_unique_call 147} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_1298;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p66, $mul.ref(0, 192)), $mul.ref(56, 1));
    goto corral_source_split_1297;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_1296;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_1295;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(out_$i44, 1);
    call {:si_unique_call 145} {:cexpr "start"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_1294;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1293;

  $bb20:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    out_$p62, out_$i63 := out_$p42, out_$i41;
    goto $bb21;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    out_$p62, out_$i63 := out_$p59, out_$i61;
    goto $bb21;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i16.i32(out_$i60);
    call {:si_unique_call 144} {:cexpr "htransp"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_1291;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i16($M.0, out_$p42);
    goto corral_source_split_1290;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref(out_$p42, $mul.ref(1, 2));
    goto corral_source_split_1289;

  $bb19:
    assume out_$i58 == 1;
    goto corral_source_split_1288;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i64(out_$i57, 0);
    goto corral_source_split_1286;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_1285;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i16.i32(out_$i55);
    call {:si_unique_call 143} {:cexpr "hblue"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_1284;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i16($M.0, out_$p47);
    goto corral_source_split_1283;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p47, $mul.ref(1, 2));
    goto corral_source_split_1282;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i16.i32(out_$i52);
    call {:si_unique_call 142} {:cexpr "hgreen"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_1281;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i16($M.0, out_$p46);
    goto corral_source_split_1280;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p46, $mul.ref(1, 2));
    goto corral_source_split_1279;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i16.i32(out_$i49);
    call {:si_unique_call 141} {:cexpr "hred"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_1278;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i16($M.0, out_$p45);
    goto corral_source_split_1277;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(out_$p45, $mul.ref(1, 2));
    goto corral_source_split_1276;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47 := fb_set_cmap_loop_$bb17(in_$p1, in_$p38, out_$p48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47);
    return;

  exit:
    return;
}



procedure fb_set_cmap_loop_$bb17(in_$p1: ref, in_$p38: ref, in_$p48: ref, in_$i49: i16, in_$i50: i32, in_$p51: ref, in_$i52: i16, in_$i53: i32, in_$p54: ref, in_$i55: i16, in_$i56: i32, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$i60: i16, in_$i61: i32, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i41: i32, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$p45: ref, in_$p46: ref, in_$p47: ref) returns (out_$p48: ref, out_$i49: i16, out_$i50: i32, out_$p51: ref, out_$i52: i16, out_$i53: i32, out_$p54: ref, out_$i55: i16, out_$i56: i32, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$i60: i16, out_$i61: i32, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i41: i32, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$p45: ref, out_$p46: ref, out_$p47: ref);



implementation fb_delete_videomode_loop_$bb4(in_$p0: ref, in_$i7: i64, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p9: ref, in_$p10: ref) returns (out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p9: ref, out_$p10: ref)
{

  entry:
    out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p9, out_$p10 := in_$p11, in_$p12, in_$i13, in_$i14, in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$p9, in_$p10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2002;

  $bb9:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$p9, out_$p10 := out_$p17, out_$p9;
    goto $bb9_dummy;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, in_$i7);
    goto corral_source_split_2017;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p9);
    goto corral_source_split_2016;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_2015;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2014;

  $bb7:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} kfree(out_$p15);
    goto corral_source_split_2012;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p10);
    goto corral_source_split_2011;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} list_del(out_$p10);
    goto corral_source_split_2010;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_2009;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_2007;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} out_$i13 := fb_mode_is_equal(out_$p12, in_$p0);
    call {:si_unique_call 216} {:cexpr "tmp"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_2006;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_2005;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(out_$p10);
    goto corral_source_split_2004;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p9, out_$p10 := fb_delete_videomode_loop_$bb4(in_$p0, in_$i7, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p9, out_$p10);
    return;

  exit:
    return;
}



procedure fb_delete_videomode_loop_$bb4(in_$p0: ref, in_$i7: i64, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p9: ref, in_$p10: ref) returns (out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p9: ref, out_$p10: ref);



implementation fb_add_videomode_loop_$bb4(in_$p0: ref, in_$i5: i64, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p7: ref) returns (out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p7: ref)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$p7 := in_$p8, in_$p9, in_$i10, in_$i11, in_$p13, in_$p14, in_$i15, in_$i16, in_$p7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2109;

  $bb10:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$p7 := out_$p14;
    goto $bb10_dummy;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, in_$i5);
    goto corral_source_split_2124;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_2123;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_2122;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2121;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_2114;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} out_$i10 := fb_mode_is_equal(out_$p9, in_$p0);
    call {:si_unique_call 244} {:cexpr "tmp"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_2113;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p8, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_2112;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $bitcast.ref.ref(out_$p7);
    goto corral_source_split_2111;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$p7 := fb_add_videomode_loop_$bb4(in_$p0, in_$i5, out_$p8, out_$p9, out_$i10, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$p7);
    return;

  exit:
    return;
}



procedure fb_add_videomode_loop_$bb4(in_$p0: ref, in_$i5: i64, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p7: ref) returns (out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p7: ref);



implementation do_remove_conflicting_framebuffers_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i3: i8, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i1, in_$i24: i8, in_$i25: i1, in_$i26: i1, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$p41: ref, in_$p42: ref, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i51: i32, in_$i10: i32, in_$i52: i32, in_$i53: i1, in_$i4: i32, in_vslice_dummy_var_136: i32) returns (out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i1, out_$i24: i8, out_$i25: i1, out_$i26: i1, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$p41: ref, out_$p42: ref, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i51: i32, out_$i10: i32, out_$i52: i32, out_$i53: i1, out_$i4: i32, out_vslice_dummy_var_136: i32)
{

  entry:
    out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p41, out_$p42, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i51, out_$i10, out_$i52, out_$i53, out_$i4, out_vslice_dummy_var_136 := in_$i5, in_$p6, in_$p7, in_$i8, in_$i9, in_$i11, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$p34, in_$i35, in_$i36, in_$i37, in_$p38, in_$p39, in_$p41, in_$p42, in_$i44, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i51, in_$i10, in_$i52, in_$i53, in_$i4, in_vslice_dummy_var_136;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2230;

  $bb27:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i52;
    goto $bb27_dummy;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    out_$i53 := $sle.i32(out_$i52, 31);
    goto corral_source_split_2242;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i10, 1);
    call {:si_unique_call 261} {:cexpr "i"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_2241;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2240;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    out_$i10 := out_$i51;
    goto $bb5;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    out_$i10 := out_$i4;
    goto $bb5;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    out_$i10 := out_$i4;
    goto $bb5;

  $bb3:
    assume out_$i9 == 1;
    goto corral_source_split_2238;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i64(out_$i8, 0);
    goto corral_source_split_2236;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_2235;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.19, out_$p6);
    goto corral_source_split_2234;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(out_$i5, 8));
    goto corral_source_split_2233;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i4);
    goto corral_source_split_2232;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb7:
    assume out_$i17 == 1;
    goto corral_source_split_2252;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, 0);
    goto corral_source_split_2250;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    out_$i16 := $and.i32(out_$i15, 524288);
    goto corral_source_split_2249;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.0, out_$p14);
    goto corral_source_split_2248;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p13, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_2247;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.19, out_$p12);
    goto corral_source_split_2246;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(out_$i11, 8));
    goto corral_source_split_2245;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i4);
    goto corral_source_split_2244;

  $bb4:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_2296;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i4;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i4;
    goto $bb26;

  $bb23:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i47;
    assume true;
    goto $bb23;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_2273;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} out_$i47 := do_unregister_framebuffer(out_$p46);
    call {:si_unique_call 266} {:cexpr "ret"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_2272;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.19, out_$p45);
    goto corral_source_split_2271;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(out_$i44, 8));
    goto corral_source_split_2270;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i4);
    goto corral_source_split_2269;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} out_vslice_dummy_var_136 := printk.ref.ref.ref(.str.24, in_$p1, out_$p42);
    goto corral_source_split_2268;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(out_$p41);
    goto corral_source_split_2267;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($add.ref(out_$p39, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_2266;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.19, out_$p38);
    goto corral_source_split_2265;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(out_$i37, 8));
    goto corral_source_split_2264;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i4);
    goto corral_source_split_2263;

  $bb20:
    assume {:verifier.code 0} true;
    assume out_$i36 == 1;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i25 == 1;
    goto $bb11;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    out_$i25 := $trunc.i8.i1(out_$i24);
    goto corral_source_split_2261;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i8(out_$i23);
    call {:si_unique_call 263} {:cexpr "tmp"} boogie_si_record_i8(out_$i24);
    goto corral_source_split_2260;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} out_$i23 := fb_do_apertures_overlap(out_$p22, in_$p0);
    goto corral_source_split_2259;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_2258;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 1608)), $mul.ref(1592, 1));
    goto corral_source_split_2257;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.19, out_$p19);
    goto corral_source_split_2256;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(registered_fb, $mul.ref(0, 256)), $mul.ref(out_$i18, 8));
    goto corral_source_split_2255;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i4);
    goto corral_source_split_2254;

  $bb8:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i64(out_$i35, 655360);
    goto corral_source_split_2290;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i64($M.0, out_$p34);
    goto corral_source_split_2289;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref($add.ref(out_$p22, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2288;

  $bb18:
    assume out_$i31 == 1;
    goto corral_source_split_2287;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_2285;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    goto corral_source_split_2284;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p22, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2283;

  $bb16:
    assume out_$i28 == 1;
    goto corral_source_split_2282;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_2280;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_2279;

  $bb13:
    assume out_$i26 == 1;
    goto corral_source_split_2278;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    out_$i26 := $trunc.i8.i1(in_$i3);
    goto corral_source_split_2276;

  $bb12:
    assume !(out_$i25 == 1);
    goto corral_source_split_2275;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i26 == 1);
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb15;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i31 == 1);
    goto $bb15;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb15;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p41, out_$p42, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i51, out_$i10, out_$i52, out_$i53, out_$i4, out_vslice_dummy_var_136 := do_remove_conflicting_framebuffers_loop_$bb1(in_$p0, in_$p1, in_$i3, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p41, out_$p42, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i51, out_$i10, out_$i52, out_$i53, out_$i4, out_vslice_dummy_var_136);
    return;

  exit:
    return;
}



procedure do_remove_conflicting_framebuffers_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i3: i8, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i1, in_$i24: i8, in_$i25: i1, in_$i26: i1, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$p41: ref, in_$p42: ref, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i51: i32, in_$i10: i32, in_$i52: i32, in_$i53: i1, in_$i4: i32, in_vslice_dummy_var_136: i32) returns (out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i1, out_$i24: i8, out_$i25: i1, out_$i26: i1, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$p41: ref, out_$p42: ref, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i51: i32, out_$i10: i32, out_$i52: i32, out_$i53: i1, out_$i4: i32, out_vslice_dummy_var_136: i32);
  modifies $M.14, $M.0, $M.19, $M.21, $CurrAddr, $M.11, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.46;



implementation fb_do_apertures_overlap_loop_$bb16(in_$p0: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$i32: i1, in_$i33: i8, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i18: i32, in_vslice_dummy_var_137: i32) returns (out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$i30: i64, out_$i32: i1, out_$i33: i8, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i18: i32, out_vslice_dummy_var_137: i32)
{

  entry:
    out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i18, out_vslice_dummy_var_137 := in_$p19, in_$p20, in_$i21, in_$p22, in_$p23, in_$i24, in_$p25, in_$i26, in_$p27, in_$i28, in_$p29, in_$i30, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i18, in_vslice_dummy_var_137;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2326;

  $bb21:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := out_$i35;
    goto $bb21_dummy;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    out_$i37 := $ult.i32(out_$i35, out_$i36);
    goto corral_source_split_2349;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, in_$p15);
    goto corral_source_split_2348;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i18, 1);
    call {:si_unique_call 270} {:cexpr "j"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_2347;

  $bb19:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    out_$i34 := $trunc.i8.i1(out_$i33);
    goto corral_source_split_2343;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i1.i8(out_$i32);
    call {:si_unique_call 269} {:cexpr "tmp"} boogie_si_record_i8(out_$i33);
    goto corral_source_split_2342;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} out_$i32 := apertures_overlap(out_$p22, in_$p14);
    goto corral_source_split_2341;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} out_vslice_dummy_var_137 := printk.ref.i64.i64.i64.i64(.str.25, out_$i24, out_$i26, out_$i28, out_$i30);
    goto corral_source_split_2340;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i64($M.0, out_$p29);
    goto corral_source_split_2339;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p12, $mul.ref(in_$i13, 16)), $mul.ref(8, 1));
    goto corral_source_split_2338;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.0, out_$p27);
    goto corral_source_split_2337;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p12, $mul.ref(in_$i13, 16)), $mul.ref(0, 1));
    goto corral_source_split_2336;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i64($M.0, out_$p25);
    goto corral_source_split_2335;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 16)), $mul.ref(8, 1));
    goto corral_source_split_2334;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.0, out_$p23);
    goto corral_source_split_2333;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 16)), $mul.ref(0, 1));
    goto corral_source_split_2332;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(out_$p20, $mul.ref(out_$i21, 16));
    goto corral_source_split_2331;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i18);
    goto corral_source_split_2330;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_2329;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8)), $mul.ref(8, 1));
    goto corral_source_split_2328;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i18, out_vslice_dummy_var_137 := fb_do_apertures_overlap_loop_$bb16(in_$p0, in_$p12, in_$i13, in_$p14, in_$p15, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i18, out_vslice_dummy_var_137);
    return;

  exit:
    return;
}



procedure fb_do_apertures_overlap_loop_$bb16(in_$p0: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$i32: i1, in_$i33: i8, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i18: i32, in_vslice_dummy_var_137: i32) returns (out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$i30: i64, out_$i32: i1, out_$i33: i8, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i18: i32, out_vslice_dummy_var_137: i32);



implementation fb_do_apertures_overlap_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p7: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$i32: i1, in_$i33: i8, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i18: i32, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i10: i32, in_vslice_dummy_var_137: i32) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$i30: i64, out_$i32: i1, out_$i33: i8, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i18: i32, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i10: i32, out_vslice_dummy_var_137: i32)
{

  entry:
    out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i18, out_$i38, out_$i39, out_$i40, out_$i10, out_vslice_dummy_var_137 := in_$p11, in_$p12, in_$i13, in_$p14, in_$p15, in_$i16, in_$i17, in_$p19, in_$p20, in_$i21, in_$p22, in_$p23, in_$i24, in_$p25, in_$i26, in_$p27, in_$i28, in_$p29, in_$i30, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i18, in_$i38, in_$i39, in_$i40, in_$i10, in_vslice_dummy_var_137;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2314;

  $bb24:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i38;
    goto $bb24_dummy;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    out_$i40 := $ult.i32(out_$i38, out_$i39);
    goto corral_source_split_2355;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, in_$p7);
    goto corral_source_split_2354;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i10, 1);
    call {:si_unique_call 271} {:cexpr "i"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_2353;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb15;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb22:
    assume !(out_$i37 == 1);
    goto corral_source_split_2351;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    out_$i37 := $ult.i32(out_$i35, out_$i36);
    goto corral_source_split_2349;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, out_$p15);
    goto corral_source_split_2348;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i18, 1);
    call {:si_unique_call 270} {:cexpr "j"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_2347;

  $bb19:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    out_$i34 := $trunc.i8.i1(out_$i33);
    goto corral_source_split_2343;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i1.i8(out_$i32);
    call {:si_unique_call 269} {:cexpr "tmp"} boogie_si_record_i8(out_$i33);
    goto corral_source_split_2342;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} out_$i32 := apertures_overlap(out_$p22, out_$p14);
    goto corral_source_split_2341;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} out_vslice_dummy_var_137 := printk.ref.i64.i64.i64.i64(.str.25, out_$i24, out_$i26, out_$i28, out_$i30);
    goto corral_source_split_2340;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i64($M.0, out_$p29);
    goto corral_source_split_2339;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 16)), $mul.ref(8, 1));
    goto corral_source_split_2338;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.0, out_$p27);
    goto corral_source_split_2337;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 16)), $mul.ref(0, 1));
    goto corral_source_split_2336;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i64($M.0, out_$p25);
    goto corral_source_split_2335;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 16)), $mul.ref(8, 1));
    goto corral_source_split_2334;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.0, out_$p23);
    goto corral_source_split_2333;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 16)), $mul.ref(0, 1));
    goto corral_source_split_2332;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(out_$p20, $mul.ref(out_$i21, 16));
    goto corral_source_split_2331;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i18);
    goto corral_source_split_2330;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_2329;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8)), $mul.ref(8, 1));
    goto corral_source_split_2328;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    call out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i18, out_vslice_dummy_var_137 := fb_do_apertures_overlap_loop_$bb16(in_$p0, out_$p12, out_$i13, out_$p14, out_$p15, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i18, out_vslice_dummy_var_137);
    goto $bb16_last;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2326;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    out_$i18 := 0;
    goto $bb16;

  $bb21:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := out_$i35;
    assume false;
    return;

  $bb13:
    assume out_$i17 == 1;
    goto corral_source_split_2324;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    out_$i17 := $ult.i32(0, out_$i16);
    goto corral_source_split_2322;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    goto corral_source_split_2321;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2320;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p12, $mul.ref(out_$i13, 16));
    goto corral_source_split_2319;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i10);
    goto corral_source_split_2318;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_2317;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p1, $mul.ref(0, 8)), $mul.ref(8, 1));
    goto corral_source_split_2316;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i18, out_$i38, out_$i39, out_$i40, out_$i10, out_vslice_dummy_var_137 := fb_do_apertures_overlap_loop_$bb11(in_$p0, in_$p1, in_$p7, out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i18, out_$i38, out_$i39, out_$i40, out_$i10, out_vslice_dummy_var_137);
    return;

  exit:
    return;
}



procedure fb_do_apertures_overlap_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p7: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$i32: i1, in_$i33: i8, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i18: i32, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i10: i32, in_vslice_dummy_var_137: i32) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$i30: i64, out_$i32: i1, out_$i33: i8, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i18: i32, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i10: i32, out_vslice_dummy_var_137: i32);



implementation fb_destroy_modelist_loop_$bb4(in_$i6: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p8: ref, in_$p9: ref) returns (out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p8: ref, out_$p9: ref)
{

  entry:
    out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p8, out_$p9 := in_$p10, in_$p11, in_$p12, in_$i13, in_$i14, in_$p8, in_$p9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2452;

  $bb6:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$p8, out_$p9 := out_$p12, out_$p8;
    goto $bb6_dummy;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i64(out_$i13, in_$i6);
    goto corral_source_split_2460;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_2459;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_2458;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2457;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} kfree(out_$p10);
    goto corral_source_split_2456;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    out_$p10 := $bitcast.ref.ref(out_$p9);
    goto corral_source_split_2455;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} list_del(out_$p9);
    goto corral_source_split_2454;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p8, out_$p9 := fb_destroy_modelist_loop_$bb4(in_$i6, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p8, out_$p9);
    return;

  exit:
    return;
}



procedure fb_destroy_modelist_loop_$bb4(in_$i6: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p8: ref, in_$p9: ref) returns (out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p8: ref, out_$p9: ref);



implementation fb_init_device_loop_$bb15(in_$p0: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i26: i32) returns (out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i26: i32)
{

  entry:
    out_$p27, out_$p28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i26 := in_$p27, in_$p28, in_$i29, in_$p30, in_$i31, in_$i32, in_$i26;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2989;

  $bb17:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i26 := out_$i31;
    goto $bb17_dummy;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    out_$i32 := $sge.i32(out_$i31, 0);
    goto corral_source_split_2996;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    out_$i31 := $sub.i32(out_$i26, 1);
    call {:si_unique_call 373} {:cexpr "i"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_2995;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} device_remove_file(out_$p28, out_$p30);
    goto corral_source_split_2994;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i26);
    out_$p30 := $add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(out_$i29, 48));
    goto corral_source_split_2993;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_2992;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2991;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p27, out_$p28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i26 := fb_init_device_loop_$bb15(in_$p0, out_$p27, out_$p28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i26);
    return;

  exit:
    return;
}



procedure fb_init_device_loop_$bb15(in_$p0: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i26: i32) returns (out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i26: i32);



implementation fb_init_device_loop_$bb1(in_$p0: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i16: i32, in_$i19: i32, in_$i20: i1, in_$i8: i32, in_$i21: i32, in_$i22: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i16: i32, out_$i19: i32, out_$i20: i1, out_$i8: i32, out_$i21: i32, out_$i22: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i19, out_$i20, out_$i8, out_$i21, out_$i22 := in_$p9, in_$p10, in_$i11, in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i19, in_$i20, in_$i8, in_$i21, in_$i22;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2967;

  $bb7:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i19;
    goto $bb7_dummy;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    out_$i21, out_$i22 := out_$i19, out_$i13;
    assume true;
    goto $bb7;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    out_$i20 := $ule.i32(out_$i19, 12);
    goto corral_source_split_2981;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i8, 1);
    call {:si_unique_call 370} {:cexpr "i"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_2980;

  $bb4:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    out_$i15, out_$i16 := out_$i8, out_$i13;
    assume true;
    goto $bb4;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_2973;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} out_$i13 := device_create_file(out_$p10, out_$p12);
    call {:si_unique_call 369} {:cexpr "error"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_2972;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i8);
    out_$p12 := $add.ref($add.ref(device_attrs, $mul.ref(0, 624)), $mul.ref(out_$i11, 48));
    goto corral_source_split_2971;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_2970;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1608)), $mul.ref(1520, 1));
    goto corral_source_split_2969;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb7_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i19, out_$i20, out_$i8, out_$i21, out_$i22 := fb_init_device_loop_$bb1(in_$p0, out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i19, out_$i20, out_$i8, out_$i21, out_$i22);
    return;

  exit:
    return;
}



procedure fb_init_device_loop_$bb1(in_$p0: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i16: i32, in_$i19: i32, in_$i20: i1, in_$i8: i32, in_$i21: i32, in_$i22: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i16: i32, out_$i19: i32, out_$i20: i1, out_$i8: i32, out_$i21: i32, out_$i22: i32);



implementation fb_edid_to_monspecs_loop_$bb27(in_$p1: ref, in_$p34: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i37: i32) returns (out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i37: i32)
{

  entry:
    out_$p38, out_$p39, out_$i40, out_$p42, out_$i43, out_$i44, out_$i45, out_$i47, out_$i48, out_$i49, out_$i37 := in_$p38, in_$p39, in_$i40, in_$p42, in_$i43, in_$i44, in_$i45, in_$i47, in_$i48, in_$i49, in_$i37;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_6602;

  $bb33:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i37 := out_$i47;
    goto $bb33_dummy;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    out_$i49 := $ult.i32(out_$i47, out_$i48);
    goto corral_source_split_6620;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, in_$p34);
    goto corral_source_split_6619;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i37, 1);
    call {:si_unique_call 461} {:cexpr "i"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_6618;

  $bb30:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_6611;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    out_$i44 := $and.i32(out_$i43, 1);
    goto corral_source_split_6610;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, out_$p42);
    goto corral_source_split_6609;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p39, $mul.ref(out_$i40, 64)), $mul.ref(56, 1));
    goto corral_source_split_6608;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    goto corral_source_split_6607;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i32.i64(out_$i37);
    goto corral_source_split_6606;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_6605;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(32, 1));
    goto corral_source_split_6604;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb33_dummy:
    call {:si_unique_call 1} out_$p38, out_$p39, out_$i40, out_$p42, out_$i43, out_$i44, out_$i45, out_$i47, out_$i48, out_$i49, out_$i37 := fb_edid_to_monspecs_loop_$bb27(in_$p1, in_$p34, out_$p38, out_$p39, out_$i40, out_$p42, out_$i43, out_$i44, out_$i45, out_$i47, out_$i48, out_$i49, out_$i37);
    return;

  exit:
    return;
}



procedure fb_edid_to_monspecs_loop_$bb27(in_$p1: ref, in_$p34: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i37: i32) returns (out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i37: i32);



implementation copy_string_loop_$bb12(in_$i20: i32, in_$i21: i1, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$i22: i8, in_$i23: i32, in_$i24: i1) returns (out_$i20: i32, out_$i21: i1, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$i22: i8, out_$i23: i32, out_$i24: i1)
{

  entry:
    out_$i20, out_$i21, out_$i17, out_$p18, out_$p19, out_$i22, out_$i23, out_$i24 := in_$i20, in_$i21, in_$i17, in_$p18, in_$p19, in_$i22, in_$i23, in_$i24;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6817;

  $bb14:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i17, out_$p18 := out_$i20, out_$p19;
    goto $bb14_dummy;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i17, 0);
    goto corral_source_split_6825;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    out_$i20 := $sub.i32(out_$i17, 1);
    call {:si_unique_call 480} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_6824;

  $bb13:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p19, 0);
    goto corral_source_split_6823;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16:
    assume out_$i24 == 1;
    goto corral_source_split_6829;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, 32);
    goto corral_source_split_6821;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i8.i32(out_$i22);
    goto corral_source_split_6820;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i8($M.0, out_$p19);
    goto corral_source_split_6819;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p18, $mul.ref($sub.ref(0, 1), 1));
    goto corral_source_split_6818;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$i17, out_$p18, out_$p19, out_$i22, out_$i23, out_$i24 := copy_string_loop_$bb12(out_$i20, out_$i21, out_$i17, out_$p18, out_$p19, out_$i22, out_$i23, out_$i24);
    return;

  exit:
    return;
}



procedure copy_string_loop_$bb12(in_$i20: i32, in_$i21: i1, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$i22: i8, in_$i23: i32, in_$i24: i1) returns (out_$i20: i32, out_$i21: i1, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$i22: i8, out_$i23: i32, out_$i24: i1);
  modifies $M.0;



implementation {:SIextraRecBound 4} fb_create_modedb_loop_$bb31(in_$p2: ref, in_$p4: ref, in_$i19: i32, in_$i22: i32, in_$i59: i8, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$i63: i8, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i67: i8, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i64, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i32, in_$p77: ref, in_$i78: i1, in_$i55: i32, in_$i56: i32, in_$p58: ref, in_$i79: i32) returns (out_$i59: i8, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$i63: i8, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i67: i8, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i64, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i76: i32, out_$p77: ref, out_$i78: i1, out_$i55: i32, out_$i56: i32, out_$p58: ref, out_$i79: i32)
{

  entry:
    out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i55, out_$i56, out_$p58, out_$i79 := in_$i59, in_$i60, in_$i61, in_$p62, in_$i63, in_$i64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i69, in_$p70, in_$i71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$p77, in_$i78, in_$i55, in_$i56, in_$p58, in_$i79;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7290;

  $bb41:
    assume out_$i78 == 1;
    assume {:verifier.code 0} true;
    out_$i55, out_$i56, out_$p58 := out_$i76, out_$i75, out_$p77;
    goto $bb41_dummy;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    out_$i79 := out_$i75;
    assume true;
    goto $bb41;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    out_$i78 := $sle.i32(out_$i76, 3);
    goto corral_source_split_7318;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref(out_$p58, $mul.ref(18, 1));
    goto corral_source_split_7317;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    out_$i76 := $add.i32(out_$i55, 1);
    call {:si_unique_call 510} {:cexpr "i"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_7316;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_7315;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i75 := out_$i56;
    goto $bb40;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    out_$i75 := out_$i74;
    goto $bb40;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i32(out_$i73, out_$i56);
    call {:si_unique_call 509} {:cexpr "num"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_7313;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} out_$i73 := get_dst_timing(out_$p70, out_$p72, in_$i19, in_$i22, in_$p2);
    call {:si_unique_call 508} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_7312;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(in_$p4, $mul.ref(out_$i71, 64));
    goto corral_source_split_7311;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i56);
    goto corral_source_split_7310;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref(out_$p58, $mul.ref(5, 1));
    goto corral_source_split_7309;

  $bb38:
    assume out_$i69 == 1;
    goto corral_source_split_7308;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 250);
    goto corral_source_split_7306;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i8.i32(out_$i67);
    goto corral_source_split_7305;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i8($M.0, out_$p66);
    goto corral_source_split_7304;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(out_$p58, $mul.ref(3, 1));
    goto corral_source_split_7303;

  $bb36:
    assume out_$i65 == 1;
    goto corral_source_split_7302;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 0);
    goto corral_source_split_7300;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i8.i32(out_$i63);
    goto corral_source_split_7299;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i8($M.0, out_$p62);
    goto corral_source_split_7298;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref(out_$p58, $mul.ref(1, 1));
    goto corral_source_split_7297;

  $bb33:
    assume out_$i61 == 1;
    goto corral_source_split_7296;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, 0);
    goto corral_source_split_7294;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i8.i32(out_$i59);
    goto corral_source_split_7293;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i8($M.0, out_$p58);
    goto corral_source_split_7292;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(out_$i61 == 1);
    goto $bb35;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i65 == 1);
    goto $bb35;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i69 == 1);
    goto $bb35;

  $bb41_dummy:
    call {:si_unique_call 1} out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i55, out_$i56, out_$p58, out_$i79 := fb_create_modedb_loop_$bb31(in_$p2, in_$p4, in_$i19, in_$i22, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i55, out_$i56, out_$p58, out_$i79);
    return;

  exit:
    return;
}



procedure fb_create_modedb_loop_$bb31(in_$p2: ref, in_$p4: ref, in_$i19: i32, in_$i22: i32, in_$i59: i8, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$i63: i8, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i67: i8, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i64, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i32, in_$p77: ref, in_$i78: i1, in_$i55: i32, in_$i56: i32, in_$p58: ref, in_$i79: i32) returns (out_$i59: i8, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$i63: i8, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i67: i8, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i64, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i76: i32, out_$p77: ref, out_$i78: i1, out_$i55: i32, out_$i56: i32, out_$p58: ref, out_$i79: i32);
  modifies $M.0, $CurrAddr;



implementation fb_get_monitor_limits_loop_$bb19(in_$p1: ref, in_$p2: ref, in_$p45: ref, in_$i52: i64, in_$i54: i64, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$p60: ref, in_$i61: i32, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$p71: ref, in_$i72: i32, in_$p73: ref, in_$i74: i32, in_$i75: i32, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$p82: ref, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i32, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$p103: ref, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i32, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$i111: i32, in_$i112: i1, in_$p113: ref, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$p124: ref, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$p131: ref, in_$i132: i16, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i136: i16, in_$i137: i32, in_$i138: i1, in_$i139: i16, in_$p140: ref, in_$p141: ref, in_$i142: i16, in_$i143: i32, in_$i144: i1, in_$p145: ref, in_$i146: i16, in_$i147: i32, in_$i148: i1, in_$i149: i16, in_$p150: ref, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$i51: i32) returns (out_$i52: i64, out_$i54: i64, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$p60: ref, out_$i61: i32, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$p71: ref, out_$i72: i32, out_$p73: ref, out_$i74: i32, out_$i75: i32, out_$p76: ref, out_$i77: i32, out_$i78: i32, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$p82: ref, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i32, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$p103: ref, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i32, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$i111: i32, out_$i112: i1, out_$p113: ref, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$p124: ref, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$p131: ref, out_$i132: i16, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i136: i16, out_$i137: i32, out_$i138: i1, out_$i139: i16, out_$p140: ref, out_$p141: ref, out_$i142: i16, out_$i143: i32, out_$i144: i1, out_$p145: ref, out_$i146: i16, out_$i147: i32, out_$i148: i1, out_$i149: i16, out_$p150: ref, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$i51: i32)
{

  entry:
    out_$i52, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$p141, out_$i142, out_$i143, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i51 := in_$i52, in_$i54, in_$p56, in_$i57, in_$i58, in_$i59, in_$p60, in_$i61, in_$p62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$p71, in_$i72, in_$p73, in_$i74, in_$i75, in_$p76, in_$i77, in_$i78, in_$p79, in_$i80, in_$i81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$p88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$p103, in_$i104, in_$i105, in_$p106, in_$i107, in_$i108, in_$p109, in_$p110, in_$i111, in_$i112, in_$p113, in_$i114, in_$i115, in_$p116, in_$p117, in_$i118, in_$i119, in_$p120, in_$i121, in_$i122, in_$p123, in_$p124, in_$i125, in_$i126, in_$p127, in_$i128, in_$i129, in_$p130, in_$p131, in_$i132, in_$i133, in_$i134, in_$p135, in_$i136, in_$i137, in_$i138, in_$i139, in_$p140, in_$p141, in_$i142, in_$i143, in_$i144, in_$p145, in_$i146, in_$i147, in_$i148, in_$i149, in_$p150, in_$i151, in_$i152, in_$i153, in_$i51;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_9357;

  $bb63:
    assume out_$i153 == 1;
    assume {:verifier.code 0} true;
    out_$i51 := out_$i151;
    goto $bb63_dummy;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    out_$i153 := $slt.i32(out_$i151, out_$i152);
    goto corral_source_split_9496;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i32($M.55, in_$p2);
    goto corral_source_split_9495;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i151 := $add.i32(out_$i51, 1);
    call {:si_unique_call 657} {:cexpr "i"} boogie_si_record_i32(out_$i151);
    goto corral_source_split_9494;

  $bb61:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p150, out_$i149);
    goto corral_source_split_9486;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(130, 1));
    goto corral_source_split_9485;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i149 := $trunc.i32.i16(out_$i102);
    goto corral_source_split_9484;

  $bb60:
    assume {:verifier.code 0} true;
    assume out_$i148 == 1;
    goto $bb58;

  $bb57:
    assume {:verifier.code 0} true;
    assume out_$i144 == 1;
    goto $bb58;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb59;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    out_$i144 := $eq.i32(out_$i143, 0);
    goto corral_source_split_9482;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    out_$i143 := $zext.i16.i32(out_$i142);
    goto corral_source_split_9481;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    out_$i142 := $load.i16($M.0, out_$p141);
    goto corral_source_split_9480;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(130, 1));
    goto corral_source_split_9479;

  $bb55:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p140, out_$i139);
    goto corral_source_split_9471;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(132, 1));
    goto corral_source_split_9470;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i139 := $trunc.i32.i16(out_$i102);
    goto corral_source_split_9469;

  $bb54:
    assume {:verifier.code 0} true;
    assume out_$i138 == 1;
    goto $bb52;

  $bb51:
    assume {:verifier.code 0} true;
    assume out_$i134 == 1;
    goto $bb52;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb53;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    out_$i134 := $eq.i32(out_$i133, 0);
    goto corral_source_split_9467;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    out_$i133 := $zext.i16.i32(out_$i132);
    goto corral_source_split_9466;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    out_$i132 := $load.i16($M.0, out_$p131);
    goto corral_source_split_9465;

  $bb50:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(132, 1));
    goto corral_source_split_9464;

  $bb49:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p130, out_$i99);
    goto corral_source_split_9457;

  $bb46:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(108, 1));
    goto corral_source_split_9456;

  $bb48:
    assume {:verifier.code 0} true;
    assume out_$i129 == 1;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    assume out_$i126 == 1;
    goto $bb46;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb47;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i125, 0);
    goto corral_source_split_9454;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i32($M.0, out_$p124);
    goto corral_source_split_9453;

  $bb44:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(108, 1));
    goto corral_source_split_9452;

  $bb43:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p123, out_$i99);
    goto corral_source_split_9445;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_9444;

  $bb42:
    assume {:verifier.code 0} true;
    assume out_$i122 == 1;
    goto $bb40;

  $bb39:
    assume {:verifier.code 0} true;
    assume out_$i119 == 1;
    goto $bb40;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb41;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    out_$i119 := $eq.i32(out_$i118, 0);
    goto corral_source_split_9442;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i32($M.0, out_$p117);
    goto corral_source_split_9441;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_9440;

  $bb37:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p116, out_$i59);
    goto corral_source_split_9433;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(116, 1));
    goto corral_source_split_9432;

  $bb36:
    assume {:verifier.code 0} true;
    assume out_$i115 == 1;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    assume out_$i112 == 1;
    goto $bb34;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb35;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    out_$i112 := $eq.i32(out_$i111, 0);
    goto corral_source_split_9430;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i32($M.0, out_$p110);
    goto corral_source_split_9429;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(116, 1));
    goto corral_source_split_9428;

  $bb31:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p109, out_$i59);
    goto corral_source_split_9421;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(120, 1));
    goto corral_source_split_9420;

  $bb30:
    assume {:verifier.code 0} true;
    assume out_$i108 == 1;
    goto $bb28;

  $bb27:
    assume {:verifier.code 0} true;
    assume out_$i105 == 1;
    goto $bb28;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb29;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i104, 0);
    goto corral_source_split_9418;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i32($M.0, out_$p103);
    goto corral_source_split_9417;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(120, 1));
    goto corral_source_split_9416;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    out_$i102 := $sdiv.i32(out_$i101, out_$i93);
    call {:si_unique_call 656} {:cexpr "hz"} boogie_si_record_i32(out_$i102);
    goto corral_source_split_9415;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    out_$i101 := $add.i32(out_$i100, out_$i99);
    goto corral_source_split_9414;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    out_$i100 := $sdiv.i32(out_$i93, 2);
    goto corral_source_split_9413;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    out_$i99 := $mul.i32(out_$i98, 1000);
    call {:si_unique_call 655} {:cexpr "hscan"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_9412;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    out_$i98 := $sdiv.i32(out_$i97, 1000);
    goto corral_source_split_9411;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    out_$i97 := $add.i32(out_$i96, 500);
    goto corral_source_split_9410;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    out_$i96 := $sdiv.i32(out_$i95, out_$i70);
    call {:si_unique_call 654} {:cexpr "hscan"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_9409;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    out_$i95 := $add.i32(out_$i94, out_$i59);
    goto corral_source_split_9408;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    out_$i94 := $sdiv.i32(out_$i70, 2);
    goto corral_source_split_9407;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_9406;

  $bb25:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    out_$i93 := out_$i87;
    goto $bb26;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    out_$i93 := out_$i92;
    goto $bb26;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    out_$i92 := $mul.i32(out_$i87, 2);
    call {:si_unique_call 653} {:cexpr "vtotal"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_9404;

  $bb24:
    assume out_$i91 == 1;
    goto corral_source_split_9403;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    out_$i91 := $ne.i32(out_$i90, 0);
    goto corral_source_split_9401;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    out_$i90 := $and.i32(out_$i89, 2);
    goto corral_source_split_9400;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i32($M.0, out_$p88);
    goto corral_source_split_9399;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p45, $mul.ref(out_$i52, 64)), $mul.ref(52, 1));
    goto corral_source_split_9398;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_9397;

  $bb22:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    out_$i87 := out_$i81;
    goto $bb23;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    out_$i87 := out_$i86;
    goto $bb23;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    out_$i86 := $sdiv.i32(out_$i81, 2);
    call {:si_unique_call 652} {:cexpr "vtotal"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_9395;

  $bb21:
    assume out_$i85 == 1;
    goto corral_source_split_9394;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i32(out_$i84, 0);
    goto corral_source_split_9392;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    out_$i84 := $and.i32(out_$i83, 1);
    goto corral_source_split_9391;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i32($M.0, out_$p82);
    goto corral_source_split_9390;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p45, $mul.ref(out_$i52, 64)), $mul.ref(52, 1));
    goto corral_source_split_9389;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i32(out_$i78, out_$i80);
    call {:si_unique_call 651} {:cexpr "vtotal"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_9388;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.0, out_$p79);
    goto corral_source_split_9387;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p45, $mul.ref(out_$i52, 64)), $mul.ref(32, 1));
    goto corral_source_split_9386;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    out_$i78 := $add.i32(out_$i75, out_$i77);
    goto corral_source_split_9385;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i32($M.0, out_$p76);
    goto corral_source_split_9384;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p45, $mul.ref(out_$i52, 64)), $mul.ref(44, 1));
    goto corral_source_split_9383;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i72, out_$i74);
    goto corral_source_split_9382;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.0, out_$p73);
    goto corral_source_split_9381;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p45, $mul.ref(out_$i52, 64)), $mul.ref(36, 1));
    goto corral_source_split_9380;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i32($M.0, out_$p71);
    goto corral_source_split_9379;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p45, $mul.ref(out_$i52, 64)), $mul.ref(16, 1));
    goto corral_source_split_9378;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i67, out_$i69);
    call {:si_unique_call 650} {:cexpr "htotal"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_9377;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i32($M.0, out_$p68);
    goto corral_source_split_9376;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p45, $mul.ref(out_$i52, 64)), $mul.ref(24, 1));
    goto corral_source_split_9375;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i64, out_$i66);
    goto corral_source_split_9374;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, out_$p65);
    goto corral_source_split_9373;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p45, $mul.ref(out_$i52, 64)), $mul.ref(40, 1));
    goto corral_source_split_9372;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(out_$i61, out_$i63);
    goto corral_source_split_9371;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, out_$p62);
    goto corral_source_split_9370;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p45, $mul.ref(out_$i52, 64)), $mul.ref(28, 1));
    goto corral_source_split_9369;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p60);
    goto corral_source_split_9368;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p45, $mul.ref(out_$i52, 64)), $mul.ref(12, 1));
    goto corral_source_split_9367;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    out_$i59 := $mul.i32(out_$i58, 1000);
    call {:si_unique_call 649} {:cexpr "pixclock"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_9366;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    out_$i58 := $udiv.i32(1000000000, out_$i57);
    goto corral_source_split_9365;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p56);
    goto corral_source_split_9364;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p45, $mul.ref(out_$i54, 64)), $mul.ref(20, 1));
    goto corral_source_split_9363;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    goto corral_source_split_9362;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i51);
    goto corral_source_split_9361;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    goto corral_source_split_9360;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i32.i64(out_$i51);
    goto corral_source_split_9359;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    out_$i108 := $ult.i32(out_$i107, out_$i59);
    goto corral_source_split_9426;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i32($M.0, out_$p106);
    goto corral_source_split_9425;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(120, 1));
    goto corral_source_split_9424;

  $bb29:
    assume !(out_$i105 == 1);
    goto corral_source_split_9423;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    out_$i115 := $ugt.i32(out_$i114, out_$i59);
    goto corral_source_split_9438;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i32($M.0, out_$p113);
    goto corral_source_split_9437;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(116, 1));
    goto corral_source_split_9436;

  $bb35:
    assume !(out_$i112 == 1);
    goto corral_source_split_9435;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    out_$i122 := $ult.i32(out_$i121, out_$i99);
    goto corral_source_split_9450;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i32($M.0, out_$p120);
    goto corral_source_split_9449;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_9448;

  $bb41:
    assume !(out_$i119 == 1);
    goto corral_source_split_9447;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    out_$i129 := $ugt.i32(out_$i128, out_$i99);
    goto corral_source_split_9462;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    out_$i128 := $load.i32($M.0, out_$p127);
    goto corral_source_split_9461;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(108, 1));
    goto corral_source_split_9460;

  $bb47:
    assume !(out_$i126 == 1);
    goto corral_source_split_9459;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    out_$i138 := $slt.i32(out_$i137, out_$i102);
    goto corral_source_split_9477;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    out_$i137 := $zext.i16.i32(out_$i136);
    goto corral_source_split_9476;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i16($M.0, out_$p135);
    goto corral_source_split_9475;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(132, 1));
    goto corral_source_split_9474;

  $bb53:
    assume !(out_$i134 == 1);
    goto corral_source_split_9473;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    out_$i148 := $sgt.i32(out_$i147, out_$i102);
    goto corral_source_split_9492;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    out_$i147 := $zext.i16.i32(out_$i146);
    goto corral_source_split_9491;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    out_$i146 := $load.i16($M.0, out_$p145);
    goto corral_source_split_9490;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(130, 1));
    goto corral_source_split_9489;

  $bb59:
    assume !(out_$i144 == 1);
    goto corral_source_split_9488;

  $bb63_dummy:
    call {:si_unique_call 1} out_$i52, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$p141, out_$i142, out_$i143, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i51 := fb_get_monitor_limits_loop_$bb19(in_$p1, in_$p2, in_$p45, out_$i52, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$p141, out_$i142, out_$i143, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i51);
    return;

  exit:
    return;
}



procedure fb_get_monitor_limits_loop_$bb19(in_$p1: ref, in_$p2: ref, in_$p45: ref, in_$i52: i64, in_$i54: i64, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$p60: ref, in_$i61: i32, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$p71: ref, in_$i72: i32, in_$p73: ref, in_$i74: i32, in_$i75: i32, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$p82: ref, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i32, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$p103: ref, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i32, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$i111: i32, in_$i112: i1, in_$p113: ref, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$p124: ref, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$p131: ref, in_$i132: i16, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i136: i16, in_$i137: i32, in_$i138: i1, in_$i139: i16, in_$p140: ref, in_$p141: ref, in_$i142: i16, in_$i143: i32, in_$i144: i1, in_$p145: ref, in_$i146: i16, in_$i147: i32, in_$i148: i1, in_$i149: i16, in_$p150: ref, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$i51: i32) returns (out_$i52: i64, out_$i54: i64, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$p60: ref, out_$i61: i32, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$p71: ref, out_$i72: i32, out_$p73: ref, out_$i74: i32, out_$i75: i32, out_$p76: ref, out_$i77: i32, out_$i78: i32, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$p82: ref, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i32, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$p103: ref, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i32, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$i111: i32, out_$i112: i1, out_$p113: ref, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$p124: ref, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$p131: ref, out_$i132: i16, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i136: i16, out_$i137: i32, out_$i138: i1, out_$i139: i16, out_$p140: ref, out_$p141: ref, out_$i142: i16, out_$i143: i32, out_$i144: i1, out_$p145: ref, out_$i146: i16, out_$i147: i32, out_$i148: i1, out_$i149: i16, out_$p150: ref, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$i51: i32);
  modifies $M.0;



implementation fb_edid_add_monspecs_loop_$bb89(in_$p1: ref, in_$p2: ref, in_$p7: ref, in_$i161: i32, in_$p205: ref, in_$p279: ref, in_$i282: i32, in_$p286: ref, in_$i287: i32, in_$i288: i32, in_$i289: i32, in_$i290: i64, in_$p291: ref, in_$i292: i8, in_$i293: i32, in_$i294: i1, in_$i295: i1, in_$i297: i1, in_$i298: i64, in_$p300: ref, in_$i301: i32, in_$i302: i1, in_$p304: ref, in_$i305: i64, in_$p306: ref, in_$i307: i64, in_$p308: ref, in_$p309: ref, in_$p310: ref, in_$p311: ref, in_$p312: ref, in_$p313: ref, in_$p314: ref, in_$i315: i24, in_$i316: i24, in_$i317: i24, in_$p318: ref, in_$p319: ref, in_$i320: i8, in_$i321: i64, in_$i322: i64, in_$i323: i64, in_$i324: i1, in_$i325: i64, in_$p327: ref, in_$i328: i32, in_$i329: i64, in_$p331: ref, in_$i332: i32, in_$i333: i64, in_$p335: ref, in_$i336: i32, in_$i337: i32, in_$i338: i32, in_$i339: i32, in_$i340: i32, in_$i341: i1, in_$i285: i32, in_cmdloc_dummy_var_83: [ref]i8, in_cmdloc_dummy_var_84: [ref]i8, in_cmdloc_dummy_var_85: [ref]i8, in_vslice_dummy_var_153: i32, in_vslice_dummy_var_154: i32) returns (out_$p286: ref, out_$i287: i32, out_$i288: i32, out_$i289: i32, out_$i290: i64, out_$p291: ref, out_$i292: i8, out_$i293: i32, out_$i294: i1, out_$i295: i1, out_$i297: i1, out_$i298: i64, out_$p300: ref, out_$i301: i32, out_$i302: i1, out_$p304: ref, out_$i305: i64, out_$p306: ref, out_$i307: i64, out_$p308: ref, out_$p309: ref, out_$p310: ref, out_$p311: ref, out_$p312: ref, out_$p313: ref, out_$p314: ref, out_$i315: i24, out_$i316: i24, out_$i317: i24, out_$p318: ref, out_$p319: ref, out_$i320: i8, out_$i321: i64, out_$i322: i64, out_$i323: i64, out_$i324: i1, out_$i325: i64, out_$p327: ref, out_$i328: i32, out_$i329: i64, out_$p331: ref, out_$i332: i32, out_$i333: i64, out_$p335: ref, out_$i336: i32, out_$i337: i32, out_$i338: i32, out_$i339: i32, out_$i340: i32, out_$i341: i1, out_$i285: i32, out_cmdloc_dummy_var_83: [ref]i8, out_cmdloc_dummy_var_84: [ref]i8, out_cmdloc_dummy_var_85: [ref]i8, out_vslice_dummy_var_153: i32, out_vslice_dummy_var_154: i32)
{

  entry:
    out_$p286, out_$i287, out_$i288, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i297, out_$i298, out_$p300, out_$i301, out_$i302, out_$p304, out_$i305, out_$p306, out_$i307, out_$p308, out_$p309, out_$p310, out_$p311, out_$p312, out_$p313, out_$p314, out_$i315, out_$i316, out_$i317, out_$p318, out_$p319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$p327, out_$i328, out_$i329, out_$p331, out_$i332, out_$i333, out_$p335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i285, out_cmdloc_dummy_var_83, out_cmdloc_dummy_var_84, out_cmdloc_dummy_var_85, out_vslice_dummy_var_153, out_vslice_dummy_var_154 := in_$p286, in_$i287, in_$i288, in_$i289, in_$i290, in_$p291, in_$i292, in_$i293, in_$i294, in_$i295, in_$i297, in_$i298, in_$p300, in_$i301, in_$i302, in_$p304, in_$i305, in_$p306, in_$i307, in_$p308, in_$p309, in_$p310, in_$p311, in_$p312, in_$p313, in_$p314, in_$i315, in_$i316, in_$i317, in_$p318, in_$p319, in_$i320, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$p327, in_$i328, in_$i329, in_$p331, in_$i332, in_$i333, in_$p335, in_$i336, in_$i337, in_$i338, in_$i339, in_$i340, in_$i341, in_$i285, in_cmdloc_dummy_var_83, in_cmdloc_dummy_var_84, in_cmdloc_dummy_var_85, in_vslice_dummy_var_153, in_vslice_dummy_var_154;
    goto $bb89, exit;

  $bb89:
    assume {:verifier.code 0} true;
    goto corral_source_split_10051;

  $bb106:
    assume out_$i341 == 1;
    assume {:verifier.code 0} true;
    out_$i285 := out_$i337;
    goto $bb106_dummy;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    out_$i341 := $ult.i32(out_$i337, out_$i340);
    goto corral_source_split_10075;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    out_$i340 := $add.i32(out_$i339, in_$i282);
    goto corral_source_split_10074;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    out_$i339 := $add.i32(out_$i338, in_$i161);
    goto corral_source_split_10073;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    out_$i338 := $load.i32($M.0, in_$p279);
    goto corral_source_split_10072;

  $bb96:
    assume {:verifier.code 0} true;
    out_$i337 := $add.i32(out_$i285, 1);
    call {:si_unique_call 721} {:cexpr "i"} boogie_si_record_i32(out_$i337);
    goto corral_source_split_10071;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} out_vslice_dummy_var_153 := printk.ref.i32(.str.9, out_$i293);
    goto corral_source_split_10063;

  $bb94:
    assume {:verifier.code 0} true;
    assume out_$i295 == 1;
    goto $bb92;

  $bb91:
    assume {:verifier.code 0} true;
    assume out_$i294 == 1;
    goto $bb92;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb93;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    out_$i294 := $eq.i32(out_$i293, 0);
    goto corral_source_split_10061;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    out_$i293 := $zext.i8.i32(out_$i292);
    call {:si_unique_call 719} {:cexpr "idx___0"} boogie_si_record_i32(out_$i293);
    goto corral_source_split_10060;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    out_$i292 := $load.i8($M.56, out_$p291);
    goto corral_source_split_10059;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    out_$p291 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i290, 1));
    goto corral_source_split_10058;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    out_$i290 := $zext.i32.i64(out_$i289);
    goto corral_source_split_10057;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    out_$i289 := $sub.i32(out_$i288, in_$i161);
    goto corral_source_split_10056;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    out_$i288 := $sub.i32(out_$i285, out_$i287);
    goto corral_source_split_10055;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    out_$i287 := $load.i32($M.0, out_$p286);
    goto corral_source_split_10054;

  $bb90:
    assume {:verifier.code 0} true;
    out_$p286 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_10053;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    out_$i295 := $sgt.i32(out_$i293, 63);
    goto corral_source_split_10066;

  $bb93:
    assume !(out_$i294 == 1);
    goto corral_source_split_10065;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} out_vslice_dummy_var_154 := printk.ref.i32(.str.10, out_$i293);
    goto corral_source_split_10077;

  $bb100:
    assume {:verifier.code 0} true;
    assume out_$i302 == 1;
    goto $bb98;

  $bb97:
    assume {:verifier.code 0} true;
    assume out_$i297 == 1;
    goto $bb98;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb99;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    out_$i297 := $ugt.i32(out_$i293, 64);
    goto corral_source_split_10069;

  $bb95:
    assume !(out_$i295 == 1);
    goto corral_source_split_10068;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    out_$i302 := $eq.i32(out_$i301, 0);
    goto corral_source_split_10083;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    out_$i301 := $load.i32($M.0, out_$p300);
    goto corral_source_split_10082;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    out_$p300 := $add.ref($add.ref($add.ref(cea_modes, $mul.ref(0, 4096)), $mul.ref(out_$i298, 64)), $mul.ref(12, 1));
    goto corral_source_split_10081;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    out_$i298 := $sext.i32.i64(out_$i293);
    goto corral_source_split_10080;

  $bb99:
    assume !(out_$i297 == 1);
    goto corral_source_split_10079;

  $bb104:
    assume !(out_$i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} __dynamic_pr_debug.ref.ref.i32.i32.i32.i32(in_$p7, .str.11, out_$i293, out_$i328, out_$i332, out_$i336);
    goto corral_source_split_10128;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    out_$i336 := $load.i32($M.0, out_$p335);
    goto corral_source_split_10127;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    out_$p335 := $add.ref($add.ref(in_$p205, $mul.ref(out_$i333, 64)), $mul.ref(8, 1));
    goto corral_source_split_10126;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    goto corral_source_split_10125;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    out_$i333 := $sext.i32.i64(out_$i285);
    goto corral_source_split_10124;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    out_$i332 := $load.i32($M.0, out_$p331);
    goto corral_source_split_10123;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    out_$p331 := $add.ref($add.ref(in_$p205, $mul.ref(out_$i329, 64)), $mul.ref(16, 1));
    goto corral_source_split_10122;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    goto corral_source_split_10121;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    out_$i329 := $sext.i32.i64(out_$i285);
    goto corral_source_split_10120;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    out_$i328 := $load.i32($M.0, out_$p327);
    goto corral_source_split_10119;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    out_$p327 := $add.ref($add.ref(in_$p205, $mul.ref(out_$i325, 64)), $mul.ref(12, 1));
    goto corral_source_split_10118;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    goto corral_source_split_10117;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    out_$i325 := $sext.i32.i64(out_$i285);
    goto corral_source_split_10116;

  $bb103:
    assume out_$i324 == 1;
    goto corral_source_split_10115;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    out_$i324 := $ne.i64(out_$i323, 0);
    goto corral_source_split_10113;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} out_$i323 := ldv__builtin_expect(out_$i322, 0);
    call {:si_unique_call 725} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i323);
    goto corral_source_split_10112;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    out_$i322 := $and.i64(out_$i321, 1);
    goto corral_source_split_10111;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    out_$i321 := $zext.i8.i64(out_$i320);
    goto corral_source_split_10110;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    out_$i320 := $load.i8($M.28, out_$p319);
    goto corral_source_split_10109;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    out_$p319 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10108;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, out_$p318, 0);
    goto corral_source_split_10107;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    out_$p318 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10106;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, out_$p314, out_$i317);
    goto corral_source_split_10105;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    out_$i317 := $or.i24(out_$i316, 1082);
    goto corral_source_split_10104;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    out_$i316 := $and.i24(out_$i315, $sub.i24(0, 262144));
    goto corral_source_split_10103;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    out_$i315 := $load.i24($M.27, out_$p314);
    goto corral_source_split_10102;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    out_$p314 := $bitcast.ref.ref(out_$p313);
    goto corral_source_split_10101;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    out_$p313 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10100;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, out_$p312, .str.11);
    goto corral_source_split_10099;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    out_$p312 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10098;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, out_$p311, .str.3);
    goto corral_source_split_10097;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    out_$p311 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10096;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, out_$p310, .str.2);
    goto corral_source_split_10095;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    out_$p310 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10094;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, out_$p309, .str.1);
    goto corral_source_split_10093;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    out_$p309 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10092;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_83 := $M.0;
    out_cmdloc_dummy_var_84 := $M.0;
    call {:si_unique_call 723} out_cmdloc_dummy_var_85 := $memcpy.i8(out_cmdloc_dummy_var_83, out_cmdloc_dummy_var_84, out_$p306, out_$p308, 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_85;
    goto corral_source_split_10091;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    out_$p308 := $add.ref(cea_modes, $mul.ref(out_$i307, 1));
    goto corral_source_split_10090;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    out_$i307 := $sext.i32.i64(out_$i293);
    goto corral_source_split_10089;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    out_$p306 := $add.ref(out_$p304, $mul.ref(out_$i305, 1));
    goto corral_source_split_10088;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    out_$i305 := $sext.i32.i64(out_$i285);
    goto corral_source_split_10087;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    out_$p304 := $bitcast.ref.ref(in_$p205);
    goto corral_source_split_10086;

  $bb101:
    assume !(out_$i302 == 1);
    goto corral_source_split_10085;

  $bb106_dummy:
    call {:si_unique_call 1} out_$p286, out_$i287, out_$i288, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i297, out_$i298, out_$p300, out_$i301, out_$i302, out_$p304, out_$i305, out_$p306, out_$i307, out_$p308, out_$p309, out_$p310, out_$p311, out_$p312, out_$p313, out_$p314, out_$i315, out_$i316, out_$i317, out_$p318, out_$p319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$p327, out_$i328, out_$i329, out_$p331, out_$i332, out_$i333, out_$p335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i285, out_cmdloc_dummy_var_83, out_cmdloc_dummy_var_84, out_cmdloc_dummy_var_85, out_vslice_dummy_var_153, out_vslice_dummy_var_154 := fb_edid_add_monspecs_loop_$bb89(in_$p1, in_$p2, in_$p7, in_$i161, in_$p205, in_$p279, in_$i282, out_$p286, out_$i287, out_$i288, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i297, out_$i298, out_$p300, out_$i301, out_$i302, out_$p304, out_$i305, out_$p306, out_$i307, out_$p308, out_$p309, out_$p310, out_$p311, out_$p312, out_$p313, out_$p314, out_$i315, out_$i316, out_$i317, out_$p318, out_$p319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$p327, out_$i328, out_$i329, out_$p331, out_$i332, out_$i333, out_$p335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i285, out_cmdloc_dummy_var_83, out_cmdloc_dummy_var_84, out_cmdloc_dummy_var_85, out_vslice_dummy_var_153, out_vslice_dummy_var_154);
    return;

  exit:
    return;
}



procedure fb_edid_add_monspecs_loop_$bb89(in_$p1: ref, in_$p2: ref, in_$p7: ref, in_$i161: i32, in_$p205: ref, in_$p279: ref, in_$i282: i32, in_$p286: ref, in_$i287: i32, in_$i288: i32, in_$i289: i32, in_$i290: i64, in_$p291: ref, in_$i292: i8, in_$i293: i32, in_$i294: i1, in_$i295: i1, in_$i297: i1, in_$i298: i64, in_$p300: ref, in_$i301: i32, in_$i302: i1, in_$p304: ref, in_$i305: i64, in_$p306: ref, in_$i307: i64, in_$p308: ref, in_$p309: ref, in_$p310: ref, in_$p311: ref, in_$p312: ref, in_$p313: ref, in_$p314: ref, in_$i315: i24, in_$i316: i24, in_$i317: i24, in_$p318: ref, in_$p319: ref, in_$i320: i8, in_$i321: i64, in_$i322: i64, in_$i323: i64, in_$i324: i1, in_$i325: i64, in_$p327: ref, in_$i328: i32, in_$i329: i64, in_$p331: ref, in_$i332: i32, in_$i333: i64, in_$p335: ref, in_$i336: i32, in_$i337: i32, in_$i338: i32, in_$i339: i32, in_$i340: i32, in_$i341: i1, in_$i285: i32, in_cmdloc_dummy_var_83: [ref]i8, in_cmdloc_dummy_var_84: [ref]i8, in_cmdloc_dummy_var_85: [ref]i8, in_vslice_dummy_var_153: i32, in_vslice_dummy_var_154: i32) returns (out_$p286: ref, out_$i287: i32, out_$i288: i32, out_$i289: i32, out_$i290: i64, out_$p291: ref, out_$i292: i8, out_$i293: i32, out_$i294: i1, out_$i295: i1, out_$i297: i1, out_$i298: i64, out_$p300: ref, out_$i301: i32, out_$i302: i1, out_$p304: ref, out_$i305: i64, out_$p306: ref, out_$i307: i64, out_$p308: ref, out_$p309: ref, out_$p310: ref, out_$p311: ref, out_$p312: ref, out_$p313: ref, out_$p314: ref, out_$i315: i24, out_$i316: i24, out_$i317: i24, out_$p318: ref, out_$p319: ref, out_$i320: i8, out_$i321: i64, out_$i322: i64, out_$i323: i64, out_$i324: i1, out_$i325: i64, out_$p327: ref, out_$i328: i32, out_$i329: i64, out_$p331: ref, out_$i332: i32, out_$i333: i64, out_$p335: ref, out_$i336: i32, out_$i337: i32, out_$i338: i32, out_$i339: i32, out_$i340: i32, out_$i341: i1, out_$i285: i32, out_cmdloc_dummy_var_83: [ref]i8, out_cmdloc_dummy_var_84: [ref]i8, out_cmdloc_dummy_var_85: [ref]i8, out_vslice_dummy_var_153: i32, out_vslice_dummy_var_154: i32);
  modifies $M.28, $M.27, $M.26, $M.25, $M.24, $M.23, $M.0;



implementation fb_edid_add_monspecs_loop_$bb75(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p6: ref, in_$i161: i32, in_$p205: ref, in_$p218: ref, in_$p223: ref, in_$i224: i32, in_$i225: i32, in_$i226: i64, in_$p227: ref, in_$i228: i8, in_$i229: i64, in_$p230: ref, in_$i231: i64, in_$p232: ref, in_$p233: ref, in_$i234: i32, in_$i235: i1, in_$i236: i64, in_$p238: ref, in_$i239: i32, in_$i240: i32, in_$i241: i64, in_$p243: ref, in_$p244: ref, in_$p245: ref, in_$p246: ref, in_$p247: ref, in_$p248: ref, in_$p249: ref, in_$i250: i24, in_$i251: i24, in_$i252: i24, in_$p253: ref, in_$p254: ref, in_$i255: i8, in_$i256: i64, in_$i257: i64, in_$i258: i64, in_$i259: i1, in_$i260: i64, in_$p262: ref, in_$i263: i32, in_$i264: i64, in_$p266: ref, in_$i267: i32, in_$i268: i64, in_$p270: ref, in_$i271: i32, in_$i272: i32, in_$i273: i32, in_$i274: i32, in_$i275: i1, in_$i222: i32) returns (out_$p223: ref, out_$i224: i32, out_$i225: i32, out_$i226: i64, out_$p227: ref, out_$i228: i8, out_$i229: i64, out_$p230: ref, out_$i231: i64, out_$p232: ref, out_$p233: ref, out_$i234: i32, out_$i235: i1, out_$i236: i64, out_$p238: ref, out_$i239: i32, out_$i240: i32, out_$i241: i64, out_$p243: ref, out_$p244: ref, out_$p245: ref, out_$p246: ref, out_$p247: ref, out_$p248: ref, out_$p249: ref, out_$i250: i24, out_$i251: i24, out_$i252: i24, out_$p253: ref, out_$p254: ref, out_$i255: i8, out_$i256: i64, out_$i257: i64, out_$i258: i64, out_$i259: i1, out_$i260: i64, out_$p262: ref, out_$i263: i32, out_$i264: i64, out_$p266: ref, out_$i267: i32, out_$i268: i64, out_$p270: ref, out_$i271: i32, out_$i272: i32, out_$i273: i32, out_$i274: i32, out_$i275: i1, out_$i222: i32)
{

  entry:
    out_$p223, out_$i224, out_$i225, out_$i226, out_$p227, out_$i228, out_$i229, out_$p230, out_$i231, out_$p232, out_$p233, out_$i234, out_$i235, out_$i236, out_$p238, out_$i239, out_$i240, out_$i241, out_$p243, out_$p244, out_$p245, out_$p246, out_$p247, out_$p248, out_$p249, out_$i250, out_$i251, out_$i252, out_$p253, out_$p254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$p262, out_$i263, out_$i264, out_$p266, out_$i267, out_$i268, out_$p270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i222 := in_$p223, in_$i224, in_$i225, in_$i226, in_$p227, in_$i228, in_$i229, in_$p230, in_$i231, in_$p232, in_$p233, in_$i234, in_$i235, in_$i236, in_$p238, in_$i239, in_$i240, in_$i241, in_$p243, in_$p244, in_$p245, in_$p246, in_$p247, in_$p248, in_$p249, in_$i250, in_$i251, in_$i252, in_$p253, in_$p254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$p262, in_$i263, in_$i264, in_$p266, in_$i267, in_$i268, in_$p270, in_$i271, in_$i272, in_$i273, in_$i274, in_$i275, in_$i222;
    goto $bb75, exit;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_9966;

  $bb83:
    assume out_$i275 == 1;
    assume {:verifier.code 0} true;
    out_$i222 := out_$i272;
    goto $bb83_dummy;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    out_$i275 := $ult.i32(out_$i272, out_$i274);
    goto corral_source_split_10035;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    out_$i274 := $add.i32(out_$i273, in_$i161);
    goto corral_source_split_10034;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    out_$i273 := $load.i32($M.0, in_$p218);
    goto corral_source_split_10033;

  $bb82:
    assume {:verifier.code 0} true;
    out_$i272 := $add.i32(out_$i222, 1);
    call {:si_unique_call 717} {:cexpr "i"} boogie_si_record_i32(out_$i272);
    goto corral_source_split_10032;

  $bb81:
    assume !(out_$i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} __dynamic_pr_debug.ref.ref.i32.i32.i32(in_$p6, .str.8, out_$i263, out_$i267, out_$i271);
    goto corral_source_split_10030;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    out_$i271 := $load.i32($M.0, out_$p270);
    goto corral_source_split_10029;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    out_$p270 := $add.ref($add.ref(in_$p205, $mul.ref(out_$i268, 64)), $mul.ref(8, 1));
    goto corral_source_split_10028;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    goto corral_source_split_10027;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    out_$i268 := $sext.i32.i64(out_$i222);
    goto corral_source_split_10026;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    out_$i267 := $load.i32($M.0, out_$p266);
    goto corral_source_split_10025;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    out_$p266 := $add.ref($add.ref(in_$p205, $mul.ref(out_$i264, 64)), $mul.ref(16, 1));
    goto corral_source_split_10024;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    goto corral_source_split_10023;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    out_$i264 := $sext.i32.i64(out_$i222);
    goto corral_source_split_10022;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    out_$i263 := $load.i32($M.0, out_$p262);
    goto corral_source_split_10021;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    out_$p262 := $add.ref($add.ref(in_$p205, $mul.ref(out_$i260, 64)), $mul.ref(12, 1));
    goto corral_source_split_10020;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    goto corral_source_split_10019;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    out_$i260 := $sext.i32.i64(out_$i222);
    goto corral_source_split_10018;

  $bb80:
    assume out_$i259 == 1;
    goto corral_source_split_10017;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    out_$i259 := $ne.i64(out_$i258, 0);
    goto corral_source_split_10015;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} out_$i258 := ldv__builtin_expect(out_$i257, 0);
    call {:si_unique_call 715} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i258);
    goto corral_source_split_10014;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    out_$i257 := $and.i64(out_$i256, 1);
    goto corral_source_split_10013;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    out_$i256 := $zext.i8.i64(out_$i255);
    goto corral_source_split_10012;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    out_$i255 := $load.i8($M.28, out_$p254);
    goto corral_source_split_10011;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    out_$p254 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10010;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, out_$p253, 0);
    goto corral_source_split_10009;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    out_$p253 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10008;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, out_$p249, out_$i252);
    goto corral_source_split_10007;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    out_$i252 := $or.i24(out_$i251, 1070);
    goto corral_source_split_10006;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    out_$i251 := $and.i24(out_$i250, $sub.i24(0, 262144));
    goto corral_source_split_10005;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    out_$i250 := $load.i24($M.27, out_$p249);
    goto corral_source_split_10004;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    out_$p249 := $bitcast.ref.ref(out_$p248);
    goto corral_source_split_10003;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    out_$p248 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10002;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, out_$p247, .str.8);
    goto corral_source_split_10001;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    out_$p247 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10000;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, out_$p246, .str.3);
    goto corral_source_split_9999;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    out_$p246 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9998;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, out_$p245, .str.2);
    goto corral_source_split_9997;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    out_$p245 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9996;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, out_$p244, .str.1);
    goto corral_source_split_9995;

  $bb79:
    assume {:verifier.code 0} true;
    out_$p244 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9994;

  $bb78:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p243, out_$i240);
    goto corral_source_split_9992;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    out_$p243 := $add.ref($add.ref(in_$p205, $mul.ref(out_$i241, 64)), $mul.ref(56, 1));
    goto corral_source_split_9991;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    goto corral_source_split_9990;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    out_$i241 := $sext.i32.i64(out_$i222);
    goto corral_source_split_9989;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    out_$i240 := $or.i32(out_$i239, 16);
    goto corral_source_split_9988;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    out_$i239 := $load.i32($M.0, out_$p238);
    goto corral_source_split_9987;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    out_$p238 := $add.ref($add.ref(in_$p205, $mul.ref(out_$i236, 64)), $mul.ref(56, 1));
    goto corral_source_split_9986;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    goto corral_source_split_9985;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    out_$i236 := $sext.i32.i64(out_$i222);
    goto corral_source_split_9984;

  $bb77:
    assume out_$i235 == 1;
    goto corral_source_split_9983;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    out_$i235 := $eq.i32(out_$i222, out_$i234);
    goto corral_source_split_9981;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    out_$i234 := $load.i32($M.0, out_$p233);
    goto corral_source_split_9980;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    out_$p233 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_9979;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} get_detailed_timing(out_$p230, out_$p232);
    goto corral_source_split_9978;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    out_$p232 := $add.ref(in_$p205, $mul.ref(out_$i231, 64));
    goto corral_source_split_9977;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    out_$i231 := $sext.i32.i64(out_$i222);
    goto corral_source_split_9976;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    out_$p230 := $add.ref(in_$p0, $mul.ref(out_$i229, 1));
    goto corral_source_split_9975;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    out_$i229 := $zext.i8.i64(out_$i228);
    goto corral_source_split_9974;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    out_$i228 := $load.i8($M.57, out_$p227);
    goto corral_source_split_9973;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    out_$p227 := $add.ref($add.ref(in_$p3, $mul.ref(0, 6)), $mul.ref(out_$i226, 1));
    goto corral_source_split_9972;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    out_$i226 := $zext.i32.i64(out_$i225);
    goto corral_source_split_9971;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    out_$i225 := $sub.i32(out_$i222, out_$i224);
    goto corral_source_split_9970;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    out_$i224 := $load.i32($M.0, out_$p223);
    goto corral_source_split_9969;

  $bb76:
    assume {:verifier.code 0} true;
    out_$p223 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_9968;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb83_dummy:
    call {:si_unique_call 1} out_$p223, out_$i224, out_$i225, out_$i226, out_$p227, out_$i228, out_$i229, out_$p230, out_$i231, out_$p232, out_$p233, out_$i234, out_$i235, out_$i236, out_$p238, out_$i239, out_$i240, out_$i241, out_$p243, out_$p244, out_$p245, out_$p246, out_$p247, out_$p248, out_$p249, out_$i250, out_$i251, out_$i252, out_$p253, out_$p254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$p262, out_$i263, out_$i264, out_$p266, out_$i267, out_$i268, out_$p270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i222 := fb_edid_add_monspecs_loop_$bb75(in_$p0, in_$p1, in_$p3, in_$p6, in_$i161, in_$p205, in_$p218, out_$p223, out_$i224, out_$i225, out_$i226, out_$p227, out_$i228, out_$i229, out_$p230, out_$i231, out_$p232, out_$p233, out_$i234, out_$i235, out_$i236, out_$p238, out_$i239, out_$i240, out_$i241, out_$p243, out_$p244, out_$p245, out_$p246, out_$p247, out_$p248, out_$p249, out_$i250, out_$i251, out_$i252, out_$p253, out_$p254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$p262, out_$i263, out_$i264, out_$p266, out_$i267, out_$i268, out_$p270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i222);
    return;

  exit:
    return;
}



procedure fb_edid_add_monspecs_loop_$bb75(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p6: ref, in_$i161: i32, in_$p205: ref, in_$p218: ref, in_$p223: ref, in_$i224: i32, in_$i225: i32, in_$i226: i64, in_$p227: ref, in_$i228: i8, in_$i229: i64, in_$p230: ref, in_$i231: i64, in_$p232: ref, in_$p233: ref, in_$i234: i32, in_$i235: i1, in_$i236: i64, in_$p238: ref, in_$i239: i32, in_$i240: i32, in_$i241: i64, in_$p243: ref, in_$p244: ref, in_$p245: ref, in_$p246: ref, in_$p247: ref, in_$p248: ref, in_$p249: ref, in_$i250: i24, in_$i251: i24, in_$i252: i24, in_$p253: ref, in_$p254: ref, in_$i255: i8, in_$i256: i64, in_$i257: i64, in_$i258: i64, in_$i259: i1, in_$i260: i64, in_$p262: ref, in_$i263: i32, in_$i264: i64, in_$p266: ref, in_$i267: i32, in_$i268: i64, in_$p270: ref, in_$i271: i32, in_$i272: i32, in_$i273: i32, in_$i274: i32, in_$i275: i1, in_$i222: i32) returns (out_$p223: ref, out_$i224: i32, out_$i225: i32, out_$i226: i64, out_$p227: ref, out_$i228: i8, out_$i229: i64, out_$p230: ref, out_$i231: i64, out_$p232: ref, out_$p233: ref, out_$i234: i32, out_$i235: i1, out_$i236: i64, out_$p238: ref, out_$i239: i32, out_$i240: i32, out_$i241: i64, out_$p243: ref, out_$p244: ref, out_$p245: ref, out_$p246: ref, out_$p247: ref, out_$p248: ref, out_$p249: ref, out_$i250: i24, out_$i251: i24, out_$i252: i24, out_$p253: ref, out_$p254: ref, out_$i255: i8, out_$i256: i64, out_$i257: i64, out_$i258: i64, out_$i259: i1, out_$i260: i64, out_$p262: ref, out_$i263: i32, out_$i264: i64, out_$p266: ref, out_$i267: i32, out_$i268: i64, out_$p270: ref, out_$i271: i32, out_$i272: i32, out_$i273: i32, out_$i274: i32, out_$i275: i1, out_$i222: i32);
  modifies $M.28, $M.27, $M.26, $M.25, $M.24, $M.23, $M.0;



implementation fb_edid_add_monspecs_loop_$bb58(in_$p0: ref, in_$p3: ref, in_$p155: ref, in_$p165: ref, in_$i166: i8, in_$i167: i32, in_$i168: i32, in_$i169: i8, in_$i170: i32, in_$i171: i32, in_$i172: i32, in_$i173: i1, in_$i174: i32, in_$i175: i64, in_$i176: i8, in_$i177: i32, in_$i178: i64, in_$i179: i8, in_$i180: i32, in_$i181: i32, in_$i182: i8, in_$i183: i64, in_$p184: ref, in_$i185: i32, in_$i186: i32, in_$p187: ref, in_$i188: i8, in_$i189: i32, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$p162: ref, in_$i163: i32, in_$i164: i32, in_$i193: i32) returns (out_$p165: ref, out_$i166: i8, out_$i167: i32, out_$i168: i32, out_$i169: i8, out_$i170: i32, out_$i171: i32, out_$i172: i32, out_$i173: i1, out_$i174: i32, out_$i175: i64, out_$i176: i8, out_$i177: i32, out_$i178: i64, out_$i179: i8, out_$i180: i32, out_$i181: i32, out_$i182: i8, out_$i183: i64, out_$p184: ref, out_$i185: i32, out_$i186: i32, out_$p187: ref, out_$i188: i8, out_$i189: i32, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$p162: ref, out_$i163: i32, out_$i164: i32, out_$i193: i32)
{

  entry:
    out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$p184, out_$i185, out_$i186, out_$p187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$p162, out_$i163, out_$i164, out_$i193 := in_$p165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$p184, in_$i185, in_$i186, in_$p187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$p162, in_$i163, in_$i164, in_$i193;
    goto $bb58, exit;

  $bb58:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9891;

  $bb63:
    assume out_$i192 == 1;
    assume {:verifier.code 0} true;
    out_$p162, out_$i163, out_$i164 := out_$p187, out_$i186, out_$i185;
    goto $bb63_dummy;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    out_$i193 := out_$i185;
    assume true;
    goto $bb63;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    out_$i192 := $sgt.i32(out_$i191, out_$i186);
    goto corral_source_split_9924;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    out_$i191 := $sdiv.i32(out_$i190, 18);
    goto corral_source_split_9923;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    out_$i190 := $sub.i32(128, out_$i189);
    goto corral_source_split_9922;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    out_$i189 := $zext.i8.i32(out_$i188);
    goto corral_source_split_9921;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    out_$i188 := $load.i8($M.0, in_$p155);
    goto corral_source_split_9920;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref(out_$p162, $mul.ref(18, 1));
    goto corral_source_split_9919;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    out_$i186 := $add.i32(out_$i163, 1);
    call {:si_unique_call 709} {:cexpr "i"} boogie_si_record_i32(out_$i186);
    goto corral_source_split_9918;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_9917;

  $bb61:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    out_$i185 := out_$i164;
    goto $bb62;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    out_$i185 := out_$i174;
    goto $bb62;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    $M.57 := $store.i8($M.57, out_$p184, out_$i182);
    goto corral_source_split_9915;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    out_$p184 := $add.ref($add.ref(in_$p3, $mul.ref(0, 6)), $mul.ref(out_$i183, 1));
    goto corral_source_split_9914;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    out_$i183 := $sext.i32.i64(out_$i164);
    goto corral_source_split_9913;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    out_$i182 := $trunc.i32.i8(out_$i181);
    goto corral_source_split_9912;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    out_$i181 := $sub.i32(out_$i177, out_$i180);
    goto corral_source_split_9911;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    out_$i180 := $zext.i8.i32(out_$i179);
    goto corral_source_split_9910;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    out_$i179 := $trunc.i64.i8(out_$i178);
    goto corral_source_split_9909;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    out_$i178 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_9908;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    out_$i177 := $zext.i8.i32(out_$i176);
    goto corral_source_split_9907;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    out_$i176 := $trunc.i64.i8(out_$i175);
    goto corral_source_split_9906;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    out_$i175 := $p2i.ref.i64(out_$p162);
    goto corral_source_split_9905;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    out_$i174 := $add.i32(out_$i164, 1);
    call {:si_unique_call 708} {:cexpr "num"} boogie_si_record_i32(out_$i174);
    goto corral_source_split_9904;

  $bb60:
    assume out_$i173 == 1;
    goto corral_source_split_9903;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    out_$i173 := $ne.i32(out_$i172, 0);
    goto corral_source_split_9901;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    out_$i172 := $mul.i32(out_$i171, 10000);
    goto corral_source_split_9900;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    out_$i171 := $or.i32(out_$i168, out_$i170);
    goto corral_source_split_9899;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    out_$i170 := $zext.i8.i32(out_$i169);
    goto corral_source_split_9898;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    out_$i169 := $load.i8($M.0, out_$p162);
    goto corral_source_split_9897;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    out_$i168 := $shl.i32(out_$i167, 8);
    goto corral_source_split_9896;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    out_$i167 := $zext.i8.i32(out_$i166);
    goto corral_source_split_9895;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    out_$i166 := $load.i8($M.0, out_$p165);
    goto corral_source_split_9894;

  $bb59:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref(out_$p162, $mul.ref(1, 1));
    goto corral_source_split_9893;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb63_dummy:
    call {:si_unique_call 1} out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$p184, out_$i185, out_$i186, out_$p187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$p162, out_$i163, out_$i164, out_$i193 := fb_edid_add_monspecs_loop_$bb58(in_$p0, in_$p3, in_$p155, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$p184, out_$i185, out_$i186, out_$p187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$p162, out_$i163, out_$i164, out_$i193);
    return;

  exit:
    return;
}



procedure fb_edid_add_monspecs_loop_$bb58(in_$p0: ref, in_$p3: ref, in_$p155: ref, in_$p165: ref, in_$i166: i8, in_$i167: i32, in_$i168: i32, in_$i169: i8, in_$i170: i32, in_$i171: i32, in_$i172: i32, in_$i173: i1, in_$i174: i32, in_$i175: i64, in_$i176: i8, in_$i177: i32, in_$i178: i64, in_$i179: i8, in_$i180: i32, in_$i181: i32, in_$i182: i8, in_$i183: i64, in_$p184: ref, in_$i185: i32, in_$i186: i32, in_$p187: ref, in_$i188: i8, in_$i189: i32, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$p162: ref, in_$i163: i32, in_$i164: i32, in_$i193: i32) returns (out_$p165: ref, out_$i166: i8, out_$i167: i32, out_$i168: i32, out_$i169: i8, out_$i170: i32, out_$i171: i32, out_$i172: i32, out_$i173: i1, out_$i174: i32, out_$i175: i64, out_$i176: i8, out_$i177: i32, out_$i178: i64, out_$i179: i8, out_$i180: i32, out_$i181: i32, out_$i182: i8, out_$i183: i64, out_$p184: ref, out_$i185: i32, out_$i186: i32, out_$p187: ref, out_$i188: i8, out_$i189: i32, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$p162: ref, out_$i163: i32, out_$i164: i32, out_$i193: i32);
  modifies $M.57;



implementation fb_edid_add_monspecs_loop_$bb29(in_$p0: ref, in_$p2: ref, in_$p5: ref, in_$i65: i32, in_$i70: i32, in_$i71: i32, in_$i72: i64, in_$p73: ref, in_$i74: i8, in_$i75: i32, in_$i76: i32, in_$i77: i8, in_$i78: i32, in_$i79: i32, in_$i80: i8, in_$i81: i32, in_$i82: i64, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i24, in_$i91: i24, in_$i92: i24, in_$p93: ref, in_$p94: ref, in_$i95: i8, in_$i96: i64, in_$i97: i64, in_$i98: i64, in_$i99: i1, in_$i100: i32, in_$i101: i32, in_$i102: i64, in_$p103: ref, in_$i104: i8, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i108: i32, in_$i109: i32, in_$i110: i1, in_$i68: i8, in_$i69: i32, in_$i111: i8, in_$i29: i8) returns (out_$i70: i32, out_$i71: i32, out_$i72: i64, out_$p73: ref, out_$i74: i8, out_$i75: i32, out_$i76: i32, out_$i77: i8, out_$i78: i32, out_$i79: i32, out_$i80: i8, out_$i81: i32, out_$i82: i64, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i24, out_$i91: i24, out_$i92: i24, out_$p93: ref, out_$p94: ref, out_$i95: i8, out_$i96: i64, out_$i97: i64, out_$i98: i64, out_$i99: i1, out_$i100: i32, out_$i101: i32, out_$i102: i64, out_$p103: ref, out_$i104: i8, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i108: i32, out_$i109: i32, out_$i110: i1, out_$i68: i8, out_$i69: i32, out_$i111: i8)
{

  entry:
    out_$i70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i68, out_$i69, out_$i111 := in_$i70, in_$i71, in_$i72, in_$p73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$p83, in_$p84, in_$p85, in_$p86, in_$p87, in_$p88, in_$p89, in_$i90, in_$i91, in_$i92, in_$p93, in_$p94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$p103, in_$i104, in_$i105, in_$i106, in_$p107, in_$i108, in_$i109, in_$i110, in_$i68, in_$i69, in_$i111;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9771;

  $bb34:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$i68, out_$i69 := out_$i80, out_$i109;
    goto $bb34_dummy;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    out_$i111 := out_$i80;
    assume true;
    goto $bb34;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    out_$i110 := $sgt.i32(in_$i65, out_$i109);
    goto corral_source_split_9824;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i109 := $add.i32(out_$i69, 1);
    call {:si_unique_call 706} {:cexpr "i"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_9823;

  $bb32:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} __dynamic_pr_debug.ref.ref.ref.i32(in_$p5, .str.5, out_$p107, out_$i108);
    goto corral_source_split_9821;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i8.i32(out_$i77);
    goto corral_source_split_9820;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    out_$p107 := (if out_$i106 == 1 then .str.6 else .str.7);
    goto corral_source_split_9819;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    out_$i106 := $slt.i32(out_$i105, 0);
    goto corral_source_split_9818;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    out_$i105 := $sext.i8.i32(out_$i104);
    goto corral_source_split_9817;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i8($M.0, out_$p103);
    goto corral_source_split_9816;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref(in_$p0, $mul.ref(out_$i102, 1));
    goto corral_source_split_9815;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    out_$i102 := $sext.i32.i64(out_$i101);
    goto corral_source_split_9814;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    out_$i101 := $add.i32(out_$i100, out_$i69);
    goto corral_source_split_9813;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    out_$i100 := $zext.i8.i32(in_$i29);
    goto corral_source_split_9812;

  $bb31:
    assume out_$i99 == 1;
    goto corral_source_split_9811;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i64(out_$i98, 0);
    goto corral_source_split_9809;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} out_$i98 := ldv__builtin_expect(out_$i97, 0);
    call {:si_unique_call 704} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i98);
    goto corral_source_split_9808;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    out_$i97 := $and.i64(out_$i96, 1);
    goto corral_source_split_9807;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i8.i64(out_$i95);
    goto corral_source_split_9806;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i8($M.28, out_$p94);
    goto corral_source_split_9805;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9804;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, out_$p93, 0);
    goto corral_source_split_9803;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9802;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, out_$p89, out_$i92);
    goto corral_source_split_9801;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    out_$i92 := $or.i24(out_$i91, 1033);
    goto corral_source_split_9800;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    out_$i91 := $and.i24(out_$i90, $sub.i24(0, 262144));
    goto corral_source_split_9799;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i24($M.27, out_$p89);
    goto corral_source_split_9798;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    out_$p89 := $bitcast.ref.ref(out_$p88);
    goto corral_source_split_9797;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9796;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, out_$p87, .str.5);
    goto corral_source_split_9795;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9794;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, out_$p86, .str.3);
    goto corral_source_split_9793;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9792;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, out_$p85, .str.2);
    goto corral_source_split_9791;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9790;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, out_$p84, .str.1);
    goto corral_source_split_9789;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9788;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    $M.56 := $store.i8($M.56, out_$p83, out_$i77);
    goto corral_source_split_9787;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i82, 1));
    goto corral_source_split_9786;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(out_$i81);
    goto corral_source_split_9785;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i8.i32(out_$i68);
    goto corral_source_split_9784;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    out_$i80 := $trunc.i32.i8(out_$i79);
    call {:si_unique_call 702} {:cexpr "svd_n"} boogie_si_record_i8(out_$i80);
    goto corral_source_split_9783;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i78, 1);
    goto corral_source_split_9782;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i8.i32(out_$i68);
    goto corral_source_split_9781;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    out_$i77 := $trunc.i32.i8(out_$i76);
    call {:si_unique_call 701} {:cexpr "idx"} boogie_si_record_i8(out_$i77);
    goto corral_source_split_9780;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    out_$i76 := $and.i32(out_$i75, 127);
    goto corral_source_split_9779;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i8.i32(out_$i74);
    goto corral_source_split_9778;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i8($M.0, out_$p73);
    goto corral_source_split_9777;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref(in_$p0, $mul.ref(out_$i72, 1));
    goto corral_source_split_9776;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i71);
    goto corral_source_split_9775;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i32(out_$i70, out_$i69);
    goto corral_source_split_9774;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i8.i32(in_$i29);
    goto corral_source_split_9773;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb34_dummy:
    call {:si_unique_call 1} out_$i70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i68, out_$i69, out_$i111 := fb_edid_add_monspecs_loop_$bb29(in_$p0, in_$p2, in_$p5, in_$i65, out_$i70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i68, out_$i69, out_$i111, in_$i29);
    return;

  exit:
    return;
}



procedure fb_edid_add_monspecs_loop_$bb29(in_$p0: ref, in_$p2: ref, in_$p5: ref, in_$i65: i32, in_$i70: i32, in_$i71: i32, in_$i72: i64, in_$p73: ref, in_$i74: i8, in_$i75: i32, in_$i76: i32, in_$i77: i8, in_$i78: i32, in_$i79: i32, in_$i80: i8, in_$i81: i32, in_$i82: i64, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i24, in_$i91: i24, in_$i92: i24, in_$p93: ref, in_$p94: ref, in_$i95: i8, in_$i96: i64, in_$i97: i64, in_$i98: i64, in_$i99: i1, in_$i100: i32, in_$i101: i32, in_$i102: i64, in_$p103: ref, in_$i104: i8, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i108: i32, in_$i109: i32, in_$i110: i1, in_$i68: i8, in_$i69: i32, in_$i111: i8, in_$i29: i8) returns (out_$i70: i32, out_$i71: i32, out_$i72: i64, out_$p73: ref, out_$i74: i8, out_$i75: i32, out_$i76: i32, out_$i77: i8, out_$i78: i32, out_$i79: i32, out_$i80: i8, out_$i81: i32, out_$i82: i64, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i24, out_$i91: i24, out_$i92: i24, out_$p93: ref, out_$p94: ref, out_$i95: i8, out_$i96: i64, out_$i97: i64, out_$i98: i64, out_$i99: i1, out_$i100: i32, out_$i101: i32, out_$i102: i64, out_$p103: ref, out_$i104: i8, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i108: i32, out_$i109: i32, out_$i110: i1, out_$i68: i8, out_$i69: i32, out_$i111: i8);
  modifies $M.28, $M.27, $M.26, $M.25, $M.24, $M.23, $M.56;



implementation fb_edid_add_monspecs_loop_$bb19(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p4: ref, in_$p5: ref, in_$p23: ref, in_$i30: i64, in_$p31: ref, in_$i32: i8, in_$i33: i32, in_$i34: i32, in_$i35: i8, in_$i36: i64, in_$p37: ref, in_$i38: i8, in_$i39: i32, in_$i40: i32, in_$i41: i8, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i24, in_$i49: i24, in_$i50: i24, in_$p51: ref, in_$p52: ref, in_$i53: i8, in_$i54: i64, in_$i55: i64, in_$i56: i64, in_$i57: i1, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i66: i1, in_$i70: i32, in_$i71: i32, in_$i72: i64, in_$p73: ref, in_$i74: i8, in_$i75: i32, in_$i76: i32, in_$i77: i8, in_$i78: i32, in_$i79: i32, in_$i80: i8, in_$i81: i32, in_$i82: i64, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i24, in_$i91: i24, in_$i92: i24, in_$p93: ref, in_$p94: ref, in_$i95: i8, in_$i96: i64, in_$i97: i64, in_$i98: i64, in_$i99: i1, in_$i100: i32, in_$i101: i32, in_$i102: i64, in_$p103: ref, in_$i104: i8, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i108: i32, in_$i109: i32, in_$i110: i1, in_$i68: i8, in_$i69: i32, in_$i111: i8, in_$i67: i8, in_$i113: i32, in_$i114: i1, in_$i115: i32, in_$i116: i1, in_$i117: i64, in_$i118: i64, in_$p119: ref, in_$i120: i8, in_$i121: i32, in_$i122: i1, in_$i123: i64, in_$i124: i64, in_$p125: ref, in_$i126: i8, in_$i127: i32, in_$i128: i1, in_$i129: i64, in_$i130: i64, in_$p131: ref, in_$i132: i8, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i136: i16, in_$i137: i32, in_$i138: i32, in_$i139: i16, in_$p140: ref, in_$i112: i8, in_$i141: i32, in_$i142: i32, in_$i143: i32, in_$i144: i32, in_$i145: i8, in_$i146: i8, in_$i147: i32, in_$i148: i32, in_$i149: i1, in_$i28: i8, in_$i29: i8, in_$i150: i8) returns (out_$i30: i64, out_$p31: ref, out_$i32: i8, out_$i33: i32, out_$i34: i32, out_$i35: i8, out_$i36: i64, out_$p37: ref, out_$i38: i8, out_$i39: i32, out_$i40: i32, out_$i41: i8, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i24, out_$i49: i24, out_$i50: i24, out_$p51: ref, out_$p52: ref, out_$i53: i8, out_$i54: i64, out_$i55: i64, out_$i56: i64, out_$i57: i1, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i66: i1, out_$i70: i32, out_$i71: i32, out_$i72: i64, out_$p73: ref, out_$i74: i8, out_$i75: i32, out_$i76: i32, out_$i77: i8, out_$i78: i32, out_$i79: i32, out_$i80: i8, out_$i81: i32, out_$i82: i64, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i24, out_$i91: i24, out_$i92: i24, out_$p93: ref, out_$p94: ref, out_$i95: i8, out_$i96: i64, out_$i97: i64, out_$i98: i64, out_$i99: i1, out_$i100: i32, out_$i101: i32, out_$i102: i64, out_$p103: ref, out_$i104: i8, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i108: i32, out_$i109: i32, out_$i110: i1, out_$i68: i8, out_$i69: i32, out_$i111: i8, out_$i67: i8, out_$i113: i32, out_$i114: i1, out_$i115: i32, out_$i116: i1, out_$i117: i64, out_$i118: i64, out_$p119: ref, out_$i120: i8, out_$i121: i32, out_$i122: i1, out_$i123: i64, out_$i124: i64, out_$p125: ref, out_$i126: i8, out_$i127: i32, out_$i128: i1, out_$i129: i64, out_$i130: i64, out_$p131: ref, out_$i132: i8, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i136: i16, out_$i137: i32, out_$i138: i32, out_$i139: i16, out_$p140: ref, out_$i112: i8, out_$i141: i32, out_$i142: i32, out_$i143: i32, out_$i144: i32, out_$i145: i8, out_$i146: i8, out_$i147: i32, out_$i148: i32, out_$i149: i1, out_$i28: i8, out_$i29: i8, out_$i150: i8)
{

  entry:
    out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i68, out_$i69, out_$i111, out_$i67, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p131, out_$i132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$i112, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i28, out_$i29, out_$i150 := in_$i30, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i70, in_$i71, in_$i72, in_$p73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$p83, in_$p84, in_$p85, in_$p86, in_$p87, in_$p88, in_$p89, in_$i90, in_$i91, in_$i92, in_$p93, in_$p94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$p103, in_$i104, in_$i105, in_$i106, in_$p107, in_$i108, in_$i109, in_$i110, in_$i68, in_$i69, in_$i111, in_$i67, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$p119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$p125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$p131, in_$i132, in_$i133, in_$i134, in_$p135, in_$i136, in_$i137, in_$i138, in_$i139, in_$p140, in_$i112, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i28, in_$i29, in_$i150;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9713;

  $bb52:
    assume out_$i149 == 1;
    assume {:verifier.code 0} true;
    out_$i28, out_$i29 := out_$i112, out_$i145;
    goto $bb52_dummy;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    out_$i150 := out_$i112;
    assume true;
    goto $bb52;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    out_$i149 := $sgt.i32(out_$i147, out_$i148);
    goto corral_source_split_9837;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    out_$i148 := $zext.i8.i32(out_$i145);
    goto corral_source_split_9836;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    out_$i147 := $zext.i8.i32(out_$i146);
    goto corral_source_split_9835;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    out_$i146 := $load.i8($M.0, in_$p23);
    goto corral_source_split_9834;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    out_$i145 := $trunc.i32.i8(out_$i144);
    call {:si_unique_call 707} {:cexpr "pos"} boogie_si_record_i8(out_$i145);
    goto corral_source_split_9833;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    out_$i144 := $add.i32(out_$i143, 1);
    goto corral_source_split_9832;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    out_$i143 := $add.i32(out_$i141, out_$i142);
    goto corral_source_split_9831;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    out_$i142 := $zext.i8.i32(out_$i29);
    goto corral_source_split_9830;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    out_$i141 := $zext.i8.i32(out_$i35);
    goto corral_source_split_9829;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_9828;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i112 := out_$i28;
    goto $bb37;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i112 := out_$i67;
    goto $bb37;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i66 == 1);
    goto $bb28;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    out_$i67 := out_$i111;
    goto $bb28;

  $bb35:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_9826;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    out_$i111 := out_$i80;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    out_$i110 := $sgt.i32(out_$i65, out_$i109);
    goto corral_source_split_9824;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i109 := $add.i32(out_$i69, 1);
    call {:si_unique_call 706} {:cexpr "i"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_9823;

  $bb32:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} __dynamic_pr_debug.ref.ref.ref.i32(in_$p5, .str.5, out_$p107, out_$i108);
    goto corral_source_split_9821;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i8.i32(out_$i77);
    goto corral_source_split_9820;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    out_$p107 := (if out_$i106 == 1 then .str.6 else .str.7);
    goto corral_source_split_9819;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    out_$i106 := $slt.i32(out_$i105, 0);
    goto corral_source_split_9818;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    out_$i105 := $sext.i8.i32(out_$i104);
    goto corral_source_split_9817;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i8($M.0, out_$p103);
    goto corral_source_split_9816;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref(in_$p0, $mul.ref(out_$i102, 1));
    goto corral_source_split_9815;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    out_$i102 := $sext.i32.i64(out_$i101);
    goto corral_source_split_9814;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    out_$i101 := $add.i32(out_$i100, out_$i69);
    goto corral_source_split_9813;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    out_$i100 := $zext.i8.i32(out_$i29);
    goto corral_source_split_9812;

  $bb31:
    assume out_$i99 == 1;
    goto corral_source_split_9811;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i64(out_$i98, 0);
    goto corral_source_split_9809;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} out_$i98 := ldv__builtin_expect(out_$i97, 0);
    call {:si_unique_call 704} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i98);
    goto corral_source_split_9808;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    out_$i97 := $and.i64(out_$i96, 1);
    goto corral_source_split_9807;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i8.i64(out_$i95);
    goto corral_source_split_9806;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i8($M.28, out_$p94);
    goto corral_source_split_9805;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9804;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, out_$p93, 0);
    goto corral_source_split_9803;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9802;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, out_$p89, out_$i92);
    goto corral_source_split_9801;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    out_$i92 := $or.i24(out_$i91, 1033);
    goto corral_source_split_9800;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    out_$i91 := $and.i24(out_$i90, $sub.i24(0, 262144));
    goto corral_source_split_9799;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i24($M.27, out_$p89);
    goto corral_source_split_9798;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    out_$p89 := $bitcast.ref.ref(out_$p88);
    goto corral_source_split_9797;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9796;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, out_$p87, .str.5);
    goto corral_source_split_9795;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9794;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, out_$p86, .str.3);
    goto corral_source_split_9793;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9792;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, out_$p85, .str.2);
    goto corral_source_split_9791;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9790;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, out_$p84, .str.1);
    goto corral_source_split_9789;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9788;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    $M.56 := $store.i8($M.56, out_$p83, out_$i77);
    goto corral_source_split_9787;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i82, 1));
    goto corral_source_split_9786;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(out_$i81);
    goto corral_source_split_9785;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i8.i32(out_$i68);
    goto corral_source_split_9784;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    out_$i80 := $trunc.i32.i8(out_$i79);
    call {:si_unique_call 702} {:cexpr "svd_n"} boogie_si_record_i8(out_$i80);
    goto corral_source_split_9783;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i78, 1);
    goto corral_source_split_9782;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i8.i32(out_$i68);
    goto corral_source_split_9781;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    out_$i77 := $trunc.i32.i8(out_$i76);
    call {:si_unique_call 701} {:cexpr "idx"} boogie_si_record_i8(out_$i77);
    goto corral_source_split_9780;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    out_$i76 := $and.i32(out_$i75, 127);
    goto corral_source_split_9779;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i8.i32(out_$i74);
    goto corral_source_split_9778;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i8($M.0, out_$p73);
    goto corral_source_split_9777;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref(in_$p0, $mul.ref(out_$i72, 1));
    goto corral_source_split_9776;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i71);
    goto corral_source_split_9775;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i32(out_$i70, out_$i69);
    goto corral_source_split_9774;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i8.i32(out_$i29);
    goto corral_source_split_9773;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb29:
    call out_$i70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i68, out_$i69, out_$i111 := fb_edid_add_monspecs_loop_$bb29(in_$p0, in_$p2, in_$p5, out_$i65, out_$i70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i68, out_$i69, out_$i111, out_$i29);
    goto $bb29_last;

  $bb29_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9771;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    out_$i68, out_$i69 := out_$i28, out_$i62;
    goto $bb29;

  $bb34:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$i68, out_$i69 := out_$i80, out_$i109;
    assume false;
    return;

  $bb26:
    assume out_$i66 == 1;
    goto corral_source_split_9769;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    out_$i67 := out_$i28;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    out_$i66 := $sgt.i32(out_$i65, out_$i62);
    goto corral_source_split_9763;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i63, out_$i64);
    goto corral_source_split_9762;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i8.i32(out_$i35);
    goto corral_source_split_9761;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i8.i32(out_$i29);
    goto corral_source_split_9760;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i8.i32(out_$i29);
    call {:si_unique_call 700} {:cexpr "i"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_9759;

  $bb24:
    assume out_$i61 == 1;
    goto corral_source_split_9758;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, 2);
    goto corral_source_split_9756;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i8.i32(out_$i41);
    goto corral_source_split_9755;

  $bb22:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} __dynamic_pr_debug.ref.ref.i32.i32(in_$p4, .str.4, out_$i58, out_$i59);
    goto corral_source_split_9753;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i8.i32(out_$i35);
    goto corral_source_split_9752;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i8.i32(out_$i41);
    goto corral_source_split_9751;

  $bb21:
    assume out_$i57 == 1;
    goto corral_source_split_9750;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, 0);
    goto corral_source_split_9748;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} out_$i56 := ldv__builtin_expect(out_$i55, 0);
    call {:si_unique_call 698} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i56);
    goto corral_source_split_9747;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    out_$i55 := $and.i64(out_$i54, 1);
    goto corral_source_split_9746;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i8.i64(out_$i53);
    goto corral_source_split_9745;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i8($M.28, out_$p52);
    goto corral_source_split_9744;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9743;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, out_$p51, 0);
    goto corral_source_split_9742;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9741;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, out_$p47, out_$i50);
    goto corral_source_split_9740;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    out_$i50 := $or.i24(out_$i49, 1027);
    goto corral_source_split_9739;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    out_$i49 := $and.i24(out_$i48, $sub.i24(0, 262144));
    goto corral_source_split_9738;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i24($M.27, out_$p47);
    goto corral_source_split_9737;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_9736;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9735;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, out_$p45, .str.4);
    goto corral_source_split_9734;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9733;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, out_$p44, .str.3);
    goto corral_source_split_9732;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9731;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, out_$p43, .str.2);
    goto corral_source_split_9730;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9729;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, out_$p42, .str.1);
    goto corral_source_split_9728;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9727;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    out_$i41 := $trunc.i32.i8(out_$i40);
    call {:si_unique_call 696} {:cexpr "type"} boogie_si_record_i8(out_$i41);
    goto corral_source_split_9726;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    out_$i40 := $ashr.i32(out_$i39, 5);
    goto corral_source_split_9725;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i8.i32(out_$i38);
    goto corral_source_split_9724;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i8($M.0, out_$p37);
    goto corral_source_split_9723;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(in_$p0, $mul.ref(out_$i36, 1));
    goto corral_source_split_9722;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i8.i64(out_$i29);
    goto corral_source_split_9721;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    out_$i35 := $trunc.i32.i8(out_$i34);
    call {:si_unique_call 695} {:cexpr "len"} boogie_si_record_i8(out_$i35);
    goto corral_source_split_9720;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    out_$i34 := $and.i32(out_$i33, 31);
    goto corral_source_split_9719;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i8.i32(out_$i32);
    goto corral_source_split_9718;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i8($M.0, out_$p31);
    goto corral_source_split_9717;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref(in_$p0, $mul.ref(out_$i30, 1));
    goto corral_source_split_9716;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i8.i64(out_$i29);
    goto corral_source_split_9715;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p140, out_$i139);
    goto corral_source_split_9874;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(138, 1));
    goto corral_source_split_9873;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    out_$i139 := $trunc.i32.i16(out_$i138);
    goto corral_source_split_9872;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    out_$i138 := $or.i32(out_$i137, 4);
    goto corral_source_split_9871;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    out_$i137 := $zext.i16.i32(out_$i136);
    goto corral_source_split_9870;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i16($M.0, out_$p135);
    goto corral_source_split_9869;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(138, 1));
    goto corral_source_split_9868;

  $bb48:
    assume out_$i134 == 1;
    goto corral_source_split_9867;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    out_$i134 := $eq.i32(out_$i133, 0);
    goto corral_source_split_9865;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    out_$i133 := $zext.i8.i32(out_$i132);
    goto corral_source_split_9864;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    out_$i132 := $load.i8($M.0, out_$p131);
    goto corral_source_split_9863;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref(in_$p0, $mul.ref(out_$i130, 1));
    goto corral_source_split_9862;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    out_$i130 := $add.i64(out_$i129, 3);
    goto corral_source_split_9861;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    out_$i129 := $zext.i8.i64(out_$i29);
    goto corral_source_split_9860;

  $bb46:
    assume out_$i128 == 1;
    goto corral_source_split_9859;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i127, 12);
    goto corral_source_split_9857;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    out_$i127 := $zext.i8.i32(out_$i126);
    goto corral_source_split_9856;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i8($M.0, out_$p125);
    goto corral_source_split_9855;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref(in_$p0, $mul.ref(out_$i124, 1));
    goto corral_source_split_9854;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    out_$i124 := $add.i64(out_$i123, 2);
    goto corral_source_split_9853;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i8.i64(out_$i29);
    goto corral_source_split_9852;

  $bb43:
    assume out_$i122 == 1;
    goto corral_source_split_9851;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 3);
    goto corral_source_split_9849;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    out_$i121 := $zext.i8.i32(out_$i120);
    goto corral_source_split_9848;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i8($M.0, out_$p119);
    goto corral_source_split_9847;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref(in_$p0, $mul.ref(out_$i118, 1));
    goto corral_source_split_9846;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    out_$i118 := $add.i64(out_$i117, 1);
    goto corral_source_split_9845;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    out_$i117 := $zext.i8.i64(out_$i29);
    goto corral_source_split_9844;

  $bb41:
    assume out_$i116 == 1;
    goto corral_source_split_9843;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    out_$i116 := $ugt.i32(out_$i115, 2);
    goto corral_source_split_9841;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    out_$i115 := $zext.i8.i32(out_$i35);
    goto corral_source_split_9840;

  $bb38:
    assume out_$i114 == 1;
    goto corral_source_split_9839;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 3);
    goto corral_source_split_9767;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    out_$i113 := $zext.i8.i32(out_$i41);
    goto corral_source_split_9766;

  $bb25:
    assume !(out_$i61 == 1);
    goto corral_source_split_9765;

  $bb44:
    assume {:verifier.code 0} true;
    assume !(out_$i122 == 1);
    goto $bb45;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i128 == 1);
    goto $bb45;

  $bb49:
    assume {:verifier.code 0} true;
    assume !(out_$i134 == 1);
    goto $bb45;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i114 == 1);
    goto $bb40;

  $bb42:
    assume {:verifier.code 0} true;
    assume !(out_$i116 == 1);
    goto $bb40;

  $bb52_dummy:
    call {:si_unique_call 1} out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i68, out_$i69, out_$i111, out_$i67, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p131, out_$i132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$i112, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i28, out_$i29, out_$i150 := fb_edid_add_monspecs_loop_$bb19(in_$p0, in_$p1, in_$p2, in_$p4, in_$p5, in_$p23, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i68, out_$i69, out_$i111, out_$i67, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p131, out_$i132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$i112, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i28, out_$i29, out_$i150);
    return;

  exit:
    return;
}



procedure fb_edid_add_monspecs_loop_$bb19(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p4: ref, in_$p5: ref, in_$p23: ref, in_$i30: i64, in_$p31: ref, in_$i32: i8, in_$i33: i32, in_$i34: i32, in_$i35: i8, in_$i36: i64, in_$p37: ref, in_$i38: i8, in_$i39: i32, in_$i40: i32, in_$i41: i8, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i24, in_$i49: i24, in_$i50: i24, in_$p51: ref, in_$p52: ref, in_$i53: i8, in_$i54: i64, in_$i55: i64, in_$i56: i64, in_$i57: i1, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i66: i1, in_$i70: i32, in_$i71: i32, in_$i72: i64, in_$p73: ref, in_$i74: i8, in_$i75: i32, in_$i76: i32, in_$i77: i8, in_$i78: i32, in_$i79: i32, in_$i80: i8, in_$i81: i32, in_$i82: i64, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i24, in_$i91: i24, in_$i92: i24, in_$p93: ref, in_$p94: ref, in_$i95: i8, in_$i96: i64, in_$i97: i64, in_$i98: i64, in_$i99: i1, in_$i100: i32, in_$i101: i32, in_$i102: i64, in_$p103: ref, in_$i104: i8, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i108: i32, in_$i109: i32, in_$i110: i1, in_$i68: i8, in_$i69: i32, in_$i111: i8, in_$i67: i8, in_$i113: i32, in_$i114: i1, in_$i115: i32, in_$i116: i1, in_$i117: i64, in_$i118: i64, in_$p119: ref, in_$i120: i8, in_$i121: i32, in_$i122: i1, in_$i123: i64, in_$i124: i64, in_$p125: ref, in_$i126: i8, in_$i127: i32, in_$i128: i1, in_$i129: i64, in_$i130: i64, in_$p131: ref, in_$i132: i8, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i136: i16, in_$i137: i32, in_$i138: i32, in_$i139: i16, in_$p140: ref, in_$i112: i8, in_$i141: i32, in_$i142: i32, in_$i143: i32, in_$i144: i32, in_$i145: i8, in_$i146: i8, in_$i147: i32, in_$i148: i32, in_$i149: i1, in_$i28: i8, in_$i29: i8, in_$i150: i8) returns (out_$i30: i64, out_$p31: ref, out_$i32: i8, out_$i33: i32, out_$i34: i32, out_$i35: i8, out_$i36: i64, out_$p37: ref, out_$i38: i8, out_$i39: i32, out_$i40: i32, out_$i41: i8, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i24, out_$i49: i24, out_$i50: i24, out_$p51: ref, out_$p52: ref, out_$i53: i8, out_$i54: i64, out_$i55: i64, out_$i56: i64, out_$i57: i1, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i66: i1, out_$i70: i32, out_$i71: i32, out_$i72: i64, out_$p73: ref, out_$i74: i8, out_$i75: i32, out_$i76: i32, out_$i77: i8, out_$i78: i32, out_$i79: i32, out_$i80: i8, out_$i81: i32, out_$i82: i64, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i24, out_$i91: i24, out_$i92: i24, out_$p93: ref, out_$p94: ref, out_$i95: i8, out_$i96: i64, out_$i97: i64, out_$i98: i64, out_$i99: i1, out_$i100: i32, out_$i101: i32, out_$i102: i64, out_$p103: ref, out_$i104: i8, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i108: i32, out_$i109: i32, out_$i110: i1, out_$i68: i8, out_$i69: i32, out_$i111: i8, out_$i67: i8, out_$i113: i32, out_$i114: i1, out_$i115: i32, out_$i116: i1, out_$i117: i64, out_$i118: i64, out_$p119: ref, out_$i120: i8, out_$i121: i32, out_$i122: i1, out_$i123: i64, out_$i124: i64, out_$p125: ref, out_$i126: i8, out_$i127: i32, out_$i128: i1, out_$i129: i64, out_$i130: i64, out_$p131: ref, out_$i132: i8, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i136: i16, out_$i137: i32, out_$i138: i32, out_$i139: i16, out_$p140: ref, out_$i112: i8, out_$i141: i32, out_$i142: i32, out_$i143: i32, out_$i144: i32, out_$i145: i8, out_$i146: i8, out_$i147: i32, out_$i148: i32, out_$i149: i1, out_$i28: i8, out_$i29: i8, out_$i150: i8);
  modifies $M.28, $M.27, $M.26, $M.25, $M.24, $M.23, $M.56, $M.0;



implementation fb_find_best_display_loop_$bb14(in_$i17: i64, in_$p23: ref, in_$p24: ref, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$p40: ref) returns (out_$p23: ref, out_$p24: ref, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$p40: ref)
{

  entry:
    out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p36, out_$p37, out_$i38, out_$i39, out_$i20, out_$p21, out_$p22, out_$p40 := in_$p23, in_$p24, in_$i25, in_$p26, in_$i27, in_$p28, in_$i29, in_$i30, in_$i31, in_$p32, in_$p33, in_$p36, in_$p37, in_$i38, in_$i39, in_$i20, in_$p21, in_$p22, in_$p40;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10443;

  $bb23:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i20, out_$p21, out_$p22 := out_$i27, out_$p37, out_$p26;
    goto $bb23_dummy;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    out_$p40 := out_$p26;
    assume true;
    goto $bb23;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i64(out_$i38, in_$i17);
    goto corral_source_split_10468;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_10467;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_10466;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p21, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10465;

  $bb20:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    out_$p32, out_$p33 := out_$p24, out_$p26;
    assume true;
    goto $bb20;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_10454;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    out_$i30 := $and.i32(out_$i29, 16);
    goto corral_source_split_10453;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, out_$p28);
    goto corral_source_split_10452;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(out_$p23, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_10451;

  $bb17:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$p26, out_$i27 := out_$p22, out_$i20;
    goto $bb18;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    out_$p26, out_$i27 := out_$p24, 1;
    goto $bb18;

  $bb16:
    assume out_$i25 == 1;
    goto corral_source_split_10449;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i20, 0);
    goto corral_source_split_10447;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_10446;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_10445;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p36, out_$p37, out_$i38, out_$i39, out_$i20, out_$p21, out_$p22, out_$p40 := fb_find_best_display_loop_$bb14(in_$i17, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p36, out_$p37, out_$i38, out_$i39, out_$i20, out_$p21, out_$p22, out_$p40);
    return;

  exit:
    return;
}



procedure fb_find_best_display_loop_$bb14(in_$i17: i64, in_$p23: ref, in_$p24: ref, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$p40: ref) returns (out_$p23: ref, out_$p24: ref, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$p40: ref);



implementation fb_find_best_mode_loop_$bb4(in_$p0: ref, in_$i5: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$i19: i32, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$p28: ref, in_$i29: i32, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i37: i1, in_$i38: i64, in_$i39: i1, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$p35: ref, in_$i36: i32, in_$p46: ref, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$i8: i32, in_$p9: ref, in_$p10: ref, in_$p52: ref) returns (out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$i19: i32, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$p28: ref, out_$i29: i32, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i37: i1, out_$i38: i64, out_$i39: i1, out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$p35: ref, out_$i36: i32, out_$p46: ref, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$i8: i32, out_$p9: ref, out_$p10: ref, out_$p52: ref)
{

  entry:
    out_$p11, out_$p12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$p18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p35, out_$i36, out_$p46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i8, out_$p9, out_$p10, out_$p52 := in_$p11, in_$p12, in_$p13, in_$i14, in_$p15, in_$i16, in_$i17, in_$p18, in_$i19, in_$p20, in_$i21, in_$i22, in_$p23, in_$i24, in_$p25, in_$i26, in_$i27, in_$p28, in_$i29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i37, in_$i38, in_$i39, in_$p40, in_$i41, in_$p42, in_$i43, in_$i44, in_$p45, in_$p35, in_$i36, in_$p46, in_$i47, in_$p48, in_$p49, in_$i50, in_$i51, in_$i8, in_$p9, in_$p10, in_$p52;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10522;

  $bb23:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$p9, out_$p10 := out_$i47, out_$p46, out_$p49;
    goto $bb23_dummy;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    out_$p52 := out_$p46;
    assume true;
    goto $bb23;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i50, in_$i5);
    goto corral_source_split_10572;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p49);
    goto corral_source_split_10571;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_10570;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p10, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10569;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10568;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p46, out_$i47 := out_$p9, out_$i8;
    goto $bb22;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    out_$p46, out_$i47 := out_$p35, out_$i36;
    goto $bb22;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10554;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p35, out_$i36 := out_$p45, out_$i8;
    goto $bb13;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    out_$p35, out_$i36 := out_$p12, out_$i33;
    goto $bb13;

  $bb11:
    assume out_$i34 == 1;
    goto corral_source_split_10549;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    out_$i34 := $ugt.i32(out_$i8, out_$i33);
    goto corral_source_split_10547;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i27, out_$i32);
    call {:si_unique_call 767} {:cexpr "d"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_10546;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    out_$i32 := $sub.i32(out_$i29, out_$i31);
    goto corral_source_split_10545;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, out_$p30);
    goto corral_source_split_10544;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_10543;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, out_$p28);
    goto corral_source_split_10542;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    out_$i27 := $sub.i32(out_$i24, out_$i26);
    out_$p28 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_10541;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_10540;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_10539;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, out_$p23);
    goto corral_source_split_10538;

  $bb9:
    assume out_$i22 == 1;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_10537;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    out_$i22 := $uge.i32(out_$i19, out_$i21);
    goto corral_source_split_10535;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_10534;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_10533;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    goto corral_source_split_10532;

  $bb6:
    assume out_$i17 == 1;
    out_$p18 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_10531;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    out_$i17 := $uge.i32(out_$i14, out_$i16);
    goto corral_source_split_10529;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    goto corral_source_split_10528;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_10527;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_10526;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 80)), $mul.ref(16, 1));
    out_$p13 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_10525;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(out_$p10);
    goto corral_source_split_10524;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p45 := out_$p9;
    goto $bb21;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    out_$p45 := out_$p12;
    goto $bb21;

  $bb19:
    assume out_$i44 == 1;
    goto corral_source_split_10566;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    out_$i44 := $ugt.i32(out_$i41, out_$i43);
    goto corral_source_split_10564;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, out_$p42);
    goto corral_source_split_10563;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p9, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_10562;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.0, out_$p40);
    goto corral_source_split_10561;

  $bb17:
    assume out_$i39 == 1;
    out_$p40 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_10560;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i64(out_$i38, 0);
    goto corral_source_split_10558;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p9);
    goto corral_source_split_10557;

  $bb14:
    assume out_$i37 == 1;
    goto corral_source_split_10556;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i8, out_$i33);
    goto corral_source_split_10552;

  $bb12:
    assume !(out_$i34 == 1);
    goto corral_source_split_10551;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb16;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i39 == 1);
    goto $bb16;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i44 == 1);
    goto $bb16;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb8;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$p18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p35, out_$i36, out_$p46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i8, out_$p9, out_$p10, out_$p52 := fb_find_best_mode_loop_$bb4(in_$p0, in_$i5, out_$p11, out_$p12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$p18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p35, out_$i36, out_$p46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i8, out_$p9, out_$p10, out_$p52);
    return;

  exit:
    return;
}



procedure fb_find_best_mode_loop_$bb4(in_$p0: ref, in_$i5: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$i19: i32, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$p28: ref, in_$i29: i32, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i37: i1, in_$i38: i64, in_$i39: i1, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$p35: ref, in_$i36: i32, in_$p46: ref, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$i8: i32, in_$p9: ref, in_$p10: ref, in_$p52: ref) returns (out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$i19: i32, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$p28: ref, out_$i29: i32, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i37: i1, out_$i38: i64, out_$i39: i1, out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$p35: ref, out_$i36: i32, out_$p46: ref, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$i8: i32, out_$p9: ref, out_$p10: ref, out_$p52: ref);



implementation fb_match_mode_loop_$bb4(in_$p2: ref, in_$i6: i64, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p8: ref) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p8: ref)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p15, out_$p16, out_$i17, out_$i18, out_$p8 := in_$p9, in_$p10, in_$i11, in_$i12, in_$p13, in_$p15, in_$p16, in_$i17, in_$i18, in_$p8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_10645;

  $bb10:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$p8 := out_$p16;
    goto $bb10_dummy;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i64(out_$i17, in_$i6);
    goto corral_source_split_10659;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_10658;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_10657;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10656;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    out_$p13 := out_$p10;
    assume true;
    goto $bb7;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i32(out_$i11, 0);
    goto corral_source_split_10650;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} out_$i11 := fb_mode_is_equal(out_$p10, in_$p2);
    call {:si_unique_call 771} {:cexpr "tmp"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_10649;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_10648;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $bitcast.ref.ref(out_$p8);
    goto corral_source_split_10647;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p15, out_$p16, out_$i17, out_$i18, out_$p8 := fb_match_mode_loop_$bb4(in_$p2, in_$i6, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p15, out_$p16, out_$i17, out_$i18, out_$p8);
    return;

  exit:
    return;
}



procedure fb_match_mode_loop_$bb4(in_$p2: ref, in_$i6: i64, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p8: ref) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p8: ref);



implementation fb_find_nearest_mode_loop_$bb4(in_$p0: ref, in_$i5: i64, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i21: i32, in_$i22: i64, in_$p23: ref, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i32, in_$i31: i64, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$i45: i32, in_$i49: i1, in_$p50: ref, in_$i51: i32, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i32, in_$i58: i64, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$i62: i32, in_$p63: ref, in_$i64: i32, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i1, in_$i8: i32, in_$p9: ref, in_$i10: i32, in_$p11: ref, in_$p69: ref) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i21: i32, out_$i22: i64, out_$p23: ref, out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i32, out_$i31: i64, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$i45: i32, out_$i49: i1, out_$p50: ref, out_$i51: i32, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i32, out_$i58: i64, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$i62: i32, out_$p63: ref, out_$i64: i32, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i1, out_$i8: i32, out_$p9: ref, out_$i10: i32, out_$p11: ref, out_$p69: ref)
{

  entry:
    out_$p12, out_$p13, out_$p14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i49, out_$p50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$p63, out_$i64, out_$p46, out_$i47, out_$i48, out_$p65, out_$p66, out_$i67, out_$i68, out_$i8, out_$p9, out_$i10, out_$p11, out_$p69 := in_$p12, in_$p13, in_$p14, in_$i15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$p23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$p36, in_$i37, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i49, in_$p50, in_$i51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$i62, in_$p63, in_$i64, in_$p46, in_$i47, in_$i48, in_$p65, in_$p66, in_$i67, in_$i68, in_$i8, in_$p9, in_$i10, in_$p11, in_$p69;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10672;

  $bb27:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$p9, out_$i10, out_$p11 := out_$i48, out_$p66, out_$i47, out_$p46;
    goto $bb27_dummy;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    out_$p69 := out_$p46;
    assume true;
    goto $bb27;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i64(out_$i67, in_$i5);
    goto corral_source_split_10730;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    out_$i67 := $p2i.ref.i64(out_$p66);
    goto corral_source_split_10729;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_10728;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10727;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10726;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p46, out_$i47, out_$i48 := out_$p63, out_$i10, out_$i64;
    goto $bb17;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    out_$p46, out_$i47, out_$i48 := out_$p13, out_$i34, out_$i45;
    goto $bb17;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    out_$i45 := $trunc.i64.i32(out_$i44);
    call {:si_unique_call 779} {:cexpr "diff_refresh"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_10724;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i43);
    call {:si_unique_call 778} {:cexpr "ret___1"} boogie_si_record_i64(out_$i44);
    goto corral_source_split_10723;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_10722;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i40;
    goto $bb16;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i42;
    goto $bb16;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    out_$i42 := $sub.i32(0, out_$i40);
    goto corral_source_split_10718;

  $bb14:
    assume out_$i41 == 1;
    goto corral_source_split_10717;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i40, 0);
    goto corral_source_split_10712;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    out_$i40 := $sub.i32(out_$i37, out_$i39);
    call {:si_unique_call 777} {:cexpr "__x___4"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_10711;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_10710;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_10709;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, out_$p36);
    goto corral_source_split_10708;

  $bb12:
    assume out_$i35 == 1;
    out_$p36 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_10707;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    out_$i35 := $ugt.i32(out_$i10, out_$i34);
    goto corral_source_split_10705;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i32, out_$i33);
    call {:si_unique_call 776} {:cexpr "d"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_10704;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    out_$i33 := $trunc.i64.i32(out_$i31);
    goto corral_source_split_10703;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    out_$i32 := $trunc.i64.i32(out_$i22);
    goto corral_source_split_10702;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i30);
    call {:si_unique_call 775} {:cexpr "ret___0"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_10701;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_10700;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i27;
    goto $bb11;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i29;
    goto $bb11;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    out_$i29 := $sub.i32(0, out_$i27);
    goto corral_source_split_10696;

  $bb9:
    assume out_$i28 == 1;
    goto corral_source_split_10695;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i27, 0);
    goto corral_source_split_10693;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    out_$i27 := $sub.i32(out_$i24, out_$i26);
    call {:si_unique_call 774} {:cexpr "__x___2"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_10692;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_10691;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_10690;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, out_$p23);
    goto corral_source_split_10689;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i21);
    call {:si_unique_call 773} {:cexpr "ret"} boogie_si_record_i64(out_$i22);
    out_$p23 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_10688;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_10687;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i18;
    goto $bb8;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i20;
    goto $bb8;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    out_$i20 := $sub.i32(0, out_$i18);
    goto corral_source_split_10683;

  $bb6:
    assume out_$i19 == 1;
    goto corral_source_split_10682;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i18, 0);
    goto corral_source_split_10680;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    out_$i18 := $sub.i32(out_$i15, out_$i17);
    call {:si_unique_call 772} {:cexpr "__x___0"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_10679;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, out_$p16);
    goto corral_source_split_10678;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p0, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_10677;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.0, out_$p14);
    goto corral_source_split_10676;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 80)), $mul.ref(16, 1));
    out_$p14 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_10675;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p9);
    goto corral_source_split_10674;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume !(out_$i19 == 1);
    goto corral_source_split_10685;

  $bb10:
    assume !(out_$i28 == 1);
    goto corral_source_split_10698;

  $bb15:
    assume !(out_$i41 == 1);
    goto corral_source_split_10720;

  $bb19:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    out_$p63, out_$i64 := out_$p11, out_$i8;
    goto $bb26;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    out_$p63, out_$i64 := out_$p61, out_$i62;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10751;

  $bb24:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    out_$p61, out_$i62 := out_$p11, out_$i8;
    goto $bb25;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    out_$p61, out_$i62 := out_$p13, out_$i59;
    goto $bb25;

  $bb23:
    assume out_$i60 == 1;
    goto corral_source_split_10749;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    out_$i60 := $ugt.i32(out_$i8, out_$i59);
    goto corral_source_split_10747;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    out_$i59 := $trunc.i64.i32(out_$i58);
    call {:si_unique_call 782} {:cexpr "d"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_10746;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    out_$i58 := $sext.i32.i64(out_$i57);
    call {:si_unique_call 781} {:cexpr "ret___2"} boogie_si_record_i64(out_$i58);
    goto corral_source_split_10745;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_10744;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i54;
    goto $bb22;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i56;
    goto $bb22;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    out_$i56 := $sub.i32(0, out_$i54);
    goto corral_source_split_10740;

  $bb20:
    assume out_$i55 == 1;
    goto corral_source_split_10739;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    out_$i55 := $slt.i32(out_$i54, 0);
    goto corral_source_split_10737;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    out_$i54 := $sub.i32(out_$i51, out_$i53);
    call {:si_unique_call 780} {:cexpr "__x___6"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_10736;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.0, out_$p52);
    goto corral_source_split_10735;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_10734;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.0, out_$p50);
    goto corral_source_split_10733;

  $bb18:
    assume out_$i49 == 1;
    out_$p50 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_10732;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i10, out_$i34);
    goto corral_source_split_10715;

  $bb13:
    assume !(out_$i35 == 1);
    goto corral_source_split_10714;

  $bb21:
    assume !(out_$i55 == 1);
    goto corral_source_split_10742;

  $bb27_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$p14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i49, out_$p50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$p63, out_$i64, out_$p46, out_$i47, out_$i48, out_$p65, out_$p66, out_$i67, out_$i68, out_$i8, out_$p9, out_$i10, out_$p11, out_$p69 := fb_find_nearest_mode_loop_$bb4(in_$p0, in_$i5, out_$p12, out_$p13, out_$p14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i49, out_$p50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$p63, out_$i64, out_$p46, out_$i47, out_$i48, out_$p65, out_$p66, out_$i67, out_$i68, out_$i8, out_$p9, out_$i10, out_$p11, out_$p69);
    return;

  exit:
    return;
}



procedure fb_find_nearest_mode_loop_$bb4(in_$p0: ref, in_$i5: i64, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i21: i32, in_$i22: i64, in_$p23: ref, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i32, in_$i31: i64, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$i45: i32, in_$i49: i1, in_$p50: ref, in_$i51: i32, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i32, in_$i58: i64, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$i62: i32, in_$p63: ref, in_$i64: i32, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i1, in_$i8: i32, in_$p9: ref, in_$i10: i32, in_$p11: ref, in_$p69: ref) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i21: i32, out_$i22: i64, out_$p23: ref, out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i32, out_$i31: i64, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$i45: i32, out_$i49: i1, out_$p50: ref, out_$i51: i32, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i32, out_$i58: i64, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$i62: i32, out_$p63: ref, out_$i64: i32, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i1, out_$i8: i32, out_$p9: ref, out_$i10: i32, out_$p11: ref, out_$p69: ref);



implementation fb_deferred_io_init_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} fb_deferred_io_init_loop_$bb3();
    return;

  exit:
    return;
}



procedure fb_deferred_io_init_loop_$bb3();



implementation fb_deferred_io_work_loop_$bb12(in_$i38: i64, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p41: ref, in_$p42: ref) returns (out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p41: ref, out_$p42: ref)
{

  entry:
    out_$p43, out_$p44, out_$i45, out_$i46, out_$p41, out_$p42 := in_$p43, in_$p44, in_$i45, in_$i46, in_$p41, in_$p42;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11047;

  $bb14:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$p41, out_$p42 := out_$p44, out_$p41;
    goto $bb14_dummy;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(in_$i38, out_$i45);
    goto corral_source_split_11053;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_11052;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_11051;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p41, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11050;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} list_del(out_$p42);
    goto corral_source_split_11049;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p43, out_$p44, out_$i45, out_$i46, out_$p41, out_$p42 := fb_deferred_io_work_loop_$bb12(in_$i38, out_$p43, out_$p44, out_$i45, out_$i46, out_$p41, out_$p42);
    return;

  exit:
    return;
}



procedure fb_deferred_io_work_loop_$bb12(in_$i38: i64, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p41: ref, in_$p42: ref) returns (out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p41: ref, out_$p42: ref);



implementation fb_deferred_io_work_loop_$bb4(in_$i15: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p17: ref, in_vslice_dummy_var_157: i32) returns (out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p17: ref, out_vslice_dummy_var_157: i32)
{

  entry:
    out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p17, out_vslice_dummy_var_157 := in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p17, in_vslice_dummy_var_157;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_11015;

  $bb6:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p17 := out_$p24;
    goto $bb6_dummy;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, in_$i15);
    goto corral_source_split_11029;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_11028;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_11027;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p23, $mul.ref($sub.ref(0, 32), 64)), $mul.ref(32, 1));
    goto corral_source_split_11026;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(out_$p23, $mul.ref($sub.ref(0, 32), 64));
    goto corral_source_split_11025;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_11024;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_11023;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11022;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_11021;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p17, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_11020;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} unlock_page(out_$p17);
    goto corral_source_split_11019;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} out_vslice_dummy_var_157 := page_mkclean(out_$p17);
    goto corral_source_split_11018;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} lock_page(out_$p17);
    goto corral_source_split_11017;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p17, out_vslice_dummy_var_157 := fb_deferred_io_work_loop_$bb4(in_$i15, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p17, out_vslice_dummy_var_157);
    return;

  exit:
    return;
}



procedure fb_deferred_io_work_loop_$bb4(in_$i15: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p17: ref, in_vslice_dummy_var_157: i32) returns (out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p17: ref, out_vslice_dummy_var_157: i32);
  modifies $CurrAddr;



implementation fb_deferred_io_cleanup_loop_$bb8(in_$p0: ref, in_$p12: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i15: i32) returns (out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i15: i32)
{

  entry:
    out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i15 := in_$i16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i15;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_11123;

  $bb10:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := out_$i20;
    goto $bb10_dummy;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    out_$i22 := $ult.i32(out_$i20, out_$i21);
    goto corral_source_split_11132;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, in_$p12);
    goto corral_source_split_11131;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i15, 4096);
    call {:si_unique_call 875} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_11130;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p19, $0.ref);
    goto corral_source_split_11129;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_11128;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_11127;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} out_$p17 := fb_deferred_io_page(in_$p0, out_$i16);
    goto corral_source_split_11126;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i15);
    goto corral_source_split_11125;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i15 := fb_deferred_io_cleanup_loop_$bb8(in_$p0, in_$p12, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i15);
    return;

  exit:
    return;
}



procedure fb_deferred_io_cleanup_loop_$bb8(in_$p0: ref, in_$p12: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i15: i32) returns (out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i15: i32);
  modifies $M.11;



implementation fb_deferred_io_cleanup_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} fb_deferred_io_cleanup_loop_$bb3();
    return;

  exit:
    return;
}



procedure fb_deferred_io_cleanup_loop_$bb3();



implementation fb_read_loop_$bb38(in_$p3: ref, in_$p44: ref, in_$i67: i1, in_$i68: i64, in_$i69: i32, in_$i70: i64, in_$i71: i64, in_$p72: ref, in_$i73: i64, in_$i74: i64, in_$i75: i1, in_$i76: i32, in_$i79: i64, in_$i80: i64, in_$i81: i64, in_$i82: i64, in_$p83: ref, in_$i84: i32, in_$i85: i64, in_$i86: i64, in_$i87: i1, in_$p63: ref, in_$i64: i64, in_$i65: i32, in_$p66: ref, in_$i88: i32) returns (out_$i67: i1, out_$i68: i64, out_$i69: i32, out_$i70: i64, out_$i71: i64, out_$p72: ref, out_$i73: i64, out_$i74: i64, out_$i75: i1, out_$i76: i32, out_$i79: i64, out_$i80: i64, out_$i81: i64, out_$i82: i64, out_$p83: ref, out_$i84: i32, out_$i85: i64, out_$i86: i64, out_$i87: i1, out_$p63: ref, out_$i64: i64, out_$i65: i32, out_$p66: ref, out_$i88: i32)
{

  entry:
    out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p63, out_$i64, out_$i65, out_$p66, out_$i88 := in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i79, in_$i80, in_$i81, in_$i82, in_$p83, in_$i84, in_$i85, in_$i86, in_$i87, in_$p63, in_$i64, in_$i65, in_$p66, in_$i88;
    goto $bb38, exit;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11316;

  $bb47:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$p63, out_$i64, out_$i65, out_$p66 := out_$p83, out_$i86, out_$i84, out_$p72;
    goto $bb47_dummy;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    out_$i88 := out_$i84;
    assume true;
    goto $bb47;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i64(out_$i86, 0);
    goto corral_source_split_11349;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    out_$i86 := $sub.i64(out_$i64, out_$i85);
    call {:si_unique_call 928} {:cexpr "count"} boogie_si_record_i64(out_$i86);
    goto corral_source_split_11348;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    out_$i85 := $sext.i32.i64(out_$i69);
    goto corral_source_split_11347;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    out_$i84 := $add.i32(out_$i65, out_$i69);
    call {:si_unique_call 927} {:cexpr "cnt"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_11346;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref(out_$p63, $mul.ref(out_$i82, 1));
    goto corral_source_split_11345;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(out_$i69);
    goto corral_source_split_11344;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, in_$p3, out_$i81);
    goto corral_source_split_11343;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i64(out_$i79, out_$i80);
    goto corral_source_split_11342;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    out_$i80 := $sext.i32.i64(out_$i69);
    goto corral_source_split_11341;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i64($M.0, in_$p3);
    goto corral_source_split_11340;

  $bb44:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    out_$i76 := out_$i65;
    assume true;
    goto $bb44;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i64(out_$i74, 0);
    goto corral_source_split_11332;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} out_$i74 := copy_to_user(out_$p63, in_$p44, out_$i73);
    call {:si_unique_call 925} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i74);
    goto corral_source_split_11331;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i69);
    goto corral_source_split_11330;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(out_$p66, $mul.ref(out_$i71, 1));
    goto corral_source_split_11329;

  corral_source_split_11327:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i69);
    goto corral_source_split_11328;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} memcpy_fromio(in_$p44, out_$p66, out_$i70);
    goto corral_source_split_11327;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    out_$i70 := $sext.i32.i64(out_$i69);
    goto corral_source_split_11326;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    out_$i69 := $trunc.i64.i32(out_$i68);
    call {:si_unique_call 922} {:cexpr "c"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_11325;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_11324;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    out_$i68 := out_$i64;
    goto $bb42;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    out_$i68 := 4096;
    goto $bb42;

  $bb40:
    assume out_$i67 == 1;
    goto corral_source_split_11320;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i67 := $ult.i64(4096, out_$i64);
    goto corral_source_split_11318;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb41:
    assume !(out_$i67 == 1);
    goto corral_source_split_11322;

  $bb47_dummy:
    call {:si_unique_call 1} out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p63, out_$i64, out_$i65, out_$p66, out_$i88 := fb_read_loop_$bb38(in_$p3, in_$p44, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p63, out_$i64, out_$i65, out_$p66, out_$i88);
    return;

  exit:
    return;
}



procedure fb_read_loop_$bb38(in_$p3: ref, in_$p44: ref, in_$i67: i1, in_$i68: i64, in_$i69: i32, in_$i70: i64, in_$i71: i64, in_$p72: ref, in_$i73: i64, in_$i74: i64, in_$i75: i1, in_$i76: i32, in_$i79: i64, in_$i80: i64, in_$i81: i64, in_$i82: i64, in_$p83: ref, in_$i84: i32, in_$i85: i64, in_$i86: i64, in_$i87: i1, in_$p63: ref, in_$i64: i64, in_$i65: i32, in_$p66: ref, in_$i88: i32) returns (out_$i67: i1, out_$i68: i64, out_$i69: i32, out_$i70: i64, out_$i71: i64, out_$p72: ref, out_$i73: i64, out_$i74: i64, out_$i75: i1, out_$i76: i32, out_$i79: i64, out_$i80: i64, out_$i81: i64, out_$i82: i64, out_$p83: ref, out_$i84: i32, out_$i85: i64, out_$i86: i64, out_$i87: i1, out_$p63: ref, out_$i64: i64, out_$i65: i32, out_$p66: ref, out_$i88: i32);
  modifies $M.0;



implementation fb_write_loop_$bb41(in_$p3: ref, in_$p48: ref, in_$i71: i1, in_$i72: i64, in_$i73: i32, in_$i74: i64, in_$i75: i64, in_$i76: i1, in_$i77: i32, in_$i80: i64, in_$i81: i64, in_$p82: ref, in_$i83: i64, in_$i84: i64, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$i88: i32, in_$i89: i64, in_$i90: i64, in_$i91: i1, in_$p67: ref, in_$i68: i64, in_$i69: i32, in_$p70: ref, in_$i92: i32) returns (out_$i71: i1, out_$i72: i64, out_$i73: i32, out_$i74: i64, out_$i75: i64, out_$i76: i1, out_$i77: i32, out_$i80: i64, out_$i81: i64, out_$p82: ref, out_$i83: i64, out_$i84: i64, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$i88: i32, out_$i89: i64, out_$i90: i64, out_$i91: i1, out_$p67: ref, out_$i68: i64, out_$i69: i32, out_$p70: ref, out_$i92: i32)
{

  entry:
    out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p67, out_$i68, out_$i69, out_$p70, out_$i92 := in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i80, in_$i81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$p87, in_$i88, in_$i89, in_$i90, in_$i91, in_$p67, in_$i68, in_$i69, in_$p70, in_$i92;
    goto $bb41, exit;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11457;

  $bb50:
    assume out_$i91 == 1;
    assume {:verifier.code 0} true;
    out_$p67, out_$i68, out_$i69, out_$p70 := out_$p87, out_$i90, out_$i88, out_$p82;
    goto $bb50_dummy;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    out_$i92 := out_$i88;
    assume true;
    goto $bb50;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    out_$i91 := $ne.i64(out_$i90, 0);
    goto corral_source_split_11490;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    out_$i90 := $sub.i64(out_$i68, out_$i89);
    call {:si_unique_call 945} {:cexpr "count"} boogie_si_record_i64(out_$i90);
    goto corral_source_split_11489;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    out_$i89 := $sext.i32.i64(out_$i73);
    goto corral_source_split_11488;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    out_$i88 := $add.i32(out_$i69, out_$i73);
    call {:si_unique_call 944} {:cexpr "cnt"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_11487;

  corral_source_split_11485:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref(out_$p67, $mul.ref(out_$i86, 1));
    goto corral_source_split_11486;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    out_$i86 := $sext.i32.i64(out_$i73);
    goto corral_source_split_11485;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, in_$p3, out_$i85);
    goto corral_source_split_11484;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    out_$i85 := $add.i64(out_$i83, out_$i84);
    goto corral_source_split_11483;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    out_$i84 := $sext.i32.i64(out_$i73);
    goto corral_source_split_11482;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i64($M.0, in_$p3);
    goto corral_source_split_11481;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref(out_$p70, $mul.ref(out_$i81, 1));
    goto corral_source_split_11480;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    out_$i81 := $sext.i32.i64(out_$i73);
    goto corral_source_split_11479;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} memcpy_toio(out_$p70, in_$p48, out_$i80);
    goto corral_source_split_11478;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i80 := $sext.i32.i64(out_$i73);
    goto corral_source_split_11477;

  $bb47:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    out_$i77 := out_$i69;
    assume true;
    goto $bb47;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i64(out_$i75, 0);
    goto corral_source_split_11469;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} out_$i75 := copy_from_user(in_$p48, out_$p67, out_$i74);
    call {:si_unique_call 941} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i75);
    goto corral_source_split_11468;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i32.i64(out_$i73);
    goto corral_source_split_11467;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    out_$i73 := $trunc.i64.i32(out_$i72);
    call {:si_unique_call 939} {:cexpr "c"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_11466;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_11465;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i68;
    goto $bb45;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    out_$i72 := 4096;
    goto $bb45;

  $bb43:
    assume out_$i71 == 1;
    goto corral_source_split_11461;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i71 := $ult.i64(4096, out_$i68);
    goto corral_source_split_11459;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb44:
    assume !(out_$i71 == 1);
    goto corral_source_split_11463;

  $bb50_dummy:
    call {:si_unique_call 1} out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p67, out_$i68, out_$i69, out_$p70, out_$i92 := fb_write_loop_$bb41(in_$p3, in_$p48, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p67, out_$i68, out_$i69, out_$p70, out_$i92);
    return;

  exit:
    return;
}



procedure fb_write_loop_$bb41(in_$p3: ref, in_$p48: ref, in_$i71: i1, in_$i72: i64, in_$i73: i32, in_$i74: i64, in_$i75: i64, in_$i76: i1, in_$i77: i32, in_$i80: i64, in_$i81: i64, in_$p82: ref, in_$i83: i64, in_$i84: i64, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$i88: i32, in_$i89: i64, in_$i90: i64, in_$i91: i1, in_$p67: ref, in_$i68: i64, in_$i69: i32, in_$p70: ref, in_$i92: i32) returns (out_$i71: i1, out_$i72: i64, out_$i73: i32, out_$i74: i64, out_$i75: i64, out_$i76: i1, out_$i77: i32, out_$i80: i64, out_$i81: i64, out_$p82: ref, out_$i83: i64, out_$i84: i64, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$i88: i32, out_$i89: i64, out_$i90: i64, out_$i91: i1, out_$p67: ref, out_$i68: i64, out_$i69: i32, out_$p70: ref, out_$i92: i32);
  modifies $M.0;



implementation fb_deferred_io_fault_loop_$bb13()
{

  entry:
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb13_dummy;

  $bb13_dummy:
    call {:si_unique_call 1} fb_deferred_io_fault_loop_$bb13();
    return;

  exit:
    return;
}



procedure fb_deferred_io_fault_loop_$bb13();



implementation fb_deferred_io_mkwrite_loop_$bb10(in_$p3: ref, in_$i31: i64, in_$i35: i64, in_$i36: i64, in_$i37: i1, in_$i38: i32, in_$i39: i64, in_$i40: i64, in_$i41: i1, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p51: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$p34: ref, in_$p63: ref) returns (out_$i35: i64, out_$i36: i64, out_$i37: i1, out_$i38: i32, out_$i39: i64, out_$i40: i64, out_$i41: i1, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p51: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$p34: ref, out_$p63: ref)
{

  entry:
    out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p43, out_$p44, out_$i45, out_$p47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p34, out_$p63 := in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p43, in_$p44, in_$i45, in_$p47, in_$p48, in_$i49, in_$i50, in_$p51, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$p60, in_$i61, in_$i62, in_$p34, in_$p63;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_12887;

  $bb20:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$p34 := out_$p58;
    goto $bb20_dummy;

  corral_source_split_12933:
    assume {:verifier.code 0} true;
    out_$p63 := out_$p58;
    assume true;
    goto $bb20;

  corral_source_split_12932:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i64(out_$i61, in_$i31);
    goto corral_source_split_12933;

  corral_source_split_12931:
    assume {:verifier.code 0} true;
    out_$i61 := $p2i.ref.i64(out_$p60);
    goto corral_source_split_12932;

  corral_source_split_12930:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_12931;

  corral_source_split_12929:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p57, $mul.ref($sub.ref(0, 32), 64)), $mul.ref(32, 1));
    goto corral_source_split_12930;

  corral_source_split_12928:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref(out_$p57, $mul.ref($sub.ref(0, 32), 64));
    goto corral_source_split_12929;

  corral_source_split_12927:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(out_$p56);
    goto corral_source_split_12928;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_12927;

  corral_source_split_12925:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p54, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12926;

  corral_source_split_12924:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p53);
    goto corral_source_split_12925;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p34, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_12924;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_12906:
    assume {:verifier.code 0} true;
    out_$p51 := out_$p34;
    assume true;
    goto $bb16;

  corral_source_split_12905:
    assume {:verifier.code 0} true;
    out_$i50 := $ugt.i64(out_$i45, out_$i49);
    goto corral_source_split_12906;

  corral_source_split_12904:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i64($M.0, out_$p48);
    goto corral_source_split_12905;

  corral_source_split_12903:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_12904;

  corral_source_split_12902:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_12903;

  corral_source_split_12901:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i64($M.0, out_$p44);
    goto corral_source_split_12902;

  corral_source_split_12900:
    assume {:verifier.code 0} true;
    out_$p44 := $bitcast.ref.ref(out_$p43);
    goto corral_source_split_12901;

  corral_source_split_12899:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(out_$p34, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_12900;

  $bb13:
    assume !(out_$i41 == 1);
    goto corral_source_split_12899;

  corral_source_split_12895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_12894:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i64(out_$i40, 0);
    goto corral_source_split_12895;

  corral_source_split_12893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} out_$i40 := ldv__builtin_expect(out_$i39, 0);
    call {:si_unique_call 1369} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i40);
    goto corral_source_split_12894;

  corral_source_split_12892:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i38);
    goto corral_source_split_12893;

  corral_source_split_12891:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i1.i32(out_$i37);
    goto corral_source_split_12892;

  corral_source_split_12890:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i64(out_$i35, out_$i36);
    goto corral_source_split_12891;

  corral_source_split_12889:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(in_$p3);
    goto corral_source_split_12890;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i35 := $p2i.ref.i64(out_$p34);
    goto corral_source_split_12889;

  corral_source_split_12887:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p43, out_$p44, out_$i45, out_$p47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p34, out_$p63 := fb_deferred_io_mkwrite_loop_$bb10(in_$p3, in_$i31, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p43, out_$p44, out_$i45, out_$p47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p34, out_$p63);
    return;

  exit:
    return;
}



procedure fb_deferred_io_mkwrite_loop_$bb10(in_$p3: ref, in_$i31: i64, in_$i35: i64, in_$i36: i64, in_$i37: i1, in_$i38: i32, in_$i39: i64, in_$i40: i64, in_$i41: i1, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p51: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$p34: ref, in_$p63: ref) returns (out_$i35: i64, out_$i36: i64, out_$i37: i1, out_$i38: i32, out_$i39: i64, out_$i40: i64, out_$i41: i1, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p51: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$p34: ref, out_$p63: ref);



implementation get_page_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb10_dummy:
    call {:si_unique_call 1} get_page_loop_$bb10();
    return;

  exit:
    return;
}



procedure get_page_loop_$bb10();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$p24: ref, in_$i53: i32, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i32, in_$i63: i1, in_$i64: i32, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$i77: i1, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$i86: i1, in_$p87: ref, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$p94: ref, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$i110: i64, in_$i111: i1, in_$i112: i32, in_$i113: i32, in_$p114: ref, in_$i115: i64, in_$i116: i1, in_$i117: i32, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i135: i64, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i140: i64, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i145: i64, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$i150: i64, in_$i151: i64, in_$i152: i32, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i157: i64, in_$i158: i64, in_$i159: i32, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$i164: i32, in_$i165: i64, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$p170: ref, in_$i171: i32, in_$i172: i32, in_$i173: i1, in_$i174: i32, in_$i175: i32, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$p187: ref, in_$i189: i32, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$i194: i64, in_$i195: i32, in_$i197: i32, in_$i198: i1, in_$p199: ref, in_$i200: i32, in_$i201: i64, in_$i203: i32, in_$i204: i1, in_$i205: i32, in_$i206: i1, in_$i207: i1, in_$i208: i1, in_$i209: i32, in_$i210: i1, in_$i211: i32, in_$i212: i1, in_$i213: i32, in_$i214: i1, in_$i215: i32, in_$i216: i32, in_$i217: i1, in_$i218: i32, in_$i219: i1, in_$i220: i32, in_$i221: i1, in_$i222: i32, in_$i223: i1, in_$i224: i32, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$i228: i1, in_$i229: i1, in_$i230: i1, in_$i231: i1, in_$i232: i32, in_$i233: i1, in_$p234: ref, in_$p235: ref, in_$i237: i32, in_$i238: i32, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$i242: i64, in_$i244: i32, in_$i245: i1, in_$p246: ref, in_$i247: i64, in_$i248: i32, in_$i250: i32, in_$i251: i1, in_$p252: ref, in_$p253: ref, in_$i254: i32, in_$i255: i32, in_$i256: i1, in_$i257: i32, in_$i258: i32, in_vslice_dummy_var_183: i32, in_vslice_dummy_var_184: i64, in_vslice_dummy_var_185: i64, in_vslice_dummy_var_186: i64, in_vslice_dummy_var_187: i32, in_vslice_dummy_var_188: i32, in_vslice_dummy_var_189: i64, in_vslice_dummy_var_190: i32, in_vslice_dummy_var_191: i32, in_vslice_dummy_var_192: i32, in_vslice_dummy_var_193: i64, in_vslice_dummy_var_194: i64, in_vslice_dummy_var_195: i32, in_vslice_dummy_var_196: i64, in_vslice_dummy_var_197: i64) returns (out_$i53: i32, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i32, out_$i63: i1, out_$i64: i32, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$i77: i1, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$i86: i1, out_$p87: ref, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$p94: ref, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$i110: i64, out_$i111: i1, out_$i112: i32, out_$i113: i32, out_$p114: ref, out_$i115: i64, out_$i116: i1, out_$i117: i32, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i135: i64, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i140: i64, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i145: i64, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$i150: i64, out_$i151: i64, out_$i152: i32, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i157: i64, out_$i158: i64, out_$i159: i32, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$i164: i32, out_$i165: i64, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$p170: ref, out_$i171: i32, out_$i172: i32, out_$i173: i1, out_$i174: i32, out_$i175: i32, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$p187: ref, out_$i189: i32, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$i194: i64, out_$i195: i32, out_$i197: i32, out_$i198: i1, out_$p199: ref, out_$i200: i32, out_$i201: i64, out_$i203: i32, out_$i204: i1, out_$i205: i32, out_$i206: i1, out_$i207: i1, out_$i208: i1, out_$i209: i32, out_$i210: i1, out_$i211: i32, out_$i212: i1, out_$i213: i32, out_$i214: i1, out_$i215: i32, out_$i216: i32, out_$i217: i1, out_$i218: i32, out_$i219: i1, out_$i220: i32, out_$i221: i1, out_$i222: i32, out_$i223: i1, out_$i224: i32, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$i228: i1, out_$i229: i1, out_$i230: i1, out_$i231: i1, out_$i232: i32, out_$i233: i1, out_$p234: ref, out_$p235: ref, out_$i237: i32, out_$i238: i32, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$i242: i64, out_$i244: i32, out_$i245: i1, out_$p246: ref, out_$i247: i64, out_$i248: i32, out_$i250: i32, out_$i251: i1, out_$p252: ref, out_$p253: ref, out_$i254: i32, out_$i255: i32, out_$i256: i1, out_$i257: i32, out_$i258: i32, out_vslice_dummy_var_183: i32, out_vslice_dummy_var_184: i64, out_vslice_dummy_var_185: i64, out_vslice_dummy_var_186: i64, out_vslice_dummy_var_187: i32, out_vslice_dummy_var_188: i32, out_vslice_dummy_var_189: i64, out_vslice_dummy_var_190: i32, out_vslice_dummy_var_191: i32, out_vslice_dummy_var_192: i32, out_vslice_dummy_var_193: i64, out_vslice_dummy_var_194: i64, out_vslice_dummy_var_195: i32, out_vslice_dummy_var_196: i64, out_vslice_dummy_var_197: i64)
{

  entry:
    out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$p101, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i137, out_$i138, out_$p139, out_$i140, out_$i142, out_$i143, out_$p144, out_$i145, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i167, out_$i168, out_$p169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i180, out_$i181, out_$p182, out_$i184, out_$i185, out_$p186, out_$p187, out_$i189, out_$i190, out_$i191, out_$i192, out_$p193, out_$i194, out_$i195, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$p234, out_$p235, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i244, out_$i245, out_$p246, out_$i247, out_$i248, out_$i250, out_$i251, out_$p252, out_$p253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_vslice_dummy_var_183, out_vslice_dummy_var_184, out_vslice_dummy_var_185, out_vslice_dummy_var_186, out_vslice_dummy_var_187, out_vslice_dummy_var_188, out_vslice_dummy_var_189, out_vslice_dummy_var_190, out_vslice_dummy_var_191, out_vslice_dummy_var_192, out_vslice_dummy_var_193, out_vslice_dummy_var_194, out_vslice_dummy_var_195, out_vslice_dummy_var_196, out_vslice_dummy_var_197 := in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$p72, in_$p73, in_$p74, in_$p75, in_$i76, in_$i77, in_$i78, in_$i79, in_$p80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$p87, in_$p88, in_$i89, in_$i90, in_$i91, in_$i92, in_$p93, in_$p94, in_$i95, in_$i96, in_$i97, in_$i98, in_$p99, in_$p100, in_$p101, in_$i103, in_$i104, in_$p105, in_$p106, in_$p107, in_$p108, in_$p109, in_$i110, in_$i111, in_$i112, in_$i113, in_$p114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$p134, in_$i135, in_$i137, in_$i138, in_$p139, in_$i140, in_$i142, in_$i143, in_$p144, in_$i145, in_$i147, in_$i148, in_$p149, in_$i150, in_$i151, in_$i152, in_$i154, in_$i155, in_$p156, in_$i157, in_$i158, in_$i159, in_$i161, in_$i162, in_$p163, in_$i164, in_$i165, in_$i167, in_$i168, in_$p169, in_$p170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$p178, in_$i180, in_$i181, in_$p182, in_$i184, in_$i185, in_$p186, in_$p187, in_$i189, in_$i190, in_$i191, in_$i192, in_$p193, in_$i194, in_$i195, in_$i197, in_$i198, in_$p199, in_$i200, in_$i201, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$p234, in_$p235, in_$i237, in_$i238, in_$i239, in_$i240, in_$p241, in_$i242, in_$i244, in_$i245, in_$p246, in_$i247, in_$i248, in_$i250, in_$i251, in_$p252, in_$p253, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_vslice_dummy_var_183, in_vslice_dummy_var_184, in_vslice_dummy_var_185, in_vslice_dummy_var_186, in_vslice_dummy_var_187, in_vslice_dummy_var_188, in_vslice_dummy_var_189, in_vslice_dummy_var_190, in_vslice_dummy_var_191, in_vslice_dummy_var_192, in_vslice_dummy_var_193, in_vslice_dummy_var_194, in_vslice_dummy_var_195, in_vslice_dummy_var_196, in_vslice_dummy_var_197;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1456} out_$i53 := __VERIFIER_nondet_int();
    call {:si_unique_call 1457} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i53);
    call {:si_unique_call 1458} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i53);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb65_dummy;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_13106:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb21:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb35:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_13153:
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_13152:
    assume {:verifier.code 0} true;
    $M.81 := out_$i84;
    call {:si_unique_call 1466} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_13153;

  corral_source_split_13151:
    assume {:verifier.code 0} true;
    out_$i84 := $add.i32(out_$i83, 1);
    goto corral_source_split_13152;

  corral_source_split_13150:
    assume {:verifier.code 0} true;
    out_$i83 := $M.81;
    goto corral_source_split_13151;

  corral_source_split_13149:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1465} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_13150;

  $bb39:
    assume out_$i82 == 1;
    goto corral_source_split_13149;

  corral_source_split_13147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_13146:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i64(out_$i81, 0);
    goto corral_source_split_13147;

  corral_source_split_13145:
    assume {:verifier.code 0} true;
    out_$i81 := $p2i.ref.i64(out_$p80);
    goto corral_source_split_13146;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p80 := $M.87;
    goto corral_source_split_13145;

  $bb37:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_13143:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_13142:
    assume {:verifier.code 0} true;
    $M.81 := out_$i79;
    call {:si_unique_call 1464} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_13143;

  corral_source_split_13141:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i78, 1);
    goto corral_source_split_13142;

  corral_source_split_13140:
    assume {:verifier.code 0} true;
    out_$i78 := $M.81;
    goto corral_source_split_13141;

  corral_source_split_13139:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1463} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_13140;

  $bb36:
    assume out_$i77 == 1;
    goto corral_source_split_13139;

  corral_source_split_13137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_13136:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i64(out_$i76, 0);
    goto corral_source_split_13137;

  corral_source_split_13135:
    assume {:verifier.code 0} true;
    out_$i76 := $p2i.ref.i64(out_$p75);
    goto corral_source_split_13136;

  corral_source_split_13134:
    assume {:verifier.code 0} true;
    out_$p75 := $M.87;
    goto corral_source_split_13135;

  corral_source_split_13133:
    assume {:verifier.code 0} true;
    $M.87 := out_$p74;
    goto corral_source_split_13134;

  corral_source_split_13132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} out_$p74 := fb_seq_start(out_$p72, out_$p73);
    goto corral_source_split_13133;

  corral_source_split_13131:
    assume {:verifier.code 0} true;
    out_$p73 := $M.86;
    goto corral_source_split_13132;

  corral_source_split_13130:
    assume {:verifier.code 0} true;
    out_$p72 := $M.71;
    goto corral_source_split_13131;

  $bb34:
    assume out_$i71 == 1;
    goto corral_source_split_13130;

  corral_source_split_13128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_13127:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, 1);
    goto corral_source_split_13128;

  corral_source_split_13126:
    assume {:verifier.code 0} true;
    out_$i70 := $M.70;
    goto corral_source_split_13127;

  $bb32:
    assume out_$i69 == 1;
    goto corral_source_split_13126;

  $bb30:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i64, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb23:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i64, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i65 := $slt.i32(out_$i64, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_13112:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1459} out_$i64 := __VERIFIER_nondet_int();
    call {:si_unique_call 1460} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i64);
    call {:si_unique_call 1461} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i64);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i63 == 1;
    goto corral_source_split_13112;

  corral_source_split_13110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_13109:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i32(out_$i62, 0);
    goto corral_source_split_13110;

  corral_source_split_13108:
    assume {:verifier.code 0} true;
    out_$i62 := $M.70;
    goto corral_source_split_13109;

  $bb18:
    assume out_$i61 == 1;
    goto corral_source_split_13108;

  $bb14:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i53, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i59 := $slt.i32(out_$i53, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i53, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb48:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_13174:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_13173:
    assume {:verifier.code 0} true;
    $M.81 := out_$i96;
    call {:si_unique_call 1472} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_13174;

  corral_source_split_13172:
    assume {:verifier.code 0} true;
    out_$i96 := $sub.i32(out_$i95, 1);
    goto corral_source_split_13173;

  corral_source_split_13171:
    assume {:verifier.code 0} true;
    out_$i95 := $M.81;
    goto corral_source_split_13172;

  corral_source_split_13170:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1471} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_13171;

  corral_source_split_13169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} fb_seq_stop(out_$p93, out_$p94);
    goto corral_source_split_13170;

  corral_source_split_13168:
    assume {:verifier.code 0} true;
    out_$p94 := $M.88;
    goto corral_source_split_13169;

  corral_source_split_13167:
    assume {:verifier.code 0} true;
    out_$p93 := $M.71;
    goto corral_source_split_13168;

  $bb47:
    assume out_$i92 == 1;
    goto corral_source_split_13167;

  corral_source_split_13165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_13164:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 2);
    goto corral_source_split_13165;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i91 := $M.70;
    goto corral_source_split_13164;

  $bb45:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_13162:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_13161:
    assume {:verifier.code 0} true;
    $M.81 := out_$i90;
    call {:si_unique_call 1469} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i90);
    goto corral_source_split_13162;

  corral_source_split_13160:
    assume {:verifier.code 0} true;
    out_$i90 := $sub.i32(out_$i89, 1);
    goto corral_source_split_13161;

  corral_source_split_13159:
    assume {:verifier.code 0} true;
    out_$i89 := $M.81;
    goto corral_source_split_13160;

  corral_source_split_13158:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1468} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_13159;

  corral_source_split_13157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} fb_seq_stop(out_$p87, out_$p88);
    goto corral_source_split_13158;

  corral_source_split_13156:
    assume {:verifier.code 0} true;
    out_$p88 := $M.88;
    goto corral_source_split_13157;

  corral_source_split_13155:
    assume {:verifier.code 0} true;
    out_$p87 := $M.71;
    goto corral_source_split_13156;

  $bb44:
    assume out_$i86 == 1;
    goto corral_source_split_13155;

  corral_source_split_13124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_13123:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i85, 3);
    goto corral_source_split_13124;

  corral_source_split_13122:
    assume {:verifier.code 0} true;
    out_$i85 := $M.70;
    goto corral_source_split_13123;

  $bb31:
    assume !(out_$i68 == 1);
    goto corral_source_split_13122;

  $bb51:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_13181:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_13180:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1474} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_13181;

  corral_source_split_13179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} out_vslice_dummy_var_183 := fb_seq_show(out_$p99, out_$p101);
    goto corral_source_split_13180;

  corral_source_split_13178:
    assume {:verifier.code 0} true;
    out_$p101 := $bitcast.ref.ref(out_$p100);
    goto corral_source_split_13179;

  corral_source_split_13177:
    assume {:verifier.code 0} true;
    out_$p100 := $M.86;
    goto corral_source_split_13178;

  corral_source_split_13176:
    assume {:verifier.code 0} true;
    out_$p99 := $M.71;
    goto corral_source_split_13177;

  $bb50:
    assume out_$i98 == 1;
    goto corral_source_split_13176;

  corral_source_split_13116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_13115:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 3);
    goto corral_source_split_13116;

  corral_source_split_13114:
    assume {:verifier.code 0} true;
    out_$i97 := $M.70;
    goto corral_source_split_13115;

  $bb25:
    assume out_$i66 == 1;
    goto corral_source_split_13114;

  $bb24:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i64, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb54:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_13207:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_13206:
    assume {:verifier.code 0} true;
    $M.81 := out_$i118;
    call {:si_unique_call 1479} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i118);
    goto corral_source_split_13207;

  corral_source_split_13205:
    assume {:verifier.code 0} true;
    out_$i118 := $add.i32(out_$i117, 1);
    goto corral_source_split_13206;

  corral_source_split_13204:
    assume {:verifier.code 0} true;
    out_$i117 := $M.81;
    goto corral_source_split_13205;

  corral_source_split_13203:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1478} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_13204;

  $bb58:
    assume out_$i116 == 1;
    goto corral_source_split_13203;

  corral_source_split_13201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_13200:
    assume {:verifier.code 0} true;
    out_$i116 := $ne.i64(out_$i115, 0);
    goto corral_source_split_13201;

  corral_source_split_13199:
    assume {:verifier.code 0} true;
    out_$i115 := $p2i.ref.i64(out_$p114);
    goto corral_source_split_13200;

  $bb57:
    assume {:verifier.code 0} true;
    out_$p114 := $M.89;
    goto corral_source_split_13199;

  $bb56:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_13197:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_13196:
    assume {:verifier.code 0} true;
    $M.81 := out_$i113;
    call {:si_unique_call 1477} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i113);
    goto corral_source_split_13197;

  corral_source_split_13195:
    assume {:verifier.code 0} true;
    out_$i113 := $add.i32(out_$i112, 1);
    goto corral_source_split_13196;

  corral_source_split_13194:
    assume {:verifier.code 0} true;
    out_$i112 := $M.81;
    goto corral_source_split_13195;

  corral_source_split_13193:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1476} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_13194;

  $bb55:
    assume out_$i111 == 1;
    goto corral_source_split_13193;

  corral_source_split_13191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_13190:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i64(out_$i110, 0);
    goto corral_source_split_13191;

  corral_source_split_13189:
    assume {:verifier.code 0} true;
    out_$i110 := $p2i.ref.i64(out_$p109);
    goto corral_source_split_13190;

  corral_source_split_13188:
    assume {:verifier.code 0} true;
    out_$p109 := $M.89;
    goto corral_source_split_13189;

  corral_source_split_13187:
    assume {:verifier.code 0} true;
    $M.89 := out_$p108;
    goto corral_source_split_13188;

  corral_source_split_13186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} out_$p108 := fb_seq_next(out_$p105, out_$p106, out_$p107);
    goto corral_source_split_13187;

  corral_source_split_13185:
    assume {:verifier.code 0} true;
    out_$p107 := $M.86;
    goto corral_source_split_13186;

  corral_source_split_13184:
    assume {:verifier.code 0} true;
    out_$p106 := $M.88;
    goto corral_source_split_13185;

  corral_source_split_13183:
    assume {:verifier.code 0} true;
    out_$p105 := $M.71;
    goto corral_source_split_13184;

  $bb53:
    assume out_$i104 == 1;
    goto corral_source_split_13183;

  corral_source_split_13120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_13119:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i103, 3);
    goto corral_source_split_13120;

  corral_source_split_13118:
    assume {:verifier.code 0} true;
    out_$i103 := $M.70;
    goto corral_source_split_13119;

  $bb27:
    assume out_$i67 == 1;
    goto corral_source_split_13118;

  $bb26:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i64, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_13209:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} ldv_stop();
    goto corral_source_split_13209;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i67 == 1);
    goto $bb29;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i69 == 1);
    goto $bb29;

  $bb67:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb94:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_13262:
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_13261:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 1487} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_13262;

  corral_source_split_13260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} out_vslice_dummy_var_185 := fb_write(out_$p139, in_$p19, out_$i140, in_$p16);
    goto corral_source_split_13261;

  corral_source_split_13259:
    assume {:verifier.code 0} true;
    out_$i140 := $load.i64($M.76, in_$p9);
    goto corral_source_split_13260;

  corral_source_split_13258:
    assume {:verifier.code 0} true;
    out_$p139 := $M.78;
    goto corral_source_split_13259;

  $bb93:
    assume out_$i138 == 1;
    goto corral_source_split_13258;

  corral_source_split_13256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_13255:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i137, 2);
    goto corral_source_split_13256;

  $bb92:
    assume {:verifier.code 0} true;
    out_$i137 := $M.79;
    goto corral_source_split_13255;

  $bb91:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_13253:
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_13252:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1485} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_13253;

  corral_source_split_13251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} out_vslice_dummy_var_184 := fb_write(out_$p134, in_$p19, out_$i135, in_$p16);
    goto corral_source_split_13252;

  corral_source_split_13250:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i64($M.76, in_$p9);
    goto corral_source_split_13251;

  corral_source_split_13249:
    assume {:verifier.code 0} true;
    out_$p134 := $M.78;
    goto corral_source_split_13250;

  $bb90:
    assume out_$i133 == 1;
    goto corral_source_split_13249;

  corral_source_split_13247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_13246:
    assume {:verifier.code 0} true;
    out_$i133 := $eq.i32(out_$i132, 1);
    goto corral_source_split_13247;

  corral_source_split_13245:
    assume {:verifier.code 0} true;
    out_$i132 := $M.79;
    goto corral_source_split_13246;

  $bb88:
    assume out_$i131 == 1;
    goto corral_source_split_13245;

  $bb86:
    assume out_$i130 == 1;
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i121, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb82:
    assume out_$i128 == 1;
    assume {:verifier.code 0} true;
    out_$i130 := $slt.i32(out_$i121, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb69:
    assume out_$i122 == 1;
    assume {:verifier.code 0} true;
    out_$i128 := $slt.i32(out_$i121, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb68:
    assume {:verifier.code 0} true;
    out_$i122 := $slt.i32(out_$i121, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_13211:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1481} out_$i121 := __VERIFIER_nondet_int();
    call {:si_unique_call 1482} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i121);
    call {:si_unique_call 1483} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i121);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb66:
    assume out_$i120 == 1;
    goto corral_source_split_13211;

  corral_source_split_13104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_13103:
    assume {:verifier.code 0} true;
    out_$i120 := $ne.i32(out_$i119, 0);
    goto corral_source_split_13104;

  corral_source_split_13102:
    assume {:verifier.code 0} true;
    out_$i119 := $M.79;
    goto corral_source_split_13103;

  $bb16:
    assume out_$i60 == 1;
    goto corral_source_split_13102;

  $bb15:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i53, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb98:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_13268:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_13267:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 1489} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_13268;

  corral_source_split_13266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} out_vslice_dummy_var_186 := fb_read(out_$p144, in_$p14, out_$i145, in_$p18);
    goto corral_source_split_13267;

  corral_source_split_13265:
    assume {:verifier.code 0} true;
    out_$i145 := $load.i64($M.76, in_$p0);
    goto corral_source_split_13266;

  corral_source_split_13264:
    assume {:verifier.code 0} true;
    out_$p144 := $M.78;
    goto corral_source_split_13265;

  $bb97:
    assume out_$i143 == 1;
    goto corral_source_split_13264;

  corral_source_split_13243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_13242:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i142, 2);
    goto corral_source_split_13243;

  corral_source_split_13241:
    assume {:verifier.code 0} true;
    out_$i142 := $M.79;
    goto corral_source_split_13242;

  $bb87:
    assume !(out_$i130 == 1);
    goto corral_source_split_13241;

  $bb104:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_13287:
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_13286:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 1493} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_13287;

  corral_source_split_13285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} out_vslice_dummy_var_188 := fb_deferred_io_fsync(out_$p156, out_$i157, out_$i158, out_$i159);
    goto corral_source_split_13286;

  corral_source_split_13284:
    assume {:verifier.code 0} true;
    out_$i159 := $load.i32($M.76, in_$p1);
    goto corral_source_split_13285;

  corral_source_split_13283:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i64($M.76, in_$p3);
    goto corral_source_split_13284;

  corral_source_split_13282:
    assume {:verifier.code 0} true;
    out_$i157 := $load.i64($M.76, in_$p5);
    goto corral_source_split_13283;

  corral_source_split_13281:
    assume {:verifier.code 0} true;
    out_$p156 := $M.78;
    goto corral_source_split_13282;

  $bb103:
    assume out_$i155 == 1;
    goto corral_source_split_13281;

  corral_source_split_13279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_13278:
    assume {:verifier.code 0} true;
    out_$i155 := $eq.i32(out_$i154, 2);
    goto corral_source_split_13279;

  $bb102:
    assume {:verifier.code 0} true;
    out_$i154 := $M.79;
    goto corral_source_split_13278;

  $bb101:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_13276:
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_13275:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1491} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_13276;

  corral_source_split_13274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} out_vslice_dummy_var_187 := fb_deferred_io_fsync(out_$p149, out_$i150, out_$i151, out_$i152);
    goto corral_source_split_13275;

  corral_source_split_13273:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i32($M.76, in_$p1);
    goto corral_source_split_13274;

  corral_source_split_13272:
    assume {:verifier.code 0} true;
    out_$i151 := $load.i64($M.76, in_$p3);
    goto corral_source_split_13273;

  corral_source_split_13271:
    assume {:verifier.code 0} true;
    out_$i150 := $load.i64($M.76, in_$p5);
    goto corral_source_split_13272;

  corral_source_split_13270:
    assume {:verifier.code 0} true;
    out_$p149 := $M.78;
    goto corral_source_split_13271;

  $bb100:
    assume out_$i148 == 1;
    goto corral_source_split_13270;

  corral_source_split_13235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_13234:
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(out_$i147, 1);
    goto corral_source_split_13235;

  corral_source_split_13233:
    assume {:verifier.code 0} true;
    out_$i147 := $M.79;
    goto corral_source_split_13234;

  $bb84:
    assume out_$i129 == 1;
    goto corral_source_split_13233;

  $bb83:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(out_$i121, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb107:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_13294:
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_13293:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 1495} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_13294;

  SeqInstr_84:
    goto corral_source_split_13293;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  corral_source_split_13292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} out_vslice_dummy_var_189 := fb_compat_ioctl(out_$p163, out_$i164, out_$i165);
    goto SeqInstr_83;

  corral_source_split_13291:
    assume {:verifier.code 0} true;
    out_$i165 := $load.i64($M.76, in_$p7);
    goto corral_source_split_13292;

  corral_source_split_13290:
    assume {:verifier.code 0} true;
    out_$i164 := $load.i32($M.76, in_$p8);
    goto corral_source_split_13291;

  corral_source_split_13289:
    assume {:verifier.code 0} true;
    out_$p163 := $M.78;
    goto corral_source_split_13290;

  $bb106:
    assume out_$i162 == 1;
    goto corral_source_split_13289;

  corral_source_split_13239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_13238:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i161, 2);
    goto corral_source_split_13239;

  corral_source_split_13237:
    assume {:verifier.code 0} true;
    out_$i161 := $M.79;
    goto corral_source_split_13238;

  $bb85:
    assume !(out_$i129 == 1);
    goto corral_source_split_13237;

  $bb110:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb112:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_13308:
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_13307:
    assume {:verifier.code 0} true;
    $M.81 := out_$i175;
    call {:si_unique_call 1499} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i175);
    goto corral_source_split_13308;

  corral_source_split_13306:
    assume {:verifier.code 0} true;
    out_$i175 := $add.i32(out_$i174, 1);
    goto corral_source_split_13307;

  corral_source_split_13305:
    assume {:verifier.code 0} true;
    out_$i174 := $M.81;
    goto corral_source_split_13306;

  corral_source_split_13304:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 1498} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_13305;

  $bb111:
    assume out_$i173 == 1;
    goto corral_source_split_13304;

  corral_source_split_13302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_13301:
    assume {:verifier.code 0} true;
    out_$i173 := $eq.i32(out_$i172, 0);
    goto corral_source_split_13302;

  corral_source_split_13300:
    assume {:verifier.code 0} true;
    out_$i172 := $M.90;
    goto corral_source_split_13301;

  corral_source_split_13299:
    assume {:verifier.code 0} true;
    $M.90 := out_$i171;
    call {:si_unique_call 1497} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i171);
    goto corral_source_split_13300;

  SeqInstr_87:
    goto corral_source_split_13299;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  corral_source_split_13298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} out_$i171 := fb_open(out_$p169, out_$p170);
    goto SeqInstr_86;

  corral_source_split_13297:
    assume {:verifier.code 0} true;
    out_$p170 := $M.78;
    goto corral_source_split_13298;

  corral_source_split_13296:
    assume {:verifier.code 0} true;
    out_$p169 := $M.77;
    goto corral_source_split_13297;

  $bb109:
    assume out_$i168 == 1;
    goto corral_source_split_13296;

  corral_source_split_13227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_13226:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 1);
    goto corral_source_split_13227;

  corral_source_split_13225:
    assume {:verifier.code 0} true;
    out_$i167 := $M.79;
    goto corral_source_split_13226;

  $bb80:
    assume out_$i127 == 1;
    goto corral_source_split_13225;

  $bb71:
    assume out_$i123 == 1;
    assume {:verifier.code 0} true;
    out_$i127 := $slt.i32(out_$i121, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb70:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    out_$i123 := $slt.i32(out_$i121, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb119:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_13321:
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_13320:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 1503} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_13321;

  SeqInstr_93:
    goto corral_source_split_13320;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  corral_source_split_13319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} out_vslice_dummy_var_191 := fb_mmap(out_$p182, in_$p21);
    goto SeqInstr_92;

  corral_source_split_13318:
    assume {:verifier.code 0} true;
    out_$p182 := $M.78;
    goto corral_source_split_13319;

  $bb118:
    assume out_$i181 == 1;
    goto corral_source_split_13318;

  corral_source_split_13316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_13315:
    assume {:verifier.code 0} true;
    out_$i181 := $eq.i32(out_$i180, 2);
    goto corral_source_split_13316;

  $bb117:
    assume {:verifier.code 0} true;
    out_$i180 := $M.79;
    goto corral_source_split_13315;

  $bb116:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_13313:
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_13312:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1501} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_13313;

  SeqInstr_90:
    goto corral_source_split_13312;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  corral_source_split_13311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} out_vslice_dummy_var_190 := fb_mmap(out_$p178, in_$p21);
    goto SeqInstr_89;

  corral_source_split_13310:
    assume {:verifier.code 0} true;
    out_$p178 := $M.78;
    goto corral_source_split_13311;

  $bb115:
    assume out_$i177 == 1;
    goto corral_source_split_13310;

  corral_source_split_13231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_13230:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 1);
    goto corral_source_split_13231;

  corral_source_split_13229:
    assume {:verifier.code 0} true;
    out_$i176 := $M.79;
    goto corral_source_split_13230;

  $bb81:
    assume !(out_$i127 == 1);
    goto corral_source_split_13229;

  $bb122:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_13330:
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_13329:
    assume {:verifier.code 0} true;
    $M.81 := out_$i190;
    call {:si_unique_call 1506} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i190);
    goto corral_source_split_13330;

  corral_source_split_13328:
    assume {:verifier.code 0} true;
    out_$i190 := $sub.i32(out_$i189, 1);
    goto corral_source_split_13329;

  corral_source_split_13327:
    assume {:verifier.code 0} true;
    out_$i189 := $M.81;
    goto corral_source_split_13328;

  corral_source_split_13326:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1505} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_13327;

  SeqInstr_96:
    goto corral_source_split_13326;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  corral_source_split_13325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} out_vslice_dummy_var_192 := fb_release(out_$p186, out_$p187);
    goto SeqInstr_95;

  corral_source_split_13324:
    assume {:verifier.code 0} true;
    out_$p187 := $M.78;
    goto corral_source_split_13325;

  corral_source_split_13323:
    assume {:verifier.code 0} true;
    out_$p186 := $M.77;
    goto corral_source_split_13324;

  $bb121:
    assume out_$i185 == 1;
    goto corral_source_split_13323;

  corral_source_split_13215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_13214:
    assume {:verifier.code 0} true;
    out_$i185 := $eq.i32(out_$i184, 2);
    goto corral_source_split_13215;

  corral_source_split_13213:
    assume {:verifier.code 0} true;
    out_$i184 := $M.79;
    goto corral_source_split_13214;

  $bb73:
    assume out_$i124 == 1;
    goto corral_source_split_13213;

  $bb72:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    out_$i124 := $slt.i32(out_$i121, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb125:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_13337:
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_13336:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 1508} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_13337;

  corral_source_split_13335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} out_vslice_dummy_var_193 := default_llseek(out_$p193, out_$i194, out_$i195);
    goto corral_source_split_13336;

  corral_source_split_13334:
    assume {:verifier.code 0} true;
    out_$i195 := $load.i32($M.76, in_$p10);
    goto corral_source_split_13335;

  corral_source_split_13333:
    assume {:verifier.code 0} true;
    out_$i194 := $load.i64($M.76, in_$p2);
    goto corral_source_split_13334;

  corral_source_split_13332:
    assume {:verifier.code 0} true;
    out_$p193 := $M.78;
    goto corral_source_split_13333;

  $bb124:
    assume out_$i192 == 1;
    goto corral_source_split_13332;

  corral_source_split_13219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_13218:
    assume {:verifier.code 0} true;
    out_$i192 := $eq.i32(out_$i191, 2);
    goto corral_source_split_13219;

  corral_source_split_13217:
    assume {:verifier.code 0} true;
    out_$i191 := $M.79;
    goto corral_source_split_13218;

  $bb75:
    assume out_$i125 == 1;
    goto corral_source_split_13217;

  $bb74:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    out_$i125 := $slt.i32(out_$i121, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb128:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_13344:
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_13343:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 1510} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_13344;

  SeqInstr_99:
    goto corral_source_split_13343;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  corral_source_split_13342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} out_vslice_dummy_var_194 := fb_ioctl(out_$p199, out_$i200, out_$i201);
    goto SeqInstr_98;

  corral_source_split_13341:
    assume {:verifier.code 0} true;
    out_$i201 := $load.i64($M.76, in_$p6);
    goto corral_source_split_13342;

  corral_source_split_13340:
    assume {:verifier.code 0} true;
    out_$i200 := $load.i32($M.76, in_$p4);
    goto corral_source_split_13341;

  corral_source_split_13339:
    assume {:verifier.code 0} true;
    out_$p199 := $M.78;
    goto corral_source_split_13340;

  $bb127:
    assume out_$i198 == 1;
    goto corral_source_split_13339;

  corral_source_split_13223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_13222:
    assume {:verifier.code 0} true;
    out_$i198 := $eq.i32(out_$i197, 2);
    goto corral_source_split_13223;

  corral_source_split_13221:
    assume {:verifier.code 0} true;
    out_$i197 := $M.79;
    goto corral_source_split_13222;

  $bb77:
    assume out_$i126 == 1;
    goto corral_source_split_13221;

  $bb76:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i121, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_13346:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} ldv_stop();
    goto corral_source_split_13346;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb78:
    assume {:verifier.code 0} true;
    assume !(out_$i126 == 1);
    goto $bb79;

  $bb89:
    assume {:verifier.code 0} true;
    assume !(out_$i131 == 1);
    goto $bb79;

  $bb17:
    assume !(out_$i60 == 1);
    goto corral_source_split_13106;

  $bb134:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb144:
    assume {:verifier.code 0} true;
    assume !(out_$i210 == 1);
    goto $bb145;

  $bb147:
    assume {:verifier.code 0} true;
    assume !(out_$i212 == 1);
    goto $bb145;

  corral_source_split_13360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147;

  corral_source_split_13359:
    assume {:verifier.code 0} true;
    out_$i212 := $eq.i32(out_$i211, 0);
    goto corral_source_split_13360;

  corral_source_split_13358:
    assume {:verifier.code 0} true;
    out_$i211 := $M.81;
    goto corral_source_split_13359;

  $bb143:
    assume out_$i210 == 1;
    goto corral_source_split_13358;

  corral_source_split_13356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_13355:
    assume {:verifier.code 0} true;
    out_$i210 := $eq.i32(out_$i209, 3);
    goto corral_source_split_13356;

  corral_source_split_13354:
    assume {:verifier.code 0} true;
    out_$i209 := $M.82;
    goto corral_source_split_13355;

  $bb141:
    assume out_$i208 == 1;
    goto corral_source_split_13354;

  $bb136:
    assume out_$i206 == 1;
    assume {:verifier.code 0} true;
    out_$i208 := $eq.i32(out_$i205, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb135:
    assume {:verifier.code 0} true;
    out_$i206 := $slt.i32(out_$i205, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_13348:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1512} out_$i205 := __VERIFIER_nondet_int();
    call {:si_unique_call 1513} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i205);
    call {:si_unique_call 1514} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i205);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb133:
    assume out_$i204 == 1;
    goto corral_source_split_13348;

  corral_source_split_13096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_13095:
    assume {:verifier.code 0} true;
    out_$i204 := $ne.i32(out_$i203, 0);
    goto corral_source_split_13096;

  corral_source_split_13094:
    assume {:verifier.code 0} true;
    out_$i203 := $M.82;
    goto corral_source_split_13095;

  $bb12:
    assume out_$i58 == 1;
    goto corral_source_split_13094;

  $bb5:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$i58 := $slt.i32(out_$i53, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := $slt.i32(out_$i53, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb152:
    assume !(out_$i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb157:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  corral_source_split_13381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157;

  corral_source_split_13380:
    assume {:verifier.code 0} true;
    out_$i219 := $ne.i32(out_$i218, 0);
    goto corral_source_split_13381;

  $bb155:
    assume {:verifier.code 0} true;
    out_$i218 := $M.91;
    goto corral_source_split_13380;

  $bb154:
    assume !(out_$i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  corral_source_split_13378:
    assume {:verifier.code 0} true;
    goto $bb155;

  corral_source_split_13377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} ldv_initialize_vm_operations_struct_3();
    goto corral_source_split_13378;

  corral_source_split_13376:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1522} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_13377;

  corral_source_split_13375:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1521} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_13376;

  corral_source_split_13374:
    assume {:verifier.code 0} true;
    $M.82 := 3;
    call {:si_unique_call 1520} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_13375;

  $bb153:
    assume out_$i217 == 1;
    goto corral_source_split_13374;

  corral_source_split_13372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  corral_source_split_13371:
    assume {:verifier.code 0} true;
    out_$i217 := $eq.i32(out_$i216, 0);
    goto corral_source_split_13372;

  corral_source_split_13370:
    assume {:verifier.code 0} true;
    out_$i216 := $M.91;
    goto corral_source_split_13371;

  corral_source_split_13369:
    assume {:verifier.code 0} true;
    $M.91 := out_$i215;
    call {:si_unique_call 1519} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i215);
    goto corral_source_split_13370;

  corral_source_split_13368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} out_$i215 := fbmem_init();
    goto corral_source_split_13369;

  $bb151:
    assume out_$i214 == 1;
    goto corral_source_split_13368;

  corral_source_split_13352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_13351:
    assume {:verifier.code 0} true;
    out_$i214 := $eq.i32(out_$i213, 1);
    goto corral_source_split_13352;

  corral_source_split_13350:
    assume {:verifier.code 0} true;
    out_$i213 := $M.82;
    goto corral_source_split_13351;

  $bb138:
    assume out_$i207 == 1;
    goto corral_source_split_13350;

  $bb137:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    out_$i207 := $eq.i32(out_$i205, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  corral_source_split_13386:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} ldv_stop();
    goto corral_source_split_13386;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb139:
    assume {:verifier.code 0} true;
    assume !(out_$i207 == 1);
    goto $bb140;

  $bb142:
    assume {:verifier.code 0} true;
    assume !(out_$i208 == 1);
    goto $bb140;

  $bb164:
    assume !(out_$i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_13389:
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_13388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} ldv_main_exported_3();
    goto corral_source_split_13389;

  $bb163:
    assume out_$i221 == 1;
    goto corral_source_split_13388;

  corral_source_split_13100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_13099:
    assume {:verifier.code 0} true;
    out_$i221 := $ne.i32(out_$i220, 0);
    goto corral_source_split_13100;

  corral_source_split_13098:
    assume {:verifier.code 0} true;
    out_$i220 := $M.83;
    goto corral_source_split_13099;

  $bb13:
    assume !(out_$i58 == 1);
    goto corral_source_split_13098;

  $bb167:
    assume !(out_$i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_13392:
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_13391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} ldv_main_exported_2();
    goto corral_source_split_13392;

  $bb166:
    assume out_$i223 == 1;
    goto corral_source_split_13391;

  corral_source_split_13088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_13087:
    assume {:verifier.code 0} true;
    out_$i223 := $ne.i32(out_$i222, 0);
    goto corral_source_split_13088;

  corral_source_split_13086:
    assume {:verifier.code 0} true;
    out_$i222 := $M.84;
    goto corral_source_split_13087;

  $bb7:
    assume out_$i56 == 1;
    goto corral_source_split_13086;

  $bb6:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i53, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb170:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb184:
    assume !(out_$i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  corral_source_split_13419:
    assume {:verifier.code 0} true;
    goto $bb185;

  corral_source_split_13418:
    assume {:verifier.code 0} true;
    $M.81 := out_$i238;
    call {:si_unique_call 1533} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i238);
    goto corral_source_split_13419;

  corral_source_split_13417:
    assume {:verifier.code 0} true;
    out_$i238 := $sub.i32(out_$i237, 1);
    goto corral_source_split_13418;

  corral_source_split_13416:
    assume {:verifier.code 0} true;
    out_$i237 := $M.81;
    goto corral_source_split_13417;

  corral_source_split_13415:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1532} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_13416;

  corral_source_split_13414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} out_vslice_dummy_var_195 := ldv_seq_release_16(out_$p234, out_$p235);
    goto corral_source_split_13415;

  corral_source_split_13413:
    assume {:verifier.code 0} true;
    out_$p235 := $M.93;
    goto corral_source_split_13414;

  corral_source_split_13412:
    assume {:verifier.code 0} true;
    out_$p234 := $M.92;
    goto corral_source_split_13413;

  $bb183:
    assume out_$i233 == 1;
    goto corral_source_split_13412;

  corral_source_split_13410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  corral_source_split_13409:
    assume {:verifier.code 0} true;
    out_$i233 := $eq.i32(out_$i232, 2);
    goto corral_source_split_13410;

  corral_source_split_13408:
    assume {:verifier.code 0} true;
    out_$i232 := $M.85;
    goto corral_source_split_13409;

  $bb181:
    assume out_$i231 == 1;
    goto corral_source_split_13408;

  $bb179:
    assume out_$i230 == 1;
    assume {:verifier.code 0} true;
    out_$i231 := $eq.i32(out_$i226, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb172:
    assume out_$i227 == 1;
    assume {:verifier.code 0} true;
    out_$i230 := $slt.i32(out_$i226, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb171:
    assume {:verifier.code 0} true;
    out_$i227 := $slt.i32(out_$i226, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_13394:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1528} out_$i226 := __VERIFIER_nondet_int();
    call {:si_unique_call 1529} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i226);
    call {:si_unique_call 1530} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i226);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb169:
    assume out_$i225 == 1;
    goto corral_source_split_13394;

  corral_source_split_13092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_13091:
    assume {:verifier.code 0} true;
    out_$i225 := $ne.i32(out_$i224, 0);
    goto corral_source_split_13092;

  corral_source_split_13090:
    assume {:verifier.code 0} true;
    out_$i224 := $M.85;
    goto corral_source_split_13091;

  $bb9:
    assume out_$i57 == 1;
    goto corral_source_split_13090;

  $bb8:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i53, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb188:
    assume !(out_$i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_13425:
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_13424:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1535} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_13425;

  corral_source_split_13423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} out_vslice_dummy_var_196 := seq_read(out_$p241, in_$p22, out_$i242, in_$p24);
    goto corral_source_split_13424;

  corral_source_split_13422:
    assume {:verifier.code 0} true;
    out_$i242 := $load.i64($M.76, in_$p12);
    goto corral_source_split_13423;

  corral_source_split_13421:
    assume {:verifier.code 0} true;
    out_$p241 := $M.93;
    goto corral_source_split_13422;

  $bb187:
    assume out_$i240 == 1;
    goto corral_source_split_13421;

  corral_source_split_13406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  corral_source_split_13405:
    assume {:verifier.code 0} true;
    out_$i240 := $eq.i32(out_$i239, 2);
    goto corral_source_split_13406;

  corral_source_split_13404:
    assume {:verifier.code 0} true;
    out_$i239 := $M.85;
    goto corral_source_split_13405;

  $bb180:
    assume !(out_$i230 == 1);
    goto corral_source_split_13404;

  $bb191:
    assume !(out_$i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_13432:
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_13431:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1537} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_13432;

  corral_source_split_13430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} out_vslice_dummy_var_197 := seq_lseek(out_$p246, out_$i247, out_$i248);
    goto corral_source_split_13431;

  corral_source_split_13429:
    assume {:verifier.code 0} true;
    out_$i248 := $load.i32($M.76, in_$p13);
    goto corral_source_split_13430;

  corral_source_split_13428:
    assume {:verifier.code 0} true;
    out_$i247 := $load.i64($M.76, in_$p11);
    goto corral_source_split_13429;

  corral_source_split_13427:
    assume {:verifier.code 0} true;
    out_$p246 := $M.93;
    goto corral_source_split_13428;

  $bb190:
    assume out_$i245 == 1;
    goto corral_source_split_13427;

  corral_source_split_13398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  corral_source_split_13397:
    assume {:verifier.code 0} true;
    out_$i245 := $eq.i32(out_$i244, 2);
    goto corral_source_split_13398;

  corral_source_split_13396:
    assume {:verifier.code 0} true;
    out_$i244 := $M.85;
    goto corral_source_split_13397;

  $bb174:
    assume out_$i228 == 1;
    goto corral_source_split_13396;

  $bb173:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    out_$i228 := $slt.i32(out_$i226, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb194:
    assume !(out_$i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb196:
    assume !(out_$i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_13446:
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_13445:
    assume {:verifier.code 0} true;
    $M.81 := out_$i258;
    call {:si_unique_call 1541} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i258);
    goto corral_source_split_13446;

  corral_source_split_13444:
    assume {:verifier.code 0} true;
    out_$i258 := $add.i32(out_$i257, 1);
    goto corral_source_split_13445;

  corral_source_split_13443:
    assume {:verifier.code 0} true;
    out_$i257 := $M.81;
    goto corral_source_split_13444;

  corral_source_split_13442:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1540} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_13443;

  $bb195:
    assume out_$i256 == 1;
    goto corral_source_split_13442;

  corral_source_split_13440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  corral_source_split_13439:
    assume {:verifier.code 0} true;
    out_$i256 := $eq.i32(out_$i255, 0);
    goto corral_source_split_13440;

  corral_source_split_13438:
    assume {:verifier.code 0} true;
    out_$i255 := $M.94;
    goto corral_source_split_13439;

  corral_source_split_13437:
    assume {:verifier.code 0} true;
    $M.94 := out_$i254;
    call {:si_unique_call 1539} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i254);
    goto corral_source_split_13438;

  corral_source_split_13436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} out_$i254 := proc_fb_open(out_$p252, out_$p253);
    goto corral_source_split_13437;

  corral_source_split_13435:
    assume {:verifier.code 0} true;
    out_$p253 := $M.93;
    goto corral_source_split_13436;

  corral_source_split_13434:
    assume {:verifier.code 0} true;
    out_$p252 := $M.92;
    goto corral_source_split_13435;

  $bb193:
    assume out_$i251 == 1;
    goto corral_source_split_13434;

  corral_source_split_13402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  corral_source_split_13401:
    assume {:verifier.code 0} true;
    out_$i251 := $eq.i32(out_$i250, 1);
    goto corral_source_split_13402;

  corral_source_split_13400:
    assume {:verifier.code 0} true;
    out_$i250 := $M.85;
    goto corral_source_split_13401;

  $bb176:
    assume out_$i229 == 1;
    goto corral_source_split_13400;

  $bb175:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    out_$i229 := $eq.i32(out_$i226, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  corral_source_split_13448:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} ldv_stop();
    goto corral_source_split_13448;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb177:
    assume {:verifier.code 0} true;
    assume !(out_$i229 == 1);
    goto $bb178;

  $bb182:
    assume {:verifier.code 0} true;
    assume !(out_$i231 == 1);
    goto $bb178;

  corral_source_split_13450:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} ldv_stop();
    goto corral_source_split_13450;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i57 == 1);
    goto $bb11;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i61 == 1);
    goto $bb11;

  $bb65_dummy:
    call {:si_unique_call 1} out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$p101, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i137, out_$i138, out_$p139, out_$i140, out_$i142, out_$i143, out_$p144, out_$i145, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i167, out_$i168, out_$p169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i180, out_$i181, out_$p182, out_$i184, out_$i185, out_$p186, out_$p187, out_$i189, out_$i190, out_$i191, out_$i192, out_$p193, out_$i194, out_$i195, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$p234, out_$p235, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i244, out_$i245, out_$p246, out_$i247, out_$i248, out_$i250, out_$i251, out_$p252, out_$p253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_vslice_dummy_var_183, out_vslice_dummy_var_184, out_vslice_dummy_var_185, out_vslice_dummy_var_186, out_vslice_dummy_var_187, out_vslice_dummy_var_188, out_vslice_dummy_var_189, out_vslice_dummy_var_190, out_vslice_dummy_var_191, out_vslice_dummy_var_192, out_vslice_dummy_var_193, out_vslice_dummy_var_194, out_vslice_dummy_var_195, out_vslice_dummy_var_196, out_vslice_dummy_var_197 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p16, in_$p18, in_$p19, in_$p21, in_$p22, in_$p24, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$p101, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i137, out_$i138, out_$p139, out_$i140, out_$i142, out_$i143, out_$p144, out_$i145, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i167, out_$i168, out_$p169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i180, out_$i181, out_$p182, out_$i184, out_$i185, out_$p186, out_$p187, out_$i189, out_$i190, out_$i191, out_$i192, out_$p193, out_$i194, out_$i195, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$p234, out_$p235, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i244, out_$i245, out_$p246, out_$i247, out_$i248, out_$i250, out_$i251, out_$p252, out_$p253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_vslice_dummy_var_183, out_vslice_dummy_var_184, out_vslice_dummy_var_185, out_vslice_dummy_var_186, out_vslice_dummy_var_187, out_vslice_dummy_var_188, out_vslice_dummy_var_189, out_vslice_dummy_var_190, out_vslice_dummy_var_191, out_vslice_dummy_var_192, out_vslice_dummy_var_193, out_vslice_dummy_var_194, out_vslice_dummy_var_195, out_vslice_dummy_var_196, out_vslice_dummy_var_197);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$p24: ref, in_$i53: i32, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i32, in_$i63: i1, in_$i64: i32, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$i77: i1, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$i86: i1, in_$p87: ref, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$p94: ref, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$i110: i64, in_$i111: i1, in_$i112: i32, in_$i113: i32, in_$p114: ref, in_$i115: i64, in_$i116: i1, in_$i117: i32, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i135: i64, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i140: i64, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i145: i64, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$i150: i64, in_$i151: i64, in_$i152: i32, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i157: i64, in_$i158: i64, in_$i159: i32, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$i164: i32, in_$i165: i64, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$p170: ref, in_$i171: i32, in_$i172: i32, in_$i173: i1, in_$i174: i32, in_$i175: i32, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$p187: ref, in_$i189: i32, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$i194: i64, in_$i195: i32, in_$i197: i32, in_$i198: i1, in_$p199: ref, in_$i200: i32, in_$i201: i64, in_$i203: i32, in_$i204: i1, in_$i205: i32, in_$i206: i1, in_$i207: i1, in_$i208: i1, in_$i209: i32, in_$i210: i1, in_$i211: i32, in_$i212: i1, in_$i213: i32, in_$i214: i1, in_$i215: i32, in_$i216: i32, in_$i217: i1, in_$i218: i32, in_$i219: i1, in_$i220: i32, in_$i221: i1, in_$i222: i32, in_$i223: i1, in_$i224: i32, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$i228: i1, in_$i229: i1, in_$i230: i1, in_$i231: i1, in_$i232: i32, in_$i233: i1, in_$p234: ref, in_$p235: ref, in_$i237: i32, in_$i238: i32, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$i242: i64, in_$i244: i32, in_$i245: i1, in_$p246: ref, in_$i247: i64, in_$i248: i32, in_$i250: i32, in_$i251: i1, in_$p252: ref, in_$p253: ref, in_$i254: i32, in_$i255: i32, in_$i256: i1, in_$i257: i32, in_$i258: i32, in_vslice_dummy_var_183: i32, in_vslice_dummy_var_184: i64, in_vslice_dummy_var_185: i64, in_vslice_dummy_var_186: i64, in_vslice_dummy_var_187: i32, in_vslice_dummy_var_188: i32, in_vslice_dummy_var_189: i64, in_vslice_dummy_var_190: i32, in_vslice_dummy_var_191: i32, in_vslice_dummy_var_192: i32, in_vslice_dummy_var_193: i64, in_vslice_dummy_var_194: i64, in_vslice_dummy_var_195: i32, in_vslice_dummy_var_196: i64, in_vslice_dummy_var_197: i64) returns (out_$i53: i32, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i32, out_$i63: i1, out_$i64: i32, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$i77: i1, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$i86: i1, out_$p87: ref, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$p94: ref, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$i110: i64, out_$i111: i1, out_$i112: i32, out_$i113: i32, out_$p114: ref, out_$i115: i64, out_$i116: i1, out_$i117: i32, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i135: i64, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i140: i64, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i145: i64, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$i150: i64, out_$i151: i64, out_$i152: i32, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i157: i64, out_$i158: i64, out_$i159: i32, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$i164: i32, out_$i165: i64, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$p170: ref, out_$i171: i32, out_$i172: i32, out_$i173: i1, out_$i174: i32, out_$i175: i32, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$p187: ref, out_$i189: i32, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$i194: i64, out_$i195: i32, out_$i197: i32, out_$i198: i1, out_$p199: ref, out_$i200: i32, out_$i201: i64, out_$i203: i32, out_$i204: i1, out_$i205: i32, out_$i206: i1, out_$i207: i1, out_$i208: i1, out_$i209: i32, out_$i210: i1, out_$i211: i32, out_$i212: i1, out_$i213: i32, out_$i214: i1, out_$i215: i32, out_$i216: i32, out_$i217: i1, out_$i218: i32, out_$i219: i1, out_$i220: i32, out_$i221: i1, out_$i222: i32, out_$i223: i1, out_$i224: i32, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$i228: i1, out_$i229: i1, out_$i230: i1, out_$i231: i1, out_$i232: i32, out_$i233: i1, out_$p234: ref, out_$p235: ref, out_$i237: i32, out_$i238: i32, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$i242: i64, out_$i244: i32, out_$i245: i1, out_$p246: ref, out_$i247: i64, out_$i248: i32, out_$i250: i32, out_$i251: i1, out_$p252: ref, out_$p253: ref, out_$i254: i32, out_$i255: i32, out_$i256: i1, out_$i257: i32, out_$i258: i32, out_vslice_dummy_var_183: i32, out_vslice_dummy_var_184: i64, out_vslice_dummy_var_185: i64, out_vslice_dummy_var_186: i64, out_vslice_dummy_var_187: i32, out_vslice_dummy_var_188: i32, out_vslice_dummy_var_189: i64, out_vslice_dummy_var_190: i32, out_vslice_dummy_var_191: i32, out_vslice_dummy_var_192: i32, out_vslice_dummy_var_193: i64, out_vslice_dummy_var_194: i64, out_vslice_dummy_var_195: i32, out_vslice_dummy_var_196: i64, out_vslice_dummy_var_197: i64);
  modifies $M.81, $M.70, $M.87, $M.89, $M.0, $M.79, $M.14, $M.19, $M.21, $CurrAddr, $M.11, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.56, $M.57, $M.61, $M.63, $M.65, $M.67, $M.46, $M.62, $M.64, $M.66, $M.68, $M.15, $M.18, $M.16, $M.17, $M.10, $M.72, $M.71, $M.12, $M.13, assertsPassed, $M.90, $M.95, $M.96, $M.83, $M.84, $M.82, $M.91, $M.20, $M.77, $M.78, $M.85, $M.94;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


