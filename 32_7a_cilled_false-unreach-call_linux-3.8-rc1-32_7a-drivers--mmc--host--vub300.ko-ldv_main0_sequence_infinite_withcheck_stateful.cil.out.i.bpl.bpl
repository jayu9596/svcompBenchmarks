var $M.0: [ref]i8;

var $M.1: i8;

var $M.2: i8;

var $M.3: i8;

var $M.4: i32;

var $M.5: i32;

var $M.6: i8;

var $M.7: [ref]i32;

var $M.8: i32;

var $M.9: [ref]i8;

var $M.10: ref;

var $M.11: i8;

var $M.12: [ref]ref;

var $M.13: [ref]i32;

var $M.14: ref;

var $M.15: i32;

var $M.16: i32;

var $M.17: [ref]ref;

var $M.18: [ref]i64;

var $M.19: i32;

var $M.20: [ref]ref;

var $M.21: [ref]ref;

var $M.22: [ref]ref;

var $M.23: [ref]ref;

var $M.24: [ref]i24;

var $M.25: [ref]i8;

var $M.26: ref;

var $M.28: [ref]i32;

var $M.29: i32;

var $M.30: i32;

var $M.44: [ref]i8;

var $M.45: [ref]i8;

var $M.46: [ref]i8;

var $M.47: [ref]i8;

var $M.48: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 345038);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const __mod_usb_device_table: ref;

axiom __mod_usb_device_table == $sub.ref(0, 2084);

const disable_offload_processing: ref;

axiom disable_offload_processing == $sub.ref(0, 3109);

const pad_input_to_usb_pkt: ref;

axiom pad_input_to_usb_pkt == $sub.ref(0, 4134);

const vub300_mmc_ops: ref;

axiom vub300_mmc_ops == $sub.ref(0, 5286);

const force_max_req_size: ref;

axiom force_max_req_size == $sub.ref(0, 6314);

const limit_speed_to_24_MHz: ref;

axiom limit_speed_to_24_MHz == $sub.ref(0, 7339);

const force_polling_for_irqs: ref;

axiom force_polling_for_irqs == $sub.ref(0, 8364);

const force_1_bit_data_xfers: ref;

axiom force_1_bit_data_xfers == $sub.ref(0, 9389);

const {:count 3} vub300_table: ref;

axiom vub300_table == $sub.ref(0, 10509);

const vub300_driver: ref;

axiom vub300_driver == $sub.ref(0, 11837);

const deadworkqueue: ref;

axiom deadworkqueue == $sub.ref(0, 12869);

const pollworkqueue: ref;

axiom pollworkqueue == $sub.ref(0, 13901);

const cmndworkqueue: ref;

axiom cmndworkqueue == $sub.ref(0, 14933);

const firmware_irqpoll_timeout: ref;

axiom firmware_irqpoll_timeout == $sub.ref(0, 15961);

const firmware_rom_wait_states: ref;

axiom firmware_rom_wait_states == $sub.ref(0, 16989);

const ldv_mutex_mutex: ref;

axiom ldv_mutex_mutex == $sub.ref(0, 18017);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 19045);

const ldv_mutex_irq_mutex: ref;

axiom ldv_mutex_irq_mutex == $sub.ref(0, 20073);

const ldv_mutex_cred_guard_mutex: ref;

axiom ldv_mutex_cred_guard_mutex == $sub.ref(0, 21101);

const ldv_mutex_cmd_mutex: ref;

axiom ldv_mutex_cmd_mutex == $sub.ref(0, 22129);

const {:count 7} .str.8: ref;

axiom .str.8 == $sub.ref(0, 23160);

const {:count 61} .str.77: ref;

axiom .str.77 == $sub.ref(0, 24245);

const {:count 21} .str.10: ref;

axiom .str.10 == $sub.ref(0, 25290);

const {:count 37} .str.15: ref;

axiom .str.15 == $sub.ref(0, 26351);

const {:count 39} .str.16: ref;

axiom .str.16 == $sub.ref(0, 27414);

const {:count 39} .str.17: ref;

axiom .str.17 == $sub.ref(0, 28477);

const {:count 36} .str.18: ref;

axiom .str.18 == $sub.ref(0, 29537);

const {:count 31} .str.19: ref;

axiom .str.19 == $sub.ref(0, 30592);

const {:count 19} .str.20: ref;

axiom .str.20 == $sub.ref(0, 31635);

const {:count 19} .str.21: ref;

axiom .str.21 == $sub.ref(0, 32678);

const {:count 9} .str.22: ref;

axiom .str.22 == $sub.ref(0, 33711);

const {:count 8} .str.23: ref;

axiom .str.23 == $sub.ref(0, 34743);

const {:count 8} .str.24: ref;

axiom .str.24 == $sub.ref(0, 35775);

const {:count 37} .str.25: ref;

axiom .str.25 == $sub.ref(0, 36836);

const {:count 37} .str.26: ref;

axiom .str.26 == $sub.ref(0, 37897);

const {:count 38} .str.27: ref;

axiom .str.27 == $sub.ref(0, 38959);

const {:count 34} .str.28: ref;

axiom .str.28 == $sub.ref(0, 40017);

const {:count 6} .str.30: ref;

axiom .str.30 == $sub.ref(0, 41047);

const {:count 6} .str.31: ref;

axiom .str.31 == $sub.ref(0, 42077);

const {:count 55} .str.29: ref;

axiom .str.29 == $sub.ref(0, 43156);

const {:count 55} .str.32: ref;

axiom .str.32 == $sub.ref(0, 44235);

const {:count 5} .str.34: ref;

axiom .str.34 == $sub.ref(0, 45264);

const {:count 5} .str.35: ref;

axiom .str.35 == $sub.ref(0, 46293);

const {:count 6} .str.36: ref;

axiom .str.36 == $sub.ref(0, 47323);

const {:count 6} .str.37: ref;

axiom .str.37 == $sub.ref(0, 48353);

const {:count 22} .str.38: ref;

axiom .str.38 == $sub.ref(0, 49399);

const {:count 5} .str.39: ref;

axiom .str.39 == $sub.ref(0, 50428);

const {:count 54} .str.33: ref;

axiom .str.33 == $sub.ref(0, 51506);

const {:count 29} .str.40: ref;

axiom .str.40 == $sub.ref(0, 52559);

const {:count 30} .str.41: ref;

axiom .str.41 == $sub.ref(0, 53613);

const {:count 20} .str.42: ref;

axiom .str.42 == $sub.ref(0, 54657);

const {:count 20} .str.43: ref;

axiom .str.43 == $sub.ref(0, 55701);

const {:count 29} .str.44: ref;

axiom .str.44 == $sub.ref(0, 56754);

const {:count 28} .str.45: ref;

axiom .str.45 == $sub.ref(0, 57806);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 80} .str.46: ref;

axiom .str.46 == $sub.ref(0, 58910);

const {:count 83} .str.47: ref;

axiom .str.47 == $sub.ref(0, 60017);

const {:count 20} .str.50: ref;

axiom .str.50 == $sub.ref(0, 61061);

const {:count 26} .str.51: ref;

axiom .str.51 == $sub.ref(0, 62111);

const {:count 19} .str.52: ref;

axiom .str.52 == $sub.ref(0, 63154);

const {:count 17} .str.53: ref;

axiom .str.53 == $sub.ref(0, 64195);

const {:count 31} .str.76: ref;

axiom .str.76 == $sub.ref(0, 65250);

const {:count 13} .str.54: ref;

axiom .str.54 == $sub.ref(0, 66287);

const {:count 10} .str.55: ref;

axiom .str.55 == $sub.ref(0, 67321);

const {:count 5} .str.56: ref;

axiom .str.56 == $sub.ref(0, 68350);

const {:count 32} .str.57: ref;

axiom .str.57 == $sub.ref(0, 69406);

const {:count 16} .str.58: ref;

axiom .str.58 == $sub.ref(0, 70446);

const {:count 31} .str.59: ref;

axiom .str.59 == $sub.ref(0, 71501);

const {:count 38} .str.60: ref;

axiom .str.60 == $sub.ref(0, 72563);

const {:count 30} .str.61: ref;

axiom .str.61 == $sub.ref(0, 73617);

const {:count 43} .str.62: ref;

axiom .str.62 == $sub.ref(0, 74684);

const {:count 27} .str.63: ref;

axiom .str.63 == $sub.ref(0, 75735);

const {:count 32} .str.64: ref;

axiom .str.64 == $sub.ref(0, 76791);

const {:count 74} .str.65: ref;

axiom .str.65 == $sub.ref(0, 77889);

const {:count 42} .str.66: ref;

axiom .str.66 == $sub.ref(0, 78955);

const {:count 48} .str.67: ref;

axiom .str.67 == $sub.ref(0, 80027);

const {:count 29} .str.68: ref;

axiom .str.68 == $sub.ref(0, 81080);

const {:count 73} .str.69: ref;

axiom .str.69 == $sub.ref(0, 82177);

const {:count 41} .str.70: ref;

axiom .str.70 == $sub.ref(0, 83242);

const {:count 47} .str.71: ref;

axiom .str.71 == $sub.ref(0, 84313);

const {:count 28} .str.72: ref;

axiom .str.72 == $sub.ref(0, 85365);

const {:count 45} .str.73: ref;

axiom .str.73 == $sub.ref(0, 86434);

const {:count 42} .str.74: ref;

axiom .str.74 == $sub.ref(0, 87500);

const {:count 26} .str.75: ref;

axiom .str.75 == $sub.ref(0, 88550);

const {:count 9} .str.49: ref;

axiom .str.49 == $sub.ref(0, 89583);

const .str: ref;

axiom .str == $sub.ref(0, 90637);

const {:count 45} .str.11: ref;

axiom .str.11 == $sub.ref(0, 91706);

const {:count 18} .str.12: ref;

axiom .str.12 == $sub.ref(0, 92748);

const {:count 281} .str.13: ref;

axiom .str.13 == $sub.ref(0, 94053);

const {:count 23} .str.14: ref;

axiom .str.14 == $sub.ref(0, 95100);

const {:count 61} .str.1: ref;

axiom .str.1 == $sub.ref(0, 96185);

const {:count 9} .str.2: ref;

axiom .str.2 == $sub.ref(0, 97218);

const {:count 45} .str.3: ref;

axiom .str.3 == $sub.ref(0, 98287);

const {:count 9} .str.4: ref;

axiom .str.4 == $sub.ref(0, 99320);

const {:count 45} .str.5: ref;

axiom .str.5 == $sub.ref(0, 100389);

const {:count 9} .str.6: ref;

axiom .str.6 == $sub.ref(0, 101422);

const {:count 45} .str.7: ref;

axiom .str.7 == $sub.ref(0, 102491);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 38} .str.9: ref;

axiom .str.9 == $sub.ref(0, 103553);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 104585);

const {:count 3} .str.1.135: ref;

axiom .str.1.135 == $sub.ref(0, 105612);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 106650);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 107678);

const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 108710);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547521);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 109742);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const vub300_probe: ref;

axiom vub300_probe == $sub.ref(0, 110774);

procedure vub300_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.8, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $M.15, $M.12, $M.13, $M.16;



implementation vub300_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $p22: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $p28: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $p74: ref;
  var $i75: i8;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $i85: i8;
  var $i86: i1;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i32;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i1;
  var $i113: i32;
  var $i114: i32;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i32;
  var $p128: ref;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $p136: ref;
  var $p137: ref;
  var $i138: i32;
  var $i139: i32;
  var $p140: ref;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $p148: ref;
  var $p149: ref;
  var $i150: i32;
  var $i151: i32;
  var $p152: ref;
  var $p153: ref;
  var $i154: i32;
  var $i155: i32;
  var $p156: ref;
  var $p157: ref;
  var $i158: i32;
  var $i159: i32;
  var $p160: ref;
  var $p161: ref;
  var $i162: i32;
  var $i163: i32;
  var $p164: ref;
  var $p165: ref;
  var $i166: i32;
  var $i167: i32;
  var $p168: ref;
  var $p169: ref;
  var $i170: i32;
  var $i171: i32;
  var $p172: ref;
  var $p173: ref;
  var $i174: i32;
  var $i175: i32;
  var $p176: ref;
  var $p177: ref;
  var $i178: i32;
  var $i179: i32;
  var $p180: ref;
  var $p181: ref;
  var $i182: i32;
  var $i183: i32;
  var $p184: ref;
  var $p185: ref;
  var $i186: i32;
  var $i187: i32;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i8;
  var $i196: i8;
  var $p197: ref;
  var $p198: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p214: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p223: ref;
  var $p224: ref;
  var $i225: i24;
  var $i226: i24;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p239: ref;
  var $i240: i8;
  var $i241: i32;
  var $i242: i1;
  var $p244: ref;
  var $p245: ref;
  var $i246: i64;
  var $p248: ref;
  var $i249: i32;
  var $i250: i1;
  var $i251: i32;
  var $i252: i1;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $i259: i8;
  var $i260: i32;
  var $p262: ref;
  var $i263: i16;
  var $i264: i32;
  var $i265: i1;
  var $p266: ref;
  var $i267: i32;
  var $i268: i1;
  var $p269: ref;
  var $i270: i8;
  var $i271: i32;
  var $i272: i1;
  var $p273: ref;
  var $i274: i8;
  var $p275: ref;
  var $p276: ref;
  var $i277: i8;
  var $i278: i32;
  var $i279: i1;
  var $p280: ref;
  var $i281: i8;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $i287: i32;
  var $i288: i1;
  var $p289: ref;
  var $i290: i8;
  var $i291: i32;
  var $i292: i1;
  var $p293: ref;
  var $i294: i8;
  var $p295: ref;
  var $p296: ref;
  var $i297: i8;
  var $i298: i32;
  var $i299: i1;
  var $p300: ref;
  var $i301: i8;
  var $p302: ref;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p307: ref;
  var $p308: ref;
  var $p309: ref;
  var $p310: ref;
  var $i311: i8;
  var $i312: i32;
  var $i314: i32;
  var $i315: i8;
  var $i316: i32;
  var $i317: i1;
  var $i243: i32;
  var $p318: ref;
  var $i319: i8;
  var $i320: i32;
  var $i321: i1;
  var $p322: ref;
  var $i323: i8;
  var $i324: i32;
  var $i325: i1;
  var $p326: ref;
  var $i327: i8;
  var $i328: i32;
  var $i329: i1;
  var $p330: ref;
  var $i331: i8;
  var $i332: i32;
  var $i333: i1;
  var $p334: ref;
  var $p335: ref;
  var $p336: ref;
  var $p337: ref;
  var $i338: i8;
  var $i339: i1;
  var $p340: ref;
  var $p341: ref;
  var $i342: i8;
  var $i343: i32;
  var $p344: ref;
  var $i345: i8;
  var $i346: i32;
  var $p347: ref;
  var $i348: i8;
  var $i349: i32;
  var $p350: ref;
  var $i351: i8;
  var $i352: i32;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $p359: ref;
  var $p360: ref;
  var $i361: i32;
  var $p362: ref;
  var $p363: ref;
  var $i364: i32;
  var $p365: ref;
  var $p366: ref;
  var $i367: i32;
  var $i368: i1;
  var $p369: ref;
  var $p370: ref;
  var $i371: i32;
  var $p372: ref;
  var $p373: ref;
  var $i374: i32;
  var $i375: i32;
  var $i376: i16;
  var $i377: i32;
  var $i378: i16;
  var $i379: i32;
  var $i380: i1;
  var $p381: ref;
  var $p382: ref;
  var $p383: ref;
  var $p384: ref;
  var $i385: i32;
  var $i386: i32;
  var $i387: i1;
  var $p388: ref;
  var $p389: ref;
  var $i390: i32;
  var $i391: i32;
  var $i392: i1;
  var $p393: ref;
  var $p394: ref;
  var $i395: i32;
  var $i396: i32;
  var $i397: i8;
  var $i398: i1;
  var $p399: ref;
  var $p400: ref;
  var $i401: i8;
  var $i402: i1;
  var $i403: i32;
  var $p405: ref;
  var $p406: ref;
  var $i407: i32;
  var $p408: ref;
  var $p409: ref;
  var $i410: i32;
  var $p411: ref;
  var $p412: ref;
  var $i413: i32;
  var $i414: i1;
  var $i415: i1;
  var $p417: ref;
  var $i418: i16;
  var $i419: i32;
  var $i420: i32;
  var $i421: i1;
  var $p422: ref;
  var $i423: i8;
  var $p425: ref;
  var $i426: i16;
  var $i427: i32;
  var $i428: i32;
  var $i429: i1;
  var $p430: ref;
  var $i431: i8;
  var $p432: ref;
  var $p434: ref;
  var $p435: ref;
  var $p438: ref;
  var $p439: ref;
  var $p440: ref;
  var $p443: ref;
  var $p446: ref;
  var $p449: ref;
  var $p451: ref;
  var $p454: ref;
  var $p455: ref;
  var $i456: i64;
  var $p459: ref;
  var $p460: ref;
  var $p461: ref;
  var $p463: ref;
  var $p464: ref;
  var $p465: ref;
  var $p467: ref;
  var $p469: ref;
  var $p471: ref;
  var $p472: ref;
  var $p473: ref;
  var $p475: ref;
  var $p476: ref;
  var $p477: ref;
  var $p479: ref;
  var $p481: ref;
  var $p483: ref;
  var $p484: ref;
  var $p485: ref;
  var $i486: i64;
  var $p488: ref;
  var $p490: ref;
  var $p491: ref;
  var $p492: ref;
  var $i493: i64;
  var $p495: ref;
  var $p497: ref;
  var $i498: i64;
  var $i499: i64;
  var $p501: ref;
  var $p502: ref;
  var $p503: ref;
  var $i504: i8;
  var $i505: i1;
  var $i506: i32;
  var $p507: ref;
  var $p508: ref;
  var $p509: ref;
  var $i511: i32;
  var $p512: ref;
  var $p513: ref;
  var $p514: ref;
  var $i358: i32;
  var $i67: i32;
  var $i60: i32;
  var $i54: i32;
  var $i517: i32;
  var $p519: ref;
  var $p521: ref;
  var $p523: ref;
  var $p525: ref;
  var $p527: ref;
  var $p529: ref;
  var $p531: ref;
  var $p533: ref;
  var $p534: ref;
  var $i535: i24;
  var $i536: i24;
  var $p538: ref;
  var $p539: ref;
  var $i540: i24;
  var $i541: i24;
  var $p543: ref;
  var $p544: ref;
  var $i545: i24;
  var $i546: i24;
  var $p548: ref;
  var $p549: ref;
  var $i550: i24;
  var $i551: i24;
  var $p553: ref;
  var $p554: ref;
  var $i555: i24;
  var $i556: i24;
  var $p558: ref;
  var $p559: ref;
  var $i560: i24;
  var $i561: i24;
  var $p563: ref;
  var $p564: ref;
  var $i565: i24;
  var $i566: i24;
  var $p569: ref;
  var $p572: ref;
  var $p575: ref;
  var $p578: ref;
  var $p581: ref;
  var $p584: ref;
  var $p587: ref;
  var $p590: ref;
  var $p593: ref;
  var $p596: ref;
  var $p599: ref;
  var $p602: ref;
  var $p605: ref;
  var $p608: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p2 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p4 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $p11 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p12 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $p13 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $p14 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p15 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $p16 := interface_to_usbdev($p0);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $p17 := usb_get_dev($p16);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1744)), $mul.ref(1280, 1)), $mul.ref(14, 1));
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p2);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} vslice_dummy_var_32 := usb_string($p17, $i21, $p22, 48);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1744)), $mul.ref(1280, 1)), $mul.ref(15, 1));
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p3);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} vslice_dummy_var_33 := usb_string($p17, $i27, $p28, 32);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1744)), $mul.ref(1280, 1)), $mul.ref(16, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p4);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} vslice_dummy_var_34 := usb_string($p17, $i33, $p34, 32);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p17, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1744)), $mul.ref(1280, 1)), $mul.ref(8, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.0, $p38);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1744)), $mul.ref(1280, 1)), $mul.ref(10, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p42);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p2);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p3);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p4);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} vslice_dummy_var_35 := _dev_info.ref.ref.i32.i32.ref.ref.ref($p36, .str.15, $i40, $i44, $p45, $p46, $p47);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $p49 := usb_alloc_urb(0, 208);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $p55 := usb_alloc_urb(0, 208);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i57 := $eq.i64($i56, 0);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p17, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $p62 := mmc_alloc_host(3152, $p61);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i63, 0);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1236, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, 0);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i69 := $M.1;
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i8.i1($i69);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i70 == 1);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1236, 1));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i73 := $or.i32($i72, 1);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1236, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, $i73);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i75 := $M.2;
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i8.i1($i75);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i76 == 1);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1236, 1));
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i79 := $or.i32($i78, 8);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1236, 1));
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i79);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1236, 1));
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, $sub.i32(0, 33));
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1236, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, $i83);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i85 := $M.3;
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i8.i1($i85);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i86 == 1);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1236, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i100 := $or.i32($i99, 2);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1236, 1));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p101, $i100);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1236, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i104 := $or.i32($i103, 4);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1236, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p105, $i104);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1172, 1));
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, 48000000);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1168, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p107, 200000);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1800, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p108, 511);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1796, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p109, 512);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1788, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p110, 128);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i111 := $M.4;
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i112 == 1);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1792, 1));
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, 65536);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1792, 1));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1784, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p119, $i118);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p120, 0);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i123 := $or.i32($i122, 128);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p124, $i123);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.0, $p125);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i127 := $or.i32($i126, 256);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p128, $i127);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i131 := $or.i32($i130, 512);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p132, $i131);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i135 := $or.i32($i134, 1024);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p136, $i135);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, $p137);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i139 := $or.i32($i138, 2048);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p140, $i139);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i143 := $or.i32($i142, 4096);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, $i143);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i147 := $or.i32($i146, 8192);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p148, $i147);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.0, $p149);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i151 := $or.i32($i150, 16384);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p152, $i151);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.0, $p153);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i155 := $or.i32($i154, 32768);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p156, $i155);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.0, $p157);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i159 := $or.i32($i158, 65536);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p160, $i159);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i162 := $load.i32($M.0, $p161);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i163 := $or.i32($i162, 131072);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p164, $i163);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.0, $p165);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i167 := $or.i32($i166, 262144);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p168, $i167);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i170 := $load.i32($M.0, $p169);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i171 := $or.i32($i170, 524288);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p172, $i171);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.0, $p173);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i175 := $or.i32($i174, 1048576);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p176, $i175);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i178 := $load.i32($M.0, $p177);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i179 := $or.i32($i178, 2097152);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p180, $i179);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.0, $p181);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i183 := $or.i32($i182, 4194304);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p184, $i183);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.0, $p185);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i187 := $or.i32($i186, 8388608);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1180, 1));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p188, $i187);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1160, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p189, vub300_mmc_ops);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $p190 := mmc_priv($p62);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p191 := $bitcast.ref.ref($p190);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(1800, 1));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p192, $p62);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(444, 1));
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p193, 0);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(451, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i195 := $load.i8($M.0, $p194);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i196 := $and.i8($i195, $sub.i8(0, 16));
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p194, $i196);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p198, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p200, 0);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p202 := $bitcast.ref.ref($p201);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($p202, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p204, 0);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(448, 1));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p205, 0);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(24, 1));
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} __mutex_init($p206, .str.20, $p5);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(192, 1));
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} __mutex_init($p207, .str.21, $p6);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(1816, 1));
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p208, $p49);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(1824, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p209, $p55);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(468, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p210, 0);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(453, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p211, 0);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref(0, 136)), $mul.ref(4, 1));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p214, 0);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p217, 0);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref(1, 136)), $mul.ref(4, 1));
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p569, 0);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p572 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref(1, 136)), $mul.ref(0, 1));
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p572, 0);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p575 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref(2, 136)), $mul.ref(4, 1));
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p575, 0);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref(2, 136)), $mul.ref(0, 1));
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p578, 0);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref(3, 136)), $mul.ref(4, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p581, 0);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p584 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref(3, 136)), $mul.ref(0, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p584, 0);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p587 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref(4, 136)), $mul.ref(4, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p587, 0);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p590 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref(4, 136)), $mul.ref(0, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p590, 0);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p593 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref(5, 136)), $mul.ref(4, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p593, 0);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref(5, 136)), $mul.ref(0, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p596, 0);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p599 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref(6, 136)), $mul.ref(4, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p599, 0);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p602 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref(6, 136)), $mul.ref(0, 1));
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p602, 0);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p605 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref(7, 136)), $mul.ref(4, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p605, 0);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p608 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref(7, 136)), $mul.ref(0, 1));
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p608, 0);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(452, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p218, 0);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(449, 1));
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p219, 0);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(450, 1));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p220, 0);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p221, 0);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref(0, 12));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p224 := $bitcast.ref.ref($p223);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i225 := $load.i24($M.0, $p224);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i226 := $and.i24($i225, $sub.i24(0, 1048577));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $M.0 := $store.i24($M.0, $p224, $i226);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref(2, 12));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p534 := $bitcast.ref.ref($p533);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i535 := $load.i24($M.0, $p534);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i536 := $and.i24($i535, $sub.i24(0, 1048577));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i24($M.0, $p534, $i536);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p538 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref(4, 12));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p539 := $bitcast.ref.ref($p538);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i540 := $load.i24($M.0, $p539);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i541 := $and.i24($i540, $sub.i24(0, 1048577));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i24($M.0, $p539, $i541);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref(6, 12));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p544 := $bitcast.ref.ref($p543);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i545 := $load.i24($M.0, $p544);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i546 := $and.i24($i545, $sub.i24(0, 1048577));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $M.0 := $store.i24($M.0, $p544, $i546);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p548 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref(8, 12));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p549 := $bitcast.ref.ref($p548);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i550 := $load.i24($M.0, $p549);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i551 := $and.i24($i550, $sub.i24(0, 1048577));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i24($M.0, $p549, $i551);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref(10, 12));
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p554 := $bitcast.ref.ref($p553);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i555 := $load.i24($M.0, $p554);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i556 := $and.i24($i555, $sub.i24(0, 1048577));
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $M.0 := $store.i24($M.0, $p554, $i556);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p558 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref(12, 12));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p559 := $bitcast.ref.ref($p558);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i560 := $load.i24($M.0, $p559);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i561 := $and.i24($i560, $sub.i24(0, 1048577));
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i24($M.0, $p559, $i561);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p563 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref(14, 12));
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p564 := $bitcast.ref.ref($p563);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i565 := $load.i24($M.0, $p564);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i566 := $and.i24($i565, $sub.i24(0, 1048577));
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i24($M.0, $p564, $i566);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p227, $p17);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(8, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p228, $p0);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(441, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p229, 0);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(440, 1));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p230, 0);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(443, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p231, 0);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(442, 1));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p232, 0);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(0, 2));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p234, 512);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(1, 2));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p519, 512);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p521 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(2, 2));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p521, 512);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(3, 2));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p523, 512);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(4, 2));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p525, 512);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(5, 2));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p527, 512);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(6, 2));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p529, 512);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(7, 2));
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p531, 512);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(447, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p235, 0);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(8, 1));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p237 := $load.ref($M.0, $p236);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p237, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i240 := $load.i8($M.0, $p239);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i241 := $zext.i8.i32($i240);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i242 := $sgt.i32($i241, 0);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i242} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i242 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(441, 1));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i319 := $load.i8($M.0, $p318);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i320 := $zext.i8.i32($i319);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i321 := $ne.i32($i320, 0);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    assume {:branchcond $i321} true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i321 == 1);
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p355 := $load.ref($M.0, $p354);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p355, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} vslice_dummy_var_44 := dev_err.ref.ref($p356, .str.32);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i358 := $sub.i32(0, 22);
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} mmc_free_host($p62);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i67 := $i358;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} usb_free_urb($p55);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i60 := $i67;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} usb_free_urb($p49);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i54 := $i60;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} usb_put_dev($p17);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i517 := $i54;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $r := $i517;
    return;

  $bb69:
    assume $i321 == 1;
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(440, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i323 := $load.i8($M.0, $p322);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i324 := $zext.i8.i32($i323);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i325 := $ne.i32($i324, 0);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i325} true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i325 == 1);
    goto $bb71;

  $bb72:
    assume $i325 == 1;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(443, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i327 := $load.i8($M.0, $p326);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i328 := $zext.i8.i32($i327);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i329 := $ne.i32($i328, 0);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    assume {:branchcond $i329} true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i329 == 1);
    goto $bb71;

  $bb74:
    assume $i329 == 1;
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(442, 1));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i331 := $load.i8($M.0, $p330);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i332 := $zext.i8.i32($i331);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i333 := $ne.i32($i332, 0);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i333} true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i333 == 1);
    goto $bb71;

  $bb76:
    assume $i333 == 1;
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p335 := $load.ref($M.0, $p334);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p335, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(447, 1));
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i338 := $load.i8($M.0, $p337);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i339 := $trunc.i8.i1($i338);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p340 := (if $i339 == 1 then .str.30 else .str.31);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(440, 1));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i342 := $load.i8($M.0, $p341);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i343 := $zext.i8.i32($i342);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(441, 1));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i345 := $load.i8($M.0, $p344);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i346 := $zext.i8.i32($i345);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(442, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i348 := $load.i8($M.0, $p347);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i349 := $zext.i8.i32($i348);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(443, 1));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i351 := $load.i8($M.0, $p350);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i352 := $zext.i8.i32($i351);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} vslice_dummy_var_45 := _dev_info.ref.ref.ref.i32.i32.i32.i32($p336, .str.29, $p340, $i343, $i346, $i349, $i352);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p360 := $load.ref($M.0, $p359);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $i361 := __create_pipe($p360, 0);
    call {:si_unique_call 49} {:cexpr "tmp___9"} boogie_si_record_i32($i361);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p363 := $load.ref($M.0, $p362);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i364 := $or.i32($i361, $sub.i32(0, 2147483520));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(3064, 1));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p366 := $bitcast.ref.ref($p365);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i367 := usb_control_msg($p363, $i364, 1, $sub.i8(0, 64), 0, 0, $p366, 4, 250);
    call {:si_unique_call 51} {:cexpr "retval"} boogie_si_record_i32($i367);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i368 := $slt.i32($i367, 0);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i368} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p370 := $load.ref($M.0, $p369);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $i371 := __create_pipe($p370, 0);
    call {:si_unique_call 54} {:cexpr "tmp___10"} boogie_si_record_i32($i371);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p373 := $load.ref($M.0, $p372);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i374 := $or.i32($i371, $sub.i32(0, 2147483520));
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i375 := $M.5;
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i376 := $trunc.i32.i16($i375);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i377 := $zext.i16.i32($i376);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i378 := $trunc.i32.i16($i377);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $i379 := usb_control_msg($p373, $i374, 16, 64, $i378, 0, $0.ref, 0, 250);
    call {:si_unique_call 56} {:cexpr "retval"} boogie_si_record_i32($i379);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i380 := $slt.i32($i379, 0);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i380} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p382 := $load.ref($M.0, $p381);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p382, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1236, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i385 := $load.i32($M.0, $p384);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i386 := $and.i32($i385, 8);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i387 := $ne.i32($i386, 0);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p388 := (if $i387 == 1 then .str.34 else .str.35);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1236, 1));
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i390 := $load.i32($M.0, $p389);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i391 := $and.i32($i390, 1);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i392 := $ne.i32($i391, 0);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p393 := (if $i392 == 1 then .str.36 else .str.37);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1172, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i395 := $load.i32($M.0, $p394);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i396 := $udiv.i32($i395, 1000000);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i397 := $M.6;
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i398 := $trunc.i8.i1($i397);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p399 := (if $i398 == 1 then .str.38 else .str.39);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(447, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i401 := $load.i8($M.0, $p400);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i402 := $trunc.i8.i1($i401);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i403 := (if $i402 == 1 then 512 else 64);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} vslice_dummy_var_46 := _dev_info.ref.ref.ref.ref.i32.ref.i32($p383, .str.33, $p388, $p393, $i396, $p399, $i403);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p406 := $load.ref($M.0, $p405);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $i407 := __create_pipe($p406, 0);
    call {:si_unique_call 59} {:cexpr "tmp___11"} boogie_si_record_i32($i407);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p409 := $load.ref($M.0, $p408);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i410 := $or.i32($i407, $sub.i32(0, 2147483520));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(3072, 1));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p412 := $bitcast.ref.ref($p411);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $i413 := usb_control_msg($p409, $i410, 0, $sub.i8(0, 64), 0, 0, $p412, 15, 250);
    call {:si_unique_call 61} {:cexpr "retval"} boogie_si_record_i32($i413);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i414 := $slt.i32($i413, 0);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i414} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i414 == 1);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i415 := $eq.i32($i413, 15);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i415} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i415 == 1);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i67 := $i413;
    goto $bb11;

  $bb88:
    assume $i415 == 1;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(3072, 1)), $mul.ref(4, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i418 := $load.i16($M.0, $p417);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i419 := $zext.i16.i32($i418);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i420 := $and.i32($i419, 1);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i421 := $ne.i32($i420, 0);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(445, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i423 := $zext.i1.i8($i421);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p422, $i423);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(3072, 1)), $mul.ref(4, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i426 := $load.i16($M.0, $p425);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i427 := $zext.i16.i32($i426);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i428 := $and.i32($i427, 16);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i429 := $ne.i32($i428, 0);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(446, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i431 := $zext.i1.i8($i429);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p430, $i431);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p432 := $bitcast.ref.ref($p191);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} usb_set_intfdata($p0, $p432);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2848, 1)), $mul.ref(0, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} __init_work($p434, 0);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($p8, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p435, 4195328);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2848, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p439 := $bitcast.ref.ref($p438);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p440 := $bitcast.ref.ref($p8);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 64} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p439, $p440, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2848, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} lockdep_init_map($p443, .str.40, $p7, 0);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2848, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} INIT_LIST_HEAD($p446);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2848, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p449, vub300_pollwork_thread);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2848, 1)), $mul.ref(80, 1));
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} init_timer_key($p451, 2, .str.41, $p9);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2848, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p454, delayed_work_timer_fn);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2848, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i456 := $p2i.ref.i64($p455);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2848, 1)), $mul.ref(80, 1)), $mul.ref(40, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p459, $i456);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2768, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} __init_work($p460, 0);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p461, 4195328);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2768, 1)), $mul.ref(0, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p464 := $bitcast.ref.ref($p463);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p465 := $bitcast.ref.ref($p11);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 69} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p464, $p465, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2768, 1)), $mul.ref(32, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} lockdep_init_map($p467, .str.42, $p10, 0);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2768, 1)), $mul.ref(8, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} INIT_LIST_HEAD($p469);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2768, 1)), $mul.ref(24, 1));
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p471, vub300_cmndwork_thread);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2688, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} __init_work($p472, 0);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p13, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p473, 4195328);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2688, 1)), $mul.ref(0, 1));
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p476 := $bitcast.ref.ref($p475);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p477 := $bitcast.ref.ref($p13);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 73} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p476, $p477, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2688, 1)), $mul.ref(32, 1));
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} lockdep_init_map($p479, .str.43, $p12, 0);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2688, 1)), $mul.ref(8, 1));
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} INIT_LIST_HEAD($p481);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2688, 1)), $mul.ref(24, 1));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p483, vub300_deadwork_thread);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(16, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} kref_init($p484);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2216, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} init_timer_key($p485, 0, .str.44, $p14);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i486 := $p2i.ref.i64($p191);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2216, 1)), $mul.ref(40, 1));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p488, $i486);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2216, 1)), $mul.ref(32, 1));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p490, vub300_sg_timed_out);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(16, 1));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} kref_get($p491);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2560, 1));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} init_timer_key($p492, 0, .str.45, $p15);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i493 := $p2i.ref.i64($p191);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2560, 1)), $mul.ref(40, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p495, $i493);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2560, 1)), $mul.ref(32, 1));
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p497, vub300_inactivity_timer_expired);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i498 := $load.i64($M.0, jiffies);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i499 := $add.i64($i498, 250);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2560, 1)), $mul.ref(16, 1));
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p501, $i499);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p502 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(2560, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} add_timer($p502);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(445, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i504 := $load.i8($M.0, $p503);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i505 := $trunc.i8.i1($i504);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i505} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i505 == 1);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $i511 := interface_to_InterfaceNumber($p0);
    call {:si_unique_call 85} {:cexpr "tmp___13"} boogie_si_record_i32($i511);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p512 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p513 := $load.ref($M.0, $p512);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($p513, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} vslice_dummy_var_48 := _dev_info.ref.ref.i32($p514, .str.47, $i511);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} vslice_dummy_var_49 := mmc_add_host($p62);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i517 := 0;
    goto $bb95;

  $bb92:
    assume $i505 == 1;
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $i506 := interface_to_InterfaceNumber($p0);
    call {:si_unique_call 82} {:cexpr "tmp___12"} boogie_si_record_i32($i506);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p508 := $load.ref($M.0, $p507);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($p508, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} vslice_dummy_var_47 := _dev_info.ref.ref.i32($p509, .str.46, $i506);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    goto $bb94;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb86:
    assume $i414 == 1;
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i67 := $i413;
    goto $bb11;

  $bb83:
    assume $i380 == 1;
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i358 := $i379;
    goto $bb79;

  $bb80:
    assume $i368 == 1;
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i358 := $i367;
    goto $bb79;

  $bb37:
    assume $i242 == 1;
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i243 := 0;
    goto $bb40;

  $bb40:
    call $p244, $p245, $i246, $p248, $i249, $i250, $i251, $i252, $p253, $p254, $p255, $p256, $p257, $p258, $i259, $i260, $p262, $i263, $i264, $i265, $p266, $i267, $i268, $p269, $i270, $i271, $i272, $p273, $i274, $p275, $p276, $i277, $i278, $i279, $p280, $i281, $p282, $p283, $p284, $p285, $i287, $i288, $p289, $i290, $i291, $i292, $p293, $i294, $p295, $p296, $i297, $i298, $i299, $p300, $i301, $p302, $p303, $p304, $p305, $p307, $p308, $p309, $p310, $i311, $i312, $i314, $i315, $i316, $i317, $i243, vslice_dummy_var_40, vslice_dummy_var_41, vslice_dummy_var_42, vslice_dummy_var_43 := vub300_probe_loop_$bb40($p191, $p237, $p239, $p244, $p245, $i246, $p248, $i249, $i250, $i251, $i252, $p253, $p254, $p255, $p256, $p257, $p258, $i259, $i260, $p262, $i263, $i264, $i265, $p266, $i267, $i268, $p269, $i270, $i271, $i272, $p273, $i274, $p275, $p276, $i277, $i278, $i279, $p280, $i281, $p282, $p283, $p284, $p285, $i287, $i288, $p289, $i290, $i291, $i292, $p293, $i294, $p295, $p296, $i297, $i298, $i299, $p300, $i301, $p302, $p303, $p304, $p305, $p307, $p308, $p309, $p310, $i311, $i312, $i314, $i315, $i316, $i317, $i243, vslice_dummy_var_40, vslice_dummy_var_41, vslice_dummy_var_42, vslice_dummy_var_43);
    goto $bb40_last;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p237, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p245 := $load.ref($M.0, $p244);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i246 := $sext.i32.i64($i243);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p245, $mul.ref($i246, 64)), $mul.ref(0, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $i249 := usb_endpoint_is_bulk_in($p248);
    call {:si_unique_call 34} {:cexpr "tmp___6"} boogie_si_record_i32($i249);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i249, 0);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    $p254 := .str.24;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p256 := $load.ref($M.0, $p255);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p256, $mul.ref(0, 1744)), $mul.ref(136, 1));
    $p258 := $add.ref($add.ref($add.ref($p245, $mul.ref($i246, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i259 := $load.i8($M.0, $p258);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i260 := $zext.i8.i32($i259);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} vslice_dummy_var_40 := _dev_info.ref.ref.ref.i32.i32($p257, .str.25, $p254, $i243, $i260);
    $p262 := $add.ref($add.ref($add.ref($p245, $mul.ref($i246, 64)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i263 := $load.i16($M.0, $p262);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i264 := $zext.i16.i32($i263);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i265 := $ugt.i32($i264, 64);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $i267 := usb_endpoint_is_bulk_in($p248);
    call {:si_unique_call 39} {:cexpr "tmp___8"} boogie_si_record_i32($i267);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i268 := $ne.i32($i267, 0);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i268 == 1);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $i287 := usb_endpoint_is_bulk_out($p248);
    call {:si_unique_call 41} {:cexpr "tmp___7"} boogie_si_record_i32($i287);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i288 := $ne.i32($i287, 0);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i288 == 1);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p308 := $load.ref($M.0, $p307);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p308, $mul.ref(0, 1744)), $mul.ref(136, 1));
    $p310 := $add.ref($add.ref($add.ref($p245, $mul.ref($i246, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i311 := $load.i8($M.0, $p310);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i312 := $zext.i8.i32($i311);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} vslice_dummy_var_42 := dev_warn.ref.ref.i32.i32($p309, .str.28, $i243, $i312);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i314 := $add.i32($i243, 1);
    call {:si_unique_call 43} {:cexpr "i"} boogie_si_record_i32($i314);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i315 := $load.i8($M.0, $p239);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i316 := $zext.i8.i32($i315);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i317 := $sgt.i32($i316, $i314);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i317 == 1);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb66:
    assume $i317 == 1;
    assume {:verifier.code 0} true;
    $i243 := $i314;
    goto $bb66_dummy;

  $bb57:
    assume $i288 == 1;
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(440, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i290 := $load.i8($M.0, $p289);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i291 := $zext.i8.i32($i290);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i292 := $eq.i32($i291, 0);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i292 == 1);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(442, 1));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i297 := $load.i8($M.0, $p296);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i298 := $zext.i8.i32($i297);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i299 := $eq.i32($i298, 0);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i299 == 1);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p304 := $load.ref($M.0, $p303);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p304, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} vslice_dummy_var_43 := dev_warn.ref.ref($p305, .str.27);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb62:
    assume $i299 == 1;
    $p300 := $add.ref($add.ref($add.ref($p245, $mul.ref($i246, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i301 := $load.i8($M.0, $p300);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(442, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p302, $i301);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb59:
    assume $i292 == 1;
    $p293 := $add.ref($add.ref($add.ref($p245, $mul.ref($i246, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i294 := $load.i8($M.0, $p293);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(440, 1));
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p295, $i294);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb48:
    assume $i268 == 1;
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(441, 1));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i270 := $load.i8($M.0, $p269);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i271 := $zext.i8.i32($i270);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i272 := $eq.i32($i271, 0);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i272 == 1);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(443, 1));
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i277 := $load.i8($M.0, $p276);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i278 := $zext.i8.i32($i277);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i279 := $eq.i32($i278, 0);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i279 == 1);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p284 := $load.ref($M.0, $p283);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p284, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} vslice_dummy_var_41 := dev_warn.ref.ref($p285, .str.26);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i279 == 1;
    $p280 := $add.ref($add.ref($add.ref($p245, $mul.ref($i246, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i281 := $load.i8($M.0, $p280);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(443, 1));
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p282, $i281);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb50:
    assume $i272 == 1;
    $p273 := $add.ref($add.ref($add.ref($p245, $mul.ref($i246, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i274 := $load.i8($M.0, $p273);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(441, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p275, $i274);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb45:
    assume $i265 == 1;
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p191, $mul.ref(0, 3160)), $mul.ref(447, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p266, 1);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i250 == 1;
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $i251 := usb_endpoint_is_bulk_out($p248);
    call {:si_unique_call 36} {:cexpr "tmp___4"} boogie_si_record_i32($i251);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i252 := $ne.i32($i251, 0);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p253 := (if $i252 == 1 then .str.22 else .str.23);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p254 := $p253;
    goto $bb44;

  $bb22:
    assume $i112 == 1;
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i113 := $M.4;
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i114 := $mul.i32($i113, 1024);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1792, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p115, $i114);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i86 == 1;
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1236, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i89 := $or.i32($i88, 2);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1236, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, $i89);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1236, 1));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i93 := $or.i32($i92, 4);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1236, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i93);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p62, $mul.ref(0, 2616)), $mul.ref(1172, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p95, 24000000);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p17, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} vslice_dummy_var_39 := _dev_info.ref.ref($p96, .str.19);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i64 == 1;
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p17, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} vslice_dummy_var_38 := dev_err.ref.ref($p65, .str.18);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i67 := $sub.i32(0, 12);
    goto $bb11;

  $bb5:
    assume $i57 == 1;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p17, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} vslice_dummy_var_37 := dev_err.ref.ref($p58, .str.17);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i51 == 1;
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p17, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} vslice_dummy_var_36 := dev_err.ref.ref($p52, .str.16);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32(0, 12);
    goto $bb3;

  $bb66_dummy:
    assume false;
    return;

  $bb40_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_336;
}



const vub300_disconnect: ref;

axiom vub300_disconnect == $sub.ref(0, 111806);

procedure vub300_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.15, $M.12, $M.13, $CurrAddr, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.16;



implementation vub300_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 3160)), $mul.ref(1800, 1));
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 3160)), $mul.ref(1800, 1));
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 3160)), $mul.ref(1800, 1));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i15 := interface_to_InterfaceNumber($p0);
    call {:si_unique_call 90} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} usb_set_intfdata($p0, $0.ref);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 3160)), $mul.ref(8, 1));
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $0.ref);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 3160)), $mul.ref(16, 1));
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} vslice_dummy_var_50 := kref_put($p17, vub300_delete);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} mmc_remove_host($p10);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} vslice_dummy_var_51 := printk.ref.i32(.str.77, $i15);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const vub300_suspend: ref;

axiom vub300_suspend == $sub.ref(0, 112838);

procedure vub300_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation vub300_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_52: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p3, $i1);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $p4 := usb_get_intfdata($p0);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 3160)), $mul.ref(1800, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 3160)), $mul.ref(1800, 1));
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} vslice_dummy_var_52 := mmc_suspend_host($p13);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const vub300_resume: ref;

axiom vub300_resume == $sub.ref(0, 113870);

procedure vub300_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vub300_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var vslice_dummy_var_53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 3160)), $mul.ref(1800, 1));
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 3160)), $mul.ref(1800, 1));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} vslice_dummy_var_53 := mmc_resume_host($p10);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const vub300_pre_reset: ref;

axiom vub300_pre_reset == $sub.ref(0, 114902);

procedure vub300_pre_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation vub300_pre_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3160)), $mul.ref(24, 1));
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} ldv_mutex_lock_36($p3);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const vub300_post_reset: ref;

axiom vub300_post_reset == $sub.ref(0, 115934);

procedure vub300_post_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, assertsPassed;



implementation vub300_post_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3160)), $mul.ref(460, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $sub.i32(0, 32));
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 3160)), $mul.ref(24, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} ldv_mutex_unlock_37($p4);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const usb_get_intfdata: ref;

axiom usb_get_intfdata == $sub.ref(0, 116966);

procedure usb_get_intfdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intfdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_mutex_unlock_37: ref;

axiom ldv_mutex_unlock_37 == $sub.ref(0, 117998);

procedure ldv_mutex_unlock_37($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_37($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} ldv_mutex_unlock_cmd_mutex($p0);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} mutex_unlock($p0);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_cmd_mutex: ref;

axiom ldv_mutex_unlock_cmd_mutex == $sub.ref(0, 119030);

procedure ldv_mutex_unlock_cmd_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_cmd_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i1 := $M.8;
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} ldv_error();
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 108} {:cexpr "ldv_mutex_cmd_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 120062);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 121094);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 109} __VERIFIER_error();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 122126);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $p1 := external_alloc();
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 123158);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 1} true;
    call {:si_unique_call 111} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 112} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_mutex_lock_36: ref;

axiom ldv_mutex_lock_36 == $sub.ref(0, 124190);

procedure ldv_mutex_lock_36($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_36($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} ldv_mutex_lock_cmd_mutex($p0);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} mutex_lock($p0);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_cmd_mutex: ref;

axiom ldv_mutex_lock_cmd_mutex == $sub.ref(0, 125222);

procedure ldv_mutex_lock_cmd_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_cmd_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i1 := $M.8;
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} ldv_error();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 116} {:cexpr "ldv_mutex_cmd_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 126254);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    return;
}



const mmc_resume_host: ref;

axiom mmc_resume_host == $sub.ref(0, 127286);

procedure mmc_resume_host($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mmc_resume_host($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 1} true;
    call {:si_unique_call 117} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 118} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mmc_suspend_host: ref;

axiom mmc_suspend_host == $sub.ref(0, 128318);

procedure mmc_suspend_host($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mmc_suspend_host($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 1} true;
    call {:si_unique_call 119} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 120} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const interface_to_InterfaceNumber: ref;

axiom interface_to_InterfaceNumber == $sub.ref(0, 129350);

procedure interface_to_InterfaceNumber($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation interface_to_InterfaceNumber($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(8, 1));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(8, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i3 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 1);
    goto $bb3;
}



const usb_set_intfdata: ref;

axiom usb_set_intfdata == $sub.ref(0, 130382);

procedure usb_set_intfdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_set_intfdata($p0: ref, $p1: ref)
{
  var $p2: ref;
  var vslice_dummy_var_54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} vslice_dummy_var_54 := dev_set_drvdata($p2, $p1);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    return;
}



const vub300_delete: ref;

axiom vub300_delete == $sub.ref(0, 131414);

procedure vub300_delete($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vub300_delete($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 16), 3160)), $mul.ref(1800, 1));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 16), 3160)), $mul.ref(1816, 1));
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} usb_free_urb($p6);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 16), 3160)), $mul.ref(1816, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 16), 3160)), $mul.ref(1824, 1));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} usb_free_urb($p9);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 16), 3160)), $mul.ref(1824, 1));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $0.ref);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 16), 3160)), $mul.ref(0, 1));
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} usb_put_dev($p12);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} mmc_free_host($p4);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    return;
}



const kref_put: ref;

axiom kref_put == $sub.ref(0, 132446);

procedure kref_put($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.15, $M.12, $M.13, $CurrAddr, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.16;



implementation kref_put($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $i2 := kref_sub($p0, 1, $p1);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 127} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const mmc_remove_host: ref;

axiom mmc_remove_host == $sub.ref(0, 133478);

procedure mmc_remove_host($p0: ref);
  free requires assertsPassed;



implementation mmc_remove_host($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 134510);

procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 1} true;
    call {:si_unique_call 128} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 129} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 1} true;
    call {:si_unique_call 130} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 131} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 1} true;
    call {:si_unique_call 132} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 133} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kref_sub: ref;

axiom kref_sub == $sub.ref(0, 135542);

procedure kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.15, $M.12, $M.13, $CurrAddr, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.16;



implementation kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_55: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} {:cexpr "kref_sub:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 135} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 137} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} vslice_dummy_var_55 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 141} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 142} devirtbounce($p2, $p0);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} warn_slowpath_null(.str.10, 67);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 136574);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 144} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 137606);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    return;
}



const atomic_sub_and_test: ref;

axiom atomic_sub_and_test == $sub.ref(0, 138638);

procedure atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 147} {:cexpr "atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 148} devirtbounce.1(0, $p3, $p2, $i0, $p3);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.9, $p2);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 139670);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;



implementation usb_free_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    return;
}



const usb_put_dev: ref;

axiom usb_put_dev == $sub.ref(0, 140702);

procedure usb_put_dev($p0: ref);
  free requires assertsPassed;



implementation usb_put_dev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    return;
}



const mmc_free_host: ref;

axiom mmc_free_host == $sub.ref(0, 141734);

procedure mmc_free_host($p0: ref);
  free requires assertsPassed;



implementation mmc_free_host($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 142766);

procedure dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 1} true;
    call {:si_unique_call 149} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 150} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 143798);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 136), 1744));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const usb_get_dev: ref;

axiom usb_get_dev == $sub.ref(0, 144830);

procedure usb_get_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $p1 := external_alloc();
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_string: ref;

axiom usb_string == $sub.ref(0, 145862);

procedure usb_string($p0: ref, $i1: i32, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_string($p0: ref, $i1: i32, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 152} {:cexpr "usb_string:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 153} {:cexpr "usb_string:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 1} true;
    call {:si_unique_call 154} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 155} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 146894);

procedure _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 1} true;
    call {:si_unique_call 156} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 157} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 1} true;
    call {:si_unique_call 158} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 159} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 1} true;
    call {:si_unique_call 160} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 161} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 1} true;
    call {:si_unique_call 162} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 163} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.ref.ref.i32.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.ref.i32.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 1} true;
    call {:si_unique_call 164} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 165} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 1} true;
    call {:si_unique_call 166} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 167} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 1} true;
    call {:si_unique_call 168} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 169} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i32.i32.ref.ref.ref($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: ref, p.5: ref, p.6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.i32.ref.ref.ref($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: ref, p.5: ref, p.6: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 1} true;
    call {:si_unique_call 170} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 171} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_alloc_urb: ref;

axiom usb_alloc_urb == $sub.ref(0, 147926);

procedure usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} {:cexpr "usb_alloc_urb:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 173} {:cexpr "usb_alloc_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $p2 := external_alloc();
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 148958);

procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 1} true;
    call {:si_unique_call 175} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 176} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 1} true;
    call {:si_unique_call 177} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 178} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 1} true;
    call {:si_unique_call 179} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 180} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 1} true;
    call {:si_unique_call 181} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 182} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 1} true;
    call {:si_unique_call 183} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 184} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mmc_alloc_host: ref;

axiom mmc_alloc_host == $sub.ref(0, 149990);

procedure mmc_alloc_host($i0: i32, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation mmc_alloc_host($i0: i32, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} {:cexpr "mmc_alloc_host:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $p2 := external_alloc();
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const mmc_priv: ref;

axiom mmc_priv == $sub.ref(0, 151022);

procedure mmc_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation mmc_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2616, 1));
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 152054);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    return;
}



const usb_endpoint_is_bulk_in: ref;

axiom usb_endpoint_is_bulk_in == $sub.ref(0, 153086);

procedure usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $i1 := usb_endpoint_xfer_bulk($p0);
    call {:si_unique_call 188} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $i3 := usb_endpoint_dir_in($p0);
    call {:si_unique_call 190} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_endpoint_is_bulk_out: ref;

axiom usb_endpoint_is_bulk_out == $sub.ref(0, 154118);

procedure usb_endpoint_is_bulk_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_bulk_out($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i1 := usb_endpoint_xfer_bulk($p0);
    call {:si_unique_call 192} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $i3 := usb_endpoint_dir_out($p0);
    call {:si_unique_call 194} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 155150);

procedure dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 1} true;
    call {:si_unique_call 195} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 196} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 1} true;
    call {:si_unique_call 197} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 198} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 156182);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(0, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 157214);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 200} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 201} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 202} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 203} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 204} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 205} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 206} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 1} true;
    call {:si_unique_call 207} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 208} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 158246);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 159278);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 160310);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 161342);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    return;
}



const vub300_pollwork_thread: ref;

axiom vub300_pollwork_thread == $sub.ref(0, 162374);

procedure vub300_pollwork_thread($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.15, assertsPassed, $M.12, $M.13, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.16;



implementation vub300_pollwork_thread($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 2848), 3160));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2848), 3160)), $mul.ref(8, 1));
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2848), 3160)), $mul.ref(24, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} ldv_mutex_lock_14($p9);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2848), 3160)), $mul.ref(1776, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2848), 3160)), $mul.ref(445, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2848), 3160)), $mul.ref(24, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} ldv_mutex_unlock_19($p37);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2848), 3160)), $mul.ref(16, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} vslice_dummy_var_57 := kref_put($p38, vub300_delete);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2848), 3160)), $mul.ref(192, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} ldv_mutex_lock_15($p17);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2848), 3160)), $mul.ref(449, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2848), 3160)), $mul.ref(192, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} ldv_mutex_unlock_16($p21);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2848), 3160)), $mul.ref(472, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2848), 3160)), $mul.ref(192, 1));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} ldv_mutex_unlock_18($p36);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} __do_poll($p2);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2848), 3160)), $mul.ref(472, 1));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, $sub.i32(0, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2848), 3160)), $mul.ref(472, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2848), 3160)), $mul.ref(1800, 1));
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} mmc_signal_sdio_irq($p30);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2848), 3160)), $mul.ref(2560, 1));
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, jiffies);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 250);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} vslice_dummy_var_58 := mod_timer($p31, $i33);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2848), 3160)), $mul.ref(192, 1));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} ldv_mutex_unlock_17($p35);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} vub300_queue_poll_work($p2, 1);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2848), 3160)), $mul.ref(16, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} vslice_dummy_var_56 := kref_put($p7, vub300_delete);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 163406);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    return;
}



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 164438);

procedure delayed_work_timer_fn($i0: i64);



const vub300_cmndwork_thread: ref;

axiom vub300_cmndwork_thread == $sub.ref(0, 165470);

procedure vub300_cmndwork_thread($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.12, $M.13, assertsPassed, $M.15, $CurrAddr, $M.16, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation vub300_cmndwork_thread($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i59: i32;
  var $i58: i32;
  var $i52: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;
  var $p79: ref;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160)), $mul.ref(8, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160)), $mul.ref(1784, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160)), $mul.ref(1776, 1));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160)), $mul.ref(1792, 1));
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160)), $mul.ref(24, 1));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} ldv_mutex_lock_26($p15);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160)), $mul.ref(1832, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} init_completion($p16);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i20 := $sext.i8.i32($i19);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i24 := ldv__builtin_expect($i23, 1);
    call {:si_unique_call 228} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i25 == 1);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160)), $mul.ref(1800, 1));
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 2616)), $mul.ref(1912, 1));
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160)), $mul.ref(1800, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 2616)), $mul.ref(1912, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 1824)), $mul.ref(1160, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 1);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i39 == 1);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160)), $mul.ref(1800, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 2616)), $mul.ref(1912, 1));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 1824)), $mul.ref(1468, 1));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i46 == 1);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} download_offload_pseudocode($p2);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} send_command($p2);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p14);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i51 == 1);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p14, $mul.ref(0, 72)), $mul.ref(20, 1));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 512);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i56 == 1);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $i59 := __command_write_data($p2, $p12, $p14);
    call {:si_unique_call 236} {:cexpr "data_length"} boogie_si_record_i32($i59);
    assume {:verifier.code 0} true;
    $i58 := $i59;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i52 := $i58;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} __vub300_command_response($p2, $p12, $p14, $i52);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160)), $mul.ref(1784, 1));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $0.ref);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160)), $mul.ref(1776, 1));
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p61, $0.ref);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160)), $mul.ref(1792, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, $0.ref);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p12, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i65 == 1);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} construct_request_response($p2, $p12);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160)), $mul.ref(454, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, 0);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160)), $mul.ref(24, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} ldv_mutex_unlock_28($p75);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160)), $mul.ref(16, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} vslice_dummy_var_60 := kref_put($p76, vub300_delete);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160)), $mul.ref(1800, 1));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} mmc_request_done($p79, $p10);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i65 == 1;
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p12, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, $sub.i32(0, 123));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160)), $mul.ref(24, 1));
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} ldv_mutex_unlock_27($p69);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160)), $mul.ref(1800, 1));
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} mmc_request_done($p71, $p10);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160)), $mul.ref(16, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} vslice_dummy_var_61 := kref_put($p72, vub300_delete);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i68 == 1;
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} check_vub300_port_status($p2);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i56 == 1;
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $i57 := __command_read_data($p2, $p12, $p14);
    call {:si_unique_call 234} {:cexpr "data_length"} boogie_si_record_i32($i57);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb20;

  $bb15:
    assume $i51 == 1;
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb17;

  $bb12:
    assume $i46 == 1;
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160)), $mul.ref(360, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $p49 := strncpy($p48, .str.53, 80);
    assume $isExternal($p49);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb5;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb5;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2768), 3160)), $mul.ref(16, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} vslice_dummy_var_59 := kref_put($p7, vub300_delete);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const vub300_deadwork_thread: ref;

axiom vub300_deadwork_thread == $sub.ref(0, 166502);

procedure vub300_deadwork_thread($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.0, assertsPassed, $M.15, $M.12, $M.13, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.16;



implementation vub300_deadwork_thread($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $p39: ref;
  var $p40: ref;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 2688), 3160));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2688), 3160)), $mul.ref(8, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2688), 3160)), $mul.ref(24, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} ldv_mutex_lock_20($p9);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2688), 3160)), $mul.ref(1776, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2688), 3160)), $mul.ref(445, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2688), 3160)), $mul.ref(1800, 1));
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} check_vub300_port_status($p2);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2688), 3160)), $mul.ref(2560, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, jiffies);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 250);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} vslice_dummy_var_63 := mod_timer($p35, $i37);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2688), 3160)), $mul.ref(24, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} ldv_mutex_unlock_21($p39);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2688), 3160)), $mul.ref(16, 1));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} vslice_dummy_var_64 := kref_put($p40, vub300_delete);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2688), 3160)), $mul.ref(1800, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2616)), $mul.ref(1912, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb13;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2688), 3160)), $mul.ref(1800, 1));
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 2616)), $mul.ref(1912, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 1824)), $mul.ref(1160, 1));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 1);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb13;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} check_vub300_port_status($p2);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2688), 3160)), $mul.ref(16, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} vslice_dummy_var_62 := kref_put($p7, vub300_delete);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const kref_init: ref;

axiom kref_init == $sub.ref(0, 167534);

procedure kref_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation kref_init($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} atomic_set($p1, 1);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    return;
}



const vub300_sg_timed_out: ref;

axiom vub300_sg_timed_out == $sub.ref(0, 168566);

procedure vub300_sg_timed_out($i0: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation vub300_sg_timed_out($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} {:cexpr "vub300_sg_timed_out:arg:data"} boogie_si_record_i64($i0);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 3160)), $mul.ref(468, 1));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 1);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 3160)), $mul.ref(2344, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} usb_sg_cancel($p3);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 3160)), $mul.ref(1816, 1));
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} vslice_dummy_var_65 := usb_unlink_urb($p5);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 3160)), $mul.ref(1824, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} vslice_dummy_var_66 := usb_unlink_urb($p8);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    return;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 169598);

procedure kref_get($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $M.15, $M.12, $M.13, $CurrAddr, $M.16;



implementation kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $p14: ref;
  var vslice_dummy_var_67: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $i2 := atomic_read($p1);
    call {:si_unique_call 258} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 259} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i4);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 261} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i4, 0);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} vslice_dummy_var_67 := ldv__builtin_expect($i12, 0);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} atomic_inc($p14);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} warn_slowpath_null(.str.10, 42);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vub300_inactivity_timer_expired: ref;

axiom vub300_inactivity_timer_expired == $sub.ref(0, 170630);

procedure vub300_inactivity_timer_expired($i0: i64);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.15, $M.12, $M.13, $CurrAddr, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.16;



implementation vub300_inactivity_timer_expired($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} {:cexpr "vub300_inactivity_timer_expired:arg:data"} boogie_si_record_i64($i0);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 3160)), $mul.ref(8, 1));
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 3160)), $mul.ref(1776, 1));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} vub300_queue_dead_work($p1);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 3160)), $mul.ref(2560, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, jiffies);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 250);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} vslice_dummy_var_70 := mod_timer($p16, $i18);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 3160)), $mul.ref(2560, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, jiffies);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 250);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} vslice_dummy_var_69 := mod_timer($p12, $i14);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 3160)), $mul.ref(16, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} vslice_dummy_var_68 := kref_put($p6, vub300_delete);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const add_timer: ref;

axiom add_timer == $sub.ref(0, 171662);

procedure add_timer($p0: ref);
  free requires assertsPassed;



implementation add_timer($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    return;
}



const mmc_add_host: ref;

axiom mmc_add_host == $sub.ref(0, 172694);

procedure mmc_add_host($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mmc_add_host($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 1} true;
    call {:si_unique_call 270} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 271} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 173726);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 272} {:cexpr "mod_timer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 1} true;
    call {:si_unique_call 273} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 274} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vub300_queue_dead_work: ref;

axiom vub300_queue_dead_work == $sub.ref(0, 174758);

procedure vub300_queue_dead_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.15, $M.12, $M.13, assertsPassed, $CurrAddr, $M.16;



implementation vub300_queue_dead_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $p7: ref;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(16, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} kref_get($p1);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p2 := $M.10;
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2688, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i4 := queue_work($p2, $p3);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 277} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(16, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} vslice_dummy_var_71 := kref_put($p7, vub300_delete);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 175790);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 1} true;
    call {:si_unique_call 279} $i2 := __VERIFIER_nondet_bool();
    call {:si_unique_call 280} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i2);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 176822);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 177854);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $M.15, $M.12, $M.13, $CurrAddr, $M.16;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 281} devirtbounce.2(0, $p1, $p1);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const usb_sg_cancel: ref;

axiom usb_sg_cancel == $sub.ref(0, 178886);

procedure usb_sg_cancel($p0: ref);
  free requires assertsPassed;



implementation usb_sg_cancel($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    return;
}



const usb_unlink_urb: ref;

axiom usb_unlink_urb == $sub.ref(0, 179918);

procedure usb_unlink_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_unlink_urb($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 1} true;
    call {:si_unique_call 282} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 283} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 180950);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_20: ref;

axiom ldv_mutex_lock_20 == $sub.ref(0, 181982);

procedure ldv_mutex_lock_20($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_20($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} ldv_mutex_lock_cmd_mutex($p0);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} mutex_lock($p0);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const check_vub300_port_status: ref;

axiom check_vub300_port_status == $sub.ref(0, 183014);

procedure check_vub300_port_status($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation check_vub300_port_status($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $i3 := __create_pipe($p2, 0);
    call {:si_unique_call 288} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i3, $sub.i32(0, 2147483520));
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(3072, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $i9 := usb_control_msg($p5, $i6, 0, $sub.i8(0, 64), 0, 0, $p8, 15, 250);
    call {:si_unique_call 290} {:cexpr "retval"} boogie_si_record_i32($i9);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 15);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} new_system_port_status($p0);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_unlock_21: ref;

axiom ldv_mutex_unlock_21 == $sub.ref(0, 184046);

procedure ldv_mutex_unlock_21($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_21($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} ldv_mutex_unlock_cmd_mutex($p0);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} mutex_unlock($p0);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const new_system_port_status: ref;

axiom new_system_port_status == $sub.ref(0, 185078);

procedure new_system_port_status($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation new_system_port_status($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i1;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i8;
  var $i28: i8;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i1;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(445, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 294} {:cexpr "old_card_present"} boogie_si_record_i32($i4);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(3072, 1)), $mul.ref(4, 1));
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 1);
    call {:si_unique_call 295} {:cexpr "new_card_present"} boogie_si_record_i32($i9);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(3072, 1)), $mul.ref(4, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 16);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(446, 1));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i15);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i17);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i9, 0);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i9, 0);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i37 == 1;
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i4, 0);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb12;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} vslice_dummy_var_73 := _dev_info.ref.ref($p41, .str.52);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(445, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, 0);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1800, 1));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} mmc_detect_change($p45, 0);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i4, 0);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} vslice_dummy_var_72 := _dev_info.ref.ref($p22, .str.50);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(445, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 1);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(451, 1));
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i27 := $and.i8($i26, $sub.i8(0, 16));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, $i27);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i28 := $M.11;
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i28);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 0);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1800, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} mmc_detect_change($p36, 1);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i29 == 1;
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $p32 := strncpy($p31, .str.51, 80);
    assume $isExternal($p32);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const strncpy: ref;

axiom strncpy == $sub.ref(0, 186110);

procedure strncpy($p0: ref, $p1: ref, $i2: i64) returns ($r: ref);



const mmc_detect_change: ref;

axiom mmc_detect_change == $sub.ref(0, 187142);

procedure mmc_detect_change($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation mmc_detect_change($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} {:cexpr "mmc_detect_change:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_26: ref;

axiom ldv_mutex_lock_26 == $sub.ref(0, 188174);

procedure ldv_mutex_lock_26($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_26($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} ldv_mutex_lock_cmd_mutex($p0);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} mutex_lock($p0);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const init_completion: ref;

axiom init_completion == $sub.ref(0, 189206);

procedure init_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} __init_waitqueue_head($p3, .str.49, $p1);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    return;
}



const download_offload_pseudocode: ref;

axiom download_offload_pseudocode == $sub.ref(0, 190238);

procedure download_offload_pseudocode($p0: ref);
  free requires assertsPassed;
  modifies $M.12, $M.0, $CurrAddr;



implementation download_offload_pseudocode($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i23: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i21: i32;
  var $i22: i32;
  var $i43: i32;
  var $i20: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1800, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1912, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1824)), $mul.ref(1468, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 307} {:cexpr "sdio_funcs"} boogie_si_record_i32($i7);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p1, $0.ref);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1824)), $mul.ref(1484, 1)), $mul.ref(0, 1));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1824)), $mul.ref(1484, 1)), $mul.ref(2, 1));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i18 := snprintf.ref.i64.ref.i32.i32($p9, 80, .str.54, $i13, $i17);
    call {:si_unique_call 309} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32(0, $i7);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i20);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p45, $mul.ref($i46, 1));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i20);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i49 := $sub.i64(80, $i48);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} vslice_dummy_var_74 := snprintf.ref.i64.ref($p47, $i49, .str.56);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} vslice_dummy_var_75 := _dev_info.ref.ref.ref($p53, .str.57, $p55);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 1824)), $mul.ref(8, 1));
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i60 := request_firmware($p1, $p58, $p59);
    call {:si_unique_call 317} {:cexpr "retval"} boogie_si_record_i32($i60);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i60, 0);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i61 == 1);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.12, $p1);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} __download_offload_pseudocode($p0, $p75);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.12, $p1);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} release_firmware($p76);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i61 == 1;
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $p64 := strncpy($p63, .str.58, 80);
    assume $isExternal($p64);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p5, $mul.ref(0, 1824)), $mul.ref(8, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $i68 := request_firmware($p1, $p66, $p67);
    call {:si_unique_call 320} {:cexpr "retval"} boogie_si_record_i32($i68);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i68, 0);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i69 == 1);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.12, $p1);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} __download_offload_pseudocode($p0, $p73);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.12, $p1);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} release_firmware($p74);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i69 == 1;
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $p72 := strncpy($p71, .str.59, 80);
    assume $isExternal($p72);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i21, $i22 := 0, $i18;
    goto $bb4;

  $bb4:
    call $i23, $p25, $p26, $p27, $p28, $i29, $p30, $i31, $i32, $p33, $i34, $i35, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $i21, $i22, $i43 := download_offload_pseudocode_loop_$bb4($p0, $p5, $i7, $i23, $p25, $p26, $p27, $p28, $i29, $p30, $i31, $i32, $p33, $i34, $i35, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $i21, $i22, $i43);
    goto $bb4_last;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i21);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1824)), $mul.ref(1496, 1)), $mul.ref($i23, 8));
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i22);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p28, $mul.ref($i29, 1));
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i22);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i32 := $sub.i64(80, $i31);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p26, $mul.ref(0, 1216)), $mul.ref(1166, 1));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.0, $p33);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p26, $mul.ref(0, 1216)), $mul.ref(1168, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $i39 := snprintf.ref.i64.ref.i32.i32($p30, $i32, .str.55, $i35, $i38);
    call {:si_unique_call 311} {:cexpr "tmp___0"} boogie_si_record_i32($i39);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, $i22);
    call {:si_unique_call 312} {:cexpr "l"} boogie_si_record_i32($i40);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i21, 1);
    call {:si_unique_call 313} {:cexpr "n"} boogie_si_record_i32($i41);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, $i7);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i43 := $i40;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i20 := $i43;
    goto $bb3;

  $bb6:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i21, $i22 := $i41, $i40;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1601;
}



const send_command: ref;

axiom send_command == $sub.ref(0, 191270);

procedure send_command($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation send_command($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i8;
  var $i30: i8;
  var $i31: i8;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i8;
  var $i39: i8;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i47: i8;
  var $p58: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $p103: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i32;
  var $i120: i16;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i32;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i104: i8;
  var $i59: i8;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $i155: i32;
  var $i156: i8;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $i161: i32;
  var $i162: i32;
  var $i163: i8;
  var $p164: ref;
  var $p165: ref;
  var $p167: ref;
  var $p168: ref;
  var $i169: i32;
  var $i170: i32;
  var $i171: i8;
  var $p172: ref;
  var $p173: ref;
  var $p175: ref;
  var $p176: ref;
  var $i177: i32;
  var $i178: i32;
  var $i179: i8;
  var $p180: ref;
  var $p181: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i32;
  var $i186: i8;
  var $p187: ref;
  var $p188: ref;
  var $p190: ref;
  var $p191: ref;
  var $i192: i32;
  var $i193: i1;
  var $p194: ref;
  var $i195: i32;
  var $i196: i32;
  var $i197: i32;
  var $p198: ref;
  var $p199: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p205: ref;
  var $i206: i64;
  var $p208: ref;
  var $i209: i16;
  var $i210: i32;
  var $i211: i32;
  var $i212: i8;
  var $p213: ref;
  var $p214: ref;
  var $p216: ref;
  var $i217: i64;
  var $p219: ref;
  var $i220: i16;
  var $i221: i8;
  var $p222: ref;
  var $p223: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p244: ref;
  var $i245: i64;
  var $i246: i1;
  var $p247: ref;
  var $p248: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p254: ref;
  var $p256: ref;
  var $i257: i16;
  var $i258: i32;
  var $i259: i32;
  var $i260: i8;
  var $p261: ref;
  var $p262: ref;
  var $p264: ref;
  var $p266: ref;
  var $i267: i16;
  var $i268: i8;
  var $p269: ref;
  var $p270: ref;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $p291: ref;
  var $p292: ref;
  var $i293: i32;
  var $i294: i1;
  var $p295: ref;
  var $i296: i32;
  var $i297: i32;
  var $i298: i32;
  var $p299: ref;
  var $p300: ref;
  var $p302: ref;
  var $i303: i8;
  var $i304: i32;
  var $i305: i32;
  var $i306: i1;
  var $p307: ref;
  var $i308: i32;
  var $i309: i32;
  var $i310: i8;
  var $p311: ref;
  var $p312: ref;
  var $p314: ref;
  var $p315: ref;
  var $i316: i32;
  var $i317: i8;
  var $p318: ref;
  var $p319: ref;
  var $p321: ref;
  var $p322: ref;
  var $i323: i32;
  var $i324: i32;
  var $i325: i8;
  var $p326: ref;
  var $p327: ref;
  var $p329: ref;
  var $p330: ref;
  var $i331: i32;
  var $i332: i8;
  var $p333: ref;
  var $p334: ref;
  var $p336: ref;
  var $p337: ref;
  var $p338: ref;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $p344: ref;
  var $p345: ref;
  var $i346: i32;
  var $i347: i32;
  var $i348: i8;
  var $p349: ref;
  var $p350: ref;
  var $p352: ref;
  var $p353: ref;
  var $i354: i32;
  var $i355: i8;
  var $p356: ref;
  var $p357: ref;
  var $p359: ref;
  var $p360: ref;
  var $i361: i32;
  var $i362: i32;
  var $i363: i1;
  var $i364: i32;
  var $i365: i8;
  var $p366: ref;
  var $p367: ref;
  var $p368: ref;
  var $p369: ref;
  var $i370: i32;
  var $i371: i32;
  var $i372: i8;
  var $p373: ref;
  var $p374: ref;
  var $p376: ref;
  var $p377: ref;
  var $i378: i32;
  var $i379: i32;
  var $i380: i8;
  var $p381: ref;
  var $p382: ref;
  var $p384: ref;
  var $p385: ref;
  var $i386: i32;
  var $i387: i32;
  var $i388: i8;
  var $p389: ref;
  var $p390: ref;
  var $p392: ref;
  var $p393: ref;
  var $i394: i32;
  var $i395: i8;
  var $p396: ref;
  var $p397: ref;
  var $p399: ref;
  var $p400: ref;
  var $i401: i32;
  var $i402: i64;
  var $p404: ref;
  var $i405: i16;
  var $i406: i32;
  var $i407: i1;
  var $p408: ref;
  var $p409: ref;
  var $p411: ref;
  var $p412: ref;
  var $p413: ref;
  var $p415: ref;
  var $p416: ref;
  var $i417: i32;
  var $i418: i32;
  var $i419: i8;
  var $p420: ref;
  var $p421: ref;
  var $p423: ref;
  var $p424: ref;
  var $i425: i32;
  var $i426: i8;
  var $p427: ref;
  var $p428: ref;
  var $p430: ref;
  var $p431: ref;
  var $i432: i32;
  var $i433: i32;
  var $i434: i8;
  var $p435: ref;
  var $p436: ref;
  var $p438: ref;
  var $p439: ref;
  var $i440: i32;
  var $i441: i8;
  var $p442: ref;
  var $p443: ref;
  var $p445: ref;
  var $p446: ref;
  var $i447: i32;
  var $i448: i32;
  var $i449: i1;
  var $i450: i32;
  var $i451: i8;
  var $p452: ref;
  var $p453: ref;
  var $p454: ref;
  var $p455: ref;
  var $i456: i32;
  var $i457: i32;
  var $i458: i8;
  var $p459: ref;
  var $p460: ref;
  var $p462: ref;
  var $p463: ref;
  var $i464: i32;
  var $i465: i32;
  var $i466: i8;
  var $p467: ref;
  var $p468: ref;
  var $p470: ref;
  var $p471: ref;
  var $i472: i32;
  var $i473: i32;
  var $i474: i8;
  var $p475: ref;
  var $p476: ref;
  var $p478: ref;
  var $p479: ref;
  var $i480: i32;
  var $i481: i8;
  var $p482: ref;
  var $p483: ref;
  var $p485: ref;
  var $p486: ref;
  var $i487: i32;
  var $p489: ref;
  var $i490: i16;
  var $i491: i32;
  var $i492: i1;
  var $p493: ref;
  var $p494: ref;
  var $p496: ref;
  var $p497: ref;
  var $p498: ref;
  var $p500: ref;
  var $p501: ref;
  var $p502: ref;
  var $p504: ref;
  var $i505: i8;
  var $i506: i32;
  var $i507: i1;
  var $p508: ref;
  var $p509: ref;
  var $p511: ref;
  var $i512: i8;
  var $i513: i32;
  var $i514: i1;
  var $p515: ref;
  var $p516: ref;
  var $p518: ref;
  var $i519: i8;
  var $i520: i16;
  var $i521: i32;
  var $p522: ref;
  var $p523: ref;
  var $p525: ref;
  var $i526: i8;
  var $i527: i32;
  var $i528: i32;
  var $i529: i16;
  var $i530: i32;
  var $i531: i32;
  var $i532: i16;
  var $i533: i32;
  var $i534: i32;
  var $i535: i16;
  var $i536: i32;
  var $i537: i32;
  var $i538: i16;
  var $i539: i32;
  var $i540: i32;
  var $i541: i8;
  var $p542: ref;
  var $p543: ref;
  var $p545: ref;
  var $i546: i8;
  var $p547: ref;
  var $p548: ref;
  var $p550: ref;
  var $p551: ref;
  var $p552: ref;
  var $p554: ref;
  var $p555: ref;
  var $p556: ref;
  var $p558: ref;
  var $p559: ref;
  var $p560: ref;
  var $p561: ref;
  var $i562: i8;
  var $i563: i32;
  var $i564: i32;
  var $p565: ref;
  var $p566: ref;
  var $p567: ref;
  var $p568: ref;
  var $i569: i32;
  var $p570: ref;
  var $p571: ref;
  var $p572: ref;
  var $p573: ref;
  var $p574: ref;
  var $i575: i32;
  var $i576: i1;
  var $p577: ref;
  var $p578: ref;
  var $p579: ref;
  var $i580: i32;
  var $i581: i16;
  var $p583: ref;
  var $p584: ref;
  var $i585: i32;
  var $i586: i16;
  var $p588: ref;
  var $p589: ref;
  var $i590: i32;
  var $i591: i16;
  var $p593: ref;
  var $p594: ref;
  var $i595: i32;
  var $i596: i16;
  var $p598: ref;
  var $p599: ref;
  var $i600: i32;
  var $i601: i16;
  var $p603: ref;
  var $p604: ref;
  var $i605: i32;
  var $i606: i16;
  var $p608: ref;
  var $p609: ref;
  var $i610: i32;
  var $i611: i16;
  var $p613: ref;
  var vslice_dummy_var_76: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1776, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1792, 1));
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(448, 1));
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i61, 17);
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i61, 32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i61, 52);
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i61, 55);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i61, 56);
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i61, 56);
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p136, 0);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p137, $sub.i32(0, 22));
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1832, 1));
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} complete_($p138);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    return;

  $bb52:
    assume $i67 == 1;
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p135, 6);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i104 := 2;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i59 := $i104;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p140, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p141, 20);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p142);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p143, $mul.ref(0, 64)), $mul.ref(1, 1));
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p144, 0);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p145);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p146, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p147, 0);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p148);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p149, $mul.ref(0, 64)), $mul.ref(3, 1));
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p150, 0);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p151);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p152, $mul.ref(0, 64)), $mul.ref(9, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p153, $i59);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i156 := $trunc.i32.i8($i155);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p158, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p159, $i156);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.0, $p160);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i162 := $lshr.i32($i161, 24);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i32.i8($i162);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p164);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p165, $mul.ref(0, 64)), $mul.ref(10, 1)), $mul.ref(0, 1));
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p167, $i163);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.0, $p168);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i170 := $lshr.i32($i169, 16);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i171 := $trunc.i32.i8($i170);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p173, $mul.ref(0, 64)), $mul.ref(10, 1)), $mul.ref(1, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p175, $i171);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.0, $p176);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i178 := $lshr.i32($i177, 8);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i179 := $trunc.i32.i8($i178);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p181 := $bitcast.ref.ref($p180);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p181, $mul.ref(0, 64)), $mul.ref(10, 1)), $mul.ref(2, 1));
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p183, $i179);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i185 := $load.i32($M.0, $p184);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i186 := $trunc.i32.i8($i185);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p188 := $bitcast.ref.ref($p187);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p188, $mul.ref(0, 64)), $mul.ref(10, 1)), $mul.ref(3, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p190, $i186);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i192 := $load.i32($M.0, $p191);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i193 := $eq.i32($i192, 52);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i193 == 1);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i245 := $p2i.ref.i64($p4);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i246 := $eq.i64($i245, 0);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i246} true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i246 == 1);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i293 := $load.i32($M.0, $p292);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i293, 53);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i294 == 1);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(12, 1));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i417 := $load.i32($M.0, $p416);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i418 := $lshr.i32($i417, 8);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i419 := $trunc.i32.i8($i418);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p421 := $bitcast.ref.ref($p420);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($add.ref($p421, $mul.ref(0, 64)), $mul.ref(14, 1)), $mul.ref(0, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p423, $i419);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(12, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i425 := $load.i32($M.0, $p424);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i426 := $trunc.i32.i8($i425);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p428 := $bitcast.ref.ref($p427);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($add.ref($p428, $mul.ref(0, 64)), $mul.ref(14, 1)), $mul.ref(1, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p430, $i426);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i432 := $load.i32($M.0, $p431);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i433 := $lshr.i32($i432, 8);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i434 := $trunc.i32.i8($i433);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p436 := $bitcast.ref.ref($p435);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($add.ref($p436, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p438, $i434);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i440 := $load.i32($M.0, $p439);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i441 := $trunc.i32.i8($i440);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p443 := $bitcast.ref.ref($p442);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($add.ref($p443, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p445, $i441);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(20, 1));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i447 := $load.i32($M.0, $p446);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i448 := $and.i32($i447, 512);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i449 := $ne.i32($i448, 0);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i450 := (if $i449 == 1 then 0 else 128);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i451 := $trunc.i32.i8($i450);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p453 := $bitcast.ref.ref($p452);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($p453, $mul.ref(0, 64)), $mul.ref(3, 1));
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p454, $i451);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(456, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i456 := $load.i32($M.0, $p455);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i457 := $lshr.i32($i456, 24);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i458 := $trunc.i32.i8($i457);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p460 := $bitcast.ref.ref($p459);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($add.ref($add.ref($p460, $mul.ref(0, 64)), $mul.ref(5, 1)), $mul.ref(0, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p462, $i458);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(456, 1));
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i464 := $load.i32($M.0, $p463);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i465 := $lshr.i32($i464, 16);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i466 := $trunc.i32.i8($i465);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p468 := $bitcast.ref.ref($p467);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($add.ref($p468, $mul.ref(0, 64)), $mul.ref(5, 1)), $mul.ref(1, 1));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p470, $i466);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(456, 1));
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i472 := $load.i32($M.0, $p471);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i473 := $lshr.i32($i472, 8);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i474 := $trunc.i32.i8($i473);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p476 := $bitcast.ref.ref($p475);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($add.ref($add.ref($p476, $mul.ref(0, 64)), $mul.ref(5, 1)), $mul.ref(2, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p478, $i474);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(456, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i480 := $load.i32($M.0, $p479);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i481 := $trunc.i32.i8($i480);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p483 := $bitcast.ref.ref($p482);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($add.ref($p483, $mul.ref(0, 64)), $mul.ref(5, 1)), $mul.ref(3, 1));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p485, $i481);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(456, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i487 := $load.i32($M.0, $p486);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(0, 2));
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i490 := $load.i16($M.0, $p489);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i491 := $zext.i16.i32($i490);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i492 := $ult.i32($i487, $i491);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i492} true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i492 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p502 := $bitcast.ref.ref($p501);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p504 := $add.ref($add.ref($add.ref($p502, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i505 := $load.i8($M.0, $p504);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i506 := $zext.i8.i32($i505);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i507 := $ne.i32($i506, 0);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    assume {:branchcond $i507} true;
    goto $bb156, $bb158;

  $bb158:
    assume !($i507 == 1);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p509 := $bitcast.ref.ref($p508);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($add.ref($p509, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i512 := $load.i8($M.0, $p511);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i513 := $zext.i8.i32($i512);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i514 := $ne.i32($i513, 0);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i514} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i514 == 1);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p552 := $bitcast.ref.ref($p551);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref($add.ref($p552, $mul.ref(0, 64)), $mul.ref(18, 1)), $mul.ref(0, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p554, 0);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p556 := $bitcast.ref.ref($p555);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p558 := $add.ref($add.ref($add.ref($p556, $mul.ref(0, 64)), $mul.ref(18, 1)), $mul.ref(1, 1));
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p558, 0);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p560 := $load.ref($M.0, $p559);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(440, 1));
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i562 := $load.i8($M.0, $p561);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i563 := $zext.i8.i32($i562);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $i564 := __create_pipe($p560, $i563);
    call {:si_unique_call 335} {:cexpr "tmp"} boogie_si_record_i32($i564);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1816, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p566 := $load.ref($M.0, $p565);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p568 := $load.ref($M.0, $p567);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i569 := $or.i32($i564, $sub.i32(0, 1073741824));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p571 := $bitcast.ref.ref($p570);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p572 := $bitcast.ref.ref($p0);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} usb_fill_bulk_urb($p566, $p568, $i569, $p571, 64, command_out_completed, $p572);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1816, 1));
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p574 := $load.ref($M.0, $p573);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $i575 := usb_submit_urb($p574, 208);
    call {:si_unique_call 338} {:cexpr "retval"} boogie_si_record_i32($i575);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i576 := $slt.i32($i575, 0);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i576} true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i576 == 1);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb162:
    assume $i576 == 1;
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p577, $i575);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1832, 1));
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} complete_($p578);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb159:
    assume {:verifier.code 0} true;
    assume $i514 == 1;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p516 := $bitcast.ref.ref($p515);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($add.ref($add.ref($p516, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i519 := $load.i8($M.0, $p518);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i520 := $zext.i8.i16($i519);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i521 := $sext.i16.i32($i520);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p523 := $bitcast.ref.ref($p522);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($add.ref($p523, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i526 := $load.i8($M.0, $p525);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i527 := $zext.i8.i32($i526);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i528 := $shl.i32($i527, 8);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i529 := $trunc.i32.i16($i528);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i530 := $sext.i16.i32($i529);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i531 := $or.i32($i521, $i530);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i532 := $trunc.i32.i16($i531);
    call {:si_unique_call 332} {:cexpr "block_size"} boogie_si_record_i16($i532);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i533 := $zext.i16.i32($i532);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i534 := $srem.i32(1024, $i533);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i535 := $trunc.i32.i16($i534);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i536 := $zext.i16.i32($i535);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i537 := $sub.i32(1024, $i536);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i538 := $trunc.i32.i16($i537);
    call {:si_unique_call 333} {:cexpr "block_boundary"} boogie_si_record_i16($i538);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i539 := $zext.i16.i32($i538);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i540 := $ashr.i32($i539, 8);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i541 := $trunc.i32.i8($i540);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p543 := $bitcast.ref.ref($p542);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($add.ref($p543, $mul.ref(0, 64)), $mul.ref(18, 1)), $mul.ref(0, 1));
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p545, $i541);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i546 := $trunc.i16.i8($i538);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p548 := $bitcast.ref.ref($p547);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p550 := $add.ref($add.ref($add.ref($p548, $mul.ref(0, 64)), $mul.ref(18, 1)), $mul.ref(1, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p550, $i546);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb156:
    assume {:verifier.code 0} true;
    assume $i507 == 1;
    goto $bb157;

  $bb153:
    assume $i492 == 1;
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p494 := $bitcast.ref.ref($p493);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($add.ref($p494, $mul.ref(0, 64)), $mul.ref(14, 1)), $mul.ref(0, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p496, 0);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p498 := $bitcast.ref.ref($p497);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p500 := $add.ref($add.ref($add.ref($p498, $mul.ref(0, 64)), $mul.ref(14, 1)), $mul.ref(1, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p500, 0);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb144:
    assume $i294 == 1;
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i296 := $load.i32($M.0, $p295);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i297 := $lshr.i32($i296, 28);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i298 := $and.i32($i297, 7);
    call {:si_unique_call 331} {:cexpr "fn___0"} boogie_si_record_i32($i298);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p300 := $bitcast.ref.ref($p299);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($add.ref($p300, $mul.ref(0, 64)), $mul.ref(10, 1)), $mul.ref(0, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i303 := $load.i8($M.0, $p302);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i304 := $zext.i8.i32($i303);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i305 := $and.i32($i304, 8);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i306 := $ne.i32($i305, 0);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i306} true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i306 == 1);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p338 := $bitcast.ref.ref($p337);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($add.ref($p338, $mul.ref(0, 64)), $mul.ref(14, 1)), $mul.ref(0, 1));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p340, 0);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p342 := $bitcast.ref.ref($p341);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($add.ref($p342, $mul.ref(0, 64)), $mul.ref(14, 1)), $mul.ref(1, 1));
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p344, 0);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(456, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i346 := $load.i32($M.0, $p345);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i347 := $lshr.i32($i346, 8);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i348 := $trunc.i32.i8($i347);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p350 := $bitcast.ref.ref($p349);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($add.ref($p350, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p352, $i348);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(456, 1));
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i354 := $load.i32($M.0, $p353);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i355 := $trunc.i32.i8($i354);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p357 := $bitcast.ref.ref($p356);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($add.ref($p357, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p359, $i355);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(20, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i361 := $load.i32($M.0, $p360);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i362 := $and.i32($i361, 512);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i363 := $ne.i32($i362, 0);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i364 := (if $i363 == 1 then 0 else 128);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i365 := $trunc.i32.i8($i364);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p367 := $bitcast.ref.ref($p366);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p367, $mul.ref(0, 64)), $mul.ref(3, 1));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p368, $i365);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(456, 1));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i370 := $load.i32($M.0, $p369);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i371 := $lshr.i32($i370, 24);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i372 := $trunc.i32.i8($i371);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p374 := $bitcast.ref.ref($p373);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($add.ref($p374, $mul.ref(0, 64)), $mul.ref(5, 1)), $mul.ref(0, 1));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p376, $i372);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(456, 1));
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i378 := $load.i32($M.0, $p377);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i379 := $lshr.i32($i378, 16);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i380 := $trunc.i32.i8($i379);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p382 := $bitcast.ref.ref($p381);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($add.ref($p382, $mul.ref(0, 64)), $mul.ref(5, 1)), $mul.ref(1, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p384, $i380);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(456, 1));
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i386 := $load.i32($M.0, $p385);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i387 := $lshr.i32($i386, 8);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i388 := $trunc.i32.i8($i387);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p390 := $bitcast.ref.ref($p389);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($add.ref($p390, $mul.ref(0, 64)), $mul.ref(5, 1)), $mul.ref(2, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p392, $i388);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(456, 1));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i394 := $load.i32($M.0, $p393);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i395 := $trunc.i32.i8($i394);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p397 := $bitcast.ref.ref($p396);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($add.ref($p397, $mul.ref(0, 64)), $mul.ref(5, 1)), $mul.ref(3, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p399, $i395);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(456, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i401 := $load.i32($M.0, $p400);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i402 := $sext.i32.i64($i298);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref($i402, 2));
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i405 := $load.i16($M.0, $p404);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i406 := $zext.i16.i32($i405);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i407 := $ult.i32($i401, $i406);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i407} true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i407 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb149:
    assume $i407 == 1;
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p409 := $bitcast.ref.ref($p408);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($add.ref($p409, $mul.ref(0, 64)), $mul.ref(14, 1)), $mul.ref(0, 1));
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p411, 0);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p413 := $bitcast.ref.ref($p412);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($add.ref($p413, $mul.ref(0, 64)), $mul.ref(14, 1)), $mul.ref(1, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p415, 0);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb146:
    assume $i306 == 1;
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(12, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i308 := $load.i32($M.0, $p307);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i309 := $lshr.i32($i308, 8);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i310 := $trunc.i32.i8($i309);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p312 := $bitcast.ref.ref($p311);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($add.ref($p312, $mul.ref(0, 64)), $mul.ref(14, 1)), $mul.ref(0, 1));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p314, $i310);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(12, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i316 := $load.i32($M.0, $p315);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i317 := $trunc.i32.i8($i316);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p319 := $bitcast.ref.ref($p318);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($add.ref($p319, $mul.ref(0, 64)), $mul.ref(14, 1)), $mul.ref(1, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p321, $i317);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i323 := $load.i32($M.0, $p322);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i324 := $lshr.i32($i323, 8);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i325 := $trunc.i32.i8($i324);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p327 := $bitcast.ref.ref($p326);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($add.ref($p327, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p329, $i325);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i331 := $load.i32($M.0, $p330);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i332 := $trunc.i32.i8($i331);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p334 := $bitcast.ref.ref($p333);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($add.ref($p334, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p336, $i332);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb141:
    assume $i246 == 1;
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p248 := $bitcast.ref.ref($p247);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($add.ref($p248, $mul.ref(0, 64)), $mul.ref(14, 1)), $mul.ref(0, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p250, 0);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p252 := $bitcast.ref.ref($p251);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($add.ref($p252, $mul.ref(0, 64)), $mul.ref(14, 1)), $mul.ref(1, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p254, 0);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(0, 2));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i257 := $load.i16($M.0, $p256);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i258 := $zext.i16.i32($i257);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i259 := $ashr.i32($i258, 8);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i260 := $trunc.i32.i8($i259);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p262 := $bitcast.ref.ref($p261);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($p262, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p264, $i260);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(0, 2));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i267 := $load.i16($M.0, $p266);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i268 := $trunc.i16.i8($i267);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p270 := $bitcast.ref.ref($p269);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($add.ref($p270, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p272, $i268);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p274 := $bitcast.ref.ref($p273);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p274, $mul.ref(0, 64)), $mul.ref(3, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p275, 0);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p277 := $bitcast.ref.ref($p276);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($p277, $mul.ref(0, 64)), $mul.ref(5, 1)), $mul.ref(0, 1));
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p279, 0);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p281 := $bitcast.ref.ref($p280);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($add.ref($p281, $mul.ref(0, 64)), $mul.ref(5, 1)), $mul.ref(1, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p283, 0);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p285 := $bitcast.ref.ref($p284);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($add.ref($p285, $mul.ref(0, 64)), $mul.ref(5, 1)), $mul.ref(2, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p287, 0);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p288);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($add.ref($p289, $mul.ref(0, 64)), $mul.ref(5, 1)), $mul.ref(3, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p291, 0);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb138:
    assume $i193 == 1;
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i195 := $load.i32($M.0, $p194);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i196 := $lshr.i32($i195, 28);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i197 := $and.i32($i196, 7);
    call {:si_unique_call 330} {:cexpr "fn"} boogie_si_record_i32($i197);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p199 := $bitcast.ref.ref($p198);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p199, $mul.ref(0, 64)), $mul.ref(14, 1)), $mul.ref(0, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p201, 0);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p203 := $bitcast.ref.ref($p202);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($p203, $mul.ref(0, 64)), $mul.ref(14, 1)), $mul.ref(1, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p205, 0);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i206 := $sext.i32.i64($i197);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref($i206, 2));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i209 := $load.i16($M.0, $p208);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i210 := $zext.i16.i32($i209);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i211 := $ashr.i32($i210, 8);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i212 := $trunc.i32.i8($i211);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p214 := $bitcast.ref.ref($p213);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p214, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p216, $i212);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i217 := $sext.i32.i64($i197);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref($i217, 2));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i220 := $load.i16($M.0, $p219);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i221 := $trunc.i16.i8($i220);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p222);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p223, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p225, $i221);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p227 := $bitcast.ref.ref($p226);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p227, $mul.ref(0, 64)), $mul.ref(3, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p228, 0);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p230 := $bitcast.ref.ref($p229);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($p230, $mul.ref(0, 64)), $mul.ref(5, 1)), $mul.ref(0, 1));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p232, 0);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p234 := $bitcast.ref.ref($p233);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($add.ref($p234, $mul.ref(0, 64)), $mul.ref(5, 1)), $mul.ref(1, 1));
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p236, 0);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p238 := $bitcast.ref.ref($p237);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($add.ref($p238, $mul.ref(0, 64)), $mul.ref(5, 1)), $mul.ref(2, 1));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p240, 0);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p242 := $bitcast.ref.ref($p241);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($add.ref($p242, $mul.ref(0, 64)), $mul.ref(5, 1)), $mul.ref(3, 1));
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p244, 0);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb50:
    assume $i66 == 1;
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p133, 6);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(448, 1));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p134, 1);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i104 := 2;
    goto $bb132;

  $bb48:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i61, 53);
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i61, 53);
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb54;

  $bb57:
    assume $i69 == 1;
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p132, 6);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i104 := 7;
    goto $bb132;

  $bb55:
    assume $i68 == 1;
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p129, 6);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} snoop_block_size_and_bus_width($p0, $i131);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i104 := 7;
    goto $bb132;

  $bb46:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i61, 38);
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i61, 42);
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i61, 42);
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb54;

  $bb63:
    assume $i72 == 1;
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p128, 6);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i104 := 2;
    goto $bb132;

  $bb61:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i61, 38);
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb54;

  $bb65:
    assume $i73 == 1;
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p127, 6);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i104 := 3;
    goto $bb132;

  $bb59:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i61, 33);
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb67, $bb69;

  $bb69:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i61, 33);
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb70, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb54;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p126, 6);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i104 := 2;
    goto $bb132;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb44:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i61, 27);
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i61, 29);
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i61, 30);
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb77, $bb79;

  $bb79:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i61, 30);
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb80, $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb54;

  $bb80:
    assume $i79 == 1;
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p125, 6);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i104 := 3;
    goto $bb132;

  $bb75:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i61, 28);
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb82, $bb84;

  $bb84:
    assume !($i80 == 1);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb82:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p124, 6);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i104 := 2;
    goto $bb132;

  $bb73:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i61, 24);
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i61, 25);
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb87, $bb89;

  $bb89:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i61, 25);
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb90, $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb54;

  $bb90:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb85:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i61, 18);
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i61, 18);
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb95, $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb54;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb93:
    assume $i84 == 1;
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb42:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i61, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i61, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i61, 15);
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i61, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i89 == 1);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i32.i16($i119);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(0, 2));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p122, $i120);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i580 := $load.i32($M.0, $p579);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i581 := $trunc.i32.i16($i580);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p583 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(1, 2));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p583, $i581);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $p584 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i585 := $load.i32($M.0, $p584);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i586 := $trunc.i32.i16($i585);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(2, 2));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p588, $i586);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i590 := $load.i32($M.0, $p589);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i591 := $trunc.i32.i16($i590);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p593 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(3, 2));
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p593, $i591);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $p594 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i595 := $load.i32($M.0, $p594);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i596 := $trunc.i32.i16($i595);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(4, 2));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p598, $i596);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $p599 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i600 := $load.i32($M.0, $p599);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i601 := $trunc.i32.i16($i600);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(5, 2));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p603, $i601);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $p604 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i605 := $load.i32($M.0, $p604);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i606 := $trunc.i32.i16($i605);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p608 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(6, 2));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p608, $i606);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i610 := $load.i32($M.0, $p609);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i611 := $trunc.i32.i16($i610);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(7, 2));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p613, $i611);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p123, 6);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i104 := 2;
    goto $bb132;

  $bb104:
    assume $i89 == 1;
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p117, 0);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i104 := 1;
    goto $bb132;

  $bb102:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i61, 13);
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i61, 13);
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb108, $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb54;

  $bb108:
    assume $i91 == 1;
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p116, 6);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i104 := 2;
    goto $bb132;

  $bb106:
    assume $i90 == 1;
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p115, 6);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i104 := 3;
    goto $bb132;

  $bb100:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i61, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i61, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i61, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb114, $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb54;

  $bb114:
    assume $i94 == 1;
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p114, 17);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i104 := 4;
    goto $bb132;

  $bb112:
    assume $i93 == 1;
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p113, 17);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i104 := 4;
    goto $bb132;

  $bb110:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i61, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i95 == 1);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p112, 6);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i104 := 10;
    goto $bb132;

  $bb116:
    assume $i95 == 1;
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p111, 6);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i104 := 3;
    goto $bb132;

  $bb98:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i61, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i61, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i61, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i98 == 1);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p110, 6);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i104 := 2;
    goto $bb132;

  $bb122:
    assume $i98 == 1;
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p109, 6);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i104 := 6;
    goto $bb132;

  $bb120:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i61, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i99 == 1);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p108, 0);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i104 := 1;
    goto $bb132;

  $bb124:
    assume $i99 == 1;
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p107, 6);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i104 := 9;
    goto $bb132;

  $bb118:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i61, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i61, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i101 == 1);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, 17);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i104 := 4;
    goto $bb132;

  $bb128:
    assume $i101 == 1;
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p105, 6);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i104 := 5;
    goto $bb132;

  $bb126:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i61, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb130, $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb54;

  $bb130:
    assume $i102 == 1;
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p103, 0);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i104 := 1;
    goto $bb132;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 41);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i9, 51);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i9, 55);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i9, 55);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, 0);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $sub.i32(0, 22));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1832, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} complete_($p57);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, 6);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i47 := 2;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(448, 1));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, 0);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i59 := $i47;
    goto $bb40;

  $bb8:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i9, 51);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb12;

  $bb13:
    assume $i14 == 1;
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, 6);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i47 := 2;
    goto $bb37;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i9, 42);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i9, 42);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb12;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, 6);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i47 := 2;
    goto $bb37;

  $bb15:
    assume $i15 == 1;
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, 6);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i47 := 5;
    goto $bb37;

  $bb4:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i9, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i9, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i9, 23);
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb12;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, 6);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i47 := 2;
    goto $bb37;

  $bb21:
    assume $i18 == 1;
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, 6);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i47 := 2;
    goto $bb37;

  $bb19:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i9, 13);
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i9, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb12;

  $bb27:
    assume $i21 == 1;
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, 6);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i47 := 2;
    goto $bb37;

  $bb25:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i9, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb12;

  $bb29:
    assume $i22 == 1;
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 6);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 3);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i27 == 1);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 3);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i35 == 1);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 3);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} vslice_dummy_var_76 := dev_err.ref.ref.i32($p42, .str.76, $i45);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i47 := 2;
    goto $bb37;

  $bb34:
    assume $i35 == 1;
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(451, 1));
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i38 := $and.i8($i37, $sub.i8(0, 16));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i39 := $or.i8($i38, 4);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i39);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i27 == 1;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(451, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i30 := $and.i8($i29, $sub.i8(0, 16));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i31 := $or.i8($i30, 1);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, $i31);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    goto $bb33;
}



const __command_read_data: ref;

axiom __command_read_data == $sub.ref(0, 192302);

procedure __command_read_data($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr;



implementation __command_read_data($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i12: i32;
  var $i13: i32;
  var $i11: i32;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i8;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i64;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i41: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(456, 1));
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 341} {:cexpr "linear_length"} boogie_si_record_i32($i5);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(447, 1));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i5, 63);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, $sub.i32(0, 64));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i11 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i11, $i5);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i14 == 1);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i15 := $M.6;
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(443, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $i22 := __create_pipe($p18, $i21);
    call {:si_unique_call 343} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i22, $sub.i32(0, 1073741696));
    call {:si_unique_call 344} {:cexpr "pipe"} boogie_si_record_i32($i23);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2344, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i31 := usb_sg_init($p24, $p26, $i23, 0, $p28, $i30, 0, 208);
    call {:si_unique_call 346} {:cexpr "result"} boogie_si_record_i32($i31);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i42 := $sdiv.i32($i5, 16384);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, 2000);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $i44 := msecs_to_jiffies($i43);
    call {:si_unique_call 351} {:cexpr "tmp___0"} boogie_si_record_i64($i44);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, jiffies);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i44, $i45);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2216, 1)), $mul.ref(16, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, $i46);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2216, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} add_timer($p49);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2344, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} usb_sg_wait($p50);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2216, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} vslice_dummy_var_79 := del_timer($p51);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2344, 1)), $mul.ref(0, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i56 == 1);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(456, 1));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i63);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i41 := $i5;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb12:
    assume $i56 == 1;
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2344, 1)), $mul.ref(0, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, 0);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb11;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1816, 1));
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} vslice_dummy_var_77 := usb_unlink_urb($p34);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1824, 1));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} vslice_dummy_var_78 := usb_unlink_urb($p37);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i31);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, 0);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb11;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i11);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $p66 := kmalloc($i65, 208);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i68 == 1);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p95, $sub.i32(0, 12));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, 0);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb11;

  $bb14:
    assume $i68 == 1;
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(443, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.0, $p71);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $i74 := __create_pipe($p70, $i73);
    call {:si_unique_call 356} {:cexpr "tmp___2"} boogie_si_record_i32($i74);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i75 := $or.i32($i74, $sub.i32(0, 1073741696));
    call {:si_unique_call 357} {:cexpr "pipe___0"} boogie_si_record_i32($i75);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, $p3, 0);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i76 := $sdiv.i32($i11, 16384);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i76, 2000);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $i78 := vub300_usb_bulk_msg($p0, $i75, $p66, $i11, $p3, $i77);
    call {:si_unique_call 359} {:cexpr "result___0"} boogie_si_record_i32($i78);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i78, 0);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i79 == 1);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.13, $p3);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i82, $i5);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i83 == 1);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i5);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} vslice_dummy_var_80 := sg_copy_from_buffer($p87, $i89, $p66, $i90);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} kfree($p66);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(456, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i93);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i41 := $i5;
    goto $bb11;

  $bb18:
    assume $i83 == 1;
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, $sub.i32(0, 121));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, 0);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} kfree($p66);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb11;

  $bb16:
    assume $i79 == 1;
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i78);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, 0);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} kfree($p66);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb5;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i5, 511);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, $sub.i32(0, 512));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const __command_write_data: ref;

axiom __command_write_data == $sub.ref(0, 193334);

procedure __command_write_data($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr;



implementation __command_write_data($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i1;
  var $i43: i1;
  var $p44: ref;
  var $i45: i8;
  var $i46: i1;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $i60: i64;
  var $p61: ref;
  var $i62: i32;
  var $i63: i64;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p93: ref;
  var $p94: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $i100: i64;
  var $i101: i64;
  var $i102: i64;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $p111: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $p118: ref;
  var $i119: i32;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $p124: ref;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var vslice_dummy_var_81: i64;
  var vslice_dummy_var_82: i64;
  var vslice_dummy_var_83: i64;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $p5 := $alloc($mul.ref(256, $zext.i32.i64(1)));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(442, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $i11 := __create_pipe($p7, $i10);
    call {:si_unique_call 368} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, $sub.i32(0, 1073741824));
    call {:si_unique_call 369} {:cexpr "pipe"} boogie_si_record_i32($i12);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(456, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    call {:si_unique_call 370} {:cexpr "linear_length"} boogie_si_record_i32($i14);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 63);
    call {:si_unique_call 371} {:cexpr "modulo_64_length"} boogie_si_record_i32($i15);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i14, 511);
    call {:si_unique_call 372} {:cexpr "modulo_512_length"} boogie_si_record_i32($i16);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i17 := $sle.i32($i14, 63);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(447, 1));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i41);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i42 == 1);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i43 := $sgt.i32($i15, 0);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb10, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(447, 1));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i45);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p5);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} vslice_dummy_var_82 := sg_copy_to_buffer($p76, $i78, $p79, 256);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2344, 1));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $i88 := usb_sg_init($p81, $p83, $i12, 0, $p85, $i87, 0, 208);
    call {:si_unique_call 381} {:cexpr "result___1"} boogie_si_record_i32($i88);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i88, 0);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i89 == 1);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i98 := $sdiv.i32($i14, 16384);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i98, 2000);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i100 := msecs_to_jiffies($i99);
    call {:si_unique_call 390} {:cexpr "tmp___1"} boogie_si_record_i64($i100);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.0, jiffies);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i102 := $add.i64($i100, $i101);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2216, 1)), $mul.ref(16, 1));
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p104, $i102);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2216, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} add_timer($p105);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2344, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} usb_sg_wait($p106);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i109 == 1);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2216, 1));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} vslice_dummy_var_86 := del_timer($p111);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2344, 1)), $mul.ref(0, 1));
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i115, 0);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i116 == 1);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(456, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p122);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p124, $i123);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb31:
    assume $i116 == 1;
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2344, 1)), $mul.ref(0, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p120, $i119);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p121, 0);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i109 == 1;
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p110, 0);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i89 == 1;
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1816, 1));
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} vslice_dummy_var_84 := usb_unlink_urb($p91);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1824, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} vslice_dummy_var_85 := usb_unlink_urb($p94);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, $i88);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p97, 0);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb13:
    assume $i46 == 1;
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i47 := $sle.i32($i16, 63);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb15;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i14, 63);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, $sub.i32(0, 64));
    call {:si_unique_call 377} {:cexpr "padded_length"} boogie_si_record_i32($i49);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $p51 := kmalloc($i50, 208);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i53 == 1);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $sub.i32(0, 12));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, 0);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume $i53 == 1;
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i49);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} vslice_dummy_var_83 := sg_copy_to_buffer($p55, $i57, $p51, $i58);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i14);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p51, $mul.ref($i60, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32($i49, $i14);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 383} cmdloc_dummy_var_12 := $memset.i8(cmdloc_dummy_var_11, $p61, 0, $i63, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_12;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i64 := $sdiv.i32($i49, 16384);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i64, 2000);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $i66 := vub300_usb_bulk_msg($p0, $i12, $p51, $i49, $p4, $i65);
    call {:si_unique_call 385} {:cexpr "result___0"} boogie_si_record_i32($i66);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} kfree($p51);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i66, 0);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i67 == 1);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(456, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i67 == 1;
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i66);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, 0);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb11;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb8;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(3092, 1));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} vslice_dummy_var_81 := sg_copy_to_buffer($p19, $i21, $p23, 64);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(3092, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i14);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p26, $mul.ref($i27, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i14);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i30 := $sub.i64(64, $i29);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 374} cmdloc_dummy_var_10 := $memset.i8(cmdloc_dummy_var_9, $p28, 0, $i30, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(3092, 1));
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $i33 := vub300_usb_bulk_msg($p0, $i12, $p32, 64, $p3, 2000);
    call {:si_unique_call 376} {:cexpr "result"} boogie_si_record_i32($i33);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i34 == 1);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(456, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i34 == 1;
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i33);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 0);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const __vub300_command_response: ref;

axiom __vub300_command_response == $sub.ref(0, 194366);

procedure __vub300_command_response($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.16, assertsPassed, $M.8, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.12, $M.13, $CurrAddr;



implementation __vub300_command_response($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i8;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i8;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i8;
  var $i115: i32;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $i119: i1;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i64;
  var $p127: ref;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $i120: i32;
  var $i121: i32;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i8;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $i147: i8;
  var $i148: i32;
  var $i149: i32;
  var $i150: i32;
  var $i151: i32;
  var $i152: i1;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i64;
  var $p160: ref;
  var $i161: i32;
  var $i162: i32;
  var $i163: i1;
  var $i153: i32;
  var $i154: i32;
  var $p164: ref;
  var $p165: ref;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $i169: i32;
  var $i170: i32;
  var $p171: ref;
  var $p172: ref;
  var $i173: i8;
  var $i174: i1;
  var $p175: ref;
  var $i176: i32;
  var $i177: i32;
  var $p178: ref;
  var $p179: ref;
  var $i180: i32;
  var $i181: i32;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i8;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $i201: i8;
  var $i202: i32;
  var $i203: i32;
  var $i204: i32;
  var $i205: i32;
  var $i206: i1;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $i213: i64;
  var $p214: ref;
  var $i215: i32;
  var $i216: i32;
  var $i217: i1;
  var $i207: i32;
  var $i208: i32;
  var $p218: ref;
  var $p219: ref;
  var $i220: i32;
  var $i221: i1;
  var $p222: ref;
  var $i223: i32;
  var $i224: i32;
  var $p225: ref;
  var $p226: ref;
  var $i227: i8;
  var $i228: i1;
  var $p229: ref;
  var $i230: i32;
  var $i231: i32;
  var $p232: ref;
  var $p233: ref;
  var $i234: i32;
  var $i235: i32;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} {:cexpr "__vub300_command_response:arg:data_length"} boogie_si_record_i32($i3);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i4 := $sdiv.i32($i3, 4);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 1000);
    call {:si_unique_call 395} {:cexpr "msec_timeout"} boogie_si_record_i32($i5);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $i6 := msecs_to_jiffies($i5);
    call {:si_unique_call 397} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1832, 1));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i8 := wait_for_completion_timeout($p7, $i6);
    call {:si_unique_call 399} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i28 := $slt.i64($i8, 0);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i37 == 1);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1816, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1824, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i63 == 1);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.0, $p82);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 0);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i85 == 1);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.0, $p88);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i89);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 2);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i91 == 1);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.0, $p107);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 7);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i110 == 1);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p138);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p139, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.0, $p140);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i32($i141);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 9);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i143 == 1);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p192);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p193, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i195 := $load.i8($M.0, $p194);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i196 := $zext.i8.i32($i195);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i196, 10);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i197 == 1);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p246, $sub.i32(0, 22));
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb62:
    assume $i197 == 1;
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p199 := $bitcast.ref.ref($p198);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p199, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i201 := $load.i8($M.0, $p200);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i202 := $zext.i8.i32($i201);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i203 := $sub.i32($i202, 11);
    call {:si_unique_call 427} {:cexpr "offloaded_data_length___1"} boogie_si_record_i32($i203);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i204 := $ashr.i32($i203, 3);
    call {:si_unique_call 428} {:cexpr "register_count___1"} boogie_si_record_i32($i204);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i205 := $sub.i32($i204, 1);
    call {:si_unique_call 429} {:cexpr "register_count___1"} boogie_si_record_i32($i205);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i206 := $ne.i32($i204, 0);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    assume {:branchcond $i206} true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i206 == 1);
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(192, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} ldv_mutex_lock_24($p218);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i220 := $load.i32($M.0, $p219);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i221 := $ne.i32($i220, 0);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i221} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i221 == 1);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(449, 1));
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i227 := $load.i8($M.0, $p226);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i228 := $trunc.i8.i1($i227);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i228} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i228 == 1);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i234 := $load.i32($M.0, $p233);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i235 := $add.i32($i234, 1);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p236, $i235);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(450, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p237, 0);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(192, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} ldv_mutex_unlock_25($p238);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p240 := $bitcast.ref.ref($p239);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p240, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p241, 11);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p243 := $bitcast.ref.ref($p242);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p243, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p244, 0);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p245, 0);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    goto $bb78;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb75:
    assume $i228 == 1;
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i230 := $load.i32($M.0, $p229);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i231 := $add.i32($i230, 1);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p232, $i231);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} vub300_queue_poll_work($p0, 0);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb72:
    assume $i221 == 1;
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i223 := $load.i32($M.0, $p222);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i224 := $add.i32($i223, 1);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p225, $i224);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb64:
    assume $i206 == 1;
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i207, $i208 := $i205, 0;
    goto $bb67;

  $bb67:
    call $p209, $p210, $p211, $p212, $i213, $p214, $i215, $i216, $i217, $i207, $i208 := __vub300_command_response_loop_$bb67($p0, $p209, $p210, $p211, $p212, $i213, $p214, $i215, $i216, $i217, $i207, $i208);
    goto $bb67_last;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p210 := $bitcast.ref.ref($p209);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p210, $mul.ref(0, 123)), $mul.ref(11, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p212 := $bitcast.ref.ref($p211);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i213 := $sext.i32.i64($i208);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($p212, $mul.ref($i213, 8));
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} add_offloaded_reg($p0, $p214);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i215 := $add.i32($i208, 1);
    call {:si_unique_call 431} {:cexpr "ri___1"} boogie_si_record_i32($i215);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i216 := $sub.i32($i207, 1);
    call {:si_unique_call 432} {:cexpr "register_count___1"} boogie_si_record_i32($i216);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i217 := $ne.i32($i207, 0);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i217 == 1);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb69:
    assume $i217 == 1;
    assume {:verifier.code 0} true;
    $i207, $i208 := $i216, $i215;
    goto $bb69_dummy;

  $bb45:
    assume $i143 == 1;
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p145, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i147 := $load.i8($M.0, $p146);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i148 := $zext.i8.i32($i147);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i149 := $sub.i32($i148, 11);
    call {:si_unique_call 418} {:cexpr "offloaded_data_length___0"} boogie_si_record_i32($i149);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i150 := $ashr.i32($i149, 3);
    call {:si_unique_call 419} {:cexpr "register_count___0"} boogie_si_record_i32($i150);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i151 := $sub.i32($i150, 1);
    call {:si_unique_call 420} {:cexpr "register_count___0"} boogie_si_record_i32($i151);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i150, 0);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i152 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(192, 1));
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} ldv_mutex_lock_22($p164);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.0, $p165);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i166, 0);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i167 == 1);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(449, 1));
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i173 := $load.i8($M.0, $p172);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i174 := $trunc.i8.i1($i173);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i174} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i174 == 1);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.0, $p179);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i181 := $add.i32($i180, 1);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p182, $i181);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(450, 1));
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p183, 1);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(192, 1));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} ldv_mutex_unlock_23($p184);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p185);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p186, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p187, 11);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p189 := $bitcast.ref.ref($p188);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p189, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p190, 0);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p191, 0);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    goto $bb61;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb58:
    assume $i174 == 1;
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i176 := $load.i32($M.0, $p175);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i177 := $add.i32($i176, 1);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p178, $i177);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} vub300_queue_poll_work($p0, 0);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i167 == 1;
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.0, $p168);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i170 := $add.i32($i169, 1);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p171, $i170);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    goto $bb57;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i152 == 1;
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i153, $i154 := $i151, 0;
    goto $bb50;

  $bb50:
    call $p155, $p156, $p157, $p158, $i159, $p160, $i161, $i162, $i163, $i153, $i154 := __vub300_command_response_loop_$bb50($p0, $p155, $p156, $p157, $p158, $i159, $p160, $i161, $i162, $i163, $i153, $i154);
    goto $bb50_last;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p155);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p156, $mul.ref(0, 123)), $mul.ref(11, 1));
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i159 := $sext.i32.i64($i154);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($p158, $mul.ref($i159, 8));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} add_offloaded_reg($p0, $p160);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i161 := $add.i32($i154, 1);
    call {:si_unique_call 422} {:cexpr "ri___0"} boogie_si_record_i32($i161);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i162 := $sub.i32($i153, 1);
    call {:si_unique_call 423} {:cexpr "register_count___0"} boogie_si_record_i32($i162);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i163 := $ne.i32($i153, 0);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i163 == 1);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb52:
    assume $i163 == 1;
    assume {:verifier.code 0} true;
    $i153, $i154 := $i162, $i161;
    goto $bb52_dummy;

  $bb34:
    assume $i110 == 1;
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.0, $p113);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i114);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i116 := $sub.i32($i115, 11);
    call {:si_unique_call 412} {:cexpr "offloaded_data_length"} boogie_si_record_i32($i116);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i117 := $ashr.i32($i116, 3);
    call {:si_unique_call 413} {:cexpr "register_count"} boogie_si_record_i32($i117);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i118 := $sub.i32($i117, 1);
    call {:si_unique_call 414} {:cexpr "register_count"} boogie_si_record_i32($i118);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i117, 0);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i119 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p131);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p132, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p133, 11);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p134);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p135, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p136, 0);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p137, 0);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb36:
    assume $i119 == 1;
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i120, $i121 := $i118, 0;
    goto $bb39;

  $bb39:
    call $p122, $p123, $p124, $p125, $i126, $p127, $i128, $i129, $i130, $i120, $i121 := __vub300_command_response_loop_$bb39($p0, $p122, $p123, $p124, $p125, $i126, $p127, $i128, $i129, $i130, $i120, $i121);
    goto $bb39_last;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 123)), $mul.ref(11, 1));
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i126 := $sext.i32.i64($i121);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p125, $mul.ref($i126, 8));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} add_offloaded_reg($p0, $p127);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i128 := $add.i32($i121, 1);
    call {:si_unique_call 416} {:cexpr "ri"} boogie_si_record_i32($i128);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i129 := $sub.i32($i120, 1);
    call {:si_unique_call 417} {:cexpr "register_count"} boogie_si_record_i32($i129);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i120, 0);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i130 == 1);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb41:
    assume $i130 == 1;
    assume {:verifier.code 0} true;
    $i120, $i121 := $i129, $i128;
    goto $bb41_dummy;

  $bb28:
    assume $i91 == 1;
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.0, $p94);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $i98 := vub300_response_error($i97);
    call {:si_unique_call 410} {:cexpr "tmp___1"} boogie_si_record_i32($i98);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, $i98);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1792, 1));
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p101);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i102, 0);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i103 == 1;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2344, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} usb_sg_cancel($p104);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb25:
    assume $i85 == 1;
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume $i63 == 1;
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1824, 1));
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(464, 1));
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i67);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1824, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, $sub.i32(0, 71));
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i73 == 1);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i78 := $sub.i32(0, 108);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, $i78);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i73 == 1;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1824, 1));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i78 := $i77;
    goto $bb23;

  $bb13:
    assume $i42 == 1;
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1816, 1));
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(464, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i46);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1816, 1));
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, $sub.i32(0, 71));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i52 == 1);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32(0, 108);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i57);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i52 == 1;
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1816, 1));
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb17;

  $bb10:
    assume $i37 == 1;
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1816, 1));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} usb_kill_urb($p30);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1824, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} usb_kill_urb($p32);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i32($i8);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(468, 1));
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 1);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1816, 1));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} usb_kill_urb($p12);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1824, 1));
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} usb_kill_urb($p14);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $sub.i32(0, 110));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(8, 1));
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $i20 := usb_lock_device_for_reset($p17, $p19);
    call {:si_unique_call 403} {:cexpr "result"} boogie_si_record_i32($i20);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i21 == 1;
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i24 := usb_reset_device($p23);
    call {:si_unique_call 405} {:cexpr "result"} boogie_si_record_i32($i24);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} device_unlock($p27);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb69_dummy:
    assume false;
    return;

  $bb67_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3014;

  $bb52_dummy:
    assume false;
    return;

  $bb50_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2936;

  $bb41_dummy:
    assume false;
    return;

  $bb39_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2889;
}



const ldv_mutex_unlock_27: ref;

axiom ldv_mutex_unlock_27 == $sub.ref(0, 195398);

procedure ldv_mutex_unlock_27($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_27($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} ldv_mutex_unlock_cmd_mutex($p0);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} mutex_unlock($p0);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const mmc_request_done: ref;

axiom mmc_request_done == $sub.ref(0, 196430);

procedure mmc_request_done($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation mmc_request_done($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    return;
}



const construct_request_response: ref;

axiom construct_request_response == $sub.ref(0, 197462);

procedure construct_request_response($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation construct_request_response($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i64;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i64;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i64;
  var $p40: ref;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i64;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i64;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i64;
  var $p59: ref;
  var $i60: i1;
  var $i61: i32;
  var $i62: i32;
  var $i63: i64;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i32;
  var $i68: i64;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i74: i32;
  var $i75: i32;
  var $i76: i64;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i64;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i64;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i64;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i32;
  var $i104: i64;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $i73: i32;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $p118: ref;
  var $i119: i32;
  var $i120: i32;
  var $p122: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(454, 1));
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    call {:si_unique_call 438} {:cexpr "resp_len"} boogie_si_record_i32($i4);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 17);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i7 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 3);
    call {:si_unique_call 439} {:cexpr "bytes"} boogie_si_record_i32($i8);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i9 := $ashr.i32($i7, 2);
    call {:si_unique_call 440} {:cexpr "words"} boogie_si_record_i32($i9);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 5)), $mul.ref(5, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i8, 3);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i8, 2);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i41 == 1);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i8, 1);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i71 := $sub.i32($i9, 1);
    call {:si_unique_call 441} {:cexpr "words"} boogie_si_record_i32($i71);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i72 := $sgt.i32($i9, 0);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 53);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i111 == 1;
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i115 := $and.i32($i114, 255);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb23;

  $bb24:
    assume $i116 == 1;
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i120 := $and.i32($i119, $sub.i32(0, 256));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p122, $i120);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb13:
    assume $i72 == 1;
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i73 := $i71;
    goto $bb16;

  $bb16:
    call $i74, $i75, $i76, $p77, $i78, $i79, $i80, $i81, $i82, $i83, $p84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $p92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $p100, $i101, $i102, $i103, $i104, $p106, $i107, $i108, $i73 := construct_request_response_loop_$bb16($p1, $p13, $i74, $i75, $i76, $p77, $i78, $i79, $i80, $i81, $i82, $i83, $p84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $p92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $p100, $i101, $i102, $i103, $i104, $p106, $i107, $i108, $i73);
    goto $bb16_last;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i74 := $shl.i32($i73, 2);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i74, 1);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i75);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p13, $mul.ref($i76, 1));
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i80 := $shl.i32($i79, 24);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i81 := $shl.i32($i73, 2);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i82 := $add.i32($i81, 2);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i82);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p13, $mul.ref($i83, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.0, $p84);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i87 := $shl.i32($i86, 16);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i88 := $or.i32($i80, $i87);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i89 := $shl.i32($i73, 2);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i89, 3);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i91 := $sext.i32.i64($i90);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p13, $mul.ref($i91, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.0, $p92);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i95 := $shl.i32($i94, 8);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i96 := $or.i32($i88, $i95);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i97 := $shl.i32($i73, 2);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i97, 4);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i99 := $sext.i32.i64($i98);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p13, $mul.ref($i99, 1));
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.0, $p100);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i103 := $or.i32($i96, $i102);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i73);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref($i104, 4));
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, $i103);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i107 := $sub.i32($i73, 1);
    call {:si_unique_call 442} {:cexpr "words"} boogie_si_record_i32($i107);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i108 := $sgt.i32($i73, 0);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i108 == 1);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb18:
    assume $i108 == 1;
    assume {:verifier.code 0} true;
    $i73 := $i107;
    goto $bb18_dummy;

  $bb10:
    assume $i60 == 1;
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i61 := $shl.i32($i9, 2);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i61, 1);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p13, $mul.ref($i63, 1));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i67 := $shl.i32($i66, 24);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i9);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref($i68, 4));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, $i67);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i41 == 1;
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i42 := $shl.i32($i9, 2);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, 1);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p13, $mul.ref($i44, 1));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i48 := $shl.i32($i47, 24);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i49 := $shl.i32($i9, 2);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, 2);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p13, $mul.ref($i51, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i55 := $shl.i32($i54, 16);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i48, $i55);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i9);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref($i57, 4));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i56);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i15 := $shl.i32($i9, 2);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 1);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p13, $mul.ref($i17, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i21 := $shl.i32($i20, 24);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i22 := $shl.i32($i9, 2);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 2);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p13, $mul.ref($i24, 1));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i28 := $shl.i32($i27, 16);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i21, $i28);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i30 := $shl.i32($i9, 2);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, 3);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p13, $mul.ref($i32, 1));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i36 := $shl.i32($i35, 8);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i29, $i36);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i9);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref($i38, 4));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i37);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i4, $sub.i32(0, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;

  $bb18_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3173;
}



const ldv_mutex_unlock_28: ref;

axiom ldv_mutex_unlock_28 == $sub.ref(0, 198494);

procedure ldv_mutex_unlock_28($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_28($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} ldv_mutex_unlock_cmd_mutex($p0);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} mutex_unlock($p0);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 199526);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 445} {:cexpr "msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 1} true;
    call {:si_unique_call 446} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 447} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wait_for_completion_timeout: ref;

axiom wait_for_completion_timeout == $sub.ref(0, 200558);

procedure wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 448} {:cexpr "wait_for_completion_timeout:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 1} true;
    call {:si_unique_call 449} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 450} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 201590);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    return;
}



const usb_lock_device_for_reset: ref;

axiom usb_lock_device_for_reset == $sub.ref(0, 202622);

procedure usb_lock_device_for_reset($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_lock_device_for_reset($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 1} true;
    call {:si_unique_call 451} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 452} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_reset_device: ref;

axiom usb_reset_device == $sub.ref(0, 203654);

procedure usb_reset_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_reset_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 1} true;
    call {:si_unique_call 453} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 454} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const device_unlock: ref;

axiom device_unlock == $sub.ref(0, 204686);

procedure device_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation device_unlock($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(96, 1));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} ldv_mutex_unlock_5($p1);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const vub300_response_error: ref;

axiom vub300_response_error == $sub.ref(0, 205718);

procedure vub300_response_error($i0: i8) returns ($r: i32);
  free requires assertsPassed;



implementation vub300_response_error($i0: i8) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} {:cexpr "vub300_response_error:arg:error_code"} boogie_si_record_i8($i0);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 24);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i1, 27);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i1, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i1, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 19);
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 84);
    goto $bb75;

  $bb11:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb15;

  $bb16:
    assume $i8 == 1;
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 110);
    goto $bb75;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 84);
    goto $bb75;

  $bb6:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i1, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i1, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb24;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb22;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb19;

  $bb4:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i1, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i1, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i1, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i13 == 1);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb30;

  $bb27:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i1, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb15;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb33;

  $bb25:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i1, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i1, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb39;

  $bb37:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i1, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb15;

  $bb40:
    assume $i17 == 1;
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 123);
    goto $bb75;

  $bb35:
    assume $i15 == 1;
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb75;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i1, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i1, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb46, $bb48;

  $bb48:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i1, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb52;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb50;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb47;

  $bb44:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i1, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb53, $bb55;

  $bb55:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i1, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb59;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb57;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb54;

  $bb42:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb62, $bb64;

  $bb64:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb68;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb66;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb63;

  $bb60:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb71;

  $bb69:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb72, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb15;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb73;
}



const add_offloaded_reg: ref;

axiom add_offloaded_reg == $sub.ref(0, 206750);

procedure add_offloaded_reg($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation add_offloaded_reg($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $i36: i32;
  var $i37: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i24;
  var $i42: i24;
  var $i43: i8;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i24;
  var $i53: i24;
  var $i54: i24;
  var $i55: i32;
  var $i56: i1;
  var $i57: i8;
  var $i58: i32;
  var $i59: i64;
  var $p61: ref;
  var $p62: ref;
  var $i63: i24;
  var $i64: i24;
  var $i65: i24;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i64;
  var $p72: ref;
  var $p73: ref;
  var $i74: i24;
  var $i75: i24;
  var $i76: i24;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i64;
  var $p84: ref;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $i89: i64;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $i98: i8;
  var $i99: i32;
  var $i100: i1;
  var $i34: i8;
  var $i35: i8;
  var $i101: i32;
  var $i102: i64;
  var $p104: ref;
  var $p105: ref;
  var $i106: i24;
  var $i107: i24;
  var $i108: i24;
  var $i109: i8;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $i113: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 3);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i6, 15);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i12 := $shl.i32($i11, 7);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i7, $i12);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i18 := $ashr.i32($i17, 1);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i13, $i18);
    call {:si_unique_call 457} {:cexpr "Register"} boogie_si_record_i32($i19);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 112);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i25 := $lshr.i32($i24, 4);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    call {:si_unique_call 458} {:cexpr "func"} boogie_si_record_i8($i26);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(453, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    call {:si_unique_call 459} {:cexpr "regs"} boogie_si_record_i8($i28);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i29, 1);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    call {:si_unique_call 460} {:cexpr "regs"} boogie_si_record_i8($i31);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i28);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i26);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i32.i8($i112);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} __add_offloaded_reg_to_fifo($p0, $p1, $i113);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i33 == 1;
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i34, $i35 := $i31, 0;
    goto $bb4;

  $bb4:
    call $i36, $i37, $p39, $p40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $p50, $p51, $i52, $i53, $i54, $i55, $i56, $i57, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i34, $i35, $i101, $i102, $p104, $p105, $i106, $i107, $i108, $i109, $i110, $i111 := add_offloaded_reg_loop_$bb4($p0, $i19, $i26, $i36, $i37, $p39, $p40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $p50, $p51, $i52, $i53, $i54, $i55, $i56, $i57, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i34, $i35, $i101, $i102, $p104, $p105, $i106, $i107, $i108, $i109, $i110, $i111);
    goto $bb4_last;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i35);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i101);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref($i102, 12));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i106 := $load.i24($M.0, $p105);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i107 := $lshr.i24($i106, 20);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i108 := $and.i24($i107, 1);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i24.i8($i108);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 1);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i111 == 1);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17:
    assume $i111 == 1;
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref($i37, 12));
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i41 := $load.i24($M.0, $p40);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i42 := $and.i24($i41, 7);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i24.i8($i42);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i26);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i44, $i45);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i35);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i93, 1);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i8($i94);
    call {:si_unique_call 461} {:cexpr "i"} boogie_si_record_i8($i95);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i34);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i97 := $sub.i32($i96, 1);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i8($i97);
    call {:si_unique_call 462} {:cexpr "regs"} boogie_si_record_i8($i98);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i34);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i100 == 1);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    $i34, $i35 := $i98, $i95;
    goto $bb15_dummy;

  $bb6:
    assume $i46 == 1;
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i35);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref($i48, 12));
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i52 := $load.i24($M.0, $p51);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i53 := $lshr.i24($i52, 3);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i54 := $and.i24($i53, 131071);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i55 := $zext.i24.i32($i54);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, $i19);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i57 := $i35;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb8;

  $bb9:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i58);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref($i59, 12));
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i63 := $load.i24($M.0, $p62);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i64 := $lshr.i24($i63, 21);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i65 := $and.i24($i64, 1);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i24.i8($i65);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 0);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1)), $mul.ref(2, 1));
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i57);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i80);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref($i81, 12)), $mul.ref(4, 1));
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p84, $i79);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1)), $mul.ref(3, 1));
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.0, $p86);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i57);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i88);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref($i89, 12)), $mul.ref(3, 1));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p92, $i87);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i68 == 1;
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i57);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i69);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref($i70, 12));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i74 := $load.i24($M.0, $p73);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i75 := $and.i24($i74, $sub.i24(0, 2097153));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i76 := $or.i24($i75, 2097152);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i24($M.0, $p73, $i76);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3298;
}



const ldv_mutex_lock_22: ref;

axiom ldv_mutex_lock_22 == $sub.ref(0, 207782);

procedure ldv_mutex_lock_22($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_mutex_lock_22($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} ldv_mutex_lock_irq_mutex($p0);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} mutex_lock($p0);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const vub300_queue_poll_work: ref;

axiom vub300_queue_poll_work == $sub.ref(0, 208814);

procedure vub300_queue_poll_work($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.15, $M.12, $M.13, assertsPassed, $CurrAddr, $M.16;



implementation vub300_queue_poll_work($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $p9: ref;
  var vslice_dummy_var_87: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} {:cexpr "vub300_queue_poll_work:arg:delay"} boogie_si_record_i32($i1);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(16, 1));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} kref_get($p2);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p3 := $M.14;
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2848, 1));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i1);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $i6 := queue_delayed_work($p3, $p4, $i5);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 469} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(16, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} vslice_dummy_var_87 := kref_put($p9, vub300_delete);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_160:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_23: ref;

axiom ldv_mutex_unlock_23 == $sub.ref(0, 209846);

procedure ldv_mutex_unlock_23($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_mutex_unlock_23($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} ldv_mutex_unlock_irq_mutex($p0);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} mutex_unlock($p0);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_24: ref;

axiom ldv_mutex_lock_24 == $sub.ref(0, 210878);

procedure ldv_mutex_lock_24($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_mutex_lock_24($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} ldv_mutex_lock_irq_mutex($p0);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} mutex_lock($p0);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_25: ref;

axiom ldv_mutex_unlock_25 == $sub.ref(0, 211910);

procedure ldv_mutex_unlock_25($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_mutex_unlock_25($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} ldv_mutex_unlock_irq_mutex($p0);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} mutex_unlock($p0);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_irq_mutex: ref;

axiom ldv_mutex_unlock_irq_mutex == $sub.ref(0, 212942);

procedure ldv_mutex_unlock_irq_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_mutex_unlock_irq_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i1 := $M.15;
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} ldv_error();
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 478} {:cexpr "ldv_mutex_irq_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_irq_mutex: ref;

axiom ldv_mutex_lock_irq_mutex == $sub.ref(0, 213974);

procedure ldv_mutex_lock_irq_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_mutex_lock_irq_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i1 := $M.15;
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} ldv_error();
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.15 := 2;
    call {:si_unique_call 480} {:cexpr "ldv_mutex_irq_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const queue_delayed_work: ref;

axiom queue_delayed_work == $sub.ref(0, 215006);

procedure queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 481} {:cexpr "queue_delayed_work:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 1} true;
    call {:si_unique_call 482} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 483} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __add_offloaded_reg_to_fifo: ref;

axiom __add_offloaded_reg_to_fifo == $sub.ref(0, 216038);

procedure __add_offloaded_reg_to_fifo($p0: ref, $p1: ref, $i2: i8);
  free requires assertsPassed;
  modifies $M.0;



implementation __add_offloaded_reg_to_fifo($p0: ref, $p1: ref, $i2: i8)
{
  var $i3: i32;
  var $i4: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i64;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $i50: i32;
  var $i51: i64;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i32;
  var $i59: i8;
  var $p60: ref;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} {:cexpr "__add_offloaded_reg_to_fifo:arg:func"} boogie_si_record_i8($i2);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref($i4, 136)), $mul.ref(4, 1));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i2);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref($i12, 136)), $mul.ref(0, 1));
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i10, $i17);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    call {:si_unique_call 485} {:cexpr "r"} boogie_si_record_i8($i19);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i64(8, 63);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i2);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref($i32, 136)), $mul.ref(8, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i64($i19);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i38 := $and.i64($i37, 15);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p36, $mul.ref($i38, 1));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p1);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 487} cmdloc_dummy_var_18 := $memcpy.i8(cmdloc_dummy_var_16, cmdloc_dummy_var_17, $p39, $p40, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_18;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i2);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref($i42, 136)), $mul.ref(0, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i47, 1);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i2);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref($i51, 136)), $mul.ref(0, 1));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, $i49);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(452, 1));
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i57, 1);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(452, 1));
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, $i59);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i2);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref($i22, 136)), $mul.ref(8, 1));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i19);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 15);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p26, $mul.ref($i28, 1));
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p1);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.0;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 486} cmdloc_dummy_var_15 := $memcpy.i8(cmdloc_dummy_var_13, cmdloc_dummy_var_14, $p29, $p30, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_unlock_5: ref;

axiom ldv_mutex_unlock_5 == $sub.ref(0, 217070);

procedure ldv_mutex_unlock_5($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_unlock_5($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} mutex_unlock($p0);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_mutex: ref;

axiom ldv_mutex_unlock_mutex == $sub.ref(0, 218102);

procedure ldv_mutex_unlock_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_unlock_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i1 := $M.16;
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} ldv_error();
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 491} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sg_copy_to_buffer: ref;

axiom sg_copy_to_buffer == $sub.ref(0, 219134);

procedure sg_copy_to_buffer($p0: ref, $i1: i32, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;



implementation sg_copy_to_buffer($p0: ref, $i1: i32, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 492} {:cexpr "sg_copy_to_buffer:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 493} {:cexpr "sg_copy_to_buffer:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 1} true;
    call {:si_unique_call 494} $i4 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 495} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i4);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 220166);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const vub300_usb_bulk_msg: ref;

axiom vub300_usb_bulk_msg == $sub.ref(0, 221198);

procedure vub300_usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr;



implementation vub300_usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i39: i32;
  var $i33: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $p6 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    call {:si_unique_call 497} {:cexpr "vub300_usb_bulk_msg:arg:pipe"} boogie_si_record_i32($i1);
    call {:si_unique_call 498} {:cexpr "vub300_usb_bulk_msg:arg:len"} boogie_si_record_i32($i3);
    call {:si_unique_call 499} {:cexpr "vub300_usb_bulk_msg:arg:timeout_msecs"} boogie_si_record_i32($i5);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $p9 := usb_alloc_urb(0, 208);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1808, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p9);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1808, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1808, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} usb_fill_bulk_urb($p17, $p8, $i1, $p2, $i3, vub300_usb_bulk_msg_completion, $0.ref);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} init_completion($p6);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1808, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p6);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1808, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 0);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1808, 1));
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i27 := usb_submit_urb($p26, 208);
    call {:si_unique_call 504} {:cexpr "retval"} boogie_si_record_i32($i27);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 506} {:cexpr "tmp"} boogie_si_record_i64($i31);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $i34 := msecs_to_jiffies($i5);
    call {:si_unique_call 509} {:cexpr "tmp___0"} boogie_si_record_i64($i34);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $i35 := wait_for_completion_timeout($p6, $i34);
    call {:si_unique_call 511} {:cexpr "tmp___1"} boogie_si_record_i64($i35);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i36 == 1);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1808, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    call {:si_unique_call 513} {:cexpr "retval"} boogie_si_record_i32($i43);
    assume {:verifier.code 0} true;
    $i39 := $i43;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i33 := $i39;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1808, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, $p4, $i47);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1808, 1));
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} usb_free_urb($p49);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1808, 1));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $0.ref);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i15 := $i33;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb9:
    assume $i36 == 1;
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1808, 1));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} usb_kill_urb($p38);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 110);
    goto $bb11;

  $bb5:
    assume $i32 == 1;
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i33 := $i27;
    goto $bb7;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 12);
    goto $bb3;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 222230);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 515} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 223262);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} free_($p0);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    return;
}



const usb_sg_init: ref;

axiom usb_sg_init == $sub.ref(0, 224294);

procedure usb_sg_init($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $i5: i32, $i6: i64, $i7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_sg_init($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $i5: i32, $i6: i64, $i7: i32) returns ($r: i32)
{
  var $i8: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 518} {:cexpr "usb_sg_init:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 519} {:cexpr "usb_sg_init:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 520} {:cexpr "usb_sg_init:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 521} {:cexpr "usb_sg_init:arg:arg6"} boogie_si_record_i64($i6);
    call {:si_unique_call 522} {:cexpr "usb_sg_init:arg:arg7"} boogie_si_record_i32($i7);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 1} true;
    call {:si_unique_call 523} $i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 524} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const usb_sg_wait: ref;

axiom usb_sg_wait == $sub.ref(0, 225326);

procedure usb_sg_wait($p0: ref);
  free requires assertsPassed;



implementation usb_sg_wait($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    return;
}



const del_timer: ref;

axiom del_timer == $sub.ref(0, 226358);

procedure del_timer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 1} true;
    call {:si_unique_call 525} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 526} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 227390);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 527} $free($p0);
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 228422);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 529} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $p2 := ldv_malloc($i0);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 229454);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 531} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 1} true;
    call {:si_unique_call 532} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 533} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $p3 := malloc($i0);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $i4 := ldv_is_err($p3);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 1} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 1} true;
    $i6 := $xor.i1($i5, 1);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 1} true;
    call {:si_unique_call 536} __VERIFIER_assume($i7);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 230486);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 537} $r := $malloc($i0);
    return;
}



const vub300_usb_bulk_msg_completion: ref;

axiom vub300_usb_bulk_msg_completion == $sub.ref(0, 231518);

procedure vub300_usb_bulk_msg_completion($p0: ref);
  free requires assertsPassed;



implementation vub300_usb_bulk_msg_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} complete_($p3);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    return;
}



const usb_fill_bulk_urb: ref;

axiom usb_fill_bulk_urb == $sub.ref(0, 232550);

procedure usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} {:cexpr "usb_fill_bulk_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 540} {:cexpr "usb_fill_bulk_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i2);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p3);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i4);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p5);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p6);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    return;
}



const usb_submit_urb: ref;

axiom usb_submit_urb == $sub.ref(0, 233582);

procedure usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 541} {:cexpr "usb_submit_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 1} true;
    call {:si_unique_call 542} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 543} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const complete_: ref;

axiom complete_ == $sub.ref(0, 234614);

procedure complete_($p0: ref);
  free requires assertsPassed;



implementation complete_($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    return;
}



const sg_copy_from_buffer: ref;

axiom sg_copy_from_buffer == $sub.ref(0, 235646);

procedure sg_copy_from_buffer($p0: ref, $i1: i32, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;



implementation sg_copy_from_buffer($p0: ref, $i1: i32, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 544} {:cexpr "sg_copy_from_buffer:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 545} {:cexpr "sg_copy_from_buffer:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 1} true;
    call {:si_unique_call 546} $i4 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 547} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i4);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const snoop_block_size_and_bus_width: ref;

axiom snoop_block_size_and_bus_width == $sub.ref(0, 236678);

procedure snoop_block_size_and_bus_width($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation snoop_block_size_and_bus_width($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i16;
  var $i19: i32;
  var $i20: i32;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i16;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i16;
  var $i33: i32;
  var $i34: i32;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i16;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i16;
  var $i47: i32;
  var $i48: i32;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i16;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $i60: i16;
  var $i61: i32;
  var $i62: i32;
  var $p64: ref;
  var $i65: i16;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i16;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i74: i16;
  var $i75: i32;
  var $i76: i32;
  var $p78: ref;
  var $i79: i16;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i16;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $i88: i16;
  var $i89: i32;
  var $i90: i32;
  var $p92: ref;
  var $i93: i16;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i16;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $i102: i16;
  var $i103: i32;
  var $i104: i32;
  var $p106: ref;
  var $i107: i16;
  var $i108: i32;
  var $i109: i32;
  var $i110: i32;
  var $i111: i16;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $i116: i16;
  var $i117: i32;
  var $i118: i32;
  var $p120: ref;
  var $i121: i16;
  var $i122: i32;
  var $i123: i32;
  var $i124: i32;
  var $i125: i16;
  var $p127: ref;
  var $i128: i32;
  var $i129: i1;
  var $i130: i16;
  var $i131: i32;
  var $i132: i32;
  var $p134: ref;
  var $i135: i16;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $i139: i16;
  var $p141: ref;
  var $i142: i32;
  var $i143: i1;
  var $i144: i16;
  var $i145: i32;
  var $i146: i32;
  var $p148: ref;
  var $i149: i16;
  var $i150: i32;
  var $i151: i32;
  var $i152: i32;
  var $i153: i16;
  var $p155: ref;
  var $i156: i32;
  var $i157: i1;
  var $i158: i16;
  var $i159: i32;
  var $i160: i32;
  var $p162: ref;
  var $i163: i16;
  var $i164: i32;
  var $i165: i32;
  var $i166: i32;
  var $i167: i16;
  var $p169: ref;
  var $i170: i32;
  var $i171: i1;
  var $i172: i16;
  var $i173: i32;
  var $i174: i32;
  var $p176: ref;
  var $i177: i16;
  var $i178: i32;
  var $i179: i32;
  var $i180: i32;
  var $i181: i16;
  var $p183: ref;
  var $i184: i32;
  var $i185: i1;
  var $i186: i16;
  var $i187: i32;
  var $i188: i32;
  var $p190: ref;
  var $i191: i16;
  var $i192: i32;
  var $i193: i32;
  var $i194: i32;
  var $i195: i16;
  var $p197: ref;
  var $i198: i32;
  var $i199: i1;
  var $p200: ref;
  var $i201: i8;
  var $i202: i8;
  var $i203: i8;
  var $i204: i32;
  var $i205: i1;
  var $p206: ref;
  var $i207: i8;
  var $i208: i8;
  var $i209: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} {:cexpr "snoop_block_size_and_bus_width:arg:cmd_arg"} boogie_si_record_i32($i1);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, $sub.i32(0, 67109376));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, $sub.i32(0, 2147343872));
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i1, $sub.i32(0, 67109376));
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, $sub.i32(0, 2147344384));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i1, $sub.i32(0, 67109376));
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, $sub.i32(0, 2147212800));
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i1, $sub.i32(0, 67109376));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, $sub.i32(0, 2147213312));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i45 == 1);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i1, $sub.i32(0, 67109376));
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, $sub.i32(0, 2147081728));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i59 == 1);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i1, $sub.i32(0, 67109376));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, $sub.i32(0, 2147082240));
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i73 == 1);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i1, $sub.i32(0, 67109376));
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, $sub.i32(0, 2146950656));
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i87 == 1);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i1, $sub.i32(0, 67109376));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, $sub.i32(0, 2146951168));
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i101 == 1);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i114 := $and.i32($i1, $sub.i32(0, 67109376));
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, $sub.i32(0, 2146819584));
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i115 == 1);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i128 := $and.i32($i1, $sub.i32(0, 67109376));
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, $sub.i32(0, 2146820096));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i129 == 1);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i142 := $and.i32($i1, $sub.i32(0, 67109376));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, $sub.i32(0, 2146688512));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i143 == 1);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i156 := $and.i32($i1, $sub.i32(0, 67109376));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, $sub.i32(0, 2146689024));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i157 == 1);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i170 := $and.i32($i1, $sub.i32(0, 67109376));
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, $sub.i32(0, 2146557440));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i171 == 1);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i184 := $and.i32($i1, $sub.i32(0, 67109376));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, $sub.i32(0, 2146557952));
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i185 == 1);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i198 := $and.i32($i1, $sub.i32(0, 67109373));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i198, $sub.i32(0, 2147480064));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i199 == 1);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i204 := $and.i32($i1, $sub.i32(0, 67109373));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i204, $sub.i32(0, 2147480062));
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb46:
    assume $i205 == 1;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(451, 1));
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i207 := $load.i8($M.0, $p206);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i208 := $and.i8($i207, $sub.i8(0, 16));
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i209 := $or.i8($i208, 4);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p206, $i209);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i199 == 1;
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(451, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i201 := $load.i8($M.0, $p200);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i202 := $and.i8($i201, $sub.i8(0, 16));
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i203 := $or.i8($i202, 1);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p200, $i203);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i185 == 1;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i186 := $trunc.i32.i16($i1);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i187 := $zext.i16.i32($i186);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i188 := $and.i32($i187, 255);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(7, 2));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i191 := $load.i16($M.0, $p190);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i192 := $zext.i16.i32($i191);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i193 := $and.i32($i192, 65280);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i194 := $or.i32($i188, $i193);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i195 := $trunc.i32.i16($i194);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(7, 2));
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p197, $i195);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i171 == 1;
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i172 := $trunc.i32.i16($i1);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i173 := $zext.i16.i32($i172);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i174 := $shl.i32($i173, 8);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(7, 2));
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i177 := $load.i16($M.0, $p176);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i178 := $zext.i16.i32($i177);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i179 := $and.i32($i178, 255);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i180 := $or.i32($i174, $i179);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i181 := $trunc.i32.i16($i180);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(7, 2));
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p183, $i181);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i157 == 1;
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i158 := $trunc.i32.i16($i1);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i159 := $zext.i16.i32($i158);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i160 := $and.i32($i159, 255);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(6, 2));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i163 := $load.i16($M.0, $p162);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i164 := $zext.i16.i32($i163);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i165 := $and.i32($i164, 65280);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i166 := $or.i32($i160, $i165);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i167 := $trunc.i32.i16($i166);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(6, 2));
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p169, $i167);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i143 == 1;
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i144 := $trunc.i32.i16($i1);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i145 := $zext.i16.i32($i144);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i146 := $shl.i32($i145, 8);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(6, 2));
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i149 := $load.i16($M.0, $p148);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i150 := $zext.i16.i32($i149);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i151 := $and.i32($i150, 255);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i152 := $or.i32($i146, $i151);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i32.i16($i152);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(6, 2));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p155, $i153);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i129 == 1;
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i32.i16($i1);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i131 := $zext.i16.i32($i130);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i132 := $and.i32($i131, 255);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(5, 2));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i135 := $load.i16($M.0, $p134);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i136 := $zext.i16.i32($i135);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i137 := $and.i32($i136, 65280);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i138 := $or.i32($i132, $i137);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i16($i138);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(5, 2));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p141, $i139);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i115 == 1;
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i16($i1);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i117 := $zext.i16.i32($i116);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i118 := $shl.i32($i117, 8);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(5, 2));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i121 := $load.i16($M.0, $p120);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i122 := $zext.i16.i32($i121);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i123 := $and.i32($i122, 255);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i124 := $or.i32($i118, $i123);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i16($i124);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(5, 2));
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p127, $i125);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i101 == 1;
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i16($i1);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i32($i102);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i103, 255);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(4, 2));
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i107 := $load.i16($M.0, $p106);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i107);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i109 := $and.i32($i108, 65280);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i110 := $or.i32($i104, $i109);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i16($i110);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(4, 2));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p113, $i111);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i87 == 1;
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i16($i1);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32($i88);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i90 := $shl.i32($i89, 8);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(4, 2));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i93 := $load.i16($M.0, $p92);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i93);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i94, 255);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i96 := $or.i32($i90, $i95);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i16($i96);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(4, 2));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p99, $i97);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i73 == 1;
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i16($i1);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i74);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i75, 255);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(3, 2));
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i79 := $load.i16($M.0, $p78);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i79);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, 65280);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i82 := $or.i32($i76, $i81);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i16($i82);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(3, 2));
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p85, $i83);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i59 == 1;
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i1);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i62 := $shl.i32($i61, 8);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(3, 2));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.0, $p64);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i65);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 255);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i68 := $or.i32($i62, $i67);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(3, 2));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p71, $i69);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i45 == 1;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i1);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 255);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(2, 2));
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 65280);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i54 := $or.i32($i48, $i53);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(2, 2));
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p57, $i55);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i1);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i34 := $shl.i32($i33, 8);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(2, 2));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 255);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i34, $i39);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(2, 2));
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p43, $i41);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i1);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 255);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(1, 2));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 65280);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i20, $i25);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(1, 2));
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, $i27);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i1);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i5, 8);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(1, 2));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 255);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i6, $i11);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1756, 1)), $mul.ref(1, 2));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, $i13);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const command_out_completed: ref;

axiom command_out_completed == $sub.ref(0, 237710);

procedure command_out_completed($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation command_out_completed($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(441, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i13 := __create_pipe($p9, $i12);
    call {:si_unique_call 551} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i13, $sub.i32(0, 1073741696));
    call {:si_unique_call 552} {:cexpr "pipe"} boogie_si_record_i32($i14);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(1824, 1));
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p3);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} usb_fill_bulk_urb($p16, $p18, $i14, $p20, 123, command_res_completed, $p21);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(1824, 1));
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 0);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(1824, 1));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $i27 := usb_submit_urb($p26, 32);
    call {:si_unique_call 555} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(1832, 1));
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} complete_($p29);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(1832, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} complete_($p7);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const command_res_completed: ref;

axiom command_res_completed == $sub.ref(0, 238742);

procedure command_res_completed($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation command_res_completed($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i8;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i8;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(1824, 1));
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(1792, 1));
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 2);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(1808, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $i45 := vub300_response_error($i44);
    call {:si_unique_call 562} {:cexpr "tmp___0"} boogie_si_record_i32($i45);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(1776, 1));
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i45);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(2344, 1));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} usb_sg_cancel($p49);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(1832, 1));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} complete_($p50);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i32 := vub300_response_error($i31);
    call {:si_unique_call 559} {:cexpr "tmp"} boogie_si_record_i32($i32);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(1776, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i32);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(1808, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} vslice_dummy_var_88 := usb_unlink_urb($p37);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 239774);

procedure snprintf.ref.i64.ref($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);



procedure snprintf.ref.i64.ref.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 240806);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 1} true;
    call {:si_unique_call 564} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 565} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __download_offload_pseudocode: ref;

axiom __download_offload_pseudocode == $sub.ref(0, 241838);

procedure __download_offload_pseudocode($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __download_offload_pseudocode($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $i19: i32;
  var $i20: i8;
  var $p21: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $p28: ref;
  var $i29: i32;
  var $p17: ref;
  var $i18: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i16;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i16;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i16;
  var $i63: i64;
  var $p64: ref;
  var $i65: i8;
  var $i66: i16;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i16;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i16;
  var $i76: i16;
  var $i77: i64;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $i81: i64;
  var $i82: i64;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i64;
  var $i88: i32;
  var $i89: i32;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $i100: i16;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i64;
  var $p129: ref;
  var $i130: i8;
  var $i131: i16;
  var $i132: i32;
  var $i133: i32;
  var $i134: i32;
  var $i135: i16;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $i139: i16;
  var $i140: i64;
  var $p141: ref;
  var $i142: i8;
  var $i143: i16;
  var $i144: i32;
  var $i145: i32;
  var $i146: i32;
  var $i147: i16;
  var $i148: i32;
  var $i149: i32;
  var $i150: i1;
  var $i151: i32;
  var $i152: i16;
  var $i153: i16;
  var $i154: i64;
  var $p155: ref;
  var $i156: i64;
  var $i157: i1;
  var $i158: i64;
  var $i159: i64;
  var $p160: ref;
  var $i161: i32;
  var $i162: i32;
  var $i163: i32;
  var $i164: i64;
  var $i165: i32;
  var $i166: i32;
  var $i167: i64;
  var $i168: i64;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $i172: i32;
  var $p173: ref;
  var $p174: ref;
  var $i175: i32;
  var $i176: i32;
  var $i177: i16;
  var $i178: i32;
  var $i179: i1;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $i205: i64;
  var $p206: ref;
  var $i207: i8;
  var $i208: i32;
  var $i209: i32;
  var $i210: i32;
  var $i211: i8;
  var $i212: i32;
  var $i213: i32;
  var $i214: i32;
  var $i215: i1;
  var $p216: ref;
  var $i217: i32;
  var $i218: i32;
  var $i219: i1;
  var $p224: ref;
  var $i225: i8;
  var $i226: i64;
  var $p228: ref;
  var $p229: ref;
  var $i230: i24;
  var $i231: i24;
  var $i232: i24;
  var $i233: i24;
  var $i234: i24;
  var $i235: i32;
  var $i236: i64;
  var $p237: ref;
  var $i238: i8;
  var $i239: i32;
  var $i240: i32;
  var $i241: i32;
  var $i242: i32;
  var $i243: i64;
  var $p244: ref;
  var $i245: i8;
  var $i246: i32;
  var $i247: i32;
  var $i248: i32;
  var $i249: i32;
  var $i250: i64;
  var $p251: ref;
  var $i252: i8;
  var $i253: i32;
  var $i254: i32;
  var $i255: i32;
  var $i256: i64;
  var $p258: ref;
  var $p259: ref;
  var $i260: i24;
  var $i261: i24;
  var $i262: i24;
  var $i263: i24;
  var $i264: i24;
  var $i265: i24;
  var $i266: i64;
  var $p268: ref;
  var $p269: ref;
  var $i270: i24;
  var $i271: i24;
  var $i272: i24;
  var $i273: i64;
  var $p275: ref;
  var $p276: ref;
  var $i277: i24;
  var $i278: i24;
  var $i279: i32;
  var $i280: i32;
  var $i281: i1;
  var $i220: i32;
  var $i221: i32;
  var $p222: ref;
  var $i223: i32;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $i286: i8;
  var $i287: i32;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.17, $p2);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.18, $p4);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    call {:si_unique_call 566} {:cexpr "size"} boogie_si_record_i32($i6);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} vslice_dummy_var_89 := _dev_info.ref.ref.ref($p9, .str.60, $p11);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p3, $mul.ref(1, 1));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p3);
    call {:si_unique_call 568} {:cexpr "c"} boogie_si_record_i8($i14);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i6, 1);
    call {:si_unique_call 569} {:cexpr "size"} boogie_si_record_i32($i15);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i6, 0);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p17, $i18 := $p13, $i15;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.17, $p37);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} vslice_dummy_var_90 := _dev_info.ref.ref.ref.ref($p36, .str.61, $p38, $p40);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i42 := $sle.i32($i18, 3);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p17, $mul.ref(1, 1));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p17);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i16($i53);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32(0);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i55, $i56);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i16($i57);
    call {:si_unique_call 575} {:cexpr "interrupt_size"} boogie_si_record_i16($i58);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i18, $sub.i32(0, 1));
    call {:si_unique_call 576} {:cexpr "size"} boogie_si_record_i32($i59);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i32($i58);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i61 := $shl.i32($i60, 8);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i16($i61);
    call {:si_unique_call 577} {:cexpr "interrupt_size"} boogie_si_record_i16($i62);
    $i63 := $add.i64(1, 1);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p17, $mul.ref($i63, 1));
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p52);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i16($i65);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i62);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i67, $i68);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i16($i69);
    call {:si_unique_call 578} {:cexpr "interrupt_size"} boogie_si_record_i16($i70);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i59, $sub.i32(0, 1));
    call {:si_unique_call 579} {:cexpr "size"} boogie_si_record_i32($i71);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i70);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i72, $i71);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i73 == 1);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.17, $p120);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} vslice_dummy_var_92 := dev_err.ref.ref.ref.ref($p119, .str.67, $p121, $p123);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $p127 := strncpy($p126, .str.68, 80);
    assume $isExternal($p127);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i73 == 1;
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i70);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i16($i74);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $i76 := roundup_to_multiple_of_64($i75);
    call {:si_unique_call 581} {:cexpr "tmp___3"} boogie_si_record_i16($i76);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i64($i76);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $p78 := kmalloc($i77, 208);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i80 == 1);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.17, $p109);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} vslice_dummy_var_93 := dev_err.ref.ref.ref.ref($p108, .str.65, $p110, $p112);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $p116 := strncpy($p115, .str.66, 80);
    assume $isExternal($p116);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16:
    assume $i80 == 1;
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i64($i70);
    call {:si_unique_call 585} {:cexpr "__len"} boogie_si_record_i64($i81);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.0;
    cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 586} cmdloc_dummy_var_21 := $memcpy.i8(cmdloc_dummy_var_19, cmdloc_dummy_var_20, $p78, $p64, $i81, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_21;
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i64($i70);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p78, $mul.ref($i82, 1));
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i84 := $zext.i16.i32($i76);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i32($i70);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32($i84, $i85);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i86);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 587} cmdloc_dummy_var_23 := $memset.i8(cmdloc_dummy_var_22, $p83, 0, $i87, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i88 := $zext.i16.i32($i70);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i89 := $sub.i32($i71, $i88);
    call {:si_unique_call 588} {:cexpr "size"} boogie_si_record_i32($i89);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i90 := $zext.i16.i64($i70);
    $i91 := $add.i64($i63, $i90);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p17, $mul.ref($i91, 1));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i95 := __create_pipe($p94, 0);
    call {:si_unique_call 590} {:cexpr "tmp___5"} boogie_si_record_i32($i95);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i98 := $or.i32($i95, $sub.i32(0, 2147483648));
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i99 := $zext.i16.i32($i76);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i16($i99);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $i101 := usb_control_msg($p97, $i98, 20, 64, 0, 0, $p78, $i100, 250);
    call {:si_unique_call 592} {:cexpr "retval"} boogie_si_record_i32($i101);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} kfree($p78);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i101, 0);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    $i128 := $add.i64($i91, 1);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p17, $mul.ref($i128, 1));
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i130 := $load.i8($M.0, $p92);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i131 := $zext.i8.i16($i130);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i132 := $zext.i16.i32($i131);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i133 := $zext.i16.i32(0);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i134 := $add.i32($i132, $i133);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i16($i134);
    call {:si_unique_call 597} {:cexpr "ts"} boogie_si_record_i16($i135);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i136 := $add.i32($i89, $sub.i32(0, 1));
    call {:si_unique_call 598} {:cexpr "size"} boogie_si_record_i32($i136);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i137 := $zext.i16.i32($i135);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i138 := $shl.i32($i137, 8);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i16($i138);
    call {:si_unique_call 599} {:cexpr "ts"} boogie_si_record_i16($i139);
    $i140 := $add.i64($i128, 1);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p17, $mul.ref($i140, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i142 := $load.i8($M.0, $p129);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i143 := $zext.i8.i16($i142);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i144 := $zext.i16.i32($i143);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i145 := $zext.i16.i32($i139);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i146 := $add.i32($i144, $i145);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i32.i16($i146);
    call {:si_unique_call 600} {:cexpr "ts"} boogie_si_record_i16($i147);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i148 := $add.i32($i136, $sub.i32(0, 1));
    call {:si_unique_call 601} {:cexpr "size"} boogie_si_record_i32($i148);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i149 := $zext.i16.i32($i147);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i150 := $slt.i32($i149, $i148);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i150 == 1);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.0, $p194);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p195, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.17, $p197);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $p200 := $bitcast.ref.ref($p199);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} vslice_dummy_var_94 := dev_err.ref.ref.ref.ref($p196, .str.71, $p198, $p200);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p203 := $bitcast.ref.ref($p202);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $p204 := strncpy($p203, .str.72, 80);
    assume $isExternal($p204);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb23:
    assume $i150 == 1;
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i151 := $zext.i16.i32($i147);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i32.i16($i151);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $i153 := roundup_to_multiple_of_64($i152);
    call {:si_unique_call 603} {:cexpr "tmp___8"} boogie_si_record_i16($i153);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i154 := $zext.i16.i64($i153);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $p155 := kmalloc($i154, 208);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i156 := $p2i.ref.i64($p155);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i157 := $ne.i64($i156, 0);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i157 == 1);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p184, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p187 := $load.ref($M.17, $p186);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p189 := $bitcast.ref.ref($p188);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} vslice_dummy_var_95 := dev_err.ref.ref.ref.ref($p185, .str.69, $p187, $p189);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $p192 := $bitcast.ref.ref($p191);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $p193 := strncpy($p192, .str.70, 80);
    assume $isExternal($p193);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb25:
    assume $i157 == 1;
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i158 := $zext.i16.i64($i147);
    call {:si_unique_call 607} {:cexpr "__len___0"} boogie_si_record_i64($i158);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 608} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p155, $p141, $i158, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i159 := $zext.i16.i64($i147);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($p155, $mul.ref($i159, 1));
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i161 := $zext.i16.i32($i153);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i162 := $zext.i16.i32($i147);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i163 := $sub.i32($i161, $i162);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i164 := $sext.i32.i64($i163);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 609} cmdloc_dummy_var_28 := $memset.i8(cmdloc_dummy_var_27, $p160, 0, $i164, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_28;
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i165 := $zext.i16.i32($i147);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i166 := $sub.i32($i148, $i165);
    call {:si_unique_call 610} {:cexpr "size"} boogie_si_record_i32($i166);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i167 := $zext.i16.i64($i147);
    $i168 := $add.i64($i140, $i167);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p17, $mul.ref($i168, 1));
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, $p170);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $i172 := __create_pipe($p171, 0);
    call {:si_unique_call 612} {:cexpr "tmp___10"} boogie_si_record_i32($i172);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.0, $p173);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $i175 := $or.i32($i172, $sub.i32(0, 2147483648));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i176 := $zext.i16.i32($i153);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i177 := $trunc.i32.i16($i176);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $i178 := usb_control_msg($p174, $i175, 21, 64, 0, 0, $p155, $i177, 250);
    call {:si_unique_call 614} {:cexpr "retval___0"} boogie_si_record_i32($i178);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} kfree($p155);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i179 := $slt.i32($i178, 0);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    $i205 := $add.i64($i168, 1);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($p17, $mul.ref($i205, 1));
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i207 := $load.i8($M.0, $p169);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i208 := $zext.i8.i32($i207);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i209 := $zext.i8.i32(0);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i210 := $add.i32($i208, $i209);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i32.i8($i210);
    call {:si_unique_call 619} {:cexpr "register_count"} boogie_si_record_i8($i211);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i212 := $add.i32($i166, $sub.i32(0, 1));
    call {:si_unique_call 620} {:cexpr "size"} boogie_si_record_i32($i212);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i213 := $zext.i8.i32($i211);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i214 := $mul.i32($i213, 4);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i214, $i212);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i215 == 1);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p290 := $load.ref($M.0, $p289);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p290, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p293 := $bitcast.ref.ref($p292);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} vslice_dummy_var_96 := dev_err.ref.ref.ref($p291, .str.74, $p293);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p296 := $bitcast.ref.ref($p295);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $p297 := strncpy($p296, .str.75, 80);
    assume $isExternal($p297);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb32:
    assume $i215 == 1;
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(453, 1));
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p216, $i211);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i217 := $zext.i8.i32($i211);
    call {:si_unique_call 621} {:cexpr "I"} boogie_si_record_i32($i217);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i218 := $sub.i32($i217, 1);
    call {:si_unique_call 622} {:cexpr "I"} boogie_si_record_i32($i218);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i219 := $ne.i32($i217, 0);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i219 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p283, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(453, 1));
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i286 := $load.i8($M.0, $p285);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i287 := $zext.i8.i32($i286);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} vslice_dummy_var_97 := _dev_info.ref.ref.i32($p284, .str.73, $i287);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb34:
    assume $i219 == 1;
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i220, $i221, $p222, $i223 := $i218, 0, $p206, $i212;
    goto $bb37;

  $bb37:
    call $p224, $i225, $i226, $p228, $p229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $p237, $i238, $i239, $i240, $i241, $i242, $i243, $p244, $i245, $i246, $i247, $i248, $i249, $i250, $p251, $i252, $i253, $i254, $i255, $i256, $p258, $p259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $p268, $p269, $i270, $i271, $i272, $i273, $p275, $p276, $i277, $i278, $i279, $i280, $i281, $i220, $i221, $p222, $i223 := __download_offload_pseudocode_loop_$bb37($p0, $p224, $i225, $i226, $p228, $p229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $p237, $i238, $i239, $i240, $i241, $i242, $i243, $p244, $i245, $i246, $i247, $i248, $i249, $i250, $p251, $i252, $i253, $i254, $i255, $i256, $p258, $p259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $p268, $p269, $i270, $i271, $i272, $i273, $p275, $p276, $i277, $i278, $i279, $i280, $i281, $i220, $i221, $p222, $i223);
    goto $bb37_last;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($p222, $mul.ref(1, 1));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i225 := $load.i8($M.0, $p222);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i226 := $sext.i32.i64($i221);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref($i226, 12));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p229 := $bitcast.ref.ref($p228);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i230 := $zext.i8.i24($i225);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i231 := $load.i24($M.0, $p229);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i232 := $and.i24($i230, 7);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i233 := $and.i24($i231, $sub.i24(0, 8));
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i234 := $or.i24($i233, $i232);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i24($M.0, $p229, $i234);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i235 := $add.i32($i223, $sub.i32(0, 1));
    call {:si_unique_call 625} {:cexpr "size"} boogie_si_record_i32($i235);
    $i236 := $add.i64(1, 1);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($p222, $mul.ref($i236, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i238 := $load.i8($M.0, $p224);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i239 := $zext.i8.i32($i238);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i240 := $add.i32($i239, 0);
    call {:si_unique_call 626} {:cexpr "func_num"} boogie_si_record_i32($i240);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i241 := $add.i32($i235, $sub.i32(0, 1));
    call {:si_unique_call 627} {:cexpr "size"} boogie_si_record_i32($i241);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i242 := $shl.i32($i240, 8);
    call {:si_unique_call 628} {:cexpr "func_num"} boogie_si_record_i32($i242);
    $i243 := $add.i64($i236, 1);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($p222, $mul.ref($i243, 1));
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i245 := $load.i8($M.0, $p237);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i246 := $zext.i8.i32($i245);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i247 := $add.i32($i246, $i242);
    call {:si_unique_call 629} {:cexpr "func_num"} boogie_si_record_i32($i247);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i248 := $add.i32($i241, $sub.i32(0, 1));
    call {:si_unique_call 630} {:cexpr "size"} boogie_si_record_i32($i248);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i249 := $shl.i32($i247, 8);
    call {:si_unique_call 631} {:cexpr "func_num"} boogie_si_record_i32($i249);
    $i250 := $add.i64($i243, 1);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($p222, $mul.ref($i250, 1));
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i252 := $load.i8($M.0, $p244);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i253 := $zext.i8.i32($i252);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i254 := $add.i32($i253, $i249);
    call {:si_unique_call 632} {:cexpr "func_num"} boogie_si_record_i32($i254);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i255 := $add.i32($i248, $sub.i32(0, 1));
    call {:si_unique_call 633} {:cexpr "size"} boogie_si_record_i32($i255);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i256 := $sext.i32.i64($i221);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref($i256, 12));
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p259 := $bitcast.ref.ref($p258);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i260 := $trunc.i32.i24($i254);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i261 := $load.i24($M.0, $p259);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i262 := $and.i24($i260, 131071);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i263 := $shl.i24($i262, 3);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i264 := $and.i24($i261, $sub.i24(0, 1048569));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i265 := $or.i24($i264, $i263);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i24($M.0, $p259, $i265);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i266 := $sext.i32.i64($i221);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref($i266, 12));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p269 := $bitcast.ref.ref($p268);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i270 := $load.i24($M.0, $p269);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i271 := $and.i24($i270, $sub.i24(0, 1048577));
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i272 := $or.i24($i271, 1048576);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i24($M.0, $p269, $i272);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i273 := $sext.i32.i64($i221);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref($i273, 12));
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p276 := $bitcast.ref.ref($p275);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i277 := $load.i24($M.0, $p276);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i278 := $and.i24($i277, $sub.i24(0, 2097153));
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i24($M.0, $p276, $i278);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i279 := $add.i32($i221, 1);
    call {:si_unique_call 634} {:cexpr "i"} boogie_si_record_i32($i279);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i280 := $sub.i32($i220, 1);
    call {:si_unique_call 635} {:cexpr "I"} boogie_si_record_i32($i280);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i281 := $ne.i32($i220, 0);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i281 == 1);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb39:
    assume $i281 == 1;
    assume {:verifier.code 0} true;
    $i220, $i221, $p222, $i223 := $i280, $i279, $p251, $i255;
    goto $bb39_dummy;

  $bb27:
    assume $i179 == 1;
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p181 := $bitcast.ref.ref($p180);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $p182 := strncpy($p181, .str.64, 80);
    assume $isExternal($p182);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb18:
    assume $i102 == 1;
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $p105 := strncpy($p104, .str.64, 80);
    assume $isExternal($p105);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume $i42 == 1;
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} vslice_dummy_var_91 := dev_err.ref.ref.ref($p45, .str.62, $p47);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $p51 := strncpy($p50, .str.63, 80);
    assume $isExternal($p51);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i19, $i20, $p21 := $i15, $i14, $p13;
    goto $bb4;

  $bb4:
    call $i22, $p23, $p24, $i25, $i26, $i27, $i19, $i20, $p21, $i30, $i31, $p32, $i33, $p28, $i29 := __download_offload_pseudocode_loop_$bb4($i22, $p23, $p24, $i25, $i26, $i27, $i19, $i20, $p21, $i30, $i31, $p32, $i33, $p28, $i29);
    goto $bb4_last;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i20);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i22, $p23, $p32, $i33 := $i19, $p21, $p21, $i19;
    assume true;
    goto $bb5, $bb8;

  $bb8:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p17, $i18 := $p32, $i33;
    goto $bb3;

  $bb5:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(1, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p23);
    call {:si_unique_call 570} {:cexpr "c"} boogie_si_record_i8($i25);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i22, 1);
    call {:si_unique_call 571} {:cexpr "size"} boogie_si_record_i32($i26);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i22, 0);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p28, $i29 := $p24, $i26;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p17, $i18 := $p28, $i29;
    goto $bb3;

  $bb6:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i19, $i20, $p21 := $i26, $i25, $p24;
    goto $bb6_dummy;

  $bb39_dummy:
    assume false;
    return;

  $bb37_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4285;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4041;
}



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 242870);

procedure release_firmware($p0: ref);
  free requires assertsPassed;



implementation release_firmware($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    return;
}



const roundup_to_multiple_of_64: ref;

axiom roundup_to_multiple_of_64 == $sub.ref(0, 243902);

procedure roundup_to_multiple_of_64($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation roundup_to_multiple_of_64($i0: i16) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} {:cexpr "roundup_to_multiple_of_64:arg:number"} boogie_si_record_i16($i0);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 63);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 65472);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 244934);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_14: ref;

axiom ldv_mutex_lock_14 == $sub.ref(0, 245966);

procedure ldv_mutex_lock_14($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_14($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} ldv_mutex_lock_cmd_mutex($p0);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} mutex_lock($p0);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_15: ref;

axiom ldv_mutex_lock_15 == $sub.ref(0, 246998);

procedure ldv_mutex_lock_15($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_mutex_lock_15($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} ldv_mutex_lock_irq_mutex($p0);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} mutex_lock($p0);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_16: ref;

axiom ldv_mutex_unlock_16 == $sub.ref(0, 248030);

procedure ldv_mutex_unlock_16($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_mutex_unlock_16($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} ldv_mutex_unlock_irq_mutex($p0);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} mutex_unlock($p0);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const mmc_signal_sdio_irq: ref;

axiom mmc_signal_sdio_irq == $sub.ref(0, 249062);

procedure mmc_signal_sdio_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, assertsPassed, $M.8, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.12, $M.13, $CurrAddr, $M.16;



implementation mmc_signal_sdio_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1160, 1));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    call {:si_unique_call 644} devirtbounce.3($p4, $p0, 0);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2456, 1));
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 1);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2448, 1));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} vslice_dummy_var_98 := wake_up_process($p7);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_17: ref;

axiom ldv_mutex_unlock_17 == $sub.ref(0, 250094);

procedure ldv_mutex_unlock_17($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_mutex_unlock_17($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} ldv_mutex_unlock_irq_mutex($p0);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} mutex_unlock($p0);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_18: ref;

axiom ldv_mutex_unlock_18 == $sub.ref(0, 251126);

procedure ldv_mutex_unlock_18($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_mutex_unlock_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} ldv_mutex_unlock_irq_mutex($p0);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} mutex_unlock($p0);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;
}



const __do_poll: ref;

axiom __do_poll == $sub.ref(0, 252158);

procedure __do_poll($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.8, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.12, $M.13, assertsPassed, $M.16;



implementation __do_poll($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2560, 1));
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, jiffies);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 250);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} vslice_dummy_var_99 := mod_timer($p1, $i3);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1928, 1));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} init_completion($p5);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} send_irqpoll($p0);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $i6 := msecs_to_jiffies(500);
    call {:si_unique_call 654} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1928, 1));
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $i8 := wait_for_completion_timeout($p7, $i6);
    call {:si_unique_call 656} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(464, 1));
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i8, 0);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i18 := $slt.i64($i8, 0);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} __vub300_irqpoll_response($p0);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} vub300_queue_poll_work($p0, 1);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(468, 1));
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 1);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1816, 1));
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} usb_kill_urb($p15);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1824, 1));
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} usb_kill_urb($p17);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_205:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_19: ref;

axiom ldv_mutex_unlock_19 == $sub.ref(0, 253190);

procedure ldv_mutex_unlock_19($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_19($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} ldv_mutex_unlock_cmd_mutex($p0);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} mutex_unlock($p0);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;
}



const send_irqpoll: ref;

axiom send_irqpoll == $sub.ref(0, 254222);

procedure send_irqpoll($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.15, $M.12, $M.13, assertsPassed, $CurrAddr, $M.16;



implementation send_irqpoll($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i1 := $M.19;
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(131071, $i1);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 65535);
    call {:si_unique_call 663} {:cexpr "timeout"} boogie_si_record_i32($i3);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 22);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 64)), $mul.ref(1, 1));
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 1);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 64)), $mul.ref(3, 1));
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 2);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i3);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 64)), $mul.ref(21, 1));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i16);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i20 := $ashr.i32($i3, 8);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i21);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(440, 1));
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $i30 := __create_pipe($p26, $i29);
    call {:si_unique_call 665} {:cexpr "tmp"} boogie_si_record_i32($i30);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1816, 1));
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i30, $sub.i32(0, 1073741824));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2024, 1));
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p0);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} usb_fill_bulk_urb($p32, $p34, $i35, $p37, 64, irqpoll_out_completed, $p38);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1816, 1));
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $i41 := usb_submit_urb($p40, 208);
    call {:si_unique_call 668} {:cexpr "retval"} boogie_si_record_i32($i41);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 0);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i42 == 1);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i42 == 1;
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(464, 1));
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i41);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} vub300_queue_poll_work($p0, 1);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1928, 1));
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} complete_($p44);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_217:
    assume !assertsPassed;
    return;
}



const __vub300_irqpoll_response: ref;

axiom __vub300_irqpoll_response == $sub.ref(0, 255254);

procedure __vub300_irqpoll_response($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, assertsPassed, $M.8, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.12, $M.13, $CurrAddr, $M.16;



implementation __vub300_irqpoll_response($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i55: i32;
  var $i56: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $i87: i32;
  var $i88: i32;
  var $p98: ref;
  var $p99: ref;
  var $i100: i8;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $i113: i32;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1824, 1));
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i10, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i14 == 1;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} vub300_queue_poll_work($p0, 1);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i10, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb14;

  $bb15:
    assume $i15 == 1;
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i82, $sub.i32(0, 3));
    call {:si_unique_call 675} {:cexpr "offloaded_data_length___0"} boogie_si_record_i32($i83);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i84 := $ashr.i32($i83, 3);
    call {:si_unique_call 676} {:cexpr "register_count___0"} boogie_si_record_i32($i84);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i85 := $sub.i32($i84, 1);
    call {:si_unique_call 677} {:cexpr "register_count___0"} boogie_si_record_i32($i85);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i84, 0);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(192, 1));
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} ldv_mutex_lock_12($p98);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(449, 1));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.0, $p99);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i8.i1($i100);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i101 == 1);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i106 == 1);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i112, 1);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p114, $i113);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(450, 1));
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p115, 0);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(192, 1));
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} ldv_mutex_unlock_13($p116);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i106 == 1;
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i108, 1);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p110, $i109);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb54:
    assume $i101 == 1;
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1800, 1));
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} mmc_signal_sdio_irq($p103);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i86 == 1;
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i87, $i88 := $i85, 0;
    goto $bb49;

  $bb49:
    call $p89, $p90, $p91, $p92, $i93, $p94, $i95, $i96, $i97, $i87, $i88 := __vub300_irqpoll_response_loop_$bb49($p0, $p89, $p90, $p91, $p92, $i93, $p94, $i95, $i96, $i97, $i87, $i88);
    goto $bb49_last;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p90, $mul.ref(0, 123)), $mul.ref(3, 1));
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i88);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p92, $mul.ref($i93, 8));
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} add_offloaded_reg($p0, $p94);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i88, 1);
    call {:si_unique_call 692} {:cexpr "ri___0"} boogie_si_record_i32($i95);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i96 := $sub.i32($i87, 1);
    call {:si_unique_call 693} {:cexpr "register_count___0"} boogie_si_record_i32($i96);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i87, 0);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i97 == 1);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb51:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $i87, $i88 := $i96, $i95;
    goto $bb51_dummy;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i50, $sub.i32(0, 3));
    call {:si_unique_call 671} {:cexpr "offloaded_data_length"} boogie_si_record_i32($i51);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i52 := $ashr.i32($i51, 3);
    call {:si_unique_call 672} {:cexpr "register_count"} boogie_si_record_i32($i52);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32($i52, 1);
    call {:si_unique_call 673} {:cexpr "register_count"} boogie_si_record_i32($i53);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i52, 0);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(192, 1));
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} ldv_mutex_lock_10($p66);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(449, 1));
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i8.i1($i68);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i69 == 1);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i73, 1);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(450, 1));
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, 1);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(192, 1));
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} ldv_mutex_unlock_11($p77);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i69 == 1;
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1800, 1));
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} mmc_signal_sdio_irq($p71);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i54 == 1;
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i55, $i56 := $i53, 0;
    goto $bb38;

  $bb38:
    call $p57, $p58, $p59, $p60, $i61, $p62, $i63, $i64, $i65, $i55, $i56 := __vub300_irqpoll_response_loop_$bb38($p0, $p57, $p58, $p59, $p60, $i61, $p62, $i63, $i64, $i65, $i55, $i56);
    goto $bb38_last;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 123)), $mul.ref(3, 1));
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i56);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p60, $mul.ref($i61, 8));
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} add_offloaded_reg($p0, $p62);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i56, 1);
    call {:si_unique_call 686} {:cexpr "ri"} boogie_si_record_i32($i63);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32($i55, 1);
    call {:si_unique_call 687} {:cexpr "register_count"} boogie_si_record_i32($i64);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i55, 0);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i65 == 1);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb40:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i55, $i56 := $i64, $i63;
    goto $bb40_dummy;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i10, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i10, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i10, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb14;

  $bb21:
    assume $i18 == 1;
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(3072, 1));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p38);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p40);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.0;
    cmdloc_dummy_var_30 := $M.0;
    call {:si_unique_call 678} cmdloc_dummy_var_31 := $memcpy.i8(cmdloc_dummy_var_29, cmdloc_dummy_var_30, $p41, $p42, 20, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_31;
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} new_system_port_status($p0);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(445, 1));
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i8.i1($i44);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i45 == 1);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} vub300_queue_poll_work($p0, 50);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb19:
    assume $i17 == 1;
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 13);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb29:
    assume $i37 == 1;
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} check_vub300_port_status($p0);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb17:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i10, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb14;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(192, 1));
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} ldv_mutex_lock_8($p20);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(449, 1));
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i23 == 1);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 1);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(450, 1));
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 1);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(192, 1));
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} ldv_mutex_unlock_9($p31);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i23 == 1;
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(1800, 1));
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} mmc_signal_sdio_irq($p25);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb51_dummy:
    assume false;
    return;

  $bb49_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4627;

  $bb40_dummy:
    assume false;
    return;

  $bb38_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4588;
}



const ldv_mutex_lock_8: ref;

axiom ldv_mutex_lock_8 == $sub.ref(0, 256286);

procedure ldv_mutex_lock_8($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_mutex_lock_8($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} ldv_mutex_lock_irq_mutex($p0);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} mutex_lock($p0);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_9: ref;

axiom ldv_mutex_unlock_9 == $sub.ref(0, 257318);

procedure ldv_mutex_unlock_9($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_mutex_unlock_9($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} ldv_mutex_unlock_irq_mutex($p0);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} mutex_unlock($p0);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_10: ref;

axiom ldv_mutex_lock_10 == $sub.ref(0, 258350);

procedure ldv_mutex_lock_10($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_mutex_lock_10($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} ldv_mutex_lock_irq_mutex($p0);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} mutex_lock($p0);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_11: ref;

axiom ldv_mutex_unlock_11 == $sub.ref(0, 259382);

procedure ldv_mutex_unlock_11($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_mutex_unlock_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} ldv_mutex_unlock_irq_mutex($p0);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} mutex_unlock($p0);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_12: ref;

axiom ldv_mutex_lock_12 == $sub.ref(0, 260414);

procedure ldv_mutex_lock_12($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_mutex_lock_12($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} ldv_mutex_lock_irq_mutex($p0);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} mutex_lock($p0);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_13: ref;

axiom ldv_mutex_unlock_13 == $sub.ref(0, 261446);

procedure ldv_mutex_unlock_13($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_mutex_unlock_13($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} ldv_mutex_unlock_irq_mutex($p0);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} mutex_unlock($p0);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;
}



const irqpoll_out_completed: ref;

axiom irqpoll_out_completed == $sub.ref(0, 262478);

procedure irqpoll_out_completed($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation irqpoll_out_completed($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(441, 1));
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $i16 := __create_pipe($p12, $i15);
    call {:si_unique_call 711} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i16, $sub.i32(0, 1073741696));
    call {:si_unique_call 712} {:cexpr "pipe"} boogie_si_record_i32($i17);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(1824, 1));
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} usb_fill_bulk_urb($p19, $p21, $i17, $p23, 123, irqpoll_res_completed, $p24);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(1824, 1));
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 0);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(1824, 1));
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $i30 := usb_submit_urb($p29, 32);
    call {:si_unique_call 715} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(464, 1));
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i30);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(1928, 1));
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} complete_($p33);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(464, 1));
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(1928, 1));
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} complete_($p10);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const irqpoll_res_completed: ref;

axiom irqpoll_res_completed == $sub.ref(0, 263510);

procedure irqpoll_res_completed($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation irqpoll_res_completed($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(1928, 1));
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} complete_($p10);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(464, 1));
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wake_up_process: ref;

axiom wake_up_process == $sub.ref(0, 264542);

procedure wake_up_process($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wake_up_process($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 1} true;
    call {:si_unique_call 718} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 719} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_endpoint_xfer_bulk: ref;

axiom usb_endpoint_xfer_bulk == $sub.ref(0, 265574);

procedure usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_endpoint_dir_out: ref;

axiom usb_endpoint_dir_out == $sub.ref(0, 266606);

procedure usb_endpoint_dir_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_out($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i4 := $sge.i32($i3, 0);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const usb_endpoint_dir_in: ref;

axiom usb_endpoint_dir_in == $sub.ref(0, 267638);

procedure usb_endpoint_dir_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const vub300_mmc_request: ref;

axiom vub300_mmc_request == $sub.ref(0, 268670);

procedure vub300_mmc_request($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.15, $M.12, $M.13, $CurrAddr, $M.16;



implementation vub300_mmc_request($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $p4 := mmc_priv($p0);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3160)), $mul.ref(8, 1));
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(16, 1));
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 3160)), $mul.ref(444, 1));
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $sub.i32(0, 123));
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} mmc_request_done($p0, $p1);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 3160)), $mul.ref(445, 1));
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $sub.i32(0, 123));
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} mmc_request_done($p0, $p1);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb7:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 3160)), $mul.ref(464, 1));
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 3160)), $mul.ref(8, 1));
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 3160)), $mul.ref(16, 1));
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} kref_get($p32);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 3160)), $mul.ref(24, 1));
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} ldv_mutex_lock_29($p33);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 3160)), $mul.ref(2560, 1));
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, jiffies);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 250);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} vslice_dummy_var_100 := mod_timer($p34, $i36);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 52);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i40 == 1);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 3160)), $mul.ref(1776, 1));
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, $p3);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 3160)), $mul.ref(1784, 1));
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $p1);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 3160)), $mul.ref(1792, 1));
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, $p12);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p12);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i51 == 1);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 3160)), $mul.ref(456, 1));
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 0);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} vub300_queue_cmnd_work($p5);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 3160)), $mul.ref(24, 1));
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} ldv_mutex_unlock_31($p59);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 3160)), $mul.ref(16, 1));
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} vslice_dummy_var_102 := kref_put($p60, vub300_delete);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i51 == 1;
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p12, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p12, $mul.ref(0, 72)), $mul.ref(12, 1));
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i56 := $mul.i32($i53, $i55);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 3160)), $mul.ref(456, 1));
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb16:
    assume $i40 == 1;
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $i41 := satisfy_request_from_offloaded_data($p5, $p3);
    call {:si_unique_call 730} {:cexpr "tmp___0"} boogie_si_record_i32($i41);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i42 == 1);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume $i42 == 1;
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 0);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 3160)), $mul.ref(24, 1));
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} ldv_mutex_unlock_30($p44);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 3160)), $mul.ref(16, 1));
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} vslice_dummy_var_101 := kref_put($p45, vub300_delete);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} mmc_request_done($p0, $p1);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $sub.i32(0, 19));
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} mmc_request_done($p0, $p1);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 3160)), $mul.ref(464, 1));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} mmc_request_done($p0, $p1);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $sub.i32(0, 108));
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} mmc_request_done($p0, $p1);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vub300_mmc_set_ios: ref;

axiom vub300_mmc_set_ios == $sub.ref(0, 269702);

procedure vub300_mmc_set_ios($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $M.15, $M.12, $M.13, $CurrAddr, $M.16;



implementation vub300_mmc_set_ios($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $p2 := mmc_priv($p0);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(8, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(16, 1));
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} kref_get($p8);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(24, 1));
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} ldv_mutex_lock_32($p9);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 1);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 2);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(24, 1));
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} ldv_mutex_unlock_33($p47);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(16, 1));
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} vslice_dummy_var_104 := kref_put($p48, vub300_delete);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i43 == 1;
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $p44 := kmalloc(8, 208);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i46 == 1;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} __set_clock_speed($p3, $p44, $p1);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} kfree($p44);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(444, 1));
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i30);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $i34 := __create_pipe($p33, 0);
    call {:si_unique_call 747} {:cexpr "tmp___1"} boogie_si_record_i32($i34);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i34, $sub.i32(0, 2147483648));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} vslice_dummy_var_105 := usb_control_msg($p36, $i37, 4, 64, 1, 0, $0.ref, 0, 250);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} msleep(600);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(444, 1));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 1);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb13;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(444, 1));
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb7;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(444, 1));
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 0);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $i20 := __create_pipe($p19, 0);
    call {:si_unique_call 741} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i20, $sub.i32(0, 2147483648));
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} vslice_dummy_var_103 := usb_control_msg($p22, $i23, 4, 64, 0, 0, $0.ref, 0, 250);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} msleep(600);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vub300_mmc_get_ro: ref;

axiom vub300_mmc_get_ro == $sub.ref(0, 270734);

procedure vub300_mmc_get_ro($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vub300_mmc_get_ro($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $p1 := mmc_priv($p0);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3160)), $mul.ref(446, 1));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const vub300_enable_sdio_irq: ref;

axiom vub300_enable_sdio_irq == $sub.ref(0, 271766);

procedure vub300_enable_sdio_irq($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, assertsPassed, $M.8, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.12, $M.13, $CurrAddr, $M.16;



implementation vub300_enable_sdio_irq($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var vslice_dummy_var_106: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} {:cexpr "vub300_enable_sdio_irq:arg:enable"} boogie_si_record_i32($i1);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $p2 := mmc_priv($p0);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(8, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(16, 1));
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} kref_get($p8);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i1, 0);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(449, 1));
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 0);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(16, 1));
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} vslice_dummy_var_106 := kref_put($p31, vub300_delete);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(192, 1));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} ldv_mutex_lock_34($p10);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(450, 1));
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i21);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(449, 1));
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i26);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(449, 1));
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 1);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} vub300_queue_poll_work($p3, 0);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(192, 1));
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} ldv_mutex_unlock_35($p29);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(450, 1));
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 0);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(449, 1));
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 1);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} vub300_queue_poll_work($p3, 0);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, $sub.i32(0, 1));
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(472, 1));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(1800, 1));
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} mmc_signal_sdio_irq($p19);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vub300_init_card: ref;

axiom vub300_init_card == $sub.ref(0, 272798);

procedure vub300_init_card($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation vub300_init_card($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_107: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $p2 := mmc_priv($p0);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} vslice_dummy_var_107 := _dev_info.ref.ref($p6, .str);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_34: ref;

axiom ldv_mutex_lock_34 == $sub.ref(0, 273830);

procedure ldv_mutex_lock_34($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_mutex_lock_34($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} ldv_mutex_lock_irq_mutex($p0);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} mutex_lock($p0);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_35: ref;

axiom ldv_mutex_unlock_35 == $sub.ref(0, 274862);

procedure ldv_mutex_unlock_35($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_mutex_unlock_35($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} ldv_mutex_unlock_irq_mutex($p0);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} mutex_unlock($p0);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_32: ref;

axiom ldv_mutex_lock_32 == $sub.ref(0, 275894);

procedure ldv_mutex_lock_32($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_32($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} ldv_mutex_lock_cmd_mutex($p0);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} mutex_lock($p0);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 276926);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    return;
}



const __set_clock_speed: ref;

axiom __set_clock_speed == $sub.ref(0, 277958);

procedure __set_clock_speed($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr;



implementation __set_clock_speed($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i19: i32;
  var $i15: i32;
  var $i11: i32;
  var $i7: i32;
  var $i24: i64;
  var $i25: i8;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i16;
  var $i34: i32;
  var $i35: i16;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i24;
  var $i49: i24;
  var $i50: i24;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i62: i8;
  var $p63: ref;
  var $i64: i64;
  var $i65: i8;
  var $p66: ref;
  var $i67: i64;
  var $i68: i8;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i5, 47999999);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i32($i9, 23999999);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i32($i13, 19999999);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i32($i17, 14999999);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i32($i21, 199999);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i19 := $i23;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i15 := $i19;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i11 := $i15;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i7 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i7);
    call {:si_unique_call 773} {:cexpr "c"} boogie_si_record_i64($i24);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i64.i8($i24);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i25);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i26 := $lshr.i64($i24, 8);
    call {:si_unique_call 774} {:cexpr "c"} boogie_si_record_i64($i26);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i64.i8($i26);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, $i62);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i64 := $lshr.i64($i26, 8);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i64.i8($i64);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, $i65);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i67 := $lshr.i64($i64, 8);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i64.i8($i67);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, $i68);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p70, 0);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p1, $mul.ref(5, 1));
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, 0);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p1, $mul.ref(6, 1));
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, 0);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p1, $mul.ref(7, 1));
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p73, 0);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $i29 := __create_pipe($p28, 0);
    call {:si_unique_call 776} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i29, $sub.i32(0, 2147483648));
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16(8);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i36 := usb_control_msg($p31, $i32, 11, 64, 0, 0, $p1, $i35, 250);
    call {:si_unique_call 778} {:cexpr "retval"} boogie_si_record_i32($i36);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 8);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i37 == 1);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p42, .str.8);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p43, .str.12);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p44, .str.13);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p45, .str.14);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i48 := $load.i24($M.24, $p47);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i49 := $and.i24($i48, $sub.i24(0, 262144));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i50 := $or.i24($i49, 2057);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $M.24 := $store.i24($M.24, $p47, $i50);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p51, 0);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.25, $p52);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i64($i53);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i55 := $and.i64($i54, 1);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i56 := ldv__builtin_expect($i55, 0);
    call {:si_unique_call 781} {:cexpr "tmp___0"} boogie_si_record_i64($i56);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i57 == 1;
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} vslice_dummy_var_109 := __dynamic_dev_dbg.ref.ref.ref.i32($p3, $p60, .str.14, $i7);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i37 == 1;
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} vslice_dummy_var_108 := dev_err.ref.ref.i32.i32($p40, .str.11, $i7, $i36);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i23 := 200;
    goto $bb15;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i19 := 15000;
    goto $bb12;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i15 := 20000;
    goto $bb9;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i11 := 24000;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i7 := 48000;
    goto $bb3;
}



const ldv_mutex_unlock_33: ref;

axiom ldv_mutex_unlock_33 == $sub.ref(0, 278990);

procedure ldv_mutex_unlock_33($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_33($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} ldv_mutex_unlock_cmd_mutex($p0);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} mutex_unlock($p0);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 280022);

procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 1} true;
    call {:si_unique_call 785} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 786} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_mutex_lock_29: ref;

axiom ldv_mutex_lock_29 == $sub.ref(0, 281054);

procedure ldv_mutex_lock_29($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_29($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} ldv_mutex_lock_cmd_mutex($p0);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} mutex_lock($p0);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;
}



const satisfy_request_from_offloaded_data: ref;

axiom satisfy_request_from_offloaded_data == $sub.ref(0, 282086);

procedure satisfy_request_from_offloaded_data($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation satisfy_request_from_offloaded_data($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $i22: i32;
  var $i23: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i24;
  var $i28: i24;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i24;
  var $i39: i24;
  var $i40: i24;
  var $i41: i32;
  var $i42: i1;
  var $i43: i8;
  var $i44: i32;
  var $i45: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i24;
  var $i50: i24;
  var $i51: i24;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i64;
  var $p62: ref;
  var $p63: ref;
  var $i64: i24;
  var $i65: i24;
  var $i66: i32;
  var $i67: i64;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i64;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i79: i64;
  var $p81: ref;
  var $p82: ref;
  var $i83: i24;
  var $i84: i24;
  var $i85: i32;
  var $i86: i32;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i8;
  var $i104: i32;
  var $i105: i32;
  var $i106: i8;
  var $i107: i32;
  var $i108: i1;
  var $i20: i8;
  var $i21: i8;
  var $p109: ref;
  var $i110: i8;
  var $i111: i32;
  var $i112: i1;
  var $i113: i32;
  var $i114: i64;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i8;
  var $i123: i32;
  var $i55: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(453, 1));
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    call {:si_unique_call 789} {:cexpr "regs"} boogie_si_record_i8($i3);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i32($i5, 28);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 7);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    call {:si_unique_call 790} {:cexpr "func"} boogie_si_record_i8($i10);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i13 := $lshr.i32($i12, 9);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 131071);
    call {:si_unique_call 791} {:cexpr "reg"} boogie_si_record_i32($i14);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i3);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i15, 1);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    call {:si_unique_call 792} {:cexpr "regs"} boogie_si_record_i8($i17);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i3);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(452, 1));
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.0, $p109);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i32($i110);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i111, 0);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i112 == 1);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i10);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i114 := $sext.i32.i64($i113);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref($i114, 136)), $mul.ref(0, 1));
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.0, $p117);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 0);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i120 == 1);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i10);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i32.i8($i121);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $i123 := examine_cyclic_buffer($p0, $p1, $i122);
    call {:si_unique_call 798} {:cexpr "tmp___0"} boogie_si_record_i32($i123);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i55 := $i123;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $r := $i55;
    return;

  $bb21:
    assume $i120 == 1;
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb13;

  $bb19:
    assume $i112 == 1;
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb13;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i17, 0;
    goto $bb4;

  $bb4:
    call $i22, $i23, $p25, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $p36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i20, $i21 := satisfy_request_from_offloaded_data_loop_$bb4($p0, $i10, $i14, $i22, $i23, $p25, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $p36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i20, $i21);
    goto $bb4_last;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref($i23, 12));
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i27 := $load.i24($M.0, $p26);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i28 := $and.i24($i27, 7);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i24.i8($i28);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i10);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i30, $i31);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i21);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i102 := $add.i32($i101, 1);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i8($i102);
    call {:si_unique_call 793} {:cexpr "i"} boogie_si_record_i8($i103);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i20);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i105 := $sub.i32($i104, 1);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i8($i105);
    call {:si_unique_call 794} {:cexpr "regs"} boogie_si_record_i8($i106);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i20);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i108 == 1);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16:
    assume $i108 == 1;
    assume {:verifier.code 0} true;
    $i20, $i21 := $i106, $i103;
    goto $bb16_dummy;

  $bb6:
    assume $i32 == 1;
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i21);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref($i34, 12));
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i38 := $load.i24($M.0, $p37);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i39 := $lshr.i24($i38, 3);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $i40 := $and.i24($i39, 131071);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i41 := $zext.i24.i32($i40);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, $i14);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i43 := $i21;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb8;

  $bb9:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref($i45, 12));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i49 := $load.i24($M.0, $p48);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i50 := $lshr.i24($i49, 21);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i51 := $and.i24($i50, 1);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i24.i8($i51);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i54 == 1);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i57, 0);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i58 == 1);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i43);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i66);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref($i67, 12)), $mul.ref(4, 1));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    call {:si_unique_call 795} {:cexpr "rsp2"} boogie_si_record_i8($i71);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i43);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i72);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref($i73, 12)), $mul.ref(3, 1));
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p76);
    call {:si_unique_call 796} {:cexpr "rsp3"} boogie_si_record_i8($i77);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i43);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i78);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref($i79, 12));
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i83 := $load.i24($M.0, $p82);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i84 := $and.i24($i83, $sub.i24(0, 2097153));
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i24($M.0, $p82, $i84);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32(0);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i86 := $shl.i32($i85, 24);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(1, 4));
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, $i86);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32(0);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i90 := $shl.i32($i89, 24);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32(0);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i92 := $shl.i32($i91, 16);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i93 := $or.i32($i90, $i92);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i71);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i95 := $shl.i32($i94, 8);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i96 := $or.i32($i93, $i95);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i77);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i98 := $or.i32($i96, $i97);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p100, $i98);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i55 := 1;
    goto $bb13;

  $bb14:
    assume $i58 == 1;
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i43);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i59);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref($i60, 12));
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i64 := $load.i24($M.0, $p63);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $i65 := $and.i24($i64, $sub.i24(0, 2097153));
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i24($M.0, $p63, $i65);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb13;

  $bb11:
    assume $i54 == 1;
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb13;

  $bb16_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5219;
}



const ldv_mutex_unlock_30: ref;

axiom ldv_mutex_unlock_30 == $sub.ref(0, 283118);

procedure ldv_mutex_unlock_30($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_30($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} ldv_mutex_unlock_cmd_mutex($p0);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} mutex_unlock($p0);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;
}



const vub300_queue_cmnd_work: ref;

axiom vub300_queue_cmnd_work == $sub.ref(0, 284150);

procedure vub300_queue_cmnd_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.15, $M.12, $M.13, assertsPassed, $CurrAddr, $M.16;



implementation vub300_queue_cmnd_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $p7: ref;
  var vslice_dummy_var_110: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(16, 1));
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} kref_get($p1);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p2 := $M.26;
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(2768, 1));
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $i4 := queue_work($p2, $p3);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 803} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(16, 1));
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} vslice_dummy_var_110 := kref_put($p7, vub300_delete);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_343:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_31: ref;

axiom ldv_mutex_unlock_31 == $sub.ref(0, 285182);

procedure ldv_mutex_unlock_31($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_31($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} ldv_mutex_unlock_cmd_mutex($p0);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} mutex_unlock($p0);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;
}



const examine_cyclic_buffer: ref;

axiom examine_cyclic_buffer == $sub.ref(0, 286214);

procedure examine_cyclic_buffer($p0: ref, $p1: ref, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation examine_cyclic_buffer($p0: ref, $p1: ref, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $p15: ref;
  var $i16: i32;
  var $i17: i8;
  var $i18: i32;
  var $i19: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i32;
  var $p60: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i32;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i32;
  var $p84: ref;
  var $i85: i32;
  var $i86: i64;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i64;
  var $p96: ref;
  var $i97: i32;
  var $i98: i64;
  var $p101: ref;
  var $i102: i8;
  var $i103: i32;
  var $i104: i32;
  var $i105: i8;
  var $i106: i32;
  var $i107: i64;
  var $p110: ref;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $i114: i32;
  var $i115: i8;
  var $p116: ref;
  var $i118: i32;
  var $i119: i64;
  var $p122: ref;
  var $i123: i8;
  var $i124: i32;
  var $i125: i32;
  var $i126: i8;
  var $i127: i32;
  var $i128: i64;
  var $p131: ref;
  var $i132: i32;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $i139: i32;
  var $i140: i32;
  var $i141: i64;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;
  var $p147: ref;
  var $p149: ref;
  var $i150: i8;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $p155: ref;
  var $i156: i8;
  var $i157: i32;
  var $i158: i32;
  var $i159: i1;
  var $p161: ref;
  var $i162: i8;
  var $i163: i32;
  var $i164: i32;
  var $i165: i1;
  var $p167: ref;
  var $i168: i8;
  var $i169: i32;
  var $i170: i32;
  var $i171: i1;
  var $i172: i32;
  var $p173: ref;
  var $i174: i32;
  var $i175: i32;
  var $p177: ref;
  var $p179: ref;
  var $i180: i8;
  var $i181: i32;
  var $i182: i32;
  var $p184: ref;
  var $i185: i8;
  var $i186: i32;
  var $i187: i32;
  var $i188: i32;
  var $p190: ref;
  var $i191: i8;
  var $i192: i32;
  var $i193: i32;
  var $i194: i32;
  var $p196: ref;
  var $i197: i8;
  var $i198: i32;
  var $i199: i32;
  var $p201: ref;
  var $i202: i32;
  var $i203: i64;
  var $p206: ref;
  var $i207: i32;
  var $i208: i32;
  var $i209: i32;
  var $i210: i64;
  var $p213: ref;
  var $i214: i32;
  var $i215: i64;
  var $p218: ref;
  var $i219: i8;
  var $i220: i32;
  var $i221: i8;
  var $i222: i32;
  var $i223: i32;
  var $i224: i8;
  var $i225: i32;
  var $i226: i64;
  var $p229: ref;
  var $p230: ref;
  var $i231: i8;
  var $i232: i32;
  var $i233: i8;
  var $i234: i32;
  var $i235: i32;
  var $i236: i8;
  var $p237: ref;
  var $i238: i32;
  var $i239: i32;
  var $i240: i32;
  var $i241: i8;
  var $i242: i32;
  var $i243: i32;
  var $i244: i1;
  var $i136: i32;
  var $i137: i8;
  var $i138: i32;
  var $i117: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} {:cexpr "examine_cyclic_buffer:arg:Function"} boogie_si_record_i8($i2);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i4, 24);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    call {:si_unique_call 808} {:cexpr "cmd0"} boogie_si_record_i8($i6);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i32($i8, 16);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    call {:si_unique_call 809} {:cexpr "cmd1"} boogie_si_record_i8($i10);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i13 := $lshr.i32($i12, 8);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    call {:si_unique_call 810} {:cexpr "cmd2"} boogie_si_record_i8($i14);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    call {:si_unique_call 811} {:cexpr "cmd3"} boogie_si_record_i8($i17);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i2);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref($i19, 136)), $mul.ref(4, 1));
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 15);
    call {:si_unique_call 812} {:cexpr "first"} boogie_si_record_i32($i24);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i2);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref($i26, 136)), $mul.ref(8, 1));
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i24);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p30, $mul.ref($i31, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i6);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i36, $i37);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i2);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i118);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref($i119, 136)), $mul.ref(0, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.0, $p122);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i123);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i125 := $add.i32($i124, 255);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i32.i8($i125);
    call {:si_unique_call 813} {:cexpr "register_count"} boogie_si_record_i8($i126);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i2);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i128 := $sext.i32.i64($i127);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref($i128, 136)), $mul.ref(4, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i133 := $add.i32($i132, 1);
    call {:si_unique_call 814} {:cexpr "register_point"} boogie_si_record_i32($i133);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i126);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i117 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $r := $i117;
    return;

  $bb11:
    assume $i135 == 1;
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i136, $i137, $i138 := $i133, $i126, 1;
    goto $bb14;

  $bb14:
    call $i139, $i140, $i141, $p144, $p145, $i146, $p147, $p149, $i150, $i151, $i152, $i153, $p155, $i156, $i157, $i158, $i159, $p161, $i162, $i163, $i164, $i165, $p167, $i168, $i169, $i170, $i171, $i172, $p173, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i136, $i137, $i138 := examine_cyclic_buffer_loop_$bb14($p0, $i2, $i6, $i10, $i14, $i17, $i139, $i140, $i141, $p144, $p145, $i146, $p147, $p149, $i150, $i151, $i152, $i153, $p155, $i156, $i157, $i158, $i159, $p161, $i162, $i163, $i164, $i165, $p167, $i168, $i169, $i170, $i171, $i172, $p173, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i136, $i137, $i138);
    goto $bb14_last;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i139 := $and.i32($i136, 15);
    call {:si_unique_call 815} {:cexpr "point"} boogie_si_record_i32($i139);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i140 := $zext.i8.i32($i2);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i141 := $sext.i32.i64($i140);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref($i141, 136)), $mul.ref(8, 1));
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i146 := $sext.i32.i64($i139);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($p145, $mul.ref($i146, 8));
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p145, $mul.ref($i146, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.0, $p149);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i150);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i32($i6);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i151, $i152);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i153 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i238 := $add.i32($i136, 1);
    call {:si_unique_call 816} {:cexpr "register_point"} boogie_si_record_i32($i238);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i239 := $zext.i8.i32($i137);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i240 := $add.i32($i239, 255);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i241 := $trunc.i32.i8($i240);
    call {:si_unique_call 817} {:cexpr "register_count"} boogie_si_record_i8($i241);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i242 := $add.i32($i138, 1);
    call {:si_unique_call 818} {:cexpr "delta"} boogie_si_record_i32($i242);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $i243 := $zext.i8.i32($i241);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i244 := $ne.i32($i243, 0);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i244 == 1);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb25:
    assume $i244 == 1;
    assume {:verifier.code 0} true;
    $i136, $i137, $i138 := $i238, $i241, $i242;
    goto $bb25_dummy;

  $bb16:
    assume $i153 == 1;
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p145, $mul.ref($i146, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.0, $p155);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i156);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i10);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i157, $i158);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i159 == 1);
    goto $bb18;

  $bb19:
    assume $i159 == 1;
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p145, $mul.ref($i146, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i162 := $load.i8($M.0, $p161);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i163 := $zext.i8.i32($i162);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $i164 := $zext.i8.i32($i14);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i163, $i164);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i165 == 1);
    goto $bb18;

  $bb21:
    assume $i165 == 1;
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p145, $mul.ref($i146, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i168 := $load.i8($M.0, $p167);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i169 := $zext.i8.i32($i168);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i170 := $zext.i8.i32($i17);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i169, $i170);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i172, $p173 := $i138, $p147;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i171 == 1);
    goto $bb18;

  $bb23:
    assume $i171 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i174 := $zext.i8.i32(0);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i175 := $shl.i32($i174, 24);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(1, 4));
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p177, $i175);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p173, $mul.ref(0, 8)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i180 := $load.i8($M.0, $p179);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i181 := $zext.i8.i32($i180);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i182 := $shl.i32($i181, 24);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($p173, $mul.ref(0, 8)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.0, $p184);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i32($i185);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i187 := $shl.i32($i186, 16);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i188 := $or.i32($i182, $i187);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p173, $mul.ref(0, 8)), $mul.ref(4, 1)), $mul.ref(2, 1));
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $i191 := $load.i8($M.0, $p190);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i192 := $zext.i8.i32($i191);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i193 := $shl.i32($i192, 8);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i194 := $or.i32($i188, $i193);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($p173, $mul.ref(0, 8)), $mul.ref(4, 1)), $mul.ref(3, 1));
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i197 := $load.i8($M.0, $p196);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i198 := $zext.i8.i32($i197);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i199 := $or.i32($i194, $i198);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p201, $i199);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $i202 := $zext.i8.i32($i2);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i203 := $sext.i32.i64($i202);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref($i203, 136)), $mul.ref(4, 1));
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i207 := $load.i32($M.0, $p206);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i208 := $add.i32($i207, $i172);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i209 := $zext.i8.i32($i2);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i210 := $sext.i32.i64($i209);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref($i210, 136)), $mul.ref(4, 1));
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p213, $i208);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i214 := $zext.i8.i32($i2);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i215 := $sext.i32.i64($i214);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref($i215, 136)), $mul.ref(0, 1));
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i219 := $load.i8($M.0, $p218);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i220 := $zext.i8.i32($i219);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i221 := $trunc.i32.i8($i172);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i32($i221);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $i223 := $sub.i32($i220, $i222);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i224 := $trunc.i32.i8($i223);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i225 := $zext.i8.i32($i2);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i226 := $sext.i32.i64($i225);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref($i226, 136)), $mul.ref(0, 1));
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p229, $i224);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(452, 1));
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i231 := $load.i8($M.0, $p230);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i232 := $zext.i8.i32($i231);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i233 := $trunc.i32.i8($i172);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i234 := $zext.i8.i32($i233);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i235 := $sub.i32($i232, $i234);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i236 := $trunc.i32.i8($i235);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(452, 1));
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p237, $i236);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i117 := 1;
    goto $bb10;

  $bb1:
    assume $i38 == 1;
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p30, $mul.ref($i31, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i10);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i42, $i43);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb3;

  $bb4:
    assume $i44 == 1;
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p30, $mul.ref($i31, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i14);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i48, $i49);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb3;

  $bb6:
    assume $i50 == 1;
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p30, $mul.ref($i31, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i17);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i54, $i55);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb3;

  $bb8:
    assume $i56 == 1;
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32(0);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i58 := $shl.i32($i57, 24);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(1, 4));
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i58);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p30, $mul.ref($i31, 8)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i65 := $shl.i32($i64, 24);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p30, $mul.ref($i31, 8)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i70 := $shl.i32($i69, 16);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i71 := $or.i32($i65, $i70);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p30, $mul.ref($i31, 8)), $mul.ref(4, 1)), $mul.ref(2, 1));
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i76 := $shl.i32($i75, 8);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i77 := $or.i32($i71, $i76);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p30, $mul.ref($i31, 8)), $mul.ref(4, 1)), $mul.ref(3, 1));
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $i82 := $or.i32($i77, $i81);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, $i82);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i2);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i85);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref($i86, 136)), $mul.ref(4, 1));
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i90, 1);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i2);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i92);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref($i93, 136)), $mul.ref(4, 1));
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, $i91);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i2);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64($i97);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref($i98, 136)), $mul.ref(0, 1));
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.0, $p101);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i103, 255);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i32.i8($i104);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i2);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i107 := $sext.i32.i64($i106);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref($i107, 136)), $mul.ref(0, 1));
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p110, $i105);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(452, 1));
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.0, $p111);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i113, 255);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i8($i114);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 3160)), $mul.ref(452, 1));
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p116, $i115);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i117 := 1;
    goto $bb10;

  $bb25_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5487;
}



const main: ref;

axiom main == $sub.ref(0, 287246);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.11, $M.6, $M.4, $M.3, $M.2, $M.1, $M.44, $M.45, $M.10, $M.14, $M.26, $M.19, $M.5, $M.16, $M.30, $M.15, $M.29, $M.8, $M.46, $M.47, $M.48, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $M.12, $M.13;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i19: i32;
  var $i3: i32;
  var $i46: i32;
  var $i47: i1;
  var $i48: i1;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;

  $bb0:
    call {:si_unique_call 819} $initialize();
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} ldv_initialize();
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} ldv_handler_precall();
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $i1 := vub300_init();
    call {:si_unique_call 826} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb5;

  $bb5:
    call $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i21, $i22, $i23, $i24, $i25, $i26, $p27, $i28, $i30, $i31, $i32, $i34, $i35, $i36, $i38, $i39, $i40, $i42, $i43, $i44, $i45, $i19, $i3, $i46, $i47, $i48, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115 := main_loop_$bb5($p0, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i21, $i22, $i23, $i24, $i25, $i26, $p27, $i28, $i30, $i31, $i32, $i34, $i35, $i36, $i38, $i39, $i40, $i42, $i43, $i44, $i45, $i19, $i3, $i46, $i47, $i48, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115);
    goto $bb5_last;

  corral_source_split_5602:
    assume {:verifier.code 1} true;
    call {:si_unique_call 828} $i46 := __VERIFIER_nondet_int();
    call {:si_unique_call 829} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i46);
    call {:si_unique_call 830} {:cexpr "tmp___1"} boogie_si_record_i32($i46);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb63;

  $bb63:
    assume !($i47 == 1);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i3, 0);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} ldv_handler_precall();
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} vub300_exit();
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} ldv_check_final_state();
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 831} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 832} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 833} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i4, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i4, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i4, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i19 := $i3;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i3 := $i19;
    goto corral_source_split_5652_dummy;

  $bb16:
    assume $i9 == 1;
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} ldv_handler_precall();
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} vub300_inactivity_timer_expired($u7);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i19 := $i3;
    goto $bb37;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i8 == 1;
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} ldv_handler_precall();
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} vub300_sg_timed_out($u7);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i19 := $i3;
    goto $bb37;

  $bb12:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i4, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i10 == 1);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i3, 5);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $i3;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i19 := $i45;
    goto $bb37;

  $bb57:
    assume $i44 == 1;
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} ldv_handler_precall();
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} vub300_disconnect($u5);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb59;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i10 == 1;
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i3, 4);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i43 := $i3;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i19 := $i43;
    goto $bb37;

  $bb54:
    assume $i40 == 1;
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} ldv_handler_precall();
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} vslice_dummy_var_115 := vub300_post_reset($u5);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i3, 1);
    call {:si_unique_call 866} {:cexpr "ldv_s_vub300_driver_usb_driver"} boogie_si_record_i32($i42);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb56;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i4, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i12 == 1);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i3, 3);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i39 := $i3;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i19 := $i39;
    goto $bb37;

  $bb51:
    assume $i36 == 1;
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} ldv_handler_precall();
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} vslice_dummy_var_114 := vub300_pre_reset($u5);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i3, 1);
    call {:si_unique_call 863} {:cexpr "ldv_s_vub300_driver_usb_driver"} boogie_si_record_i32($i38);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb53;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i12 == 1;
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i3, 2);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i35 := $i3;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i19 := $i35;
    goto $bb37;

  $bb48:
    assume $i32 == 1;
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} ldv_handler_precall();
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} vslice_dummy_var_113 := vub300_resume($u5);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i3, 1);
    call {:si_unique_call 860} {:cexpr "ldv_s_vub300_driver_usb_driver"} boogie_si_record_i32($i34);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb50;

  $bb21:
    assume $i11 == 1;
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i3, 1);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i31 := $i3;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i19 := $i31;
    goto $bb37;

  $bb45:
    assume $i26 == 1;
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} ldv_handler_precall();
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.28, $p27);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} vslice_dummy_var_112 := vub300_suspend($u5, $i28);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i3, 1);
    call {:si_unique_call 857} {:cexpr "ldv_s_vub300_driver_usb_driver"} boogie_si_record_i32($i30);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb47;

  $bb8:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i4, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i4, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i15 == 1);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i3, 0);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i25 := $i3;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i19 := $i25;
    goto $bb37;

  $bb38:
    assume $i21 == 1;
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $i22 := vub300_probe($u5, $u6);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    call {:si_unique_call 849} {:cexpr "res_vub300_probe_40"} boogie_si_record_i32($i22);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} ldv_check_return_value($i22);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} ldv_check_return_value_probe($i22);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i3, 1);
    call {:si_unique_call 854} {:cexpr "ldv_s_vub300_driver_usb_driver"} boogie_si_record_i32($i24);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb44;

  $bb40:
    assume $i23 == 1;
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    goto $bb42;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i15 == 1;
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} ldv_handler_precall();
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} vub300_init_card($u0, $u4);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i19 := $i3;
    goto $bb37;

  $bb27:
    assume $i14 == 1;
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} ldv_handler_precall();
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} vub300_enable_sdio_irq($u0, $u3);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i19 := $i3;
    goto $bb37;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i17 == 1);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} ldv_handler_precall();
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} vslice_dummy_var_111 := vub300_mmc_get_ro($u0);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $i19 := $i3;
    goto $bb37;

  $bb33:
    assume $i17 == 1;
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} ldv_handler_precall();
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} vub300_mmc_set_ios($u0, $u2);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i19 := $i3;
    goto $bb37;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb18;

  $bb35:
    assume $i18 == 1;
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} ldv_handler_precall();
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} vub300_mmc_request($u0, $u1);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i19 := $i3;
    goto $bb37;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb62;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_5652_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5602;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 288278);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.8, $M.29, $M.15, $M.30, $M.16;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 869} {:cexpr "ldv_mutex_cmd_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 870} {:cexpr "ldv_mutex_cred_guard_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 871} {:cexpr "ldv_mutex_irq_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 872} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 873} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    return;
}



const ldv_handler_precall: ref;

axiom ldv_handler_precall == $sub.ref(0, 289310);

procedure ldv_handler_precall();
  free requires assertsPassed;



implementation ldv_handler_precall()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    return;
}



const vub300_init: ref;

axiom vub300_init == $sub.ref(0, 290342);

procedure vub300_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.14, $M.10, $CurrAddr;



implementation vub300_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i25: i32;
  var $i26: i1;
  var $p29: ref;
  var $i24: i32;
  var $p30: ref;
  var $i18: i32;
  var $p31: ref;
  var $i12: i32;
  var $i28: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i3 := $M.5;
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $i4 := $M.19;
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 65535);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} vslice_dummy_var_116 := printk.ref.i32.i32(.str.1, $i3, $i5);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $p7 := __alloc_workqueue_key.ref.i32.i32.ref.ref(.str.2, 10, 1, $p0, .str.2);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $M.26 := $p7;
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $p8 := $M.26;
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $p13 := __alloc_workqueue_key.ref.i32.i32.ref.ref(.str.4, 10, 1, $p1, .str.4);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $M.14 := $p13;
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $p14 := $M.14;
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $p19 := __alloc_workqueue_key.ref.i32.i32.ref.ref(.str.6, 10, 1, $p2, .str.6);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $M.10 := $p19;
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $p20 := $M.10;
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $i25 := usb_register_driver(vub300_driver, __this_module, .str.8);
    call {:si_unique_call 887} {:cexpr "result"} boogie_si_record_i32($i25);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} vslice_dummy_var_120 := printk.ref.i32(.str.9, $i25);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p29 := $M.10;
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} destroy_workqueue($p29);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i24 := $i25;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $p30 := $M.14;
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} destroy_workqueue($p30);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i18 := $i24;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $p31 := $M.26;
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} destroy_workqueue($p31);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i12 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i28 := $i12;
    goto $bb17;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} vslice_dummy_var_119 := printk.ref(.str.7);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 12);
    goto $bb11;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} vslice_dummy_var_118 := printk.ref(.str.5);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} vslice_dummy_var_117 := printk.ref(.str.3);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb3;
}



const ldv_check_return_value: ref;

axiom ldv_check_return_value == $sub.ref(0, 291374);

procedure ldv_check_return_value($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} {:cexpr "ldv_check_return_value:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_return_value_probe: ref;

axiom ldv_check_return_value_probe == $sub.ref(0, 292406);

procedure ldv_check_return_value_probe($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value_probe($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} {:cexpr "ldv_check_return_value_probe:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    return;
}



const vub300_exit: ref;

axiom vub300_exit == $sub.ref(0, 293438);

procedure vub300_exit();
  free requires assertsPassed;



implementation vub300_exit()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} usb_deregister(vub300_driver);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $p0 := $M.26;
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} flush_workqueue($p0);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $p1 := $M.14;
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} flush_workqueue($p1);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p2 := $M.10;
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} flush_workqueue($p2);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p3 := $M.26;
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} destroy_workqueue($p3);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $p4 := $M.14;
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} destroy_workqueue($p4);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $p5 := $M.10;
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} destroy_workqueue($p5);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 294470);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i0 := $M.8;
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} ldv_error();
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.29;
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} ldv_error();
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.15;
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} ldv_error();
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.30;
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} ldv_error();
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $M.16;
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} ldv_error();
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 295502);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    return;
}



const flush_workqueue: ref;

axiom flush_workqueue == $sub.ref(0, 296534);

procedure flush_workqueue($p0: ref);
  free requires assertsPassed;



implementation flush_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 297566);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    return;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 298598);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 905} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $p5 := external_alloc();
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 299630);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 1} true;
    call {:si_unique_call 907} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 908} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 300662);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 909} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 1} true;
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 301694);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 302726);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 303758);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 304790);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 305822);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 306854);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 307886);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 308918);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 309950);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 310982);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 312014);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 313046);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 314078);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 1} true;
    call {:si_unique_call 910} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 911} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 912} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 1} true;
    call {:si_unique_call 913} __VERIFIER_assume($i4);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 315110);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 316142);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 317174);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 318206);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 319238);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 320270);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 321302);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 322334);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 323366);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 1} true;
    call {:si_unique_call 914} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 915} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 916} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 1} true;
    call {:si_unique_call 917} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 918} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 919} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 1} true;
    call {:si_unique_call 920} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 921} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 922} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 1} true;
    call {:si_unique_call 923} __VERIFIER_assume($i7);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 1} true;
    call {:si_unique_call 924} __VERIFIER_assume($i11);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 324398);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 325430);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 326462);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 327494);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 328526);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 329558);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 330590);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 331622);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 332654);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 1} true;
    call {:si_unique_call 925} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 926} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 927} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 1} true;
    call {:si_unique_call 928} __VERIFIER_assume($i10);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 333686);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 1} true;
    call {:si_unique_call 929} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 930} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 931} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 334718);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 1} true;
    call {:si_unique_call 932} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 933} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 335750);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 336782);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 934} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 935} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 337814);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 338846);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 339878);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 340910);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.11, $M.6, $M.0, $M.4, $M.3, $M.2, $M.1, $M.44, $M.45, $M.10, $M.14, $M.26, $M.19, $M.5, $M.16, $M.30, $M.15, $M.29, $M.8, $M.46, $M.47, $M.48;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 936} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
    $M.11 := 0;
    call {:si_unique_call 937} {:cexpr "disable_offload_processing"} boogie_si_record_i8(0);
    $M.6 := 0;
    call {:si_unique_call 938} {:cexpr "pad_input_to_usb_pkt"} boogie_si_record_i8(0);
    $M.0 := $store.ref($M.0, vub300_mmc_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vub300_mmc_ops, $mul.ref(0, 128)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vub300_mmc_ops, $mul.ref(0, 128)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vub300_mmc_ops, $mul.ref(0, 128)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vub300_mmc_ops, $mul.ref(0, 128)), $mul.ref(32, 1)), vub300_mmc_request);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vub300_mmc_ops, $mul.ref(0, 128)), $mul.ref(40, 1)), vub300_mmc_set_ios);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vub300_mmc_ops, $mul.ref(0, 128)), $mul.ref(48, 1)), vub300_mmc_get_ro);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vub300_mmc_ops, $mul.ref(0, 128)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vub300_mmc_ops, $mul.ref(0, 128)), $mul.ref(64, 1)), vub300_enable_sdio_irq);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vub300_mmc_ops, $mul.ref(0, 128)), $mul.ref(72, 1)), vub300_init_card);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vub300_mmc_ops, $mul.ref(0, 128)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vub300_mmc_ops, $mul.ref(0, 128)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vub300_mmc_ops, $mul.ref(0, 128)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vub300_mmc_ops, $mul.ref(0, 128)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vub300_mmc_ops, $mul.ref(0, 128)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vub300_mmc_ops, $mul.ref(0, 128)), $mul.ref(120, 1)), $0.ref);
    $M.4 := 128;
    call {:si_unique_call 939} {:cexpr "force_max_req_size"} boogie_si_record_i32(128);
    $M.3 := 0;
    call {:si_unique_call 940} {:cexpr "limit_speed_to_24_MHz"} boogie_si_record_i8(0);
    $M.2 := 0;
    call {:si_unique_call 941} {:cexpr "force_polling_for_irqs"} boogie_si_record_i8(0);
    $M.1 := 0;
    call {:si_unique_call 942} {:cexpr "force_1_bit_data_xfers"} boogie_si_record_i8(0);
    $M.44 := $store.i16($M.44, vub300_table, 3);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(2, 1)), 8705);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 300);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.44 := $store.i64($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(2, 1)), 1060);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 300);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.44 := $store.i64($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(2, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.44 := $store.i64($M.44, $add.ref($add.ref($add.ref(vub300_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.45 := $store.ref($M.45, vub300_driver, .str.8);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), vub300_probe);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), vub300_disconnect);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), vub300_suspend);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), vub300_resume);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), vub300_pre_reset);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), vub300_post_reset);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), vub300_table);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.45 := $store.i64($M.45, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(vub300_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 2);
    $M.10 := $0.ref;
    $M.14 := $0.ref;
    $M.26 := $0.ref;
    $M.19 := 1024;
    call {:si_unique_call 943} {:cexpr "firmware_irqpoll_timeout"} boogie_si_record_i32(1024);
    $M.5 := 28;
    call {:si_unique_call 944} {:cexpr "firmware_rom_wait_states"} boogie_si_record_i32(28);
    $M.16 := 0;
    call {:si_unique_call 945} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(0);
    $M.30 := 0;
    call {:si_unique_call 946} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(0);
    $M.15 := 0;
    call {:si_unique_call 947} {:cexpr "ldv_mutex_irq_mutex"} boogie_si_record_i32(0);
    $M.29 := 0;
    call {:si_unique_call 948} {:cexpr "ldv_mutex_cred_guard_mutex"} boogie_si_record_i32(0);
    $M.8 := 0;
    call {:si_unique_call 949} {:cexpr "ldv_mutex_cmd_mutex"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, .str.51, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(2, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(4, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(6, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(15, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(17, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(21, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(22, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(24, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.53, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(8, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(12, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.46 := $store.i8($M.46, .str.54, 118);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(1, 1)), 117);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(2, 1)), 98);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(4, 1)), 37);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(5, 1)), 48);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(6, 1)), 52);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(7, 1)), 88);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(8, 1)), 37);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(9, 1)), 48);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(10, 1)), 52);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(11, 1)), 88);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.47 := $store.i8($M.47, .str.55, 95);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.55, $mul.ref(0, 10)), $mul.ref(1, 1)), 37);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.55, $mul.ref(0, 10)), $mul.ref(2, 1)), 48);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.55, $mul.ref(0, 10)), $mul.ref(3, 1)), 52);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.55, $mul.ref(0, 10)), $mul.ref(4, 1)), 88);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.55, $mul.ref(0, 10)), $mul.ref(5, 1)), 37);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.55, $mul.ref(0, 10)), $mul.ref(6, 1)), 48);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.55, $mul.ref(0, 10)), $mul.ref(7, 1)), 52);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.55, $mul.ref(0, 10)), $mul.ref(8, 1)), 88);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.55, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.48 := $store.i8($M.48, .str.56, 46);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.56, $mul.ref(0, 5)), $mul.ref(1, 1)), 98);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.56, $mul.ref(0, 5)), $mul.ref(2, 1)), 105);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.56, $mul.ref(0, 5)), $mul.ref(3, 1)), 110);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.56, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.58, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 16)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 16)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 16)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 16)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 16)), $mul.ref(6, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 16)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 16)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 16)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 16)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 16)), $mul.ref(11, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 16)), $mul.ref(12, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 16)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 16)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.59, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(3, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(4, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(5, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(6, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(9, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(10, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(16, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(19, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(20, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(22, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(24, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(25, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(26, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(27, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(28, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(29, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, .str.63, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(9, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(10, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(19, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(20, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(23, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(24, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(25, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, .str.64, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(2, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(3, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(13, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(18, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(20, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(22, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(23, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(24, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(25, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(26, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(27, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(28, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(29, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(30, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, .str.66, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(2, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(3, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(18, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(21, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(22, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(23, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(24, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(25, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(26, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(27, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(28, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(29, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(30, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(31, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(32, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(33, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(34, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(35, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(36, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(37, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(38, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(39, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(40, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 42)), $mul.ref(41, 1)), 0);
    $M.0 := $store.i8($M.0, .str.68, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(18, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(21, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(22, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(23, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(24, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(25, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(26, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, .str.70, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(2, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(3, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(10, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(17, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(19, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(20, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(22, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(24, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(25, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(26, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(27, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(28, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(29, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(30, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(31, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(32, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(33, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(34, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(35, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(36, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(37, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(38, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(39, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 41)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, .str.72, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(13, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(17, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(20, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(21, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(22, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(23, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(24, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(25, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(26, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, .str.75, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(9, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(18, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(19, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(23, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(24, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    call {:si_unique_call 950} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 341942);

procedure devirtbounce(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.15, $M.12, $M.13, assertsPassed, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.16;



implementation devirtbounce(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i19 := $eq.ref(irqpoll_res_completed, $p0);
    assume {:branchcond $i19} true;
    goto $bb11, $bb21;

  $bb21:
    assume !($i19 == 1);
    $i18 := $eq.ref(irqpoll_out_completed, $p0);
    assume true;
    goto $bb10, $bb20;

  $bb20:
    assume !($i18 == 1);
    $i17 := $eq.ref(command_res_completed, $p0);
    assume true;
    goto $bb9, $bb19;

  $bb19:
    assume !($i17 == 1);
    $i16 := $eq.ref(command_out_completed, $p0);
    assume true;
    goto $bb8, $bb18;

  $bb18:
    assume !($i16 == 1);
    $i15 := $eq.ref(vub300_usb_bulk_msg_completion, $p0);
    assume true;
    goto $bb7, $bb17;

  $bb17:
    assume !($i15 == 1);
    $i14 := $eq.ref(vub300_deadwork_thread, $p0);
    assume true;
    goto $bb6, $bb16;

  $bb16:
    assume !($i14 == 1);
    $i13 := $eq.ref(vub300_cmndwork_thread, $p0);
    assume true;
    goto $bb5, $bb15;

  $bb15:
    assume !($i13 == 1);
    $i12 := $eq.ref(vub300_pollwork_thread, $p0);
    assume true;
    goto $bb4, $bb14;

  $bb14:
    assume !($i12 == 1);
    $i11 := $eq.ref(vub300_delete, $p0);
    assume true;
    goto $bb3, $bb13;

  $bb13:
    assume !($i11 == 1);
    $i10 := $eq.ref(vub300_disconnect, $p0);
    assume true;
    goto $bb2, $bb12;

  $bb12:
    assume !($i10 == 1);
    assume false;
    return;

  $bb2:
    assume $i10 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 951} vub300_disconnect($p1);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i11 == 1;
    call {:si_unique_call 952} vub300_delete(arg);
    return;

  $bb4:
    assume $i12 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 953} vub300_pollwork_thread($p2);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 954} vub300_cmndwork_thread($p3);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i14 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 955} vub300_deadwork_thread($p4);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i15 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 956} vub300_usb_bulk_msg_completion($p5);
    return;

  $bb8:
    assume $i16 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 957} command_out_completed($p6);
    return;

  $bb9:
    assume $i17 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 958} command_res_completed($p7);
    return;

  $bb10:
    assume $i18 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 959} irqpoll_out_completed($p8);
    return;

  $bb11:
    assume $i19 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 960} irqpoll_res_completed($p9);
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 342974);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 344006);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $M.15, $M.12, $M.13, $CurrAddr, $M.16;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(vub300_init_card, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i9 == 1);
    $i8 := $eq.ref(vub300_mmc_set_ios, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i8 == 1);
    $i7 := $eq.ref(vub300_mmc_request, $p0);
    assume true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 961} vub300_mmc_request($p1, $p2);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 962} vub300_mmc_set_ios($p3, $p4);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i9 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 963} vub300_init_card($p5, $p6);
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 345038);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, assertsPassed, $M.8, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.12, $M.13, $CurrAddr, $M.16;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(vub300_enable_sdio_irq, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 964} vub300_enable_sdio_irq(arg, arg1);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: ref;

const $u1: ref;

const $u2: ref;

const $u3: i32;

const $u4: ref;

const $u5: ref;

const $u6: ref;

const $u7: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.11, $M.6, $M.0, $M.4, $M.3, $M.2, $M.1, $M.44, $M.45, $M.10, $M.14, $M.26, $M.19, $M.5, $M.16, $M.30, $M.15, $M.29, $M.8, $M.46, $M.47, $M.48, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 965} __SMACK_static_init();
    call {:si_unique_call 966} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $M.7, $M.11, $M.6, $M.4, $M.3, $M.2, $M.1, $M.44, $M.45, $M.10, $M.14, $M.26, $M.19, $M.5, $M.16, $M.30, $M.15, $M.29, $M.8, $M.46, $M.47, $M.48, $CurrAddr, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.12, $M.13;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation vub300_probe_loop_$bb40(in_$p191: ref, in_$p237: ref, in_$p239: ref, in_$p244: ref, in_$p245: ref, in_$i246: i64, in_$p248: ref, in_$i249: i32, in_$i250: i1, in_$i251: i32, in_$i252: i1, in_$p253: ref, in_$p254: ref, in_$p255: ref, in_$p256: ref, in_$p257: ref, in_$p258: ref, in_$i259: i8, in_$i260: i32, in_$p262: ref, in_$i263: i16, in_$i264: i32, in_$i265: i1, in_$p266: ref, in_$i267: i32, in_$i268: i1, in_$p269: ref, in_$i270: i8, in_$i271: i32, in_$i272: i1, in_$p273: ref, in_$i274: i8, in_$p275: ref, in_$p276: ref, in_$i277: i8, in_$i278: i32, in_$i279: i1, in_$p280: ref, in_$i281: i8, in_$p282: ref, in_$p283: ref, in_$p284: ref, in_$p285: ref, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$i290: i8, in_$i291: i32, in_$i292: i1, in_$p293: ref, in_$i294: i8, in_$p295: ref, in_$p296: ref, in_$i297: i8, in_$i298: i32, in_$i299: i1, in_$p300: ref, in_$i301: i8, in_$p302: ref, in_$p303: ref, in_$p304: ref, in_$p305: ref, in_$p307: ref, in_$p308: ref, in_$p309: ref, in_$p310: ref, in_$i311: i8, in_$i312: i32, in_$i314: i32, in_$i315: i8, in_$i316: i32, in_$i317: i1, in_$i243: i32, in_vslice_dummy_var_40: i32, in_vslice_dummy_var_41: i32, in_vslice_dummy_var_42: i32, in_vslice_dummy_var_43: i32) returns (out_$p244: ref, out_$p245: ref, out_$i246: i64, out_$p248: ref, out_$i249: i32, out_$i250: i1, out_$i251: i32, out_$i252: i1, out_$p253: ref, out_$p254: ref, out_$p255: ref, out_$p256: ref, out_$p257: ref, out_$p258: ref, out_$i259: i8, out_$i260: i32, out_$p262: ref, out_$i263: i16, out_$i264: i32, out_$i265: i1, out_$p266: ref, out_$i267: i32, out_$i268: i1, out_$p269: ref, out_$i270: i8, out_$i271: i32, out_$i272: i1, out_$p273: ref, out_$i274: i8, out_$p275: ref, out_$p276: ref, out_$i277: i8, out_$i278: i32, out_$i279: i1, out_$p280: ref, out_$i281: i8, out_$p282: ref, out_$p283: ref, out_$p284: ref, out_$p285: ref, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$i290: i8, out_$i291: i32, out_$i292: i1, out_$p293: ref, out_$i294: i8, out_$p295: ref, out_$p296: ref, out_$i297: i8, out_$i298: i32, out_$i299: i1, out_$p300: ref, out_$i301: i8, out_$p302: ref, out_$p303: ref, out_$p304: ref, out_$p305: ref, out_$p307: ref, out_$p308: ref, out_$p309: ref, out_$p310: ref, out_$i311: i8, out_$i312: i32, out_$i314: i32, out_$i315: i8, out_$i316: i32, out_$i317: i1, out_$i243: i32, out_vslice_dummy_var_40: i32, out_vslice_dummy_var_41: i32, out_vslice_dummy_var_42: i32, out_vslice_dummy_var_43: i32)
{

  entry:
    out_$p244, out_$p245, out_$i246, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$p253, out_$p254, out_$p255, out_$p256, out_$p257, out_$p258, out_$i259, out_$i260, out_$p262, out_$i263, out_$i264, out_$i265, out_$p266, out_$i267, out_$i268, out_$p269, out_$i270, out_$i271, out_$i272, out_$p273, out_$i274, out_$p275, out_$p276, out_$i277, out_$i278, out_$i279, out_$p280, out_$i281, out_$p282, out_$p283, out_$p284, out_$p285, out_$i287, out_$i288, out_$p289, out_$i290, out_$i291, out_$i292, out_$p293, out_$i294, out_$p295, out_$p296, out_$i297, out_$i298, out_$i299, out_$p300, out_$i301, out_$p302, out_$p303, out_$p304, out_$p305, out_$p307, out_$p308, out_$p309, out_$p310, out_$i311, out_$i312, out_$i314, out_$i315, out_$i316, out_$i317, out_$i243, out_vslice_dummy_var_40, out_vslice_dummy_var_41, out_vslice_dummy_var_42, out_vslice_dummy_var_43 := in_$p244, in_$p245, in_$i246, in_$p248, in_$i249, in_$i250, in_$i251, in_$i252, in_$p253, in_$p254, in_$p255, in_$p256, in_$p257, in_$p258, in_$i259, in_$i260, in_$p262, in_$i263, in_$i264, in_$i265, in_$p266, in_$i267, in_$i268, in_$p269, in_$i270, in_$i271, in_$i272, in_$p273, in_$i274, in_$p275, in_$p276, in_$i277, in_$i278, in_$i279, in_$p280, in_$i281, in_$p282, in_$p283, in_$p284, in_$p285, in_$i287, in_$i288, in_$p289, in_$i290, in_$i291, in_$i292, in_$p293, in_$i294, in_$p295, in_$p296, in_$i297, in_$i298, in_$i299, in_$p300, in_$i301, in_$p302, in_$p303, in_$p304, in_$p305, in_$p307, in_$p308, in_$p309, in_$p310, in_$i311, in_$i312, in_$i314, in_$i315, in_$i316, in_$i317, in_$i243, in_vslice_dummy_var_40, in_vslice_dummy_var_41, in_vslice_dummy_var_42, in_vslice_dummy_var_43;
    goto $bb40, exit;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_336;

  $bb66:
    assume out_$i317 == 1;
    assume {:verifier.code 0} true;
    out_$i243 := out_$i314;
    goto $bb66_dummy;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    out_$i317 := $sgt.i32(out_$i316, out_$i314);
    goto corral_source_split_403;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    out_$i316 := $zext.i8.i32(out_$i315);
    goto corral_source_split_402;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    out_$i315 := $load.i8($M.0, in_$p239);
    goto corral_source_split_401;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i314 := $add.i32(out_$i243, 1);
    call {:si_unique_call 43} {:cexpr "i"} boogie_si_record_i32(out_$i314);
    goto corral_source_split_400;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p275, out_$i274);
    goto corral_source_split_382;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    out_$p275 := $add.ref($add.ref(in_$p191, $mul.ref(0, 3160)), $mul.ref(441, 1));
    goto corral_source_split_381;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    out_$i274 := $load.i8($M.0, out_$p273);
    goto corral_source_split_380;

  $bb50:
    assume out_$i272 == 1;
    out_$p273 := $add.ref($add.ref($add.ref(out_$p245, $mul.ref(out_$i246, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_379;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    out_$i272 := $eq.i32(out_$i271, 0);
    goto corral_source_split_373;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    out_$i271 := $zext.i8.i32(out_$i270);
    goto corral_source_split_372;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    out_$i270 := $load.i8($M.0, out_$p269);
    goto corral_source_split_371;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    out_$p269 := $add.ref($add.ref(in_$p191, $mul.ref(0, 3160)), $mul.ref(441, 1));
    goto corral_source_split_370;

  $bb48:
    assume out_$i268 == 1;
    goto corral_source_split_369;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    out_$i268 := $ne.i32(out_$i267, 0);
    goto corral_source_split_367;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} out_$i267 := usb_endpoint_is_bulk_in(out_$p248);
    call {:si_unique_call 39} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i267);
    goto corral_source_split_366;

  $bb46:
    assume !(out_$i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p266, 1);
    goto corral_source_split_364;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    out_$p266 := $add.ref($add.ref(in_$p191, $mul.ref(0, 3160)), $mul.ref(447, 1));
    goto corral_source_split_363;

  $bb45:
    assume out_$i265 == 1;
    goto corral_source_split_362;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    out_$i265 := $ugt.i32(out_$i264, 64);
    goto corral_source_split_360;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    out_$i264 := $zext.i16.i32(out_$i263);
    goto corral_source_split_359;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    out_$i263 := $load.i16($M.0, out_$p262);
    goto corral_source_split_358;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} out_vslice_dummy_var_40 := _dev_info.ref.ref.ref.i32.i32(out_$p257, .str.25, out_$p254, out_$i243, out_$i260);
    out_$p262 := $add.ref($add.ref($add.ref(out_$p245, $mul.ref(out_$i246, 64)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_357;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    out_$i260 := $zext.i8.i32(out_$i259);
    goto corral_source_split_356;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    out_$i259 := $load.i8($M.0, out_$p258);
    goto corral_source_split_355;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    out_$p257 := $add.ref($add.ref(out_$p256, $mul.ref(0, 1744)), $mul.ref(136, 1));
    out_$p258 := $add.ref($add.ref($add.ref(out_$p245, $mul.ref(out_$i246, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_354;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    out_$p256 := $load.ref($M.0, out_$p255);
    goto corral_source_split_353;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    out_$p255 := $add.ref($add.ref(in_$p191, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_352;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_351;

  $bb43:
    assume !(out_$i250 == 1);
    assume {:verifier.code 0} true;
    out_$p254 := .str.24;
    goto $bb44;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    out_$p254 := out_$p253;
    goto $bb44;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    out_$p253 := (if out_$i252 == 1 then .str.22 else .str.23);
    goto corral_source_split_349;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    out_$i252 := $ne.i32(out_$i251, 0);
    goto corral_source_split_348;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} out_$i251 := usb_endpoint_is_bulk_out(out_$p248);
    call {:si_unique_call 36} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i251);
    goto corral_source_split_347;

  $bb42:
    assume out_$i250 == 1;
    goto corral_source_split_346;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    out_$i250 := $eq.i32(out_$i249, 0);
    goto corral_source_split_344;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} out_$i249 := usb_endpoint_is_bulk_in(out_$p248);
    call {:si_unique_call 34} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i249);
    goto corral_source_split_343;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    out_$p248 := $add.ref($add.ref(out_$p245, $mul.ref(out_$i246, 64)), $mul.ref(0, 1));
    goto corral_source_split_342;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    goto corral_source_split_341;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    out_$i246 := $sext.i32.i64(out_$i243);
    goto corral_source_split_340;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    out_$p245 := $load.ref($M.0, out_$p244);
    goto corral_source_split_339;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p244 := $add.ref($add.ref(in_$p237, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_338;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} out_vslice_dummy_var_41 := dev_warn.ref.ref(out_$p285, .str.26);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p282, out_$i281);
    goto corral_source_split_393;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    out_$p282 := $add.ref($add.ref(in_$p191, $mul.ref(0, 3160)), $mul.ref(443, 1));
    goto corral_source_split_392;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    out_$i281 := $load.i8($M.0, out_$p280);
    goto corral_source_split_391;

  $bb53:
    assume out_$i279 == 1;
    out_$p280 := $add.ref($add.ref($add.ref(out_$p245, $mul.ref(out_$i246, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_390;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    out_$i279 := $eq.i32(out_$i278, 0);
    goto corral_source_split_388;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    out_$i278 := $zext.i8.i32(out_$i277);
    goto corral_source_split_387;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    out_$i277 := $load.i8($M.0, out_$p276);
    goto corral_source_split_386;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    out_$p276 := $add.ref($add.ref(in_$p191, $mul.ref(0, 3160)), $mul.ref(443, 1));
    goto corral_source_split_385;

  $bb51:
    assume !(out_$i272 == 1);
    goto corral_source_split_384;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    out_$p285 := $add.ref($add.ref(out_$p284, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_398;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    out_$p284 := $load.ref($M.0, out_$p283);
    goto corral_source_split_397;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    out_$p283 := $add.ref($add.ref(in_$p191, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_396;

  $bb54:
    assume !(out_$i279 == 1);
    goto corral_source_split_395;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} out_vslice_dummy_var_42 := dev_warn.ref.ref.i32.i32(out_$p309, .str.28, out_$i243, out_$i312);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p295, out_$i294);
    goto corral_source_split_421;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    out_$p295 := $add.ref($add.ref(in_$p191, $mul.ref(0, 3160)), $mul.ref(440, 1));
    goto corral_source_split_420;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    out_$i294 := $load.i8($M.0, out_$p293);
    goto corral_source_split_419;

  $bb59:
    assume out_$i292 == 1;
    out_$p293 := $add.ref($add.ref($add.ref(out_$p245, $mul.ref(out_$i246, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_418;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    out_$i292 := $eq.i32(out_$i291, 0);
    goto corral_source_split_409;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    out_$i291 := $zext.i8.i32(out_$i290);
    goto corral_source_split_408;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    out_$i290 := $load.i8($M.0, out_$p289);
    goto corral_source_split_407;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    out_$p289 := $add.ref($add.ref(in_$p191, $mul.ref(0, 3160)), $mul.ref(440, 1));
    goto corral_source_split_406;

  $bb57:
    assume out_$i288 == 1;
    goto corral_source_split_405;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    out_$i288 := $ne.i32(out_$i287, 0);
    goto corral_source_split_377;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} out_$i287 := usb_endpoint_is_bulk_out(out_$p248);
    call {:si_unique_call 41} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i287);
    goto corral_source_split_376;

  $bb49:
    assume !(out_$i268 == 1);
    goto corral_source_split_375;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} out_vslice_dummy_var_43 := dev_warn.ref.ref(out_$p305, .str.27);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p302, out_$i301);
    goto corral_source_split_432;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    out_$p302 := $add.ref($add.ref(in_$p191, $mul.ref(0, 3160)), $mul.ref(442, 1));
    goto corral_source_split_431;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    out_$i301 := $load.i8($M.0, out_$p300);
    goto corral_source_split_430;

  $bb62:
    assume out_$i299 == 1;
    out_$p300 := $add.ref($add.ref($add.ref(out_$p245, $mul.ref(out_$i246, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_429;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    out_$i299 := $eq.i32(out_$i298, 0);
    goto corral_source_split_427;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    out_$i298 := $zext.i8.i32(out_$i297);
    goto corral_source_split_426;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    out_$i297 := $load.i8($M.0, out_$p296);
    goto corral_source_split_425;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    out_$p296 := $add.ref($add.ref(in_$p191, $mul.ref(0, 3160)), $mul.ref(442, 1));
    goto corral_source_split_424;

  $bb60:
    assume !(out_$i292 == 1);
    goto corral_source_split_423;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    out_$p305 := $add.ref($add.ref(out_$p304, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_437;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    out_$p304 := $load.ref($M.0, out_$p303);
    goto corral_source_split_436;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    out_$p303 := $add.ref($add.ref(in_$p191, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_435;

  $bb63:
    assume !(out_$i299 == 1);
    goto corral_source_split_434;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    out_$i312 := $zext.i8.i32(out_$i311);
    goto corral_source_split_416;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    out_$i311 := $load.i8($M.0, out_$p310);
    goto corral_source_split_415;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    out_$p309 := $add.ref($add.ref(out_$p308, $mul.ref(0, 1744)), $mul.ref(136, 1));
    out_$p310 := $add.ref($add.ref($add.ref(out_$p245, $mul.ref(out_$i246, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_414;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    out_$p308 := $load.ref($M.0, out_$p307);
    goto corral_source_split_413;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    out_$p307 := $add.ref($add.ref(in_$p191, $mul.ref(0, 3160)), $mul.ref(0, 1));
    goto corral_source_split_412;

  $bb58:
    assume !(out_$i288 == 1);
    goto corral_source_split_411;

  $bb66_dummy:
    call {:si_unique_call 1} out_$p244, out_$p245, out_$i246, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$p253, out_$p254, out_$p255, out_$p256, out_$p257, out_$p258, out_$i259, out_$i260, out_$p262, out_$i263, out_$i264, out_$i265, out_$p266, out_$i267, out_$i268, out_$p269, out_$i270, out_$i271, out_$i272, out_$p273, out_$i274, out_$p275, out_$p276, out_$i277, out_$i278, out_$i279, out_$p280, out_$i281, out_$p282, out_$p283, out_$p284, out_$p285, out_$i287, out_$i288, out_$p289, out_$i290, out_$i291, out_$i292, out_$p293, out_$i294, out_$p295, out_$p296, out_$i297, out_$i298, out_$i299, out_$p300, out_$i301, out_$p302, out_$p303, out_$p304, out_$p305, out_$p307, out_$p308, out_$p309, out_$p310, out_$i311, out_$i312, out_$i314, out_$i315, out_$i316, out_$i317, out_$i243, out_vslice_dummy_var_40, out_vslice_dummy_var_41, out_vslice_dummy_var_42, out_vslice_dummy_var_43 := vub300_probe_loop_$bb40(in_$p191, in_$p237, in_$p239, out_$p244, out_$p245, out_$i246, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$p253, out_$p254, out_$p255, out_$p256, out_$p257, out_$p258, out_$i259, out_$i260, out_$p262, out_$i263, out_$i264, out_$i265, out_$p266, out_$i267, out_$i268, out_$p269, out_$i270, out_$i271, out_$i272, out_$p273, out_$i274, out_$p275, out_$p276, out_$i277, out_$i278, out_$i279, out_$p280, out_$i281, out_$p282, out_$p283, out_$p284, out_$p285, out_$i287, out_$i288, out_$p289, out_$i290, out_$i291, out_$i292, out_$p293, out_$i294, out_$p295, out_$p296, out_$i297, out_$i298, out_$i299, out_$p300, out_$i301, out_$p302, out_$p303, out_$p304, out_$p305, out_$p307, out_$p308, out_$p309, out_$p310, out_$i311, out_$i312, out_$i314, out_$i315, out_$i316, out_$i317, out_$i243, out_vslice_dummy_var_40, out_vslice_dummy_var_41, out_vslice_dummy_var_42, out_vslice_dummy_var_43);
    return;

  exit:
    return;
}



procedure vub300_probe_loop_$bb40(in_$p191: ref, in_$p237: ref, in_$p239: ref, in_$p244: ref, in_$p245: ref, in_$i246: i64, in_$p248: ref, in_$i249: i32, in_$i250: i1, in_$i251: i32, in_$i252: i1, in_$p253: ref, in_$p254: ref, in_$p255: ref, in_$p256: ref, in_$p257: ref, in_$p258: ref, in_$i259: i8, in_$i260: i32, in_$p262: ref, in_$i263: i16, in_$i264: i32, in_$i265: i1, in_$p266: ref, in_$i267: i32, in_$i268: i1, in_$p269: ref, in_$i270: i8, in_$i271: i32, in_$i272: i1, in_$p273: ref, in_$i274: i8, in_$p275: ref, in_$p276: ref, in_$i277: i8, in_$i278: i32, in_$i279: i1, in_$p280: ref, in_$i281: i8, in_$p282: ref, in_$p283: ref, in_$p284: ref, in_$p285: ref, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$i290: i8, in_$i291: i32, in_$i292: i1, in_$p293: ref, in_$i294: i8, in_$p295: ref, in_$p296: ref, in_$i297: i8, in_$i298: i32, in_$i299: i1, in_$p300: ref, in_$i301: i8, in_$p302: ref, in_$p303: ref, in_$p304: ref, in_$p305: ref, in_$p307: ref, in_$p308: ref, in_$p309: ref, in_$p310: ref, in_$i311: i8, in_$i312: i32, in_$i314: i32, in_$i315: i8, in_$i316: i32, in_$i317: i1, in_$i243: i32, in_vslice_dummy_var_40: i32, in_vslice_dummy_var_41: i32, in_vslice_dummy_var_42: i32, in_vslice_dummy_var_43: i32) returns (out_$p244: ref, out_$p245: ref, out_$i246: i64, out_$p248: ref, out_$i249: i32, out_$i250: i1, out_$i251: i32, out_$i252: i1, out_$p253: ref, out_$p254: ref, out_$p255: ref, out_$p256: ref, out_$p257: ref, out_$p258: ref, out_$i259: i8, out_$i260: i32, out_$p262: ref, out_$i263: i16, out_$i264: i32, out_$i265: i1, out_$p266: ref, out_$i267: i32, out_$i268: i1, out_$p269: ref, out_$i270: i8, out_$i271: i32, out_$i272: i1, out_$p273: ref, out_$i274: i8, out_$p275: ref, out_$p276: ref, out_$i277: i8, out_$i278: i32, out_$i279: i1, out_$p280: ref, out_$i281: i8, out_$p282: ref, out_$p283: ref, out_$p284: ref, out_$p285: ref, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$i290: i8, out_$i291: i32, out_$i292: i1, out_$p293: ref, out_$i294: i8, out_$p295: ref, out_$p296: ref, out_$i297: i8, out_$i298: i32, out_$i299: i1, out_$p300: ref, out_$i301: i8, out_$p302: ref, out_$p303: ref, out_$p304: ref, out_$p305: ref, out_$p307: ref, out_$p308: ref, out_$p309: ref, out_$p310: ref, out_$i311: i8, out_$i312: i32, out_$i314: i32, out_$i315: i8, out_$i316: i32, out_$i317: i1, out_$i243: i32, out_vslice_dummy_var_40: i32, out_vslice_dummy_var_41: i32, out_vslice_dummy_var_42: i32, out_vslice_dummy_var_43: i32);
  modifies $M.0;



implementation download_offload_pseudocode_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$i7: i32, in_$i23: i64, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$i31: i64, in_$i32: i64, in_$p33: ref, in_$i34: i16, in_$i35: i32, in_$p36: ref, in_$i37: i16, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i21: i32, in_$i22: i32, in_$i43: i32) returns (out_$i23: i64, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p30: ref, out_$i31: i64, out_$i32: i64, out_$p33: ref, out_$i34: i16, out_$i35: i32, out_$p36: ref, out_$i37: i16, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i21: i32, out_$i22: i32, out_$i43: i32)
{

  entry:
    out_$i23, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i21, out_$i22, out_$i43 := in_$i23, in_$p25, in_$p26, in_$p27, in_$p28, in_$i29, in_$p30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i21, in_$i22, in_$i43;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1601;

  $bb6:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i21, out_$i22 := out_$i41, out_$i40;
    goto $bb6_dummy;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i40;
    assume true;
    goto $bb6;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i41, in_$i7);
    goto corral_source_split_1621;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i21, 1);
    call {:si_unique_call 313} {:cexpr "n"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_1620;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i39, out_$i22);
    call {:si_unique_call 312} {:cexpr "l"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_1619;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} out_$i39 := snprintf.ref.i64.ref.i32.i32(out_$p30, out_$i32, .str.55, out_$i35, out_$i38);
    call {:si_unique_call 311} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_1618;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i16.i32(out_$i37);
    goto corral_source_split_1617;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i16($M.0, out_$p36);
    goto corral_source_split_1616;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p26, $mul.ref(0, 1216)), $mul.ref(1168, 1));
    goto corral_source_split_1615;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i16.i32(out_$i34);
    goto corral_source_split_1614;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i16($M.0, out_$p33);
    goto corral_source_split_1613;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p26, $mul.ref(0, 1216)), $mul.ref(1166, 1));
    goto corral_source_split_1612;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    out_$i32 := $sub.i64(80, out_$i31);
    goto corral_source_split_1611;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i22);
    goto corral_source_split_1610;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(out_$p28, $mul.ref(out_$i29, 1));
    goto corral_source_split_1609;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i22);
    goto corral_source_split_1608;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_1607;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3160)), $mul.ref(360, 1));
    goto corral_source_split_1606;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_1605;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 1824)), $mul.ref(1496, 1)), $mul.ref(out_$i23, 8));
    goto corral_source_split_1604;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i21);
    goto corral_source_split_1603;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i23, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i21, out_$i22, out_$i43 := download_offload_pseudocode_loop_$bb4(in_$p0, in_$p5, in_$i7, out_$i23, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i21, out_$i22, out_$i43);
    return;

  exit:
    return;
}



procedure download_offload_pseudocode_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$i7: i32, in_$i23: i64, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$i31: i64, in_$i32: i64, in_$p33: ref, in_$i34: i16, in_$i35: i32, in_$p36: ref, in_$i37: i16, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i21: i32, in_$i22: i32, in_$i43: i32) returns (out_$i23: i64, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p30: ref, out_$i31: i64, out_$i32: i64, out_$p33: ref, out_$i34: i16, out_$i35: i32, out_$p36: ref, out_$i37: i16, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i21: i32, out_$i22: i32, out_$i43: i32);



implementation __vub300_command_response_loop_$bb67(in_$p0: ref, in_$p209: ref, in_$p210: ref, in_$p211: ref, in_$p212: ref, in_$i213: i64, in_$p214: ref, in_$i215: i32, in_$i216: i32, in_$i217: i1, in_$i207: i32, in_$i208: i32) returns (out_$p209: ref, out_$p210: ref, out_$p211: ref, out_$p212: ref, out_$i213: i64, out_$p214: ref, out_$i215: i32, out_$i216: i32, out_$i217: i1, out_$i207: i32, out_$i208: i32)
{

  entry:
    out_$p209, out_$p210, out_$p211, out_$p212, out_$i213, out_$p214, out_$i215, out_$i216, out_$i217, out_$i207, out_$i208 := in_$p209, in_$p210, in_$p211, in_$p212, in_$i213, in_$p214, in_$i215, in_$i216, in_$i217, in_$i207, in_$i208;
    goto $bb67, exit;

  $bb67:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3014;

  $bb69:
    assume out_$i217 == 1;
    assume {:verifier.code 0} true;
    out_$i207, out_$i208 := out_$i216, out_$i215;
    goto $bb69_dummy;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    out_$i217 := $ne.i32(out_$i207, 0);
    goto corral_source_split_3025;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    out_$i216 := $sub.i32(out_$i207, 1);
    call {:si_unique_call 432} {:cexpr "register_count___1"} boogie_si_record_i32(out_$i216);
    goto corral_source_split_3024;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    out_$i215 := $add.i32(out_$i208, 1);
    call {:si_unique_call 431} {:cexpr "ri___1"} boogie_si_record_i32(out_$i215);
    goto corral_source_split_3023;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} add_offloaded_reg(in_$p0, out_$p214);
    goto corral_source_split_3022;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    out_$p214 := $add.ref(out_$p212, $mul.ref(out_$i213, 8));
    goto corral_source_split_3021;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    out_$i213 := $sext.i32.i64(out_$i208);
    goto corral_source_split_3020;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    out_$p212 := $bitcast.ref.ref(out_$p211);
    goto corral_source_split_3019;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    out_$p211 := $add.ref($add.ref(out_$p210, $mul.ref(0, 123)), $mul.ref(11, 1));
    goto corral_source_split_3018;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    out_$p210 := $bitcast.ref.ref(out_$p209);
    goto corral_source_split_3017;

  $bb68:
    assume {:verifier.code 0} true;
    out_$p209 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_3016;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb69_dummy:
    call {:si_unique_call 1} out_$p209, out_$p210, out_$p211, out_$p212, out_$i213, out_$p214, out_$i215, out_$i216, out_$i217, out_$i207, out_$i208 := __vub300_command_response_loop_$bb67(in_$p0, out_$p209, out_$p210, out_$p211, out_$p212, out_$i213, out_$p214, out_$i215, out_$i216, out_$i217, out_$i207, out_$i208);
    return;

  exit:
    return;
}



procedure __vub300_command_response_loop_$bb67(in_$p0: ref, in_$p209: ref, in_$p210: ref, in_$p211: ref, in_$p212: ref, in_$i213: i64, in_$p214: ref, in_$i215: i32, in_$i216: i32, in_$i217: i1, in_$i207: i32, in_$i208: i32) returns (out_$p209: ref, out_$p210: ref, out_$p211: ref, out_$p212: ref, out_$i213: i64, out_$p214: ref, out_$i215: i32, out_$i216: i32, out_$i217: i1, out_$i207: i32, out_$i208: i32);
  modifies $M.0;



implementation __vub300_command_response_loop_$bb50(in_$p0: ref, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$i159: i64, in_$p160: ref, in_$i161: i32, in_$i162: i32, in_$i163: i1, in_$i153: i32, in_$i154: i32) returns (out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$i159: i64, out_$p160: ref, out_$i161: i32, out_$i162: i32, out_$i163: i1, out_$i153: i32, out_$i154: i32)
{

  entry:
    out_$p155, out_$p156, out_$p157, out_$p158, out_$i159, out_$p160, out_$i161, out_$i162, out_$i163, out_$i153, out_$i154 := in_$p155, in_$p156, in_$p157, in_$p158, in_$i159, in_$p160, in_$i161, in_$i162, in_$i163, in_$i153, in_$i154;
    goto $bb50, exit;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2936;

  $bb52:
    assume out_$i163 == 1;
    assume {:verifier.code 0} true;
    out_$i153, out_$i154 := out_$i162, out_$i161;
    goto $bb52_dummy;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    out_$i163 := $ne.i32(out_$i153, 0);
    goto corral_source_split_2947;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    out_$i162 := $sub.i32(out_$i153, 1);
    call {:si_unique_call 423} {:cexpr "register_count___0"} boogie_si_record_i32(out_$i162);
    goto corral_source_split_2946;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    out_$i161 := $add.i32(out_$i154, 1);
    call {:si_unique_call 422} {:cexpr "ri___0"} boogie_si_record_i32(out_$i161);
    goto corral_source_split_2945;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} add_offloaded_reg(in_$p0, out_$p160);
    goto corral_source_split_2944;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref(out_$p158, $mul.ref(out_$i159, 8));
    goto corral_source_split_2943;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    out_$i159 := $sext.i32.i64(out_$i154);
    goto corral_source_split_2942;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    out_$p158 := $bitcast.ref.ref(out_$p157);
    goto corral_source_split_2941;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(out_$p156, $mul.ref(0, 123)), $mul.ref(11, 1));
    goto corral_source_split_2940;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    out_$p156 := $bitcast.ref.ref(out_$p155);
    goto corral_source_split_2939;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_2938;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb52_dummy:
    call {:si_unique_call 1} out_$p155, out_$p156, out_$p157, out_$p158, out_$i159, out_$p160, out_$i161, out_$i162, out_$i163, out_$i153, out_$i154 := __vub300_command_response_loop_$bb50(in_$p0, out_$p155, out_$p156, out_$p157, out_$p158, out_$i159, out_$p160, out_$i161, out_$i162, out_$i163, out_$i153, out_$i154);
    return;

  exit:
    return;
}



procedure __vub300_command_response_loop_$bb50(in_$p0: ref, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$i159: i64, in_$p160: ref, in_$i161: i32, in_$i162: i32, in_$i163: i1, in_$i153: i32, in_$i154: i32) returns (out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$i159: i64, out_$p160: ref, out_$i161: i32, out_$i162: i32, out_$i163: i1, out_$i153: i32, out_$i154: i32);
  modifies $M.0;



implementation __vub300_command_response_loop_$bb39(in_$p0: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$i126: i64, in_$p127: ref, in_$i128: i32, in_$i129: i32, in_$i130: i1, in_$i120: i32, in_$i121: i32) returns (out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$i126: i64, out_$p127: ref, out_$i128: i32, out_$i129: i32, out_$i130: i1, out_$i120: i32, out_$i121: i32)
{

  entry:
    out_$p122, out_$p123, out_$p124, out_$p125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i120, out_$i121 := in_$p122, in_$p123, in_$p124, in_$p125, in_$i126, in_$p127, in_$i128, in_$i129, in_$i130, in_$i120, in_$i121;
    goto $bb39, exit;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2889;

  $bb41:
    assume out_$i130 == 1;
    assume {:verifier.code 0} true;
    out_$i120, out_$i121 := out_$i129, out_$i128;
    goto $bb41_dummy;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    out_$i130 := $ne.i32(out_$i120, 0);
    goto corral_source_split_2900;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    out_$i129 := $sub.i32(out_$i120, 1);
    call {:si_unique_call 417} {:cexpr "register_count"} boogie_si_record_i32(out_$i129);
    goto corral_source_split_2899;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    out_$i128 := $add.i32(out_$i121, 1);
    call {:si_unique_call 416} {:cexpr "ri"} boogie_si_record_i32(out_$i128);
    goto corral_source_split_2898;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} add_offloaded_reg(in_$p0, out_$p127);
    goto corral_source_split_2897;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref(out_$p125, $mul.ref(out_$i126, 8));
    goto corral_source_split_2896;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    out_$i126 := $sext.i32.i64(out_$i121);
    goto corral_source_split_2895;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    out_$p125 := $bitcast.ref.ref(out_$p124);
    goto corral_source_split_2894;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(out_$p123, $mul.ref(0, 123)), $mul.ref(11, 1));
    goto corral_source_split_2893;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    out_$p123 := $bitcast.ref.ref(out_$p122);
    goto corral_source_split_2892;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_2891;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb41_dummy:
    call {:si_unique_call 1} out_$p122, out_$p123, out_$p124, out_$p125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i120, out_$i121 := __vub300_command_response_loop_$bb39(in_$p0, out_$p122, out_$p123, out_$p124, out_$p125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i120, out_$i121);
    return;

  exit:
    return;
}



procedure __vub300_command_response_loop_$bb39(in_$p0: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$i126: i64, in_$p127: ref, in_$i128: i32, in_$i129: i32, in_$i130: i1, in_$i120: i32, in_$i121: i32) returns (out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$i126: i64, out_$p127: ref, out_$i128: i32, out_$i129: i32, out_$i130: i1, out_$i120: i32, out_$i121: i32);
  modifies $M.0;



implementation construct_request_response_loop_$bb16(in_$p1: ref, in_$p13: ref, in_$i74: i32, in_$i75: i32, in_$i76: i64, in_$p77: ref, in_$i78: i8, in_$i79: i32, in_$i80: i32, in_$i81: i32, in_$i82: i32, in_$i83: i64, in_$p84: ref, in_$i85: i8, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$i89: i32, in_$i90: i32, in_$i91: i64, in_$p92: ref, in_$i93: i8, in_$i94: i32, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i64, in_$p100: ref, in_$i101: i8, in_$i102: i32, in_$i103: i32, in_$i104: i64, in_$p106: ref, in_$i107: i32, in_$i108: i1, in_$i73: i32) returns (out_$i74: i32, out_$i75: i32, out_$i76: i64, out_$p77: ref, out_$i78: i8, out_$i79: i32, out_$i80: i32, out_$i81: i32, out_$i82: i32, out_$i83: i64, out_$p84: ref, out_$i85: i8, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$i89: i32, out_$i90: i32, out_$i91: i64, out_$p92: ref, out_$i93: i8, out_$i94: i32, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i64, out_$p100: ref, out_$i101: i8, out_$i102: i32, out_$i103: i32, out_$i104: i64, out_$p106: ref, out_$i107: i32, out_$i108: i1, out_$i73: i32)
{

  entry:
    out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p106, out_$i107, out_$i108, out_$i73 := in_$i74, in_$i75, in_$i76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$p84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$p92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$p100, in_$i101, in_$i102, in_$i103, in_$i104, in_$p106, in_$i107, in_$i108, in_$i73;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3173;

  $bb18:
    assume out_$i108 == 1;
    assume {:verifier.code 0} true;
    out_$i73 := out_$i107;
    goto $bb18_dummy;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    out_$i108 := $sgt.i32(out_$i73, 0);
    goto corral_source_split_3209;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    out_$i107 := $sub.i32(out_$i73, 1);
    call {:si_unique_call 442} {:cexpr "words"} boogie_si_record_i32(out_$i107);
    goto corral_source_split_3208;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p106, out_$i103);
    goto corral_source_split_3207;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(out_$i104, 4));
    goto corral_source_split_3206;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    out_$i104 := $sext.i32.i64(out_$i73);
    goto corral_source_split_3205;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    out_$i103 := $or.i32(out_$i96, out_$i102);
    goto corral_source_split_3204;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.i8.i32(out_$i101);
    goto corral_source_split_3203;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i8($M.0, out_$p100);
    goto corral_source_split_3202;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref(in_$p13, $mul.ref(out_$i99, 1));
    goto corral_source_split_3201;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    out_$i99 := $sext.i32.i64(out_$i98);
    goto corral_source_split_3200;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    out_$i98 := $add.i32(out_$i97, 4);
    goto corral_source_split_3199;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    out_$i97 := $shl.i32(out_$i73, 2);
    goto corral_source_split_3198;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    out_$i96 := $or.i32(out_$i88, out_$i95);
    goto corral_source_split_3197;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    out_$i95 := $shl.i32(out_$i94, 8);
    goto corral_source_split_3196;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    out_$i94 := $zext.i8.i32(out_$i93);
    goto corral_source_split_3195;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i8($M.0, out_$p92);
    goto corral_source_split_3194;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref(in_$p13, $mul.ref(out_$i91, 1));
    goto corral_source_split_3193;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    out_$i91 := $sext.i32.i64(out_$i90);
    goto corral_source_split_3192;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    out_$i90 := $add.i32(out_$i89, 3);
    goto corral_source_split_3191;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    out_$i89 := $shl.i32(out_$i73, 2);
    goto corral_source_split_3190;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    out_$i88 := $or.i32(out_$i80, out_$i87);
    goto corral_source_split_3189;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    out_$i87 := $shl.i32(out_$i86, 16);
    goto corral_source_split_3188;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i8.i32(out_$i85);
    goto corral_source_split_3187;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i8($M.0, out_$p84);
    goto corral_source_split_3186;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref(in_$p13, $mul.ref(out_$i83, 1));
    goto corral_source_split_3185;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    out_$i83 := $sext.i32.i64(out_$i82);
    goto corral_source_split_3184;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    out_$i82 := $add.i32(out_$i81, 2);
    goto corral_source_split_3183;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    out_$i81 := $shl.i32(out_$i73, 2);
    goto corral_source_split_3182;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    out_$i80 := $shl.i32(out_$i79, 24);
    goto corral_source_split_3181;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    out_$i79 := $zext.i8.i32(out_$i78);
    goto corral_source_split_3180;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i8($M.0, out_$p77);
    goto corral_source_split_3179;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref(in_$p13, $mul.ref(out_$i76, 1));
    goto corral_source_split_3178;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    out_$i76 := $sext.i32.i64(out_$i75);
    goto corral_source_split_3177;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i74, 1);
    goto corral_source_split_3176;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i74 := $shl.i32(out_$i73, 2);
    goto corral_source_split_3175;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p106, out_$i107, out_$i108, out_$i73 := construct_request_response_loop_$bb16(in_$p1, in_$p13, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p106, out_$i107, out_$i108, out_$i73);
    return;

  exit:
    return;
}



procedure construct_request_response_loop_$bb16(in_$p1: ref, in_$p13: ref, in_$i74: i32, in_$i75: i32, in_$i76: i64, in_$p77: ref, in_$i78: i8, in_$i79: i32, in_$i80: i32, in_$i81: i32, in_$i82: i32, in_$i83: i64, in_$p84: ref, in_$i85: i8, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$i89: i32, in_$i90: i32, in_$i91: i64, in_$p92: ref, in_$i93: i8, in_$i94: i32, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i64, in_$p100: ref, in_$i101: i8, in_$i102: i32, in_$i103: i32, in_$i104: i64, in_$p106: ref, in_$i107: i32, in_$i108: i1, in_$i73: i32) returns (out_$i74: i32, out_$i75: i32, out_$i76: i64, out_$p77: ref, out_$i78: i8, out_$i79: i32, out_$i80: i32, out_$i81: i32, out_$i82: i32, out_$i83: i64, out_$p84: ref, out_$i85: i8, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$i89: i32, out_$i90: i32, out_$i91: i64, out_$p92: ref, out_$i93: i8, out_$i94: i32, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i64, out_$p100: ref, out_$i101: i8, out_$i102: i32, out_$i103: i32, out_$i104: i64, out_$p106: ref, out_$i107: i32, out_$i108: i1, out_$i73: i32);
  modifies $M.0;



implementation add_offloaded_reg_loop_$bb4(in_$p0: ref, in_$i19: i32, in_$i26: i8, in_$i36: i32, in_$i37: i64, in_$p39: ref, in_$p40: ref, in_$i41: i24, in_$i42: i24, in_$i43: i8, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i64, in_$p50: ref, in_$p51: ref, in_$i52: i24, in_$i53: i24, in_$i54: i24, in_$i55: i32, in_$i56: i1, in_$i57: i8, in_$i93: i32, in_$i94: i32, in_$i95: i8, in_$i96: i32, in_$i97: i32, in_$i98: i8, in_$i99: i32, in_$i100: i1, in_$i34: i8, in_$i35: i8, in_$i101: i32, in_$i102: i64, in_$p104: ref, in_$p105: ref, in_$i106: i24, in_$i107: i24, in_$i108: i24, in_$i109: i8, in_$i110: i32, in_$i111: i1) returns (out_$i36: i32, out_$i37: i64, out_$p39: ref, out_$p40: ref, out_$i41: i24, out_$i42: i24, out_$i43: i8, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i64, out_$p50: ref, out_$p51: ref, out_$i52: i24, out_$i53: i24, out_$i54: i24, out_$i55: i32, out_$i56: i1, out_$i57: i8, out_$i93: i32, out_$i94: i32, out_$i95: i8, out_$i96: i32, out_$i97: i32, out_$i98: i8, out_$i99: i32, out_$i100: i1, out_$i34: i8, out_$i35: i8, out_$i101: i32, out_$i102: i64, out_$p104: ref, out_$p105: ref, out_$i106: i24, out_$i107: i24, out_$i108: i24, out_$i109: i8, out_$i110: i32, out_$i111: i1)
{

  entry:
    out_$i36, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i34, out_$i35, out_$i101, out_$i102, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111 := in_$i36, in_$i37, in_$p39, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$p50, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i34, in_$i35, in_$i101, in_$i102, in_$p104, in_$p105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3298;

  $bb15:
    assume out_$i100 == 1;
    assume {:verifier.code 0} true;
    out_$i34, out_$i35 := out_$i98, out_$i95;
    goto $bb15_dummy;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    out_$i100 := $ne.i32(out_$i99, 0);
    goto corral_source_split_3339;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i8.i32(out_$i34);
    goto corral_source_split_3338;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    out_$i98 := $trunc.i32.i8(out_$i97);
    call {:si_unique_call 462} {:cexpr "regs"} boogie_si_record_i8(out_$i98);
    goto corral_source_split_3337;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    out_$i97 := $sub.i32(out_$i96, 1);
    goto corral_source_split_3336;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i8.i32(out_$i34);
    goto corral_source_split_3335;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    out_$i95 := $trunc.i32.i8(out_$i94);
    call {:si_unique_call 461} {:cexpr "i"} boogie_si_record_i8(out_$i95);
    goto corral_source_split_3334;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i93, 1);
    goto corral_source_split_3333;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i93 := $zext.i8.i32(out_$i35);
    goto corral_source_split_3332;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i46 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb8;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i35;
    assume true;
    goto $bb10;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i55, in_$i19);
    goto corral_source_split_3330;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i24.i32(out_$i54);
    goto corral_source_split_3329;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    out_$i54 := $and.i24(out_$i53, 131071);
    goto corral_source_split_3328;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    out_$i53 := $lshr.i24(out_$i52, 3);
    goto corral_source_split_3327;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i24($M.0, out_$p51);
    goto corral_source_split_3326;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_3325;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref(out_$i48, 12));
    goto corral_source_split_3324;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i47);
    goto corral_source_split_3323;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i8.i32(out_$i35);
    goto corral_source_split_3322;

  $bb6:
    assume out_$i46 == 1;
    goto corral_source_split_3321;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i44, out_$i45);
    goto corral_source_split_3319;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i8.i32(in_$i26);
    goto corral_source_split_3318;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i8.i32(out_$i43);
    goto corral_source_split_3317;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    out_$i43 := $trunc.i24.i8(out_$i42);
    goto corral_source_split_3316;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i24(out_$i41, 7);
    goto corral_source_split_3315;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i24($M.0, out_$p40);
    goto corral_source_split_3314;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_3313;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref(out_$i37, 12));
    goto corral_source_split_3312;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i36);
    goto corral_source_split_3311;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i8.i32(out_$i35);
    goto corral_source_split_3310;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb17:
    assume out_$i111 == 1;
    goto corral_source_split_3378;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 1);
    goto corral_source_split_3308;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    out_$i110 := $zext.i8.i32(out_$i109);
    goto corral_source_split_3307;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    out_$i109 := $trunc.i24.i8(out_$i108);
    goto corral_source_split_3306;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    out_$i108 := $and.i24(out_$i107, 1);
    goto corral_source_split_3305;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    out_$i107 := $lshr.i24(out_$i106, 20);
    goto corral_source_split_3304;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i24($M.0, out_$p105);
    goto corral_source_split_3303;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    out_$p105 := $bitcast.ref.ref(out_$p104);
    goto corral_source_split_3302;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref(out_$i102, 12));
    goto corral_source_split_3301;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    out_$i102 := $sext.i32.i64(out_$i101);
    goto corral_source_split_3300;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    out_$i101 := $zext.i8.i32(out_$i35);
    goto corral_source_split_3299;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i36, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i34, out_$i35, out_$i101, out_$i102, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111 := add_offloaded_reg_loop_$bb4(in_$p0, in_$i19, in_$i26, out_$i36, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i34, out_$i35, out_$i101, out_$i102, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111);
    return;

  exit:
    return;
}



procedure add_offloaded_reg_loop_$bb4(in_$p0: ref, in_$i19: i32, in_$i26: i8, in_$i36: i32, in_$i37: i64, in_$p39: ref, in_$p40: ref, in_$i41: i24, in_$i42: i24, in_$i43: i8, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i64, in_$p50: ref, in_$p51: ref, in_$i52: i24, in_$i53: i24, in_$i54: i24, in_$i55: i32, in_$i56: i1, in_$i57: i8, in_$i93: i32, in_$i94: i32, in_$i95: i8, in_$i96: i32, in_$i97: i32, in_$i98: i8, in_$i99: i32, in_$i100: i1, in_$i34: i8, in_$i35: i8, in_$i101: i32, in_$i102: i64, in_$p104: ref, in_$p105: ref, in_$i106: i24, in_$i107: i24, in_$i108: i24, in_$i109: i8, in_$i110: i32, in_$i111: i1) returns (out_$i36: i32, out_$i37: i64, out_$p39: ref, out_$p40: ref, out_$i41: i24, out_$i42: i24, out_$i43: i8, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i64, out_$p50: ref, out_$p51: ref, out_$i52: i24, out_$i53: i24, out_$i54: i24, out_$i55: i32, out_$i56: i1, out_$i57: i8, out_$i93: i32, out_$i94: i32, out_$i95: i8, out_$i96: i32, out_$i97: i32, out_$i98: i8, out_$i99: i32, out_$i100: i1, out_$i34: i8, out_$i35: i8, out_$i101: i32, out_$i102: i64, out_$p104: ref, out_$p105: ref, out_$i106: i24, out_$i107: i24, out_$i108: i24, out_$i109: i8, out_$i110: i32, out_$i111: i1);



implementation __download_offload_pseudocode_loop_$bb37(in_$p0: ref, in_$p224: ref, in_$i225: i8, in_$i226: i64, in_$p228: ref, in_$p229: ref, in_$i230: i24, in_$i231: i24, in_$i232: i24, in_$i233: i24, in_$i234: i24, in_$i235: i32, in_$i236: i64, in_$p237: ref, in_$i238: i8, in_$i239: i32, in_$i240: i32, in_$i241: i32, in_$i242: i32, in_$i243: i64, in_$p244: ref, in_$i245: i8, in_$i246: i32, in_$i247: i32, in_$i248: i32, in_$i249: i32, in_$i250: i64, in_$p251: ref, in_$i252: i8, in_$i253: i32, in_$i254: i32, in_$i255: i32, in_$i256: i64, in_$p258: ref, in_$p259: ref, in_$i260: i24, in_$i261: i24, in_$i262: i24, in_$i263: i24, in_$i264: i24, in_$i265: i24, in_$i266: i64, in_$p268: ref, in_$p269: ref, in_$i270: i24, in_$i271: i24, in_$i272: i24, in_$i273: i64, in_$p275: ref, in_$p276: ref, in_$i277: i24, in_$i278: i24, in_$i279: i32, in_$i280: i32, in_$i281: i1, in_$i220: i32, in_$i221: i32, in_$p222: ref, in_$i223: i32) returns (out_$p224: ref, out_$i225: i8, out_$i226: i64, out_$p228: ref, out_$p229: ref, out_$i230: i24, out_$i231: i24, out_$i232: i24, out_$i233: i24, out_$i234: i24, out_$i235: i32, out_$i236: i64, out_$p237: ref, out_$i238: i8, out_$i239: i32, out_$i240: i32, out_$i241: i32, out_$i242: i32, out_$i243: i64, out_$p244: ref, out_$i245: i8, out_$i246: i32, out_$i247: i32, out_$i248: i32, out_$i249: i32, out_$i250: i64, out_$p251: ref, out_$i252: i8, out_$i253: i32, out_$i254: i32, out_$i255: i32, out_$i256: i64, out_$p258: ref, out_$p259: ref, out_$i260: i24, out_$i261: i24, out_$i262: i24, out_$i263: i24, out_$i264: i24, out_$i265: i24, out_$i266: i64, out_$p268: ref, out_$p269: ref, out_$i270: i24, out_$i271: i24, out_$i272: i24, out_$i273: i64, out_$p275: ref, out_$p276: ref, out_$i277: i24, out_$i278: i24, out_$i279: i32, out_$i280: i32, out_$i281: i1, out_$i220: i32, out_$i221: i32, out_$p222: ref, out_$i223: i32)
{

  entry:
    out_$p224, out_$i225, out_$i226, out_$p228, out_$p229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$p237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$p258, out_$p259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$p268, out_$p269, out_$i270, out_$i271, out_$i272, out_$i273, out_$p275, out_$p276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i220, out_$i221, out_$p222, out_$i223 := in_$p224, in_$i225, in_$i226, in_$p228, in_$p229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$p237, in_$i238, in_$i239, in_$i240, in_$i241, in_$i242, in_$i243, in_$p244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$p251, in_$i252, in_$i253, in_$i254, in_$i255, in_$i256, in_$p258, in_$p259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$i265, in_$i266, in_$p268, in_$p269, in_$i270, in_$i271, in_$i272, in_$i273, in_$p275, in_$p276, in_$i277, in_$i278, in_$i279, in_$i280, in_$i281, in_$i220, in_$i221, in_$p222, in_$i223;
    goto $bb37, exit;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4285;

  $bb39:
    assume out_$i281 == 1;
    assume {:verifier.code 0} true;
    out_$i220, out_$i221, out_$p222, out_$i223 := out_$i280, out_$i279, out_$p251, out_$i255;
    goto $bb39_dummy;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    out_$i281 := $ne.i32(out_$i220, 0);
    goto corral_source_split_4341;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    out_$i280 := $sub.i32(out_$i220, 1);
    call {:si_unique_call 635} {:cexpr "I"} boogie_si_record_i32(out_$i280);
    goto corral_source_split_4340;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    out_$i279 := $add.i32(out_$i221, 1);
    call {:si_unique_call 634} {:cexpr "i"} boogie_si_record_i32(out_$i279);
    goto corral_source_split_4339;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i24($M.0, out_$p276, out_$i278);
    goto corral_source_split_4338;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    out_$i278 := $and.i24(out_$i277, $sub.i24(0, 2097153));
    goto corral_source_split_4337;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    out_$i277 := $load.i24($M.0, out_$p276);
    goto corral_source_split_4336;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    out_$p276 := $bitcast.ref.ref(out_$p275);
    goto corral_source_split_4335;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    out_$p275 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref(out_$i273, 12));
    goto corral_source_split_4334;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    out_$i273 := $sext.i32.i64(out_$i221);
    goto corral_source_split_4333;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i24($M.0, out_$p269, out_$i272);
    goto corral_source_split_4332;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    out_$i272 := $or.i24(out_$i271, 1048576);
    goto corral_source_split_4331;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    out_$i271 := $and.i24(out_$i270, $sub.i24(0, 1048577));
    goto corral_source_split_4330;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    out_$i270 := $load.i24($M.0, out_$p269);
    goto corral_source_split_4329;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    out_$p269 := $bitcast.ref.ref(out_$p268);
    goto corral_source_split_4328;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    out_$p268 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref(out_$i266, 12));
    goto corral_source_split_4327;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    out_$i266 := $sext.i32.i64(out_$i221);
    goto corral_source_split_4326;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i24($M.0, out_$p259, out_$i265);
    goto corral_source_split_4325;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    out_$i265 := $or.i24(out_$i264, out_$i263);
    goto corral_source_split_4324;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    out_$i264 := $and.i24(out_$i261, $sub.i24(0, 1048569));
    goto corral_source_split_4323;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    out_$i263 := $shl.i24(out_$i262, 3);
    goto corral_source_split_4322;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    out_$i262 := $and.i24(out_$i260, 131071);
    goto corral_source_split_4321;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    out_$i261 := $load.i24($M.0, out_$p259);
    goto corral_source_split_4320;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    out_$i260 := $trunc.i32.i24(out_$i254);
    goto corral_source_split_4319;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    out_$p259 := $bitcast.ref.ref(out_$p258);
    goto corral_source_split_4318;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    out_$p258 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref(out_$i256, 12));
    goto corral_source_split_4317;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    out_$i256 := $sext.i32.i64(out_$i221);
    goto corral_source_split_4316;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    out_$i255 := $add.i32(out_$i248, $sub.i32(0, 1));
    call {:si_unique_call 633} {:cexpr "size"} boogie_si_record_i32(out_$i255);
    goto corral_source_split_4315;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    out_$i254 := $add.i32(out_$i253, out_$i249);
    call {:si_unique_call 632} {:cexpr "func_num"} boogie_si_record_i32(out_$i254);
    goto corral_source_split_4314;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    out_$i253 := $zext.i8.i32(out_$i252);
    goto corral_source_split_4313;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    out_$i252 := $load.i8($M.0, out_$p244);
    goto corral_source_split_4312;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    out_$p251 := $add.ref(out_$p222, $mul.ref(out_$i250, 1));
    goto corral_source_split_4311;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    out_$i249 := $shl.i32(out_$i247, 8);
    call {:si_unique_call 631} {:cexpr "func_num"} boogie_si_record_i32(out_$i249);
    out_$i250 := $add.i64(out_$i243, 1);
    goto corral_source_split_4310;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    out_$i248 := $add.i32(out_$i241, $sub.i32(0, 1));
    call {:si_unique_call 630} {:cexpr "size"} boogie_si_record_i32(out_$i248);
    goto corral_source_split_4309;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    out_$i247 := $add.i32(out_$i246, out_$i242);
    call {:si_unique_call 629} {:cexpr "func_num"} boogie_si_record_i32(out_$i247);
    goto corral_source_split_4308;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    out_$i246 := $zext.i8.i32(out_$i245);
    goto corral_source_split_4307;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    out_$i245 := $load.i8($M.0, out_$p237);
    goto corral_source_split_4306;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    out_$p244 := $add.ref(out_$p222, $mul.ref(out_$i243, 1));
    goto corral_source_split_4305;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    out_$i242 := $shl.i32(out_$i240, 8);
    call {:si_unique_call 628} {:cexpr "func_num"} boogie_si_record_i32(out_$i242);
    out_$i243 := $add.i64(out_$i236, 1);
    goto corral_source_split_4304;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    out_$i241 := $add.i32(out_$i235, $sub.i32(0, 1));
    call {:si_unique_call 627} {:cexpr "size"} boogie_si_record_i32(out_$i241);
    goto corral_source_split_4303;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    out_$i240 := $add.i32(out_$i239, 0);
    call {:si_unique_call 626} {:cexpr "func_num"} boogie_si_record_i32(out_$i240);
    goto corral_source_split_4302;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    out_$i239 := $zext.i8.i32(out_$i238);
    goto corral_source_split_4301;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    out_$i238 := $load.i8($M.0, out_$p224);
    goto corral_source_split_4300;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    out_$p237 := $add.ref(out_$p222, $mul.ref(out_$i236, 1));
    goto corral_source_split_4299;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    out_$i235 := $add.i32(out_$i223, $sub.i32(0, 1));
    call {:si_unique_call 625} {:cexpr "size"} boogie_si_record_i32(out_$i235);
    out_$i236 := $add.i64(1, 1);
    goto corral_source_split_4298;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i24($M.0, out_$p229, out_$i234);
    goto corral_source_split_4297;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    out_$i234 := $or.i24(out_$i233, out_$i232);
    goto corral_source_split_4296;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    out_$i233 := $and.i24(out_$i231, $sub.i24(0, 8));
    goto corral_source_split_4295;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    out_$i232 := $and.i24(out_$i230, 7);
    goto corral_source_split_4294;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    out_$i231 := $load.i24($M.0, out_$p229);
    goto corral_source_split_4293;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    out_$i230 := $zext.i8.i24(out_$i225);
    goto corral_source_split_4292;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    out_$p229 := $bitcast.ref.ref(out_$p228);
    goto corral_source_split_4291;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    out_$p228 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref(out_$i226, 12));
    goto corral_source_split_4290;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    out_$i226 := $sext.i32.i64(out_$i221);
    goto corral_source_split_4289;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    out_$i225 := $load.i8($M.0, out_$p222);
    goto corral_source_split_4288;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p224 := $add.ref(out_$p222, $mul.ref(1, 1));
    goto corral_source_split_4287;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb39_dummy:
    call {:si_unique_call 1} out_$p224, out_$i225, out_$i226, out_$p228, out_$p229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$p237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$p258, out_$p259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$p268, out_$p269, out_$i270, out_$i271, out_$i272, out_$i273, out_$p275, out_$p276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i220, out_$i221, out_$p222, out_$i223 := __download_offload_pseudocode_loop_$bb37(in_$p0, out_$p224, out_$i225, out_$i226, out_$p228, out_$p229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$p237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$p258, out_$p259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$p268, out_$p269, out_$i270, out_$i271, out_$i272, out_$i273, out_$p275, out_$p276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i220, out_$i221, out_$p222, out_$i223);
    return;

  exit:
    return;
}



procedure __download_offload_pseudocode_loop_$bb37(in_$p0: ref, in_$p224: ref, in_$i225: i8, in_$i226: i64, in_$p228: ref, in_$p229: ref, in_$i230: i24, in_$i231: i24, in_$i232: i24, in_$i233: i24, in_$i234: i24, in_$i235: i32, in_$i236: i64, in_$p237: ref, in_$i238: i8, in_$i239: i32, in_$i240: i32, in_$i241: i32, in_$i242: i32, in_$i243: i64, in_$p244: ref, in_$i245: i8, in_$i246: i32, in_$i247: i32, in_$i248: i32, in_$i249: i32, in_$i250: i64, in_$p251: ref, in_$i252: i8, in_$i253: i32, in_$i254: i32, in_$i255: i32, in_$i256: i64, in_$p258: ref, in_$p259: ref, in_$i260: i24, in_$i261: i24, in_$i262: i24, in_$i263: i24, in_$i264: i24, in_$i265: i24, in_$i266: i64, in_$p268: ref, in_$p269: ref, in_$i270: i24, in_$i271: i24, in_$i272: i24, in_$i273: i64, in_$p275: ref, in_$p276: ref, in_$i277: i24, in_$i278: i24, in_$i279: i32, in_$i280: i32, in_$i281: i1, in_$i220: i32, in_$i221: i32, in_$p222: ref, in_$i223: i32) returns (out_$p224: ref, out_$i225: i8, out_$i226: i64, out_$p228: ref, out_$p229: ref, out_$i230: i24, out_$i231: i24, out_$i232: i24, out_$i233: i24, out_$i234: i24, out_$i235: i32, out_$i236: i64, out_$p237: ref, out_$i238: i8, out_$i239: i32, out_$i240: i32, out_$i241: i32, out_$i242: i32, out_$i243: i64, out_$p244: ref, out_$i245: i8, out_$i246: i32, out_$i247: i32, out_$i248: i32, out_$i249: i32, out_$i250: i64, out_$p251: ref, out_$i252: i8, out_$i253: i32, out_$i254: i32, out_$i255: i32, out_$i256: i64, out_$p258: ref, out_$p259: ref, out_$i260: i24, out_$i261: i24, out_$i262: i24, out_$i263: i24, out_$i264: i24, out_$i265: i24, out_$i266: i64, out_$p268: ref, out_$p269: ref, out_$i270: i24, out_$i271: i24, out_$i272: i24, out_$i273: i64, out_$p275: ref, out_$p276: ref, out_$i277: i24, out_$i278: i24, out_$i279: i32, out_$i280: i32, out_$i281: i1, out_$i220: i32, out_$i221: i32, out_$p222: ref, out_$i223: i32);
  modifies $M.0;



implementation __download_offload_pseudocode_loop_$bb4(in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i27: i1, in_$i19: i32, in_$i20: i8, in_$p21: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$p28: ref, in_$i29: i32) returns (out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i27: i1, out_$i19: i32, out_$i20: i8, out_$p21: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$p28: ref, out_$i29: i32)
{

  entry:
    out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i19, out_$i20, out_$p21, out_$i30, out_$i31, out_$p32, out_$i33, out_$p28, out_$i29 := in_$i22, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i19, in_$i20, in_$p21, in_$i30, in_$i31, in_$p32, in_$i33, in_$p28, in_$i29;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4041;

  $bb6:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i19, out_$i20, out_$p21 := out_$i26, out_$i25, out_$p24;
    goto $bb6_dummy;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    out_$p28, out_$i29 := out_$p24, out_$i26;
    assume true;
    goto $bb6;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i22, 0);
    goto corral_source_split_4049;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    out_$i26 := $sub.i32(out_$i22, 1);
    call {:si_unique_call 571} {:cexpr "size"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_4048;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i8($M.0, out_$p23);
    call {:si_unique_call 570} {:cexpr "c"} boogie_si_record_i8(out_$i25);
    goto corral_source_split_4047;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(out_$p23, $mul.ref(1, 1));
    goto corral_source_split_4046;

  $bb5:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4045;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    out_$i22, out_$p23, out_$p32, out_$i33 := out_$i19, out_$p21, out_$p21, out_$i19;
    assume true;
    goto $bb5;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_4043;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i8.i32(out_$i20);
    goto corral_source_split_4042;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i19, out_$i20, out_$p21, out_$i30, out_$i31, out_$p32, out_$i33, out_$p28, out_$i29 := __download_offload_pseudocode_loop_$bb4(out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i19, out_$i20, out_$p21, out_$i30, out_$i31, out_$p32, out_$i33, out_$p28, out_$i29);
    return;

  exit:
    return;
}



procedure __download_offload_pseudocode_loop_$bb4(in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i27: i1, in_$i19: i32, in_$i20: i8, in_$p21: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$p28: ref, in_$i29: i32) returns (out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i27: i1, out_$i19: i32, out_$i20: i8, out_$p21: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$p28: ref, out_$i29: i32);



implementation __vub300_irqpoll_response_loop_$bb49(in_$p0: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$p94: ref, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$i87: i32, in_$i88: i32) returns (out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$p94: ref, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$i87: i32, out_$i88: i32)
{

  entry:
    out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i87, out_$i88 := in_$p89, in_$p90, in_$p91, in_$p92, in_$i93, in_$p94, in_$i95, in_$i96, in_$i97, in_$i87, in_$i88;
    goto $bb49, exit;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4627;

  $bb51:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    out_$i87, out_$i88 := out_$i96, out_$i95;
    goto $bb51_dummy;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i32(out_$i87, 0);
    goto corral_source_split_4638;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    out_$i96 := $sub.i32(out_$i87, 1);
    call {:si_unique_call 693} {:cexpr "register_count___0"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_4637;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    out_$i95 := $add.i32(out_$i88, 1);
    call {:si_unique_call 692} {:cexpr "ri___0"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_4636;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} add_offloaded_reg(in_$p0, out_$p94);
    goto corral_source_split_4635;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref(out_$p92, $mul.ref(out_$i93, 8));
    goto corral_source_split_4634;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    out_$i93 := $sext.i32.i64(out_$i88);
    goto corral_source_split_4633;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    out_$p92 := $bitcast.ref.ref(out_$p91);
    goto corral_source_split_4632;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p90, $mul.ref(0, 123)), $mul.ref(3, 1));
    goto corral_source_split_4631;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    out_$p90 := $bitcast.ref.ref(out_$p89);
    goto corral_source_split_4630;

  $bb50:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_4629;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb51_dummy:
    call {:si_unique_call 1} out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i87, out_$i88 := __vub300_irqpoll_response_loop_$bb49(in_$p0, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i87, out_$i88);
    return;

  exit:
    return;
}



procedure __vub300_irqpoll_response_loop_$bb49(in_$p0: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$p94: ref, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$i87: i32, in_$i88: i32) returns (out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$p94: ref, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$i87: i32, out_$i88: i32);
  modifies $M.0;



implementation __vub300_irqpoll_response_loop_$bb38(in_$p0: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i55: i32, in_$i56: i32) returns (out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i55: i32, out_$i56: i32)
{

  entry:
    out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i55, out_$i56 := in_$p57, in_$p58, in_$p59, in_$p60, in_$i61, in_$p62, in_$i63, in_$i64, in_$i65, in_$i55, in_$i56;
    goto $bb38, exit;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4588;

  $bb40:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    out_$i55, out_$i56 := out_$i64, out_$i63;
    goto $bb40_dummy;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i32(out_$i55, 0);
    goto corral_source_split_4599;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    out_$i64 := $sub.i32(out_$i55, 1);
    call {:si_unique_call 687} {:cexpr "register_count"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_4598;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i56, 1);
    call {:si_unique_call 686} {:cexpr "ri"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_4597;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} add_offloaded_reg(in_$p0, out_$p62);
    goto corral_source_split_4596;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref(out_$p60, $mul.ref(out_$i61, 8));
    goto corral_source_split_4595;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i32.i64(out_$i56);
    goto corral_source_split_4594;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_4593;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p58, $mul.ref(0, 123)), $mul.ref(3, 1));
    goto corral_source_split_4592;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(out_$p57);
    goto corral_source_split_4591;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3160)), $mul.ref(2088, 1));
    goto corral_source_split_4590;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb40_dummy:
    call {:si_unique_call 1} out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i55, out_$i56 := __vub300_irqpoll_response_loop_$bb38(in_$p0, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i55, out_$i56);
    return;

  exit:
    return;
}



procedure __vub300_irqpoll_response_loop_$bb38(in_$p0: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i55: i32, in_$i56: i32) returns (out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i55: i32, out_$i56: i32);
  modifies $M.0;



implementation satisfy_request_from_offloaded_data_loop_$bb4(in_$p0: ref, in_$i10: i8, in_$i14: i32, in_$i22: i32, in_$i23: i64, in_$p25: ref, in_$p26: ref, in_$i27: i24, in_$i28: i24, in_$i29: i8, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i64, in_$p36: ref, in_$p37: ref, in_$i38: i24, in_$i39: i24, in_$i40: i24, in_$i41: i32, in_$i42: i1, in_$i43: i8, in_$i101: i32, in_$i102: i32, in_$i103: i8, in_$i104: i32, in_$i105: i32, in_$i106: i8, in_$i107: i32, in_$i108: i1, in_$i20: i8, in_$i21: i8) returns (out_$i22: i32, out_$i23: i64, out_$p25: ref, out_$p26: ref, out_$i27: i24, out_$i28: i24, out_$i29: i8, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i64, out_$p36: ref, out_$p37: ref, out_$i38: i24, out_$i39: i24, out_$i40: i24, out_$i41: i32, out_$i42: i1, out_$i43: i8, out_$i101: i32, out_$i102: i32, out_$i103: i8, out_$i104: i32, out_$i105: i32, out_$i106: i8, out_$i107: i32, out_$i108: i1, out_$i20: i8, out_$i21: i8)
{

  entry:
    out_$i22, out_$i23, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i20, out_$i21 := in_$i22, in_$i23, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i20, in_$i21;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5219;

  $bb16:
    assume out_$i108 == 1;
    assume {:verifier.code 0} true;
    out_$i20, out_$i21 := out_$i106, out_$i103;
    goto $bb16_dummy;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i32(out_$i107, 0);
    goto corral_source_split_5250;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    out_$i107 := $zext.i8.i32(out_$i20);
    goto corral_source_split_5249;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    out_$i106 := $trunc.i32.i8(out_$i105);
    call {:si_unique_call 794} {:cexpr "regs"} boogie_si_record_i8(out_$i106);
    goto corral_source_split_5248;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    out_$i105 := $sub.i32(out_$i104, 1);
    goto corral_source_split_5247;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i8.i32(out_$i20);
    goto corral_source_split_5246;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    out_$i103 := $trunc.i32.i8(out_$i102);
    call {:si_unique_call 793} {:cexpr "i"} boogie_si_record_i8(out_$i103);
    goto corral_source_split_5245;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    out_$i102 := $add.i32(out_$i101, 1);
    goto corral_source_split_5244;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i101 := $zext.i8.i32(out_$i21);
    goto corral_source_split_5243;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb8;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i21;
    assume true;
    goto $bb10;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i41, in_$i14);
    goto corral_source_split_5241;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i24.i32(out_$i40);
    goto corral_source_split_5240;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    out_$i40 := $and.i24(out_$i39, 131071);
    goto corral_source_split_5239;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    out_$i39 := $lshr.i24(out_$i38, 3);
    goto corral_source_split_5238;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i24($M.0, out_$p37);
    goto corral_source_split_5237;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_5236;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref(out_$i34, 12));
    goto corral_source_split_5235;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i33);
    goto corral_source_split_5234;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i8.i32(out_$i21);
    goto corral_source_split_5233;

  $bb6:
    assume out_$i32 == 1;
    goto corral_source_split_5232;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i30, out_$i31);
    goto corral_source_split_5230;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i8.i32(in_$i10);
    goto corral_source_split_5229;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i8.i32(out_$i29);
    goto corral_source_split_5228;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    out_$i29 := $trunc.i24.i8(out_$i28);
    goto corral_source_split_5227;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    out_$i28 := $and.i24(out_$i27, 7);
    goto corral_source_split_5226;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i24($M.0, out_$p26);
    goto corral_source_split_5225;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_5224;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3160)), $mul.ref(476, 1)), $mul.ref(out_$i23, 12));
    goto corral_source_split_5223;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i22);
    goto corral_source_split_5222;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i8.i32(out_$i21);
    goto corral_source_split_5221;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i22, out_$i23, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i20, out_$i21 := satisfy_request_from_offloaded_data_loop_$bb4(in_$p0, in_$i10, in_$i14, out_$i22, out_$i23, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i20, out_$i21);
    return;

  exit:
    return;
}



procedure satisfy_request_from_offloaded_data_loop_$bb4(in_$p0: ref, in_$i10: i8, in_$i14: i32, in_$i22: i32, in_$i23: i64, in_$p25: ref, in_$p26: ref, in_$i27: i24, in_$i28: i24, in_$i29: i8, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i64, in_$p36: ref, in_$p37: ref, in_$i38: i24, in_$i39: i24, in_$i40: i24, in_$i41: i32, in_$i42: i1, in_$i43: i8, in_$i101: i32, in_$i102: i32, in_$i103: i8, in_$i104: i32, in_$i105: i32, in_$i106: i8, in_$i107: i32, in_$i108: i1, in_$i20: i8, in_$i21: i8) returns (out_$i22: i32, out_$i23: i64, out_$p25: ref, out_$p26: ref, out_$i27: i24, out_$i28: i24, out_$i29: i8, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i64, out_$p36: ref, out_$p37: ref, out_$i38: i24, out_$i39: i24, out_$i40: i24, out_$i41: i32, out_$i42: i1, out_$i43: i8, out_$i101: i32, out_$i102: i32, out_$i103: i8, out_$i104: i32, out_$i105: i32, out_$i106: i8, out_$i107: i32, out_$i108: i1, out_$i20: i8, out_$i21: i8);



implementation examine_cyclic_buffer_loop_$bb14(in_$p0: ref, in_$i2: i8, in_$i6: i8, in_$i10: i8, in_$i14: i8, in_$i17: i8, in_$i139: i32, in_$i140: i32, in_$i141: i64, in_$p144: ref, in_$p145: ref, in_$i146: i64, in_$p147: ref, in_$p149: ref, in_$i150: i8, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$p155: ref, in_$i156: i8, in_$i157: i32, in_$i158: i32, in_$i159: i1, in_$p161: ref, in_$i162: i8, in_$i163: i32, in_$i164: i32, in_$i165: i1, in_$p167: ref, in_$i168: i8, in_$i169: i32, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$p173: ref, in_$i238: i32, in_$i239: i32, in_$i240: i32, in_$i241: i8, in_$i242: i32, in_$i243: i32, in_$i244: i1, in_$i136: i32, in_$i137: i8, in_$i138: i32) returns (out_$i139: i32, out_$i140: i32, out_$i141: i64, out_$p144: ref, out_$p145: ref, out_$i146: i64, out_$p147: ref, out_$p149: ref, out_$i150: i8, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$p155: ref, out_$i156: i8, out_$i157: i32, out_$i158: i32, out_$i159: i1, out_$p161: ref, out_$i162: i8, out_$i163: i32, out_$i164: i32, out_$i165: i1, out_$p167: ref, out_$i168: i8, out_$i169: i32, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$p173: ref, out_$i238: i32, out_$i239: i32, out_$i240: i32, out_$i241: i8, out_$i242: i32, out_$i243: i32, out_$i244: i1, out_$i136: i32, out_$i137: i8, out_$i138: i32)
{

  entry:
    out_$i139, out_$i140, out_$i141, out_$p144, out_$p145, out_$i146, out_$p147, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$p167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$p173, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i136, out_$i137, out_$i138 := in_$i139, in_$i140, in_$i141, in_$p144, in_$p145, in_$i146, in_$p147, in_$p149, in_$i150, in_$i151, in_$i152, in_$i153, in_$p155, in_$i156, in_$i157, in_$i158, in_$i159, in_$p161, in_$i162, in_$i163, in_$i164, in_$i165, in_$p167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$p173, in_$i238, in_$i239, in_$i240, in_$i241, in_$i242, in_$i243, in_$i244, in_$i136, in_$i137, in_$i138;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5487;

  $bb25:
    assume out_$i244 == 1;
    assume {:verifier.code 0} true;
    out_$i136, out_$i137, out_$i138 := out_$i238, out_$i241, out_$i242;
    goto $bb25_dummy;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    out_$i244 := $ne.i32(out_$i243, 0);
    goto corral_source_split_5515;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    out_$i243 := $zext.i8.i32(out_$i241);
    goto corral_source_split_5514;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    out_$i242 := $add.i32(out_$i138, 1);
    call {:si_unique_call 818} {:cexpr "delta"} boogie_si_record_i32(out_$i242);
    goto corral_source_split_5513;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    out_$i241 := $trunc.i32.i8(out_$i240);
    call {:si_unique_call 817} {:cexpr "register_count"} boogie_si_record_i8(out_$i241);
    goto corral_source_split_5512;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    out_$i240 := $add.i32(out_$i239, 255);
    goto corral_source_split_5511;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    out_$i239 := $zext.i8.i32(out_$i137);
    goto corral_source_split_5510;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i238 := $add.i32(out_$i136, 1);
    call {:si_unique_call 816} {:cexpr "register_point"} boogie_si_record_i32(out_$i238);
    goto corral_source_split_5509;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i153 == 1);
    goto $bb18;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i159 == 1);
    goto $bb18;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i165 == 1);
    goto $bb18;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i171 == 1);
    goto $bb18;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    out_$i172, out_$p173 := out_$i138, out_$p147;
    assume true;
    goto $bb24;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i169, out_$i170);
    goto corral_source_split_5529;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    out_$i170 := $zext.i8.i32(in_$i17);
    goto corral_source_split_5528;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    out_$i169 := $zext.i8.i32(out_$i168);
    goto corral_source_split_5527;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    out_$i168 := $load.i8($M.0, out_$p167);
    goto corral_source_split_5526;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref($add.ref(out_$p145, $mul.ref(out_$i146, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_5525;

  $bb21:
    assume out_$i165 == 1;
    goto corral_source_split_5524;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    out_$i165 := $eq.i32(out_$i163, out_$i164);
    goto corral_source_split_5522;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    out_$i164 := $zext.i8.i32(in_$i14);
    goto corral_source_split_5521;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    out_$i163 := $zext.i8.i32(out_$i162);
    goto corral_source_split_5520;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    out_$i162 := $load.i8($M.0, out_$p161);
    goto corral_source_split_5519;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref($add.ref(out_$p145, $mul.ref(out_$i146, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5518;

  $bb19:
    assume out_$i159 == 1;
    goto corral_source_split_5517;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i157, out_$i158);
    goto corral_source_split_5507;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    out_$i158 := $zext.i8.i32(in_$i10);
    goto corral_source_split_5506;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    out_$i157 := $zext.i8.i32(out_$i156);
    goto corral_source_split_5505;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    out_$i156 := $load.i8($M.0, out_$p155);
    goto corral_source_split_5504;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref($add.ref(out_$p145, $mul.ref(out_$i146, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_5503;

  $bb16:
    assume out_$i153 == 1;
    goto corral_source_split_5502;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    out_$i153 := $eq.i32(out_$i151, out_$i152);
    goto corral_source_split_5500;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    out_$i152 := $zext.i8.i32(in_$i6);
    goto corral_source_split_5499;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    out_$i151 := $zext.i8.i32(out_$i150);
    goto corral_source_split_5498;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    out_$i150 := $load.i8($M.0, out_$p149);
    goto corral_source_split_5497;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref($add.ref(out_$p145, $mul.ref(out_$i146, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5496;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref(out_$p145, $mul.ref(out_$i146, 8));
    goto corral_source_split_5495;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    out_$i146 := $sext.i32.i64(out_$i139);
    goto corral_source_split_5494;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    out_$p145 := $bitcast.ref.ref(out_$p144);
    goto corral_source_split_5493;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3160)), $mul.ref(668, 1)), $mul.ref(out_$i141, 136)), $mul.ref(8, 1));
    goto corral_source_split_5492;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    out_$i141 := $sext.i32.i64(out_$i140);
    goto corral_source_split_5491;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    out_$i140 := $zext.i8.i32(in_$i2);
    goto corral_source_split_5490;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i139 := $and.i32(out_$i136, 15);
    call {:si_unique_call 815} {:cexpr "point"} boogie_si_record_i32(out_$i139);
    goto corral_source_split_5489;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i139, out_$i140, out_$i141, out_$p144, out_$p145, out_$i146, out_$p147, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$p167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$p173, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i136, out_$i137, out_$i138 := examine_cyclic_buffer_loop_$bb14(in_$p0, in_$i2, in_$i6, in_$i10, in_$i14, in_$i17, out_$i139, out_$i140, out_$i141, out_$p144, out_$p145, out_$i146, out_$p147, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$p167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$p173, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i136, out_$i137, out_$i138);
    return;

  exit:
    return;
}



procedure examine_cyclic_buffer_loop_$bb14(in_$p0: ref, in_$i2: i8, in_$i6: i8, in_$i10: i8, in_$i14: i8, in_$i17: i8, in_$i139: i32, in_$i140: i32, in_$i141: i64, in_$p144: ref, in_$p145: ref, in_$i146: i64, in_$p147: ref, in_$p149: ref, in_$i150: i8, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$p155: ref, in_$i156: i8, in_$i157: i32, in_$i158: i32, in_$i159: i1, in_$p161: ref, in_$i162: i8, in_$i163: i32, in_$i164: i32, in_$i165: i1, in_$p167: ref, in_$i168: i8, in_$i169: i32, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$p173: ref, in_$i238: i32, in_$i239: i32, in_$i240: i32, in_$i241: i8, in_$i242: i32, in_$i243: i32, in_$i244: i1, in_$i136: i32, in_$i137: i8, in_$i138: i32) returns (out_$i139: i32, out_$i140: i32, out_$i141: i64, out_$p144: ref, out_$p145: ref, out_$i146: i64, out_$p147: ref, out_$p149: ref, out_$i150: i8, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$p155: ref, out_$i156: i8, out_$i157: i32, out_$i158: i32, out_$i159: i1, out_$p161: ref, out_$i162: i8, out_$i163: i32, out_$i164: i32, out_$i165: i1, out_$p167: ref, out_$i168: i8, out_$i169: i32, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$p173: ref, out_$i238: i32, out_$i239: i32, out_$i240: i32, out_$i241: i8, out_$i242: i32, out_$i243: i32, out_$i244: i1, out_$i136: i32, out_$i137: i8, out_$i138: i32);



implementation main_loop_$bb5(in_$p0: ref, in_$i4: i32, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$i28: i32, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i19: i32, in_$i3: i32, in_$i46: i32, in_$i47: i1, in_$i48: i1, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32) returns (out_$i4: i32, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$i28: i32, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i19: i32, out_$i3: i32, out_$i46: i32, out_$i47: i1, out_$i48: i1, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32)
{

  entry:
    out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i30, out_$i31, out_$i32, out_$i34, out_$i35, out_$i36, out_$i38, out_$i39, out_$i40, out_$i42, out_$i43, out_$i44, out_$i45, out_$i19, out_$i3, out_$i46, out_$i47, out_$i48, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115 := in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$p27, in_$i28, in_$i30, in_$i31, in_$i32, in_$i34, in_$i35, in_$i36, in_$i38, in_$i39, in_$i40, in_$i42, in_$i43, in_$i44, in_$i45, in_$i19, in_$i3, in_$i46, in_$i47, in_$i48, in_vslice_dummy_var_111, in_vslice_dummy_var_112, in_vslice_dummy_var_113, in_vslice_dummy_var_114, in_vslice_dummy_var_115;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5602;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    out_$i3 := out_$i19;
    goto corral_source_split_5652_dummy;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_5652;

  $bb60:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i3;
    goto $bb37;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i3;
    goto $bb37;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i3;
    goto $bb37;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i45;
    goto $bb37;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i43;
    goto $bb37;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i39;
    goto $bb37;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i35;
    goto $bb37;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i31;
    goto $bb37;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i25;
    goto $bb37;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i3;
    goto $bb37;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i3;
    goto $bb37;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i3;
    goto $bb37;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i3;
    goto $bb37;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i3;
    goto $bb37;

  SeqInstr_366:
    goto corral_source_split_5650;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} vub300_mmc_request($u0, $u1);
    goto SeqInstr_365;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} ldv_handler_precall();
    goto corral_source_split_5649;

  $bb35:
    assume out_$i18 == 1;
    goto corral_source_split_5648;

  $bb31:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb25:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb8:
    assume out_$i5 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i4, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i5 := $slt.i32(out_$i4, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 831} out_$i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 832} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i4);
    call {:si_unique_call 833} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i4);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb64:
    assume {:verifier.code 0} true;
    assume out_$i48 == 1;
    goto $bb62;

  $bb61:
    assume {:verifier.code 0} true;
    assume out_$i47 == 1;
    goto $bb62;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb63;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i32(out_$i46, 0);
    goto corral_source_split_5604;

  corral_source_split_5602:
    assume {:verifier.code 1} true;
    call {:si_unique_call 828} out_$i46 := __VERIFIER_nondet_int();
    call {:si_unique_call 829} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i46);
    call {:si_unique_call 830} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_5603;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i3, 0);
    goto corral_source_split_5706;

  $bb63:
    assume !(out_$i47 == 1);
    goto corral_source_split_5705;

  SeqInstr_363:
    goto corral_source_split_5642;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} vub300_mmc_set_ios($u0, $u2);
    goto SeqInstr_362;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} ldv_handler_precall();
    goto corral_source_split_5641;

  $bb33:
    assume out_$i17 == 1;
    goto corral_source_split_5640;

  $bb32:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} out_vslice_dummy_var_111 := vub300_mmc_get_ro($u0);
    goto corral_source_split_5646;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} ldv_handler_precall();
    goto corral_source_split_5645;

  $bb34:
    assume !(out_$i17 == 1);
    goto corral_source_split_5644;

  SeqInstr_360:
    goto corral_source_split_5631;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} vub300_enable_sdio_irq($u0, $u3);
    goto SeqInstr_359;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} ldv_handler_precall();
    goto corral_source_split_5630;

  $bb27:
    assume out_$i14 == 1;
    goto corral_source_split_5629;

  $bb26:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} vub300_init_card($u0, $u4);
    goto corral_source_split_5635;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} ldv_handler_precall();
    goto corral_source_split_5634;

  $bb29:
    assume out_$i15 == 1;
    goto corral_source_split_5633;

  $bb28:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i4, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_5667;

  $bb39:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$i25 := out_$i3;
    goto $bb44;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i24;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i3, 1);
    call {:si_unique_call 854} {:cexpr "ldv_s_vub300_driver_usb_driver"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_5665;

  $bb41:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_5658;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} ldv_check_return_value_probe(out_$i22);
    goto corral_source_split_5657;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} ldv_check_return_value(out_$i22);
    goto corral_source_split_5656;

  SeqInstr_369:
    call {:si_unique_call 849} {:cexpr "res_vub300_probe_40"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_5655;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} out_$i22 := vub300_probe($u5, $u6);
    goto SeqInstr_368;

  $bb38:
    assume out_$i21 == 1;
    goto corral_source_split_5654;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i3, 0);
    goto corral_source_split_5638;

  $bb30:
    assume !(out_$i15 == 1);
    goto corral_source_split_5637;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_5676;

  $bb46:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i31 := out_$i3;
    goto $bb47;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i30;
    goto $bb47;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i3, 1);
    call {:si_unique_call 857} {:cexpr "ldv_s_vub300_driver_usb_driver"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_5674;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} out_vslice_dummy_var_112 := vub300_suspend($u5, out_$i28);
    goto corral_source_split_5673;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.28, out_$p27);
    goto corral_source_split_5672;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5671;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} ldv_handler_precall();
    goto corral_source_split_5670;

  $bb45:
    assume out_$i26 == 1;
    goto corral_source_split_5669;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i3, 1);
    goto corral_source_split_5621;

  $bb21:
    assume out_$i11 == 1;
    goto corral_source_split_5620;

  $bb10:
    assume out_$i6 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(out_$i4, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb9:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    out_$i6 := $slt.i32(out_$i4, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_5683;

  $bb49:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := out_$i3;
    goto $bb50;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i34;
    goto $bb50;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i3, 1);
    call {:si_unique_call 860} {:cexpr "ldv_s_vub300_driver_usb_driver"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_5681;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} out_vslice_dummy_var_113 := vub300_resume($u5);
    goto corral_source_split_5680;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} ldv_handler_precall();
    goto corral_source_split_5679;

  $bb48:
    assume out_$i32 == 1;
    goto corral_source_split_5678;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i3, 2);
    goto corral_source_split_5624;

  $bb23:
    assume out_$i12 == 1;
    goto corral_source_split_5623;

  $bb22:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_5690;

  $bb52:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := out_$i3;
    goto $bb53;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i38;
    goto $bb53;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i3, 1);
    call {:si_unique_call 863} {:cexpr "ldv_s_vub300_driver_usb_driver"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_5688;

  SeqInstr_372:
    goto corral_source_split_5687;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} out_vslice_dummy_var_114 := vub300_pre_reset($u5);
    goto SeqInstr_371;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} ldv_handler_precall();
    goto corral_source_split_5686;

  $bb51:
    assume out_$i36 == 1;
    goto corral_source_split_5685;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i3, 3);
    goto corral_source_split_5627;

  $bb24:
    assume !(out_$i12 == 1);
    goto corral_source_split_5626;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_5697;

  $bb55:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := out_$i3;
    goto $bb56;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i42;
    goto $bb56;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i32(out_$i3, 1);
    call {:si_unique_call 866} {:cexpr "ldv_s_vub300_driver_usb_driver"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_5695;

  SeqInstr_375:
    goto corral_source_split_5694;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} out_vslice_dummy_var_115 := vub300_post_reset($u5);
    goto SeqInstr_374;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} ldv_handler_precall();
    goto corral_source_split_5693;

  $bb54:
    assume out_$i40 == 1;
    goto corral_source_split_5692;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i3, 4);
    goto corral_source_split_5615;

  $bb19:
    assume out_$i10 == 1;
    goto corral_source_split_5614;

  $bb12:
    assume out_$i7 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i4, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb11:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    out_$i7 := $slt.i32(out_$i4, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_5703;

  $bb58:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    out_$i45 := out_$i3;
    goto $bb59;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    out_$i45 := 0;
    goto $bb59;

  SeqInstr_378:
    goto corral_source_split_5701;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} vub300_disconnect($u5);
    goto SeqInstr_377;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} ldv_handler_precall();
    goto corral_source_split_5700;

  $bb57:
    assume out_$i44 == 1;
    goto corral_source_split_5699;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i3, 5);
    goto corral_source_split_5618;

  $bb20:
    assume !(out_$i10 == 1);
    goto corral_source_split_5617;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} vub300_sg_timed_out($u7);
    goto corral_source_split_5608;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} ldv_handler_precall();
    goto corral_source_split_5607;

  $bb14:
    assume out_$i8 == 1;
    goto corral_source_split_5606;

  $bb13:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i4, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  SeqInstr_357:
    goto corral_source_split_5612;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} vub300_inactivity_timer_expired($u7);
    goto SeqInstr_356;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} ldv_handler_precall();
    goto corral_source_split_5611;

  $bb16:
    assume out_$i9 == 1;
    goto corral_source_split_5610;

  $bb15:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i4, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i9 == 1);
    goto $bb18;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb18;

  corral_source_split_5652_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i30, out_$i31, out_$i32, out_$i34, out_$i35, out_$i36, out_$i38, out_$i39, out_$i40, out_$i42, out_$i43, out_$i44, out_$i45, out_$i19, out_$i3, out_$i46, out_$i47, out_$i48, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115 := main_loop_$bb5(in_$p0, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i30, out_$i31, out_$i32, out_$i34, out_$i35, out_$i36, out_$i38, out_$i39, out_$i40, out_$i42, out_$i43, out_$i44, out_$i45, out_$i19, out_$i3, out_$i46, out_$i47, out_$i48, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115);
    return;

  exit:
    return;
}



procedure main_loop_$bb5(in_$p0: ref, in_$i4: i32, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$i28: i32, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i19: i32, in_$i3: i32, in_$i46: i32, in_$i47: i1, in_$i48: i1, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32) returns (out_$i4: i32, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$i28: i32, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i19: i32, out_$i3: i32, out_$i46: i32, out_$i47: i1, out_$i48: i1, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32);
  modifies $M.0, $M.8, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.15, $M.12, $M.13, $CurrAddr, $M.16, $M.7;


